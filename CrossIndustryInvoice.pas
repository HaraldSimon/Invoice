{
    Generated from: CII D22B XSD\CrossIndustryInvoice_100pD22B.xsd
}
unit CrossIndustryInvoice;

interface
uses
  Classes,
  SysUtils,
  XMLDoc,
  XMLIntf,
  XMLDataBindingUtils;

type
  { Forward declarations for CrossIndustryInvoice_100pD22B }
  IXMLCrossIndustryInvoiceType = interface;
  IXMLCrossIndustryInvoice = interface;

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_QualifiedDataType_100 }
  IXMLAccountingAccountTypeCodeType = interface;
  IXMLAccountingAmountTypeCodeType = interface;
  IXMLAccountingDebitCreditStatusCodeType = interface;
  IXMLAccountingDocumentCodeType = interface;
  IXMLAddressTypeCodeType = interface;
  IXMLAdjustmentReasonCodeType = interface;
  IXMLAllowanceChargeIdentificationCodeType = interface;
  IXMLAllowanceChargeReasonCodeType = interface;
  IXMLAutomaticDataCaptureMethodCodeType = interface;
  IXMLCargoCategoryCodeType = interface;
  IXMLCargoCommodityCategoryCodeType = interface;
  IXMLCargoOperationalCategoryCodeType = interface;
  IXMLChargePayingPartyRoleCodeType = interface;
  IXMLCommunicationChannelCodeType = interface;
  IXMLContactTypeCodeType = interface;
  IXMLCountryIDType = interface;
  IXMLCurrencyCodeType = interface;
  IXMLDangerousGoodsPackagingLevelCodeType = interface;
  IXMLDangerousGoodsRegulationCodeType = interface;
  IXMLDateOnlyFormattedDateTimeType = interface;
  IXMLDateOnlyFormattedDateTimeTypeDateTimeString = interface;
  IXMLDeliveryTermsCodeType = interface;
  IXMLDeliveryTermsFunctionCodeType = interface;
  IXMLDimensionTypeCodeType = interface;
  IXMLDocumentCodeType = interface;
  IXMLDocumentStatusCodeType = interface;
  IXMLFormattedDateTimeType = interface;
  IXMLFormattedDateTimeTypeDateTimeString = interface;
  IXMLFreightChargeTariffClassCodeType = interface;
  IXMLFreightChargeTypeIDType = interface;
  IXMLGoodsTypeCodeType = interface;
  IXMLGoodsTypeExtensionCodeType = interface;
  IXMLLinearUnitMeasureType = interface;
  IXMLLineStatusCodeType = interface;
  IXMLLocationFunctionCodeType = interface;
  IXMLLogisticsChargeCalculationBasisCodeType = interface;
  IXMLMessageFunctionCodeType = interface;
  IXMLPackageTypeCodeType = interface;
  IXMLPackagingMarkingCodeType = interface;
  IXMLPartyRoleCodeType = interface;
  IXMLPaymentGuaranteeMeansCodeType = interface;
  IXMLPaymentMeansChannelCodeType = interface;
  IXMLPaymentMeansCodeType = interface;
  IXMLPaymentTermsEventTimeReferenceCodeType = interface;
  IXMLPaymentTermsIDType = interface;
  IXMLPaymentTermsTypeCodeType = interface;
  IXMLPriceTypeCodeType = interface;
  IXMLReferenceCodeType = interface;
  IXMLSealConditionCodeType = interface;
  IXMLSealingPartyRoleCodeType = interface;
  IXMLStatusCodeType = interface;
  IXMLTaxCategoryCodeType = interface;
  IXMLTaxTypeCodeType = interface;
  IXMLTimeOnlyFormattedDateTimeType = interface;
  IXMLTimeOnlyFormattedDateTimeTypeDateTimeString = interface;
  IXMLTimeReferenceCodeType = interface;
  IXMLTransportEquipmentCategoryCodeType = interface;
  IXMLTransportEquipmentFullnessCodeType = interface;
  IXMLTransportMeansTypeCodeType = interface;
  IXMLTransportModeCodeType = interface;
  IXMLTransportMovementStageCodeType = interface;
  IXMLTransportServicePaymentArrangementCodeType = interface;
  IXMLVolumeUnitMeasureType = interface;
  IXMLWeightUnitMeasureType = interface;
  TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType = (AccountingDebitCreditStatusCodeListAgencyIDContentType__6);
  TXMLAccountingDocumentCodeListAgencyIDContentType = (AccountingDocumentCodeListAgencyIDContentType__6);
  TXMLAddressTypeCodeListAgencyIDContentType = (AddressTypeCodeListAgencyIDContentType__6);
  TXMLAdjustmentReasonCodeListAgencyIDContentType = (AdjustmentReasonCodeListAgencyIDContentType__6);
  TXMLAllowanceChargeReasonCodeListAgencyIDContentType = (AllowanceChargeReasonCodeListAgencyIDContentType__6);
  TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType = (AutomaticDataCaptureMethodCodeListAgencyIDContentType__6);
  TXMLCargoCategoryCodeListAgencyIDContentType = (CargoCategoryCodeListAgencyIDContentType__6);
  TXMLCargoOperationalCategoryCodeListAgencyIDContentType = (CargoOperationalCategoryCodeListAgencyIDContentType__6);
  TXMLChargePayingPartyRoleCodeListAgencyIDContentType = (ChargePayingPartyRoleCodeListAgencyIDContentType__6);
  TXMLCommunicationChannelCodeListAgencyIDContentType = (CommunicationChannelCodeListAgencyIDContentType__6);
  TXMLContactTypeCodeListAgencyIDContentType = (ContactTypeCodeListAgencyIDContentType__6);
  TXMLCountryIDSchemeAgencyIDContentType = (CountryIDSchemeAgencyIDContentType__5);
  TXMLCurrencyCodeListAgencyIDContentType = (CurrencyCodeListAgencyIDContentType__5);
  TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType = (DangerousGoodsPackagingLevelCodeListAgencyIDContentType__6);
  TXMLDangerousGoodsRegulationCodeListAgencyIDContentType = (DangerousGoodsRegulationCodeListAgencyIDContentType__6);
  TXMLDeliveryTermsCodeListAgencyIDContentType = (DeliveryTermsCodeListAgencyIDContentType__6);
  TXMLDeliveryTermsFunctionCodeListAgencyIDContentType = (DeliveryTermsFunctionCodeListAgencyIDContentType__6);
  TXMLDimensionTypeCodeListAgencyIDContentType = (DimensionTypeCodeListAgencyIDContentType__6);
  TXMLDocumentCodeListAgencyIDContentType = (DocumentCodeListAgencyIDContentType__6);
  TXMLDocumentStatusCodeListAgencyIDContentType = (DocumentStatusCodeListAgencyIDContentType__6);
  TXMLFreightChargeTariffClassCodeListAgencyIDContentType = (FreightChargeTariffClassCodeListAgencyIDContentType__6);
  TXMLFreightChargeTypeIDSchemeAgencyIDContentType = (FreightChargeTypeIDSchemeAgencyIDContentType__6);
  TXMLLineStatusCodeListAgencyIDContentType = (LineStatusCodeListAgencyIDContentType__6);
  TXMLLocationFunctionCodeListAgencyIDContentType = (LocationFunctionCodeListAgencyIDContentType__6);
  TXMLMessageFunctionCodeListAgencyIDContentType = (MessageFunctionCodeListAgencyIDContentType__6);
  TXMLPackagingMarkingCodeListAgencyIDContentType = (PackagingMarkingCodeListAgencyIDContentType__6);
  TXMLPartyRoleCodeListAgencyIDContentType = (PartyRoleCodeListAgencyIDContentType__6);
  TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType = (PaymentGuaranteeMeansCodeListAgencyIDContentType__6);
  TXMLPaymentMeansChannelCodeListAgencyIDContentType = (PaymentMeansChannelCodeListAgencyIDContentType__6);
  TXMLPaymentMeansCodeListAgencyIDContentType = (PaymentMeansCodeListAgencyIDContentType__6);
  TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType = (PaymentTermsEventTimeReferenceCodeListAgencyIDContentType__6);
  TXMLPaymentTermsIDSchemeAgencyIDContentType = (PaymentTermsIDSchemeAgencyIDContentType__6);
  TXMLPaymentTermsTypeCodeListAgencyIDContentType = (PaymentTermsTypeCodeListAgencyIDContentType__6);
  TXMLPriceTypeCodeListAgencyIDContentType = (PriceTypeCodeListAgencyIDContentType__6);
  TXMLReferenceCodeListAgencyIDContentType = (ReferenceCodeListAgencyIDContentType__6);
  TXMLSealConditionCodeListAgencyIDContentType = (SealConditionCodeListAgencyIDContentType__6);
  TXMLSealingPartyRoleCodeListAgencyIDContentType = (SealingPartyRoleCodeListAgencyIDContentType__6);
  TXMLStatusCodeListAgencyIDContentType = (StatusCodeListAgencyIDContentType__6);
  TXMLTaxCategoryCodeListAgencyIDContentType = (TaxCategoryCodeListAgencyIDContentType__6);
  TXMLTaxTypeCodeListAgencyIDContentType = (TaxTypeCodeListAgencyIDContentType__6);
  TXMLTimeReferenceCodeListAgencyIDContentType = (TimeReferenceCodeListAgencyIDContentType__6);
  TXMLTransportEquipmentCategoryCodeListAgencyIDContentType = (TransportEquipmentCategoryCodeListAgencyIDContentType__6);
  TXMLTransportEquipmentFullnessCodeListAgencyIDContentType = (TransportEquipmentFullnessCodeListAgencyIDContentType__6);
  TXMLTransportMeansTypeCodeListAgencyIDContentType = (TransportMeansTypeCodeListAgencyIDContentType__6);
  TXMLTransportModeCodeListAgencyIDContentType = (TransportModeCodeListAgencyIDContentType__6);
  TXMLTransportMovementStageCodeListAgencyIDContentType = (TransportMovementStageCodeListAgencyIDContentType__6);
  TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType = (TransportServicePaymentArrangementCodeListAgencyIDContentType__6);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAccountType_D11A }
  TXMLAccountingAccountTypeContentType = (AccountingAccountTypeContentType__1,
                                          AccountingAccountTypeContentType__2,
                                          AccountingAccountTypeContentType__3,
                                          AccountingAccountTypeContentType__4,
                                          AccountingAccountTypeContentType__5,
                                          AccountingAccountTypeContentType__6,
                                          AccountingAccountTypeContentType__7);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAmountType_D11A }
  TXMLAccountingAmountTypeContentType = (AccountingAmountTypeContentType__1,
                                         AccountingAmountTypeContentType__2,
                                         AccountingAmountTypeContentType__3,
                                         AccountingAmountTypeContentType__4,
                                         AccountingAmountTypeContentType__5,
                                         AccountingAmountTypeContentType__6);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_ISO_ISO3AlphaCurrencyCode_2012-08-31 }
  TXMLISO3AlphaCurrencyCodeContentType = (ISO3AlphaCurrencyCodeContentType_AED,
                                          ISO3AlphaCurrencyCodeContentType_AFN,
                                          ISO3AlphaCurrencyCodeContentType_ALL,
                                          ISO3AlphaCurrencyCodeContentType_AMD,
                                          ISO3AlphaCurrencyCodeContentType_ANG,
                                          ISO3AlphaCurrencyCodeContentType_AOA,
                                          ISO3AlphaCurrencyCodeContentType_ARS,
                                          ISO3AlphaCurrencyCodeContentType_AUD,
                                          ISO3AlphaCurrencyCodeContentType_AWG,
                                          ISO3AlphaCurrencyCodeContentType_AZN,
                                          ISO3AlphaCurrencyCodeContentType_BAM,
                                          ISO3AlphaCurrencyCodeContentType_BBD,
                                          ISO3AlphaCurrencyCodeContentType_BDT,
                                          ISO3AlphaCurrencyCodeContentType_BGN,
                                          ISO3AlphaCurrencyCodeContentType_BHD,
                                          ISO3AlphaCurrencyCodeContentType_BIF,
                                          ISO3AlphaCurrencyCodeContentType_BMD,
                                          ISO3AlphaCurrencyCodeContentType_BND,
                                          ISO3AlphaCurrencyCodeContentType_BOB,
                                          ISO3AlphaCurrencyCodeContentType_BOV,
                                          ISO3AlphaCurrencyCodeContentType_BRL,
                                          ISO3AlphaCurrencyCodeContentType_BSD,
                                          ISO3AlphaCurrencyCodeContentType_BTN,
                                          ISO3AlphaCurrencyCodeContentType_BWP,
                                          ISO3AlphaCurrencyCodeContentType_BYN,
                                          ISO3AlphaCurrencyCodeContentType_BZD,
                                          ISO3AlphaCurrencyCodeContentType_CAD,
                                          ISO3AlphaCurrencyCodeContentType_CDF,
                                          ISO3AlphaCurrencyCodeContentType_CHE,
                                          ISO3AlphaCurrencyCodeContentType_CHF,
                                          ISO3AlphaCurrencyCodeContentType_CHW,
                                          ISO3AlphaCurrencyCodeContentType_CLF,
                                          ISO3AlphaCurrencyCodeContentType_CLP,
                                          ISO3AlphaCurrencyCodeContentType_CNY,
                                          ISO3AlphaCurrencyCodeContentType_COP,
                                          ISO3AlphaCurrencyCodeContentType_COU,
                                          ISO3AlphaCurrencyCodeContentType_CRC,
                                          ISO3AlphaCurrencyCodeContentType_CUC,
                                          ISO3AlphaCurrencyCodeContentType_CUP,
                                          ISO3AlphaCurrencyCodeContentType_CVE,
                                          ISO3AlphaCurrencyCodeContentType_CZK,
                                          ISO3AlphaCurrencyCodeContentType_DJF,
                                          ISO3AlphaCurrencyCodeContentType_DKK,
                                          ISO3AlphaCurrencyCodeContentType_DOP,
                                          ISO3AlphaCurrencyCodeContentType_DZD,
                                          ISO3AlphaCurrencyCodeContentType_EGP,
                                          ISO3AlphaCurrencyCodeContentType_ERN,
                                          ISO3AlphaCurrencyCodeContentType_ETB,
                                          ISO3AlphaCurrencyCodeContentType_EUR,
                                          ISO3AlphaCurrencyCodeContentType_FJD,
                                          ISO3AlphaCurrencyCodeContentType_FKP,
                                          ISO3AlphaCurrencyCodeContentType_GBP,
                                          ISO3AlphaCurrencyCodeContentType_GEL,
                                          ISO3AlphaCurrencyCodeContentType_GHS,
                                          ISO3AlphaCurrencyCodeContentType_GIP,
                                          ISO3AlphaCurrencyCodeContentType_GMD,
                                          ISO3AlphaCurrencyCodeContentType_GNF,
                                          ISO3AlphaCurrencyCodeContentType_GTQ,
                                          ISO3AlphaCurrencyCodeContentType_GYD,
                                          ISO3AlphaCurrencyCodeContentType_HKD,
                                          ISO3AlphaCurrencyCodeContentType_HNL,
                                          ISO3AlphaCurrencyCodeContentType_HRK,
                                          ISO3AlphaCurrencyCodeContentType_HTG,
                                          ISO3AlphaCurrencyCodeContentType_HUF,
                                          ISO3AlphaCurrencyCodeContentType_IDR,
                                          ISO3AlphaCurrencyCodeContentType_ILS,
                                          ISO3AlphaCurrencyCodeContentType_INR,
                                          ISO3AlphaCurrencyCodeContentType_IQD,
                                          ISO3AlphaCurrencyCodeContentType_IRR,
                                          ISO3AlphaCurrencyCodeContentType_ISK,
                                          ISO3AlphaCurrencyCodeContentType_JMD,
                                          ISO3AlphaCurrencyCodeContentType_JOD,
                                          ISO3AlphaCurrencyCodeContentType_JPY,
                                          ISO3AlphaCurrencyCodeContentType_KES,
                                          ISO3AlphaCurrencyCodeContentType_KGS,
                                          ISO3AlphaCurrencyCodeContentType_KHR,
                                          ISO3AlphaCurrencyCodeContentType_KMF,
                                          ISO3AlphaCurrencyCodeContentType_KPW,
                                          ISO3AlphaCurrencyCodeContentType_KRW,
                                          ISO3AlphaCurrencyCodeContentType_KWD,
                                          ISO3AlphaCurrencyCodeContentType_KYD,
                                          ISO3AlphaCurrencyCodeContentType_KZT,
                                          ISO3AlphaCurrencyCodeContentType_LAK,
                                          ISO3AlphaCurrencyCodeContentType_LBP,
                                          ISO3AlphaCurrencyCodeContentType_LKR,
                                          ISO3AlphaCurrencyCodeContentType_LRD,
                                          ISO3AlphaCurrencyCodeContentType_LSL,
                                          ISO3AlphaCurrencyCodeContentType_LYD,
                                          ISO3AlphaCurrencyCodeContentType_MAD,
                                          ISO3AlphaCurrencyCodeContentType_MDL,
                                          ISO3AlphaCurrencyCodeContentType_MGA,
                                          ISO3AlphaCurrencyCodeContentType_MKD,
                                          ISO3AlphaCurrencyCodeContentType_MMK,
                                          ISO3AlphaCurrencyCodeContentType_MNT,
                                          ISO3AlphaCurrencyCodeContentType_MOP,
                                          ISO3AlphaCurrencyCodeContentType_MRU,
                                          ISO3AlphaCurrencyCodeContentType_MUR,
                                          ISO3AlphaCurrencyCodeContentType_MVR,
                                          ISO3AlphaCurrencyCodeContentType_MWK,
                                          ISO3AlphaCurrencyCodeContentType_MXN,
                                          ISO3AlphaCurrencyCodeContentType_MXV,
                                          ISO3AlphaCurrencyCodeContentType_MYR,
                                          ISO3AlphaCurrencyCodeContentType_MZN,
                                          ISO3AlphaCurrencyCodeContentType_NAD,
                                          ISO3AlphaCurrencyCodeContentType_NGN,
                                          ISO3AlphaCurrencyCodeContentType_NIO,
                                          ISO3AlphaCurrencyCodeContentType_NOK,
                                          ISO3AlphaCurrencyCodeContentType_NPR,
                                          ISO3AlphaCurrencyCodeContentType_NZD,
                                          ISO3AlphaCurrencyCodeContentType_OMR,
                                          ISO3AlphaCurrencyCodeContentType_PAB,
                                          ISO3AlphaCurrencyCodeContentType_PEN,
                                          ISO3AlphaCurrencyCodeContentType_PGK,
                                          ISO3AlphaCurrencyCodeContentType_PHP,
                                          ISO3AlphaCurrencyCodeContentType_PKR,
                                          ISO3AlphaCurrencyCodeContentType_PLN,
                                          ISO3AlphaCurrencyCodeContentType_PYG,
                                          ISO3AlphaCurrencyCodeContentType_QAR,
                                          ISO3AlphaCurrencyCodeContentType_RON,
                                          ISO3AlphaCurrencyCodeContentType_RSD,
                                          ISO3AlphaCurrencyCodeContentType_RUB,
                                          ISO3AlphaCurrencyCodeContentType_RWF,
                                          ISO3AlphaCurrencyCodeContentType_SAR,
                                          ISO3AlphaCurrencyCodeContentType_SBD,
                                          ISO3AlphaCurrencyCodeContentType_SCR,
                                          ISO3AlphaCurrencyCodeContentType_SDG,
                                          ISO3AlphaCurrencyCodeContentType_SEK,
                                          ISO3AlphaCurrencyCodeContentType_SGD,
                                          ISO3AlphaCurrencyCodeContentType_SHP,
                                          ISO3AlphaCurrencyCodeContentType_SLE,
                                          ISO3AlphaCurrencyCodeContentType_SOS,
                                          ISO3AlphaCurrencyCodeContentType_SRD,
                                          ISO3AlphaCurrencyCodeContentType_SSP,
                                          ISO3AlphaCurrencyCodeContentType_STN,
                                          ISO3AlphaCurrencyCodeContentType_SVC,
                                          ISO3AlphaCurrencyCodeContentType_SYP,
                                          ISO3AlphaCurrencyCodeContentType_SZL,
                                          ISO3AlphaCurrencyCodeContentType_THB,
                                          ISO3AlphaCurrencyCodeContentType_TJS,
                                          ISO3AlphaCurrencyCodeContentType_TMT,
                                          ISO3AlphaCurrencyCodeContentType_TND,
                                          ISO3AlphaCurrencyCodeContentType_TOP,
                                          ISO3AlphaCurrencyCodeContentType__TRY,
                                          ISO3AlphaCurrencyCodeContentType_TTD,
                                          ISO3AlphaCurrencyCodeContentType_TWD,
                                          ISO3AlphaCurrencyCodeContentType_TZS,
                                          ISO3AlphaCurrencyCodeContentType_UAH,
                                          ISO3AlphaCurrencyCodeContentType_UGX,
                                          ISO3AlphaCurrencyCodeContentType_USD,
                                          ISO3AlphaCurrencyCodeContentType_USN,
                                          ISO3AlphaCurrencyCodeContentType_UYI,
                                          ISO3AlphaCurrencyCodeContentType_UYU,
                                          ISO3AlphaCurrencyCodeContentType_UYW,
                                          ISO3AlphaCurrencyCodeContentType_UZS,
                                          ISO3AlphaCurrencyCodeContentType_VED,
                                          ISO3AlphaCurrencyCodeContentType_VES,
                                          ISO3AlphaCurrencyCodeContentType_VND,
                                          ISO3AlphaCurrencyCodeContentType_VUV,
                                          ISO3AlphaCurrencyCodeContentType_WST,
                                          ISO3AlphaCurrencyCodeContentType_XAF,
                                          ISO3AlphaCurrencyCodeContentType_XAG,
                                          ISO3AlphaCurrencyCodeContentType_XAU,
                                          ISO3AlphaCurrencyCodeContentType_XBA,
                                          ISO3AlphaCurrencyCodeContentType_XBB,
                                          ISO3AlphaCurrencyCodeContentType_XBC,
                                          ISO3AlphaCurrencyCodeContentType_XBD,
                                          ISO3AlphaCurrencyCodeContentType_XCD,
                                          ISO3AlphaCurrencyCodeContentType_XDR,
                                          ISO3AlphaCurrencyCodeContentType_XOF,
                                          ISO3AlphaCurrencyCodeContentType_XPD,
                                          ISO3AlphaCurrencyCodeContentType_XPF,
                                          ISO3AlphaCurrencyCodeContentType_XPT,
                                          ISO3AlphaCurrencyCodeContentType_XSU,
                                          ISO3AlphaCurrencyCodeContentType_XTS,
                                          ISO3AlphaCurrencyCodeContentType_XUA,
                                          ISO3AlphaCurrencyCodeContentType_XXX,
                                          ISO3AlphaCurrencyCodeContentType_YER,
                                          ISO3AlphaCurrencyCodeContentType_ZAR,
                                          ISO3AlphaCurrencyCodeContentType_ZMW,
                                          ISO3AlphaCurrencyCodeContentType_ZWL);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ActionCode_D22A }
  TXMLActionCodeContentType = (ActionCodeContentType__1,
                               ActionCodeContentType__2,
                               ActionCodeContentType__3,
                               ActionCodeContentType__4,
                               ActionCodeContentType__5,
                               ActionCodeContentType__6,
                               ActionCodeContentType__7,
                               ActionCodeContentType__8,
                               ActionCodeContentType__9,
                               ActionCodeContentType__10,
                               ActionCodeContentType__11,
                               ActionCodeContentType__12,
                               ActionCodeContentType__13,
                               ActionCodeContentType__14,
                               ActionCodeContentType__15,
                               ActionCodeContentType__16,
                               ActionCodeContentType__17,
                               ActionCodeContentType__18,
                               ActionCodeContentType__19,
                               ActionCodeContentType__20,
                               ActionCodeContentType__21,
                               ActionCodeContentType__22,
                               ActionCodeContentType__23,
                               ActionCodeContentType__24,
                               ActionCodeContentType__25,
                               ActionCodeContentType__26,
                               ActionCodeContentType__27,
                               ActionCodeContentType__28,
                               ActionCodeContentType__29,
                               ActionCodeContentType__30,
                               ActionCodeContentType__31,
                               ActionCodeContentType__32,
                               ActionCodeContentType__33,
                               ActionCodeContentType__34,
                               ActionCodeContentType__35,
                               ActionCodeContentType__36,
                               ActionCodeContentType__37,
                               ActionCodeContentType__38,
                               ActionCodeContentType__39,
                               ActionCodeContentType__40,
                               ActionCodeContentType__41,
                               ActionCodeContentType__42,
                               ActionCodeContentType__43,
                               ActionCodeContentType__44,
                               ActionCodeContentType__45,
                               ActionCodeContentType__46,
                               ActionCodeContentType__47,
                               ActionCodeContentType__48,
                               ActionCodeContentType__49,
                               ActionCodeContentType__50,
                               ActionCodeContentType__51,
                               ActionCodeContentType__52,
                               ActionCodeContentType__53,
                               ActionCodeContentType__54,
                               ActionCodeContentType__55,
                               ActionCodeContentType__56,
                               ActionCodeContentType__57,
                               ActionCodeContentType__58,
                               ActionCodeContentType__59,
                               ActionCodeContentType__60,
                               ActionCodeContentType__61,
                               ActionCodeContentType__62,
                               ActionCodeContentType__63,
                               ActionCodeContentType__64,
                               ActionCodeContentType__65,
                               ActionCodeContentType__66,
                               ActionCodeContentType__67,
                               ActionCodeContentType__68,
                               ActionCodeContentType__69,
                               ActionCodeContentType__70,
                               ActionCodeContentType__71,
                               ActionCodeContentType__72,
                               ActionCodeContentType__73,
                               ActionCodeContentType__74,
                               ActionCodeContentType__75,
                               ActionCodeContentType__76,
                               ActionCodeContentType__77,
                               ActionCodeContentType__78,
                               ActionCodeContentType__79,
                               ActionCodeContentType__80,
                               ActionCodeContentType__81,
                               ActionCodeContentType__82,
                               ActionCodeContentType__83,
                               ActionCodeContentType__84,
                               ActionCodeContentType__85,
                               ActionCodeContentType__86,
                               ActionCodeContentType__87,
                               ActionCodeContentType__88,
                               ActionCodeContentType__89,
                               ActionCodeContentType__90,
                               ActionCodeContentType__91,
                               ActionCodeContentType__92,
                               ActionCodeContentType__93,
                               ActionCodeContentType__94,
                               ActionCodeContentType__95,
                               ActionCodeContentType__96,
                               ActionCodeContentType__97,
                               ActionCodeContentType__98,
                               ActionCodeContentType__99,
                               ActionCodeContentType__100,
                               ActionCodeContentType__101,
                               ActionCodeContentType__102,
                               ActionCodeContentType__103,
                               ActionCodeContentType__104,
                               ActionCodeContentType__105,
                               ActionCodeContentType__106,
                               ActionCodeContentType__107,
                               ActionCodeContentType__108,
                               ActionCodeContentType__109,
                               ActionCodeContentType__110,
                               ActionCodeContentType__111,
                               ActionCodeContentType__112,
                               ActionCodeContentType__113,
                               ActionCodeContentType__114,
                               ActionCodeContentType__115,
                               ActionCodeContentType__116,
                               ActionCodeContentType__117,
                               ActionCodeContentType__118,
                               ActionCodeContentType__119);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AddressType_D22A }
  TXMLAddressTypeContentType = (AddressTypeContentType__1,
                                AddressTypeContentType__2,
                                AddressTypeContentType__3,
                                AddressTypeContentType__4,
                                AddressTypeContentType__5,
                                AddressTypeContentType__6,
                                AddressTypeContentType__7,
                                AddressTypeContentType__8);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AdjustmentReasonDescriptionCode_D22A }
  TXMLAdjustmentReasonDescriptionCodeContentType = (AdjustmentReasonDescriptionCodeContentType__1,
                                                    AdjustmentReasonDescriptionCodeContentType__2,
                                                    AdjustmentReasonDescriptionCodeContentType__3,
                                                    AdjustmentReasonDescriptionCodeContentType__4,
                                                    AdjustmentReasonDescriptionCodeContentType__5,
                                                    AdjustmentReasonDescriptionCodeContentType__6,
                                                    AdjustmentReasonDescriptionCodeContentType__7,
                                                    AdjustmentReasonDescriptionCodeContentType__8,
                                                    AdjustmentReasonDescriptionCodeContentType__9,
                                                    AdjustmentReasonDescriptionCodeContentType__10,
                                                    AdjustmentReasonDescriptionCodeContentType__11,
                                                    AdjustmentReasonDescriptionCodeContentType__12,
                                                    AdjustmentReasonDescriptionCodeContentType__13,
                                                    AdjustmentReasonDescriptionCodeContentType__14,
                                                    AdjustmentReasonDescriptionCodeContentType__15,
                                                    AdjustmentReasonDescriptionCodeContentType__16,
                                                    AdjustmentReasonDescriptionCodeContentType__17,
                                                    AdjustmentReasonDescriptionCodeContentType__18,
                                                    AdjustmentReasonDescriptionCodeContentType__19,
                                                    AdjustmentReasonDescriptionCodeContentType__20,
                                                    AdjustmentReasonDescriptionCodeContentType__21,
                                                    AdjustmentReasonDescriptionCodeContentType__22,
                                                    AdjustmentReasonDescriptionCodeContentType__23,
                                                    AdjustmentReasonDescriptionCodeContentType__24,
                                                    AdjustmentReasonDescriptionCodeContentType__25,
                                                    AdjustmentReasonDescriptionCodeContentType__26,
                                                    AdjustmentReasonDescriptionCodeContentType__27,
                                                    AdjustmentReasonDescriptionCodeContentType__28,
                                                    AdjustmentReasonDescriptionCodeContentType__29,
                                                    AdjustmentReasonDescriptionCodeContentType__30,
                                                    AdjustmentReasonDescriptionCodeContentType__31,
                                                    AdjustmentReasonDescriptionCodeContentType__32,
                                                    AdjustmentReasonDescriptionCodeContentType__33,
                                                    AdjustmentReasonDescriptionCodeContentType__34,
                                                    AdjustmentReasonDescriptionCodeContentType__35,
                                                    AdjustmentReasonDescriptionCodeContentType__36,
                                                    AdjustmentReasonDescriptionCodeContentType__37,
                                                    AdjustmentReasonDescriptionCodeContentType__38,
                                                    AdjustmentReasonDescriptionCodeContentType__39,
                                                    AdjustmentReasonDescriptionCodeContentType__40,
                                                    AdjustmentReasonDescriptionCodeContentType__41,
                                                    AdjustmentReasonDescriptionCodeContentType__42,
                                                    AdjustmentReasonDescriptionCodeContentType__43,
                                                    AdjustmentReasonDescriptionCodeContentType__44,
                                                    AdjustmentReasonDescriptionCodeContentType__45,
                                                    AdjustmentReasonDescriptionCodeContentType__46,
                                                    AdjustmentReasonDescriptionCodeContentType__47,
                                                    AdjustmentReasonDescriptionCodeContentType__48,
                                                    AdjustmentReasonDescriptionCodeContentType__49,
                                                    AdjustmentReasonDescriptionCodeContentType__50,
                                                    AdjustmentReasonDescriptionCodeContentType__51,
                                                    AdjustmentReasonDescriptionCodeContentType__52,
                                                    AdjustmentReasonDescriptionCodeContentType__53,
                                                    AdjustmentReasonDescriptionCodeContentType__54,
                                                    AdjustmentReasonDescriptionCodeContentType__55,
                                                    AdjustmentReasonDescriptionCodeContentType__56,
                                                    AdjustmentReasonDescriptionCodeContentType__57,
                                                    AdjustmentReasonDescriptionCodeContentType__58,
                                                    AdjustmentReasonDescriptionCodeContentType__59,
                                                    AdjustmentReasonDescriptionCodeContentType__60,
                                                    AdjustmentReasonDescriptionCodeContentType__61,
                                                    AdjustmentReasonDescriptionCodeContentType__62,
                                                    AdjustmentReasonDescriptionCodeContentType__63,
                                                    AdjustmentReasonDescriptionCodeContentType__64,
                                                    AdjustmentReasonDescriptionCodeContentType__65,
                                                    AdjustmentReasonDescriptionCodeContentType__66,
                                                    AdjustmentReasonDescriptionCodeContentType__67,
                                                    AdjustmentReasonDescriptionCodeContentType__68,
                                                    AdjustmentReasonDescriptionCodeContentType__69,
                                                    AdjustmentReasonDescriptionCodeContentType__70,
                                                    AdjustmentReasonDescriptionCodeContentType__71,
                                                    AdjustmentReasonDescriptionCodeContentType__72,
                                                    AdjustmentReasonDescriptionCodeContentType__73,
                                                    AdjustmentReasonDescriptionCodeContentType__74,
                                                    AdjustmentReasonDescriptionCodeContentType__75,
                                                    AdjustmentReasonDescriptionCodeContentType__76,
                                                    AdjustmentReasonDescriptionCodeContentType__77,
                                                    AdjustmentReasonDescriptionCodeContentType__78,
                                                    AdjustmentReasonDescriptionCodeContentType__79,
                                                    AdjustmentReasonDescriptionCodeContentType__80,
                                                    AdjustmentReasonDescriptionCodeContentType__81,
                                                    AdjustmentReasonDescriptionCodeContentType__82,
                                                    AdjustmentReasonDescriptionCodeContentType__83,
                                                    AdjustmentReasonDescriptionCodeContentType__84,
                                                    AdjustmentReasonDescriptionCodeContentType__85,
                                                    AdjustmentReasonDescriptionCodeContentType__86,
                                                    AdjustmentReasonDescriptionCodeContentType__87,
                                                    AdjustmentReasonDescriptionCodeContentType__88,
                                                    AdjustmentReasonDescriptionCodeContentType__89,
                                                    AdjustmentReasonDescriptionCodeContentType__90,
                                                    AdjustmentReasonDescriptionCodeContentType__91,
                                                    AdjustmentReasonDescriptionCodeContentType__92,
                                                    AdjustmentReasonDescriptionCodeContentType__93,
                                                    AdjustmentReasonDescriptionCodeContentType__94,
                                                    AdjustmentReasonDescriptionCodeContentType__95,
                                                    AdjustmentReasonDescriptionCodeContentType__96,
                                                    AdjustmentReasonDescriptionCodeContentType__97,
                                                    AdjustmentReasonDescriptionCodeContentType__98,
                                                    AdjustmentReasonDescriptionCodeContentType__99,
                                                    AdjustmentReasonDescriptionCodeContentType__100,
                                                    AdjustmentReasonDescriptionCodeContentType__101,
                                                    AdjustmentReasonDescriptionCodeContentType__102,
                                                    AdjustmentReasonDescriptionCodeContentType__103,
                                                    AdjustmentReasonDescriptionCodeContentType__104,
                                                    AdjustmentReasonDescriptionCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeIdentificationCode_D22A }
  TXMLAllowanceChargeIdentificationCodeContentType = (AllowanceChargeIdentificationCodeContentType__1,
                                                      AllowanceChargeIdentificationCodeContentType__2,
                                                      AllowanceChargeIdentificationCodeContentType__3,
                                                      AllowanceChargeIdentificationCodeContentType__4,
                                                      AllowanceChargeIdentificationCodeContentType__5,
                                                      AllowanceChargeIdentificationCodeContentType__6,
                                                      AllowanceChargeIdentificationCodeContentType__7,
                                                      AllowanceChargeIdentificationCodeContentType__8,
                                                      AllowanceChargeIdentificationCodeContentType__9,
                                                      AllowanceChargeIdentificationCodeContentType__10,
                                                      AllowanceChargeIdentificationCodeContentType__11,
                                                      AllowanceChargeIdentificationCodeContentType__12,
                                                      AllowanceChargeIdentificationCodeContentType__13,
                                                      AllowanceChargeIdentificationCodeContentType__14,
                                                      AllowanceChargeIdentificationCodeContentType__15,
                                                      AllowanceChargeIdentificationCodeContentType__16,
                                                      AllowanceChargeIdentificationCodeContentType__17,
                                                      AllowanceChargeIdentificationCodeContentType__18,
                                                      AllowanceChargeIdentificationCodeContentType__19,
                                                      AllowanceChargeIdentificationCodeContentType__20,
                                                      AllowanceChargeIdentificationCodeContentType__21,
                                                      AllowanceChargeIdentificationCodeContentType__22,
                                                      AllowanceChargeIdentificationCodeContentType__23,
                                                      AllowanceChargeIdentificationCodeContentType__24,
                                                      AllowanceChargeIdentificationCodeContentType__25,
                                                      AllowanceChargeIdentificationCodeContentType__26,
                                                      AllowanceChargeIdentificationCodeContentType__27,
                                                      AllowanceChargeIdentificationCodeContentType__28,
                                                      AllowanceChargeIdentificationCodeContentType__29,
                                                      AllowanceChargeIdentificationCodeContentType__30,
                                                      AllowanceChargeIdentificationCodeContentType__31,
                                                      AllowanceChargeIdentificationCodeContentType__32,
                                                      AllowanceChargeIdentificationCodeContentType__33,
                                                      AllowanceChargeIdentificationCodeContentType__34,
                                                      AllowanceChargeIdentificationCodeContentType__35,
                                                      AllowanceChargeIdentificationCodeContentType__36,
                                                      AllowanceChargeIdentificationCodeContentType__37,
                                                      AllowanceChargeIdentificationCodeContentType__38,
                                                      AllowanceChargeIdentificationCodeContentType__39,
                                                      AllowanceChargeIdentificationCodeContentType__40,
                                                      AllowanceChargeIdentificationCodeContentType__41,
                                                      AllowanceChargeIdentificationCodeContentType__42,
                                                      AllowanceChargeIdentificationCodeContentType__44,
                                                      AllowanceChargeIdentificationCodeContentType__45,
                                                      AllowanceChargeIdentificationCodeContentType__46,
                                                      AllowanceChargeIdentificationCodeContentType__47,
                                                      AllowanceChargeIdentificationCodeContentType__48,
                                                      AllowanceChargeIdentificationCodeContentType__49,
                                                      AllowanceChargeIdentificationCodeContentType__50,
                                                      AllowanceChargeIdentificationCodeContentType__51,
                                                      AllowanceChargeIdentificationCodeContentType__52,
                                                      AllowanceChargeIdentificationCodeContentType__53,
                                                      AllowanceChargeIdentificationCodeContentType__54,
                                                      AllowanceChargeIdentificationCodeContentType__55,
                                                      AllowanceChargeIdentificationCodeContentType__56,
                                                      AllowanceChargeIdentificationCodeContentType__57,
                                                      AllowanceChargeIdentificationCodeContentType__58,
                                                      AllowanceChargeIdentificationCodeContentType__59,
                                                      AllowanceChargeIdentificationCodeContentType__60,
                                                      AllowanceChargeIdentificationCodeContentType__61,
                                                      AllowanceChargeIdentificationCodeContentType__62,
                                                      AllowanceChargeIdentificationCodeContentType__63,
                                                      AllowanceChargeIdentificationCodeContentType__64,
                                                      AllowanceChargeIdentificationCodeContentType__65,
                                                      AllowanceChargeIdentificationCodeContentType__66,
                                                      AllowanceChargeIdentificationCodeContentType__67,
                                                      AllowanceChargeIdentificationCodeContentType__68,
                                                      AllowanceChargeIdentificationCodeContentType__69,
                                                      AllowanceChargeIdentificationCodeContentType__70,
                                                      AllowanceChargeIdentificationCodeContentType__71,
                                                      AllowanceChargeIdentificationCodeContentType__72,
                                                      AllowanceChargeIdentificationCodeContentType__73,
                                                      AllowanceChargeIdentificationCodeContentType__74,
                                                      AllowanceChargeIdentificationCodeContentType__75,
                                                      AllowanceChargeIdentificationCodeContentType__76,
                                                      AllowanceChargeIdentificationCodeContentType__77,
                                                      AllowanceChargeIdentificationCodeContentType__78,
                                                      AllowanceChargeIdentificationCodeContentType__79,
                                                      AllowanceChargeIdentificationCodeContentType__80,
                                                      AllowanceChargeIdentificationCodeContentType__81,
                                                      AllowanceChargeIdentificationCodeContentType__82,
                                                      AllowanceChargeIdentificationCodeContentType__83,
                                                      AllowanceChargeIdentificationCodeContentType__84,
                                                      AllowanceChargeIdentificationCodeContentType__85,
                                                      AllowanceChargeIdentificationCodeContentType__86,
                                                      AllowanceChargeIdentificationCodeContentType__87,
                                                      AllowanceChargeIdentificationCodeContentType__88,
                                                      AllowanceChargeIdentificationCodeContentType__89,
                                                      AllowanceChargeIdentificationCodeContentType__90,
                                                      AllowanceChargeIdentificationCodeContentType__91,
                                                      AllowanceChargeIdentificationCodeContentType__92,
                                                      AllowanceChargeIdentificationCodeContentType__93,
                                                      AllowanceChargeIdentificationCodeContentType__94,
                                                      AllowanceChargeIdentificationCodeContentType__95,
                                                      AllowanceChargeIdentificationCodeContentType__96,
                                                      AllowanceChargeIdentificationCodeContentType__97,
                                                      AllowanceChargeIdentificationCodeContentType__98,
                                                      AllowanceChargeIdentificationCodeContentType__99,
                                                      AllowanceChargeIdentificationCodeContentType__100,
                                                      AllowanceChargeIdentificationCodeContentType__101,
                                                      AllowanceChargeIdentificationCodeContentType__102,
                                                      AllowanceChargeIdentificationCodeContentType__103,
                                                      AllowanceChargeIdentificationCodeContentType__104,
                                                      AllowanceChargeIdentificationCodeContentType__105,
                                                      AllowanceChargeIdentificationCodeContentType__106);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeReasonCode_D22A }
  TXMLAllowanceChargeReasonCodeContentType = (AllowanceChargeReasonCodeContentType__1,
                                              AllowanceChargeReasonCodeContentType__2,
                                              AllowanceChargeReasonCodeContentType__3,
                                              AllowanceChargeReasonCodeContentType__4,
                                              AllowanceChargeReasonCodeContentType__5,
                                              AllowanceChargeReasonCodeContentType__6,
                                              AllowanceChargeReasonCodeContentType__7,
                                              AllowanceChargeReasonCodeContentType__8,
                                              AllowanceChargeReasonCodeContentType__9,
                                              AllowanceChargeReasonCodeContentType__10,
                                              AllowanceChargeReasonCodeContentType__11,
                                              AllowanceChargeReasonCodeContentType__12,
                                              AllowanceChargeReasonCodeContentType__13,
                                              AllowanceChargeReasonCodeContentType__14,
                                              AllowanceChargeReasonCodeContentType__15,
                                              AllowanceChargeReasonCodeContentType__16,
                                              AllowanceChargeReasonCodeContentType__17,
                                              AllowanceChargeReasonCodeContentType__18,
                                              AllowanceChargeReasonCodeContentType__19,
                                              AllowanceChargeReasonCodeContentType__20,
                                              AllowanceChargeReasonCodeContentType__21,
                                              AllowanceChargeReasonCodeContentType__22,
                                              AllowanceChargeReasonCodeContentType__23,
                                              AllowanceChargeReasonCodeContentType__24,
                                              AllowanceChargeReasonCodeContentType__25,
                                              AllowanceChargeReasonCodeContentType__26,
                                              AllowanceChargeReasonCodeContentType__27,
                                              AllowanceChargeReasonCodeContentType__28,
                                              AllowanceChargeReasonCodeContentType__29,
                                              AllowanceChargeReasonCodeContentType__30,
                                              AllowanceChargeReasonCodeContentType__31,
                                              AllowanceChargeReasonCodeContentType__32,
                                              AllowanceChargeReasonCodeContentType__33,
                                              AllowanceChargeReasonCodeContentType__34,
                                              AllowanceChargeReasonCodeContentType__35,
                                              AllowanceChargeReasonCodeContentType__36,
                                              AllowanceChargeReasonCodeContentType__37,
                                              AllowanceChargeReasonCodeContentType__38,
                                              AllowanceChargeReasonCodeContentType__39,
                                              AllowanceChargeReasonCodeContentType__40,
                                              AllowanceChargeReasonCodeContentType__41,
                                              AllowanceChargeReasonCodeContentType__42,
                                              AllowanceChargeReasonCodeContentType__43,
                                              AllowanceChargeReasonCodeContentType__44,
                                              AllowanceChargeReasonCodeContentType__45,
                                              AllowanceChargeReasonCodeContentType__46,
                                              AllowanceChargeReasonCodeContentType__47,
                                              AllowanceChargeReasonCodeContentType__48,
                                              AllowanceChargeReasonCodeContentType__49,
                                              AllowanceChargeReasonCodeContentType__50,
                                              AllowanceChargeReasonCodeContentType__51,
                                              AllowanceChargeReasonCodeContentType__52,
                                              AllowanceChargeReasonCodeContentType__53,
                                              AllowanceChargeReasonCodeContentType__54,
                                              AllowanceChargeReasonCodeContentType__55,
                                              AllowanceChargeReasonCodeContentType__56,
                                              AllowanceChargeReasonCodeContentType__57,
                                              AllowanceChargeReasonCodeContentType__58,
                                              AllowanceChargeReasonCodeContentType__59,
                                              AllowanceChargeReasonCodeContentType__60,
                                              AllowanceChargeReasonCodeContentType__61,
                                              AllowanceChargeReasonCodeContentType__62,
                                              AllowanceChargeReasonCodeContentType__63,
                                              AllowanceChargeReasonCodeContentType__64,
                                              AllowanceChargeReasonCodeContentType__65,
                                              AllowanceChargeReasonCodeContentType__66,
                                              AllowanceChargeReasonCodeContentType__67,
                                              AllowanceChargeReasonCodeContentType__68,
                                              AllowanceChargeReasonCodeContentType__69,
                                              AllowanceChargeReasonCodeContentType__70,
                                              AllowanceChargeReasonCodeContentType__71,
                                              AllowanceChargeReasonCodeContentType__72,
                                              AllowanceChargeReasonCodeContentType__73,
                                              AllowanceChargeReasonCodeContentType__74,
                                              AllowanceChargeReasonCodeContentType__75,
                                              AllowanceChargeReasonCodeContentType__76,
                                              AllowanceChargeReasonCodeContentType__77,
                                              AllowanceChargeReasonCodeContentType__78,
                                              AllowanceChargeReasonCodeContentType__79,
                                              AllowanceChargeReasonCodeContentType__80,
                                              AllowanceChargeReasonCodeContentType__81,
                                              AllowanceChargeReasonCodeContentType__82,
                                              AllowanceChargeReasonCodeContentType__83,
                                              AllowanceChargeReasonCodeContentType__84,
                                              AllowanceChargeReasonCodeContentType__85,
                                              AllowanceChargeReasonCodeContentType__86,
                                              AllowanceChargeReasonCodeContentType__87,
                                              AllowanceChargeReasonCodeContentType__88,
                                              AllowanceChargeReasonCodeContentType__89,
                                              AllowanceChargeReasonCodeContentType__90,
                                              AllowanceChargeReasonCodeContentType__91,
                                              AllowanceChargeReasonCodeContentType__92,
                                              AllowanceChargeReasonCodeContentType__93,
                                              AllowanceChargeReasonCodeContentType__94,
                                              AllowanceChargeReasonCodeContentType__95,
                                              AllowanceChargeReasonCodeContentType__96,
                                              AllowanceChargeReasonCodeContentType__97,
                                              AllowanceChargeReasonCodeContentType__98,
                                              AllowanceChargeReasonCodeContentType__99,
                                              AllowanceChargeReasonCodeContentType__100,
                                              AllowanceChargeReasonCodeContentType__101,
                                              AllowanceChargeReasonCodeContentType__102,
                                              AllowanceChargeReasonCodeContentType__103,
                                              AllowanceChargeReasonCodeContentType__104,
                                              AllowanceChargeReasonCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AutomaticDataCaptureMethodCode_D22A }
  TXMLAutomaticDataCaptureMethodCodeContentType = (AutomaticDataCaptureMethodCodeContentType__50,
                                                   AutomaticDataCaptureMethodCodeContentType__51,
                                                   AutomaticDataCaptureMethodCodeContentType__52,
                                                   AutomaticDataCaptureMethodCodeContentType__64,
                                                   AutomaticDataCaptureMethodCodeContentType__65,
                                                   AutomaticDataCaptureMethodCodeContentType__67,
                                                   AutomaticDataCaptureMethodCodeContentType__78,
                                                   AutomaticDataCaptureMethodCodeContentType__79,
                                                   AutomaticDataCaptureMethodCodeContentType__81,
                                                   AutomaticDataCaptureMethodCodeContentType__82);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoOperationalCategoryCode_D22A }
  TXMLCargoOperationalCategoryCodeContentType = (CargoOperationalCategoryCodeContentType__1,
                                                 CargoOperationalCategoryCodeContentType__2,
                                                 CargoOperationalCategoryCodeContentType__3,
                                                 CargoOperationalCategoryCodeContentType__4,
                                                 CargoOperationalCategoryCodeContentType__5,
                                                 CargoOperationalCategoryCodeContentType__6,
                                                 CargoOperationalCategoryCodeContentType__7,
                                                 CargoOperationalCategoryCodeContentType__8,
                                                 CargoOperationalCategoryCodeContentType__9,
                                                 CargoOperationalCategoryCodeContentType__10,
                                                 CargoOperationalCategoryCodeContentType__11,
                                                 CargoOperationalCategoryCodeContentType__12,
                                                 CargoOperationalCategoryCodeContentType__13,
                                                 CargoOperationalCategoryCodeContentType__14,
                                                 CargoOperationalCategoryCodeContentType__15,
                                                 CargoOperationalCategoryCodeContentType__16,
                                                 CargoOperationalCategoryCodeContentType__17,
                                                 CargoOperationalCategoryCodeContentType__18,
                                                 CargoOperationalCategoryCodeContentType__19,
                                                 CargoOperationalCategoryCodeContentType__20,
                                                 CargoOperationalCategoryCodeContentType__21,
                                                 CargoOperationalCategoryCodeContentType__22,
                                                 CargoOperationalCategoryCodeContentType__23,
                                                 CargoOperationalCategoryCodeContentType__24,
                                                 CargoOperationalCategoryCodeContentType__25);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoTypeCode_1996Rev2Final }
  TXMLCargoTypeCodeContentType = (CargoTypeCodeContentType__0,
                                  CargoTypeCodeContentType__1,
                                  CargoTypeCodeContentType__2,
                                  CargoTypeCodeContentType__3,
                                  CargoTypeCodeContentType__4,
                                  CargoTypeCodeContentType__5,
                                  CargoTypeCodeContentType__6,
                                  CargoTypeCodeContentType__7,
                                  CargoTypeCodeContentType__9);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommodityIdentificationCode_D22A }
  TXMLCommodityIdentificationCodeContentType = (CommodityIdentificationCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommunicationMeansTypeCode_D22A }
  TXMLCommunicationMeansTypeCodeContentType = (CommunicationMeansTypeCodeContentType_AA,
                                               CommunicationMeansTypeCodeContentType_AB,
                                               CommunicationMeansTypeCodeContentType_AC,
                                               CommunicationMeansTypeCodeContentType_AD,
                                               CommunicationMeansTypeCodeContentType_AE,
                                               CommunicationMeansTypeCodeContentType_AF,
                                               CommunicationMeansTypeCodeContentType_AG,
                                               CommunicationMeansTypeCodeContentType_AH,
                                               CommunicationMeansTypeCodeContentType_AI,
                                               CommunicationMeansTypeCodeContentType_AJ,
                                               CommunicationMeansTypeCodeContentType_AK,
                                               CommunicationMeansTypeCodeContentType_AL,
                                               CommunicationMeansTypeCodeContentType_AM,
                                               CommunicationMeansTypeCodeContentType_AN,
                                               CommunicationMeansTypeCodeContentType_AO,
                                               CommunicationMeansTypeCodeContentType_AP,
                                               CommunicationMeansTypeCodeContentType_AQ,
                                               CommunicationMeansTypeCodeContentType_AR,
                                               CommunicationMeansTypeCodeContentType__AS,
                                               CommunicationMeansTypeCodeContentType_AT,
                                               CommunicationMeansTypeCodeContentType_AU,
                                               CommunicationMeansTypeCodeContentType_AV,
                                               CommunicationMeansTypeCodeContentType_AW,
                                               CommunicationMeansTypeCodeContentType_CA,
                                               CommunicationMeansTypeCodeContentType_EI,
                                               CommunicationMeansTypeCodeContentType_EM,
                                               CommunicationMeansTypeCodeContentType_EX,
                                               CommunicationMeansTypeCodeContentType_FT,
                                               CommunicationMeansTypeCodeContentType_FX,
                                               CommunicationMeansTypeCodeContentType_GM,
                                               CommunicationMeansTypeCodeContentType_IE,
                                               CommunicationMeansTypeCodeContentType_IM,
                                               CommunicationMeansTypeCodeContentType_MA,
                                               CommunicationMeansTypeCodeContentType_PB,
                                               CommunicationMeansTypeCodeContentType_PS,
                                               CommunicationMeansTypeCodeContentType_SW,
                                               CommunicationMeansTypeCodeContentType_TE,
                                               CommunicationMeansTypeCodeContentType_TG,
                                               CommunicationMeansTypeCodeContentType_TL,
                                               CommunicationMeansTypeCodeContentType_TM,
                                               CommunicationMeansTypeCodeContentType_TT,
                                               CommunicationMeansTypeCodeContentType_TX,
                                               CommunicationMeansTypeCodeContentType_XF,
                                               CommunicationMeansTypeCodeContentType_XG,
                                               CommunicationMeansTypeCodeContentType_XH,
                                               CommunicationMeansTypeCodeContentType_XI,
                                               CommunicationMeansTypeCodeContentType_XJ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ContactFunctionCode_D22A }
  TXMLContactFunctionCodeContentType = (ContactFunctionCodeContentType_AA,
                                        ContactFunctionCodeContentType_AB,
                                        ContactFunctionCodeContentType_AC,
                                        ContactFunctionCodeContentType_AD,
                                        ContactFunctionCodeContentType_AE,
                                        ContactFunctionCodeContentType_AF,
                                        ContactFunctionCodeContentType_AG,
                                        ContactFunctionCodeContentType_AH,
                                        ContactFunctionCodeContentType_AI,
                                        ContactFunctionCodeContentType_AJ,
                                        ContactFunctionCodeContentType_AK,
                                        ContactFunctionCodeContentType_AL,
                                        ContactFunctionCodeContentType_AM,
                                        ContactFunctionCodeContentType_AN,
                                        ContactFunctionCodeContentType_AO,
                                        ContactFunctionCodeContentType_AP,
                                        ContactFunctionCodeContentType_AQ,
                                        ContactFunctionCodeContentType_AR,
                                        ContactFunctionCodeContentType__AS,
                                        ContactFunctionCodeContentType_AT,
                                        ContactFunctionCodeContentType_AU,
                                        ContactFunctionCodeContentType_AV,
                                        ContactFunctionCodeContentType_AW,
                                        ContactFunctionCodeContentType_AX,
                                        ContactFunctionCodeContentType_AY,
                                        ContactFunctionCodeContentType_AZ,
                                        ContactFunctionCodeContentType_BA,
                                        ContactFunctionCodeContentType_BB,
                                        ContactFunctionCodeContentType_BC,
                                        ContactFunctionCodeContentType_BD,
                                        ContactFunctionCodeContentType_BE,
                                        ContactFunctionCodeContentType_BF,
                                        ContactFunctionCodeContentType_BG,
                                        ContactFunctionCodeContentType_BH,
                                        ContactFunctionCodeContentType_BI,
                                        ContactFunctionCodeContentType_BJ,
                                        ContactFunctionCodeContentType_BK,
                                        ContactFunctionCodeContentType_BL,
                                        ContactFunctionCodeContentType_BM,
                                        ContactFunctionCodeContentType_BN,
                                        ContactFunctionCodeContentType_BO,
                                        ContactFunctionCodeContentType_BP,
                                        ContactFunctionCodeContentType_BQ,
                                        ContactFunctionCodeContentType_BR,
                                        ContactFunctionCodeContentType_BS,
                                        ContactFunctionCodeContentType_BT,
                                        ContactFunctionCodeContentType_BU,
                                        ContactFunctionCodeContentType_CA,
                                        ContactFunctionCodeContentType_CB,
                                        ContactFunctionCodeContentType_CC,
                                        ContactFunctionCodeContentType_CD,
                                        ContactFunctionCodeContentType_CE,
                                        ContactFunctionCodeContentType_CF,
                                        ContactFunctionCodeContentType_CG,
                                        ContactFunctionCodeContentType_CN,
                                        ContactFunctionCodeContentType_CO,
                                        ContactFunctionCodeContentType_CP,
                                        ContactFunctionCodeContentType_CR,
                                        ContactFunctionCodeContentType_CW,
                                        ContactFunctionCodeContentType_DE,
                                        ContactFunctionCodeContentType_DI,
                                        ContactFunctionCodeContentType_DL,
                                        ContactFunctionCodeContentType_EB,
                                        ContactFunctionCodeContentType_EC,
                                        ContactFunctionCodeContentType_ED,
                                        ContactFunctionCodeContentType_EX,
                                        ContactFunctionCodeContentType_GR,
                                        ContactFunctionCodeContentType_HE,
                                        ContactFunctionCodeContentType_HG,
                                        ContactFunctionCodeContentType_HM,
                                        ContactFunctionCodeContentType_IC,
                                        ContactFunctionCodeContentType__IN,
                                        ContactFunctionCodeContentType_LB,
                                        ContactFunctionCodeContentType_LO,
                                        ContactFunctionCodeContentType_MC,
                                        ContactFunctionCodeContentType_MD,
                                        ContactFunctionCodeContentType_MH,
                                        ContactFunctionCodeContentType_MR,
                                        ContactFunctionCodeContentType_MS,
                                        ContactFunctionCodeContentType_NT,
                                        ContactFunctionCodeContentType_OC,
                                        ContactFunctionCodeContentType_PA,
                                        ContactFunctionCodeContentType_PD,
                                        ContactFunctionCodeContentType_PE,
                                        ContactFunctionCodeContentType_PM,
                                        ContactFunctionCodeContentType_QA,
                                        ContactFunctionCodeContentType_QC,
                                        ContactFunctionCodeContentType_RD,
                                        ContactFunctionCodeContentType_RP,
                                        ContactFunctionCodeContentType_SA,
                                        ContactFunctionCodeContentType_SC,
                                        ContactFunctionCodeContentType_SD,
                                        ContactFunctionCodeContentType_SR,
                                        ContactFunctionCodeContentType_SU,
                                        ContactFunctionCodeContentType_TA,
                                        ContactFunctionCodeContentType_TD,
                                        ContactFunctionCodeContentType_TI,
                                        ContactFunctionCodeContentType_TR,
                                        ContactFunctionCodeContentType_WH,
                                        ContactFunctionCodeContentType_WI,
                                        ContactFunctionCodeContentType_WJ,
                                        ContactFunctionCodeContentType_WK,
                                        ContactFunctionCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsPackingCode_D22A }
  TXMLDangerousGoodsPackingCodeContentType = (DangerousGoodsPackingCodeContentType__1,
                                              DangerousGoodsPackingCodeContentType__2,
                                              DangerousGoodsPackingCodeContentType__3,
                                              DangerousGoodsPackingCodeContentType__4);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsRegulationCode_D22A }
  TXMLDangerousGoodsRegulationCodeContentType = (DangerousGoodsRegulationCodeContentType_ADR,
                                                 DangerousGoodsRegulationCodeContentType_ADS,
                                                 DangerousGoodsRegulationCodeContentType_ADT,
                                                 DangerousGoodsRegulationCodeContentType_ADU,
                                                 DangerousGoodsRegulationCodeContentType_ADV,
                                                 DangerousGoodsRegulationCodeContentType_ADW,
                                                 DangerousGoodsRegulationCodeContentType_ADX,
                                                 DangerousGoodsRegulationCodeContentType_ADY,
                                                 DangerousGoodsRegulationCodeContentType_ADZ,
                                                 DangerousGoodsRegulationCodeContentType_AEA,
                                                 DangerousGoodsRegulationCodeContentType_AEB,
                                                 DangerousGoodsRegulationCodeContentType_AGS,
                                                 DangerousGoodsRegulationCodeContentType_ANR,
                                                 DangerousGoodsRegulationCodeContentType_ARD,
                                                 DangerousGoodsRegulationCodeContentType_CFR,
                                                 DangerousGoodsRegulationCodeContentType_COM,
                                                 DangerousGoodsRegulationCodeContentType_GVE,
                                                 DangerousGoodsRegulationCodeContentType_GVS,
                                                 DangerousGoodsRegulationCodeContentType_ICA,
                                                 DangerousGoodsRegulationCodeContentType_IMD,
                                                 DangerousGoodsRegulationCodeContentType_RGE,
                                                 DangerousGoodsRegulationCodeContentType_RID,
                                                 DangerousGoodsRegulationCodeContentType_UI,
                                                 DangerousGoodsRegulationCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DateOnlyFormatCode_D21B }
  TXMLDateOnlyFormatCodeContentType = (DateOnlyFormatCodeContentType__2,
                                       DateOnlyFormatCodeContentType__3,
                                       DateOnlyFormatCodeContentType__4,
                                       DateOnlyFormatCodeContentType__101,
                                       DateOnlyFormatCodeContentType__102,
                                       DateOnlyFormatCodeContentType__105,
                                       DateOnlyFormatCodeContentType__106,
                                       DateOnlyFormatCodeContentType__107,
                                       DateOnlyFormatCodeContentType__110,
                                       DateOnlyFormatCodeContentType__609);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsCode_2020 }
  TXMLDeliveryTermsCodeContentType = (DeliveryTermsCodeContentType__1,
                                      DeliveryTermsCodeContentType__2,
                                      DeliveryTermsCodeContentType_CFR,
                                      DeliveryTermsCodeContentType_CIF,
                                      DeliveryTermsCodeContentType_CIP,
                                      DeliveryTermsCodeContentType_CPT,
                                      DeliveryTermsCodeContentType_DAP,
                                      DeliveryTermsCodeContentType_DDP,
                                      DeliveryTermsCodeContentType_DPU,
                                      DeliveryTermsCodeContentType_EXW,
                                      DeliveryTermsCodeContentType_FAS,
                                      DeliveryTermsCodeContentType_FCA,
                                      DeliveryTermsCodeContentType_FOB);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsFunctionCode_D22A }
  TXMLDeliveryTermsFunctionCodeContentType = (DeliveryTermsFunctionCodeContentType__1,
                                              DeliveryTermsFunctionCodeContentType__2,
                                              DeliveryTermsFunctionCodeContentType__3,
                                              DeliveryTermsFunctionCodeContentType__4,
                                              DeliveryTermsFunctionCodeContentType__5,
                                              DeliveryTermsFunctionCodeContentType__6,
                                              DeliveryTermsFunctionCodeContentType__7,
                                              DeliveryTermsFunctionCodeContentType__8);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DimensionTypeCode_D22A }
  TXMLDimensionTypeCodeContentType = (DimensionTypeCodeContentType__1,
                                      DimensionTypeCodeContentType__2,
                                      DimensionTypeCodeContentType__3,
                                      DimensionTypeCodeContentType__4,
                                      DimensionTypeCodeContentType__5,
                                      DimensionTypeCodeContentType__6,
                                      DimensionTypeCodeContentType__7,
                                      DimensionTypeCodeContentType__8,
                                      DimensionTypeCodeContentType__9,
                                      DimensionTypeCodeContentType__10,
                                      DimensionTypeCodeContentType__11,
                                      DimensionTypeCodeContentType__12,
                                      DimensionTypeCodeContentType__13,
                                      DimensionTypeCodeContentType__14,
                                      DimensionTypeCodeContentType__15,
                                      DimensionTypeCodeContentType__16,
                                      DimensionTypeCodeContentType__17,
                                      DimensionTypeCodeContentType__18,
                                      DimensionTypeCodeContentType__19,
                                      DimensionTypeCodeContentType__20,
                                      DimensionTypeCodeContentType__21,
                                      DimensionTypeCodeContentType__22,
                                      DimensionTypeCodeContentType__23,
                                      DimensionTypeCodeContentType__24);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_D22A }
  TXMLDocumentNameCodeContentType = (DocumentNameCodeContentType__1,
                                     DocumentNameCodeContentType__2,
                                     DocumentNameCodeContentType__3,
                                     DocumentNameCodeContentType__4,
                                     DocumentNameCodeContentType__5,
                                     DocumentNameCodeContentType__6,
                                     DocumentNameCodeContentType__7,
                                     DocumentNameCodeContentType__8,
                                     DocumentNameCodeContentType__9,
                                     DocumentNameCodeContentType__10,
                                     DocumentNameCodeContentType__11,
                                     DocumentNameCodeContentType__12,
                                     DocumentNameCodeContentType__13,
                                     DocumentNameCodeContentType__14,
                                     DocumentNameCodeContentType__15,
                                     DocumentNameCodeContentType__16,
                                     DocumentNameCodeContentType__17,
                                     DocumentNameCodeContentType__18,
                                     DocumentNameCodeContentType__19,
                                     DocumentNameCodeContentType__20,
                                     DocumentNameCodeContentType__21,
                                     DocumentNameCodeContentType__22,
                                     DocumentNameCodeContentType__23,
                                     DocumentNameCodeContentType__24,
                                     DocumentNameCodeContentType__25,
                                     DocumentNameCodeContentType__26,
                                     DocumentNameCodeContentType__27,
                                     DocumentNameCodeContentType__28,
                                     DocumentNameCodeContentType__29,
                                     DocumentNameCodeContentType__30,
                                     DocumentNameCodeContentType__31,
                                     DocumentNameCodeContentType__32,
                                     DocumentNameCodeContentType__33,
                                     DocumentNameCodeContentType__34,
                                     DocumentNameCodeContentType__35,
                                     DocumentNameCodeContentType__36,
                                     DocumentNameCodeContentType__37,
                                     DocumentNameCodeContentType__38,
                                     DocumentNameCodeContentType__39,
                                     DocumentNameCodeContentType__40,
                                     DocumentNameCodeContentType__41,
                                     DocumentNameCodeContentType__42,
                                     DocumentNameCodeContentType__43,
                                     DocumentNameCodeContentType__44,
                                     DocumentNameCodeContentType__45,
                                     DocumentNameCodeContentType__46,
                                     DocumentNameCodeContentType__47,
                                     DocumentNameCodeContentType__48,
                                     DocumentNameCodeContentType__49,
                                     DocumentNameCodeContentType__50,
                                     DocumentNameCodeContentType__51,
                                     DocumentNameCodeContentType__52,
                                     DocumentNameCodeContentType__53,
                                     DocumentNameCodeContentType__54,
                                     DocumentNameCodeContentType__55,
                                     DocumentNameCodeContentType__56,
                                     DocumentNameCodeContentType__57,
                                     DocumentNameCodeContentType__58,
                                     DocumentNameCodeContentType__59,
                                     DocumentNameCodeContentType__60,
                                     DocumentNameCodeContentType__61,
                                     DocumentNameCodeContentType__62,
                                     DocumentNameCodeContentType__63,
                                     DocumentNameCodeContentType__64,
                                     DocumentNameCodeContentType__65,
                                     DocumentNameCodeContentType__66,
                                     DocumentNameCodeContentType__67,
                                     DocumentNameCodeContentType__68,
                                     DocumentNameCodeContentType__69,
                                     DocumentNameCodeContentType__70,
                                     DocumentNameCodeContentType__71,
                                     DocumentNameCodeContentType__72,
                                     DocumentNameCodeContentType__73,
                                     DocumentNameCodeContentType__74,
                                     DocumentNameCodeContentType__75,
                                     DocumentNameCodeContentType__76,
                                     DocumentNameCodeContentType__77,
                                     DocumentNameCodeContentType__78,
                                     DocumentNameCodeContentType__79,
                                     DocumentNameCodeContentType__80,
                                     DocumentNameCodeContentType__81,
                                     DocumentNameCodeContentType__82,
                                     DocumentNameCodeContentType__83,
                                     DocumentNameCodeContentType__84,
                                     DocumentNameCodeContentType__85,
                                     DocumentNameCodeContentType__86,
                                     DocumentNameCodeContentType__87,
                                     DocumentNameCodeContentType__88,
                                     DocumentNameCodeContentType__89,
                                     DocumentNameCodeContentType__90,
                                     DocumentNameCodeContentType__91,
                                     DocumentNameCodeContentType__92,
                                     DocumentNameCodeContentType__93,
                                     DocumentNameCodeContentType__94,
                                     DocumentNameCodeContentType__95,
                                     DocumentNameCodeContentType__96,
                                     DocumentNameCodeContentType__97,
                                     DocumentNameCodeContentType__98,
                                     DocumentNameCodeContentType__99,
                                     DocumentNameCodeContentType__100,
                                     DocumentNameCodeContentType__101,
                                     DocumentNameCodeContentType__102,
                                     DocumentNameCodeContentType__103,
                                     DocumentNameCodeContentType__104,
                                     DocumentNameCodeContentType__105,
                                     DocumentNameCodeContentType__106,
                                     DocumentNameCodeContentType__107,
                                     DocumentNameCodeContentType__108,
                                     DocumentNameCodeContentType__109,
                                     DocumentNameCodeContentType__110,
                                     DocumentNameCodeContentType__111,
                                     DocumentNameCodeContentType__112,
                                     DocumentNameCodeContentType__113,
                                     DocumentNameCodeContentType__114,
                                     DocumentNameCodeContentType__115,
                                     DocumentNameCodeContentType__116,
                                     DocumentNameCodeContentType__117,
                                     DocumentNameCodeContentType__118,
                                     DocumentNameCodeContentType__119,
                                     DocumentNameCodeContentType__120,
                                     DocumentNameCodeContentType__121,
                                     DocumentNameCodeContentType__122,
                                     DocumentNameCodeContentType__123,
                                     DocumentNameCodeContentType__124,
                                     DocumentNameCodeContentType__125,
                                     DocumentNameCodeContentType__126,
                                     DocumentNameCodeContentType__127,
                                     DocumentNameCodeContentType__128,
                                     DocumentNameCodeContentType__129,
                                     DocumentNameCodeContentType__130,
                                     DocumentNameCodeContentType__131,
                                     DocumentNameCodeContentType__132,
                                     DocumentNameCodeContentType__133,
                                     DocumentNameCodeContentType__134,
                                     DocumentNameCodeContentType__135,
                                     DocumentNameCodeContentType__136,
                                     DocumentNameCodeContentType__137,
                                     DocumentNameCodeContentType__138,
                                     DocumentNameCodeContentType__139,
                                     DocumentNameCodeContentType__140,
                                     DocumentNameCodeContentType__141,
                                     DocumentNameCodeContentType__142,
                                     DocumentNameCodeContentType__143,
                                     DocumentNameCodeContentType__144,
                                     DocumentNameCodeContentType__145,
                                     DocumentNameCodeContentType__146,
                                     DocumentNameCodeContentType__147,
                                     DocumentNameCodeContentType__148,
                                     DocumentNameCodeContentType__149,
                                     DocumentNameCodeContentType__150,
                                     DocumentNameCodeContentType__151,
                                     DocumentNameCodeContentType__152,
                                     DocumentNameCodeContentType__153,
                                     DocumentNameCodeContentType__154,
                                     DocumentNameCodeContentType__155,
                                     DocumentNameCodeContentType__156,
                                     DocumentNameCodeContentType__157,
                                     DocumentNameCodeContentType__158,
                                     DocumentNameCodeContentType__159,
                                     DocumentNameCodeContentType__160,
                                     DocumentNameCodeContentType__161,
                                     DocumentNameCodeContentType__162,
                                     DocumentNameCodeContentType__163,
                                     DocumentNameCodeContentType__164,
                                     DocumentNameCodeContentType__165,
                                     DocumentNameCodeContentType__166,
                                     DocumentNameCodeContentType__167,
                                     DocumentNameCodeContentType__168,
                                     DocumentNameCodeContentType__169,
                                     DocumentNameCodeContentType__170,
                                     DocumentNameCodeContentType__171,
                                     DocumentNameCodeContentType__172,
                                     DocumentNameCodeContentType__173,
                                     DocumentNameCodeContentType__174,
                                     DocumentNameCodeContentType__175,
                                     DocumentNameCodeContentType__176,
                                     DocumentNameCodeContentType__177,
                                     DocumentNameCodeContentType__178,
                                     DocumentNameCodeContentType__179,
                                     DocumentNameCodeContentType__180,
                                     DocumentNameCodeContentType__181,
                                     DocumentNameCodeContentType__182,
                                     DocumentNameCodeContentType__183,
                                     DocumentNameCodeContentType__184,
                                     DocumentNameCodeContentType__185,
                                     DocumentNameCodeContentType__186,
                                     DocumentNameCodeContentType__187,
                                     DocumentNameCodeContentType__188,
                                     DocumentNameCodeContentType__189,
                                     DocumentNameCodeContentType__190,
                                     DocumentNameCodeContentType__191,
                                     DocumentNameCodeContentType__192,
                                     DocumentNameCodeContentType__193,
                                     DocumentNameCodeContentType__194,
                                     DocumentNameCodeContentType__195,
                                     DocumentNameCodeContentType__196,
                                     DocumentNameCodeContentType__197,
                                     DocumentNameCodeContentType__198,
                                     DocumentNameCodeContentType__199,
                                     DocumentNameCodeContentType__200,
                                     DocumentNameCodeContentType__201,
                                     DocumentNameCodeContentType__202,
                                     DocumentNameCodeContentType__203,
                                     DocumentNameCodeContentType__204,
                                     DocumentNameCodeContentType__205,
                                     DocumentNameCodeContentType__206,
                                     DocumentNameCodeContentType__207,
                                     DocumentNameCodeContentType__208,
                                     DocumentNameCodeContentType__209,
                                     DocumentNameCodeContentType__210,
                                     DocumentNameCodeContentType__211,
                                     DocumentNameCodeContentType__212,
                                     DocumentNameCodeContentType__213,
                                     DocumentNameCodeContentType__214,
                                     DocumentNameCodeContentType__215,
                                     DocumentNameCodeContentType__216,
                                     DocumentNameCodeContentType__217,
                                     DocumentNameCodeContentType__218,
                                     DocumentNameCodeContentType__219,
                                     DocumentNameCodeContentType__220,
                                     DocumentNameCodeContentType__221,
                                     DocumentNameCodeContentType__222,
                                     DocumentNameCodeContentType__223,
                                     DocumentNameCodeContentType__224,
                                     DocumentNameCodeContentType__225,
                                     DocumentNameCodeContentType__226,
                                     DocumentNameCodeContentType__227,
                                     DocumentNameCodeContentType__228,
                                     DocumentNameCodeContentType__229,
                                     DocumentNameCodeContentType__230,
                                     DocumentNameCodeContentType__231,
                                     DocumentNameCodeContentType__232,
                                     DocumentNameCodeContentType__233,
                                     DocumentNameCodeContentType__234,
                                     DocumentNameCodeContentType__235,
                                     DocumentNameCodeContentType__236,
                                     DocumentNameCodeContentType__237,
                                     DocumentNameCodeContentType__238,
                                     DocumentNameCodeContentType__239,
                                     DocumentNameCodeContentType__240,
                                     DocumentNameCodeContentType__241,
                                     DocumentNameCodeContentType__242,
                                     DocumentNameCodeContentType__243,
                                     DocumentNameCodeContentType__244,
                                     DocumentNameCodeContentType__245,
                                     DocumentNameCodeContentType__246,
                                     DocumentNameCodeContentType__247,
                                     DocumentNameCodeContentType__248,
                                     DocumentNameCodeContentType__249,
                                     DocumentNameCodeContentType__250,
                                     DocumentNameCodeContentType__251,
                                     DocumentNameCodeContentType__252,
                                     DocumentNameCodeContentType__253,
                                     DocumentNameCodeContentType__254,
                                     DocumentNameCodeContentType__255,
                                     DocumentNameCodeContentType__256,
                                     DocumentNameCodeContentType__257,
                                     DocumentNameCodeContentType__258,
                                     DocumentNameCodeContentType__259,
                                     DocumentNameCodeContentType__260,
                                     DocumentNameCodeContentType__261,
                                     DocumentNameCodeContentType__262,
                                     DocumentNameCodeContentType__263,
                                     DocumentNameCodeContentType__264,
                                     DocumentNameCodeContentType__265,
                                     DocumentNameCodeContentType__266,
                                     DocumentNameCodeContentType__267,
                                     DocumentNameCodeContentType__268,
                                     DocumentNameCodeContentType__269,
                                     DocumentNameCodeContentType__270,
                                     DocumentNameCodeContentType__271,
                                     DocumentNameCodeContentType__272,
                                     DocumentNameCodeContentType__273,
                                     DocumentNameCodeContentType__274,
                                     DocumentNameCodeContentType__275,
                                     DocumentNameCodeContentType__276,
                                     DocumentNameCodeContentType__277,
                                     DocumentNameCodeContentType__278,
                                     DocumentNameCodeContentType__279,
                                     DocumentNameCodeContentType__280,
                                     DocumentNameCodeContentType__281,
                                     DocumentNameCodeContentType__282,
                                     DocumentNameCodeContentType__283,
                                     DocumentNameCodeContentType__284,
                                     DocumentNameCodeContentType__285,
                                     DocumentNameCodeContentType__286,
                                     DocumentNameCodeContentType__287,
                                     DocumentNameCodeContentType__288,
                                     DocumentNameCodeContentType__289,
                                     DocumentNameCodeContentType__290,
                                     DocumentNameCodeContentType__291,
                                     DocumentNameCodeContentType__292,
                                     DocumentNameCodeContentType__293,
                                     DocumentNameCodeContentType__294,
                                     DocumentNameCodeContentType__295,
                                     DocumentNameCodeContentType__296,
                                     DocumentNameCodeContentType__297,
                                     DocumentNameCodeContentType__298,
                                     DocumentNameCodeContentType__299,
                                     DocumentNameCodeContentType__300,
                                     DocumentNameCodeContentType__301,
                                     DocumentNameCodeContentType__302,
                                     DocumentNameCodeContentType__303,
                                     DocumentNameCodeContentType__304,
                                     DocumentNameCodeContentType__305,
                                     DocumentNameCodeContentType__306,
                                     DocumentNameCodeContentType__307,
                                     DocumentNameCodeContentType__308,
                                     DocumentNameCodeContentType__309,
                                     DocumentNameCodeContentType__310,
                                     DocumentNameCodeContentType__311,
                                     DocumentNameCodeContentType__312,
                                     DocumentNameCodeContentType__313,
                                     DocumentNameCodeContentType__314,
                                     DocumentNameCodeContentType__315,
                                     DocumentNameCodeContentType__316,
                                     DocumentNameCodeContentType__317,
                                     DocumentNameCodeContentType__318,
                                     DocumentNameCodeContentType__319,
                                     DocumentNameCodeContentType__320,
                                     DocumentNameCodeContentType__321,
                                     DocumentNameCodeContentType__322,
                                     DocumentNameCodeContentType__323,
                                     DocumentNameCodeContentType__324,
                                     DocumentNameCodeContentType__325,
                                     DocumentNameCodeContentType__326,
                                     DocumentNameCodeContentType__327,
                                     DocumentNameCodeContentType__328,
                                     DocumentNameCodeContentType__329,
                                     DocumentNameCodeContentType__330,
                                     DocumentNameCodeContentType__331,
                                     DocumentNameCodeContentType__332,
                                     DocumentNameCodeContentType__333,
                                     DocumentNameCodeContentType__334,
                                     DocumentNameCodeContentType__335,
                                     DocumentNameCodeContentType__336,
                                     DocumentNameCodeContentType__337,
                                     DocumentNameCodeContentType__338,
                                     DocumentNameCodeContentType__339,
                                     DocumentNameCodeContentType__340,
                                     DocumentNameCodeContentType__341,
                                     DocumentNameCodeContentType__342,
                                     DocumentNameCodeContentType__343,
                                     DocumentNameCodeContentType__344,
                                     DocumentNameCodeContentType__345,
                                     DocumentNameCodeContentType__346,
                                     DocumentNameCodeContentType__347,
                                     DocumentNameCodeContentType__348,
                                     DocumentNameCodeContentType__349,
                                     DocumentNameCodeContentType__350,
                                     DocumentNameCodeContentType__351,
                                     DocumentNameCodeContentType__352,
                                     DocumentNameCodeContentType__353,
                                     DocumentNameCodeContentType__354,
                                     DocumentNameCodeContentType__355,
                                     DocumentNameCodeContentType__356,
                                     DocumentNameCodeContentType__357,
                                     DocumentNameCodeContentType__358,
                                     DocumentNameCodeContentType__359,
                                     DocumentNameCodeContentType__360,
                                     DocumentNameCodeContentType__361,
                                     DocumentNameCodeContentType__362,
                                     DocumentNameCodeContentType__363,
                                     DocumentNameCodeContentType__364,
                                     DocumentNameCodeContentType__365,
                                     DocumentNameCodeContentType__366,
                                     DocumentNameCodeContentType__367,
                                     DocumentNameCodeContentType__368,
                                     DocumentNameCodeContentType__369,
                                     DocumentNameCodeContentType__370,
                                     DocumentNameCodeContentType__371,
                                     DocumentNameCodeContentType__372,
                                     DocumentNameCodeContentType__373,
                                     DocumentNameCodeContentType__374,
                                     DocumentNameCodeContentType__375,
                                     DocumentNameCodeContentType__376,
                                     DocumentNameCodeContentType__377,
                                     DocumentNameCodeContentType__378,
                                     DocumentNameCodeContentType__379,
                                     DocumentNameCodeContentType__380,
                                     DocumentNameCodeContentType__381,
                                     DocumentNameCodeContentType__382,
                                     DocumentNameCodeContentType__383,
                                     DocumentNameCodeContentType__384,
                                     DocumentNameCodeContentType__385,
                                     DocumentNameCodeContentType__386,
                                     DocumentNameCodeContentType__387,
                                     DocumentNameCodeContentType__388,
                                     DocumentNameCodeContentType__389,
                                     DocumentNameCodeContentType__390,
                                     DocumentNameCodeContentType__391,
                                     DocumentNameCodeContentType__392,
                                     DocumentNameCodeContentType__393,
                                     DocumentNameCodeContentType__394,
                                     DocumentNameCodeContentType__395,
                                     DocumentNameCodeContentType__396,
                                     DocumentNameCodeContentType__397,
                                     DocumentNameCodeContentType__398,
                                     DocumentNameCodeContentType__399,
                                     DocumentNameCodeContentType__400,
                                     DocumentNameCodeContentType__401,
                                     DocumentNameCodeContentType__402,
                                     DocumentNameCodeContentType__403,
                                     DocumentNameCodeContentType__404,
                                     DocumentNameCodeContentType__405,
                                     DocumentNameCodeContentType__406,
                                     DocumentNameCodeContentType__407,
                                     DocumentNameCodeContentType__408,
                                     DocumentNameCodeContentType__409,
                                     DocumentNameCodeContentType__410,
                                     DocumentNameCodeContentType__411,
                                     DocumentNameCodeContentType__412,
                                     DocumentNameCodeContentType__413,
                                     DocumentNameCodeContentType__414,
                                     DocumentNameCodeContentType__415,
                                     DocumentNameCodeContentType__416,
                                     DocumentNameCodeContentType__417,
                                     DocumentNameCodeContentType__418,
                                     DocumentNameCodeContentType__419,
                                     DocumentNameCodeContentType__420,
                                     DocumentNameCodeContentType__421,
                                     DocumentNameCodeContentType__422,
                                     DocumentNameCodeContentType__423,
                                     DocumentNameCodeContentType__424,
                                     DocumentNameCodeContentType__425,
                                     DocumentNameCodeContentType__426,
                                     DocumentNameCodeContentType__427,
                                     DocumentNameCodeContentType__428,
                                     DocumentNameCodeContentType__429,
                                     DocumentNameCodeContentType__430,
                                     DocumentNameCodeContentType__431,
                                     DocumentNameCodeContentType__432,
                                     DocumentNameCodeContentType__433,
                                     DocumentNameCodeContentType__434,
                                     DocumentNameCodeContentType__435,
                                     DocumentNameCodeContentType__436,
                                     DocumentNameCodeContentType__437,
                                     DocumentNameCodeContentType__438,
                                     DocumentNameCodeContentType__439,
                                     DocumentNameCodeContentType__440,
                                     DocumentNameCodeContentType__441,
                                     DocumentNameCodeContentType__442,
                                     DocumentNameCodeContentType__443,
                                     DocumentNameCodeContentType__444,
                                     DocumentNameCodeContentType__445,
                                     DocumentNameCodeContentType__446,
                                     DocumentNameCodeContentType__447,
                                     DocumentNameCodeContentType__448,
                                     DocumentNameCodeContentType__449,
                                     DocumentNameCodeContentType__450,
                                     DocumentNameCodeContentType__451,
                                     DocumentNameCodeContentType__452,
                                     DocumentNameCodeContentType__453,
                                     DocumentNameCodeContentType__454,
                                     DocumentNameCodeContentType__455,
                                     DocumentNameCodeContentType__456,
                                     DocumentNameCodeContentType__457,
                                     DocumentNameCodeContentType__458,
                                     DocumentNameCodeContentType__459,
                                     DocumentNameCodeContentType__460,
                                     DocumentNameCodeContentType__461,
                                     DocumentNameCodeContentType__462,
                                     DocumentNameCodeContentType__463,
                                     DocumentNameCodeContentType__464,
                                     DocumentNameCodeContentType__465,
                                     DocumentNameCodeContentType__466,
                                     DocumentNameCodeContentType__467,
                                     DocumentNameCodeContentType__468,
                                     DocumentNameCodeContentType__469,
                                     DocumentNameCodeContentType__470,
                                     DocumentNameCodeContentType__481,
                                     DocumentNameCodeContentType__482,
                                     DocumentNameCodeContentType__483,
                                     DocumentNameCodeContentType__484,
                                     DocumentNameCodeContentType__485,
                                     DocumentNameCodeContentType__486,
                                     DocumentNameCodeContentType__487,
                                     DocumentNameCodeContentType__488,
                                     DocumentNameCodeContentType__489,
                                     DocumentNameCodeContentType__490,
                                     DocumentNameCodeContentType__491,
                                     DocumentNameCodeContentType__493,
                                     DocumentNameCodeContentType__494,
                                     DocumentNameCodeContentType__495,
                                     DocumentNameCodeContentType__496,
                                     DocumentNameCodeContentType__497,
                                     DocumentNameCodeContentType__498,
                                     DocumentNameCodeContentType__499,
                                     DocumentNameCodeContentType__520,
                                     DocumentNameCodeContentType__521,
                                     DocumentNameCodeContentType__522,
                                     DocumentNameCodeContentType__523,
                                     DocumentNameCodeContentType__524,
                                     DocumentNameCodeContentType__525,
                                     DocumentNameCodeContentType__526,
                                     DocumentNameCodeContentType__527,
                                     DocumentNameCodeContentType__528,
                                     DocumentNameCodeContentType__529,
                                     DocumentNameCodeContentType__530,
                                     DocumentNameCodeContentType__531,
                                     DocumentNameCodeContentType__532,
                                     DocumentNameCodeContentType__533,
                                     DocumentNameCodeContentType__534,
                                     DocumentNameCodeContentType__535,
                                     DocumentNameCodeContentType__536,
                                     DocumentNameCodeContentType__537,
                                     DocumentNameCodeContentType__538,
                                     DocumentNameCodeContentType__539,
                                     DocumentNameCodeContentType__550,
                                     DocumentNameCodeContentType__551,
                                     DocumentNameCodeContentType__552,
                                     DocumentNameCodeContentType__553,
                                     DocumentNameCodeContentType__554,
                                     DocumentNameCodeContentType__575,
                                     DocumentNameCodeContentType__576,
                                     DocumentNameCodeContentType__577,
                                     DocumentNameCodeContentType__578,
                                     DocumentNameCodeContentType__579,
                                     DocumentNameCodeContentType__580,
                                     DocumentNameCodeContentType__581,
                                     DocumentNameCodeContentType__582,
                                     DocumentNameCodeContentType__583,
                                     DocumentNameCodeContentType__584,
                                     DocumentNameCodeContentType__585,
                                     DocumentNameCodeContentType__586,
                                     DocumentNameCodeContentType__587,
                                     DocumentNameCodeContentType__588,
                                     DocumentNameCodeContentType__589,
                                     DocumentNameCodeContentType__610,
                                     DocumentNameCodeContentType__621,
                                     DocumentNameCodeContentType__622,
                                     DocumentNameCodeContentType__623,
                                     DocumentNameCodeContentType__624,
                                     DocumentNameCodeContentType__625,
                                     DocumentNameCodeContentType__626,
                                     DocumentNameCodeContentType__627,
                                     DocumentNameCodeContentType__628,
                                     DocumentNameCodeContentType__629,
                                     DocumentNameCodeContentType__630,
                                     DocumentNameCodeContentType__631,
                                     DocumentNameCodeContentType__632,
                                     DocumentNameCodeContentType__633,
                                     DocumentNameCodeContentType__634,
                                     DocumentNameCodeContentType__635,
                                     DocumentNameCodeContentType__636,
                                     DocumentNameCodeContentType__637,
                                     DocumentNameCodeContentType__638,
                                     DocumentNameCodeContentType__639,
                                     DocumentNameCodeContentType__640,
                                     DocumentNameCodeContentType__641,
                                     DocumentNameCodeContentType__642,
                                     DocumentNameCodeContentType__643,
                                     DocumentNameCodeContentType__644,
                                     DocumentNameCodeContentType__645,
                                     DocumentNameCodeContentType__646,
                                     DocumentNameCodeContentType__647,
                                     DocumentNameCodeContentType__648,
                                     DocumentNameCodeContentType__649,
                                     DocumentNameCodeContentType__650,
                                     DocumentNameCodeContentType__651,
                                     DocumentNameCodeContentType__652,
                                     DocumentNameCodeContentType__653,
                                     DocumentNameCodeContentType__654,
                                     DocumentNameCodeContentType__655,
                                     DocumentNameCodeContentType__656,
                                     DocumentNameCodeContentType__657,
                                     DocumentNameCodeContentType__658,
                                     DocumentNameCodeContentType__659,
                                     DocumentNameCodeContentType__700,
                                     DocumentNameCodeContentType__701,
                                     DocumentNameCodeContentType__702,
                                     DocumentNameCodeContentType__703,
                                     DocumentNameCodeContentType__704,
                                     DocumentNameCodeContentType__705,
                                     DocumentNameCodeContentType__706,
                                     DocumentNameCodeContentType__707,
                                     DocumentNameCodeContentType__708,
                                     DocumentNameCodeContentType__709,
                                     DocumentNameCodeContentType__710,
                                     DocumentNameCodeContentType__711,
                                     DocumentNameCodeContentType__712,
                                     DocumentNameCodeContentType__713,
                                     DocumentNameCodeContentType__714,
                                     DocumentNameCodeContentType__715,
                                     DocumentNameCodeContentType__716,
                                     DocumentNameCodeContentType__717,
                                     DocumentNameCodeContentType__718,
                                     DocumentNameCodeContentType__719,
                                     DocumentNameCodeContentType__720,
                                     DocumentNameCodeContentType__721,
                                     DocumentNameCodeContentType__722,
                                     DocumentNameCodeContentType__723,
                                     DocumentNameCodeContentType__724,
                                     DocumentNameCodeContentType__725,
                                     DocumentNameCodeContentType__726,
                                     DocumentNameCodeContentType__727,
                                     DocumentNameCodeContentType__728,
                                     DocumentNameCodeContentType__729,
                                     DocumentNameCodeContentType__730,
                                     DocumentNameCodeContentType__731,
                                     DocumentNameCodeContentType__732,
                                     DocumentNameCodeContentType__733,
                                     DocumentNameCodeContentType__734,
                                     DocumentNameCodeContentType__735,
                                     DocumentNameCodeContentType__736,
                                     DocumentNameCodeContentType__737,
                                     DocumentNameCodeContentType__738,
                                     DocumentNameCodeContentType__739,
                                     DocumentNameCodeContentType__740,
                                     DocumentNameCodeContentType__741,
                                     DocumentNameCodeContentType__742,
                                     DocumentNameCodeContentType__743,
                                     DocumentNameCodeContentType__744,
                                     DocumentNameCodeContentType__745,
                                     DocumentNameCodeContentType__746,
                                     DocumentNameCodeContentType__747,
                                     DocumentNameCodeContentType__748,
                                     DocumentNameCodeContentType__749,
                                     DocumentNameCodeContentType__750,
                                     DocumentNameCodeContentType__751,
                                     DocumentNameCodeContentType__752,
                                     DocumentNameCodeContentType__753,
                                     DocumentNameCodeContentType__754,
                                     DocumentNameCodeContentType__755,
                                     DocumentNameCodeContentType__756,
                                     DocumentNameCodeContentType__757,
                                     DocumentNameCodeContentType__758,
                                     DocumentNameCodeContentType__759,
                                     DocumentNameCodeContentType__760,
                                     DocumentNameCodeContentType__761,
                                     DocumentNameCodeContentType__762,
                                     DocumentNameCodeContentType__763,
                                     DocumentNameCodeContentType__764,
                                     DocumentNameCodeContentType__765,
                                     DocumentNameCodeContentType__766,
                                     DocumentNameCodeContentType__767,
                                     DocumentNameCodeContentType__768,
                                     DocumentNameCodeContentType__769,
                                     DocumentNameCodeContentType__770,
                                     DocumentNameCodeContentType__771,
                                     DocumentNameCodeContentType__772,
                                     DocumentNameCodeContentType__773,
                                     DocumentNameCodeContentType__774,
                                     DocumentNameCodeContentType__775,
                                     DocumentNameCodeContentType__776,
                                     DocumentNameCodeContentType__777,
                                     DocumentNameCodeContentType__778,
                                     DocumentNameCodeContentType__779,
                                     DocumentNameCodeContentType__780,
                                     DocumentNameCodeContentType__781,
                                     DocumentNameCodeContentType__782,
                                     DocumentNameCodeContentType__783,
                                     DocumentNameCodeContentType__784,
                                     DocumentNameCodeContentType__785,
                                     DocumentNameCodeContentType__786,
                                     DocumentNameCodeContentType__787,
                                     DocumentNameCodeContentType__788,
                                     DocumentNameCodeContentType__789,
                                     DocumentNameCodeContentType__790,
                                     DocumentNameCodeContentType__791,
                                     DocumentNameCodeContentType__792,
                                     DocumentNameCodeContentType__793,
                                     DocumentNameCodeContentType__794,
                                     DocumentNameCodeContentType__795,
                                     DocumentNameCodeContentType__796,
                                     DocumentNameCodeContentType__797,
                                     DocumentNameCodeContentType__798,
                                     DocumentNameCodeContentType__799,
                                     DocumentNameCodeContentType__810,
                                     DocumentNameCodeContentType__811,
                                     DocumentNameCodeContentType__812,
                                     DocumentNameCodeContentType__813,
                                     DocumentNameCodeContentType__814,
                                     DocumentNameCodeContentType__815,
                                     DocumentNameCodeContentType__816,
                                     DocumentNameCodeContentType__817,
                                     DocumentNameCodeContentType__818,
                                     DocumentNameCodeContentType__819,
                                     DocumentNameCodeContentType__820,
                                     DocumentNameCodeContentType__821,
                                     DocumentNameCodeContentType__822,
                                     DocumentNameCodeContentType__823,
                                     DocumentNameCodeContentType__824,
                                     DocumentNameCodeContentType__825,
                                     DocumentNameCodeContentType__826,
                                     DocumentNameCodeContentType__827,
                                     DocumentNameCodeContentType__828,
                                     DocumentNameCodeContentType__829,
                                     DocumentNameCodeContentType__830,
                                     DocumentNameCodeContentType__831,
                                     DocumentNameCodeContentType__832,
                                     DocumentNameCodeContentType__833,
                                     DocumentNameCodeContentType__834,
                                     DocumentNameCodeContentType__835,
                                     DocumentNameCodeContentType__836,
                                     DocumentNameCodeContentType__837,
                                     DocumentNameCodeContentType__838,
                                     DocumentNameCodeContentType__839,
                                     DocumentNameCodeContentType__840,
                                     DocumentNameCodeContentType__841,
                                     DocumentNameCodeContentType__842,
                                     DocumentNameCodeContentType__843,
                                     DocumentNameCodeContentType__844,
                                     DocumentNameCodeContentType__845,
                                     DocumentNameCodeContentType__846,
                                     DocumentNameCodeContentType__847,
                                     DocumentNameCodeContentType__848,
                                     DocumentNameCodeContentType__849,
                                     DocumentNameCodeContentType__850,
                                     DocumentNameCodeContentType__851,
                                     DocumentNameCodeContentType__852,
                                     DocumentNameCodeContentType__853,
                                     DocumentNameCodeContentType__854,
                                     DocumentNameCodeContentType__855,
                                     DocumentNameCodeContentType__856,
                                     DocumentNameCodeContentType__857,
                                     DocumentNameCodeContentType__858,
                                     DocumentNameCodeContentType__859,
                                     DocumentNameCodeContentType__860,
                                     DocumentNameCodeContentType__861,
                                     DocumentNameCodeContentType__862,
                                     DocumentNameCodeContentType__863,
                                     DocumentNameCodeContentType__864,
                                     DocumentNameCodeContentType__865,
                                     DocumentNameCodeContentType__866,
                                     DocumentNameCodeContentType__867,
                                     DocumentNameCodeContentType__868,
                                     DocumentNameCodeContentType__869,
                                     DocumentNameCodeContentType__870,
                                     DocumentNameCodeContentType__871,
                                     DocumentNameCodeContentType__872,
                                     DocumentNameCodeContentType__873,
                                     DocumentNameCodeContentType__874,
                                     DocumentNameCodeContentType__875,
                                     DocumentNameCodeContentType__876,
                                     DocumentNameCodeContentType__877,
                                     DocumentNameCodeContentType__878,
                                     DocumentNameCodeContentType__879,
                                     DocumentNameCodeContentType__890,
                                     DocumentNameCodeContentType__891,
                                     DocumentNameCodeContentType__892,
                                     DocumentNameCodeContentType__893,
                                     DocumentNameCodeContentType__894,
                                     DocumentNameCodeContentType__895,
                                     DocumentNameCodeContentType__896,
                                     DocumentNameCodeContentType__897,
                                     DocumentNameCodeContentType__898,
                                     DocumentNameCodeContentType__899,
                                     DocumentNameCodeContentType__900,
                                     DocumentNameCodeContentType__901,
                                     DocumentNameCodeContentType__902,
                                     DocumentNameCodeContentType__903,
                                     DocumentNameCodeContentType__904,
                                     DocumentNameCodeContentType__905,
                                     DocumentNameCodeContentType__906,
                                     DocumentNameCodeContentType__907,
                                     DocumentNameCodeContentType__908,
                                     DocumentNameCodeContentType__909,
                                     DocumentNameCodeContentType__910,
                                     DocumentNameCodeContentType__911,
                                     DocumentNameCodeContentType__912,
                                     DocumentNameCodeContentType__913,
                                     DocumentNameCodeContentType__914,
                                     DocumentNameCodeContentType__915,
                                     DocumentNameCodeContentType__916,
                                     DocumentNameCodeContentType__917,
                                     DocumentNameCodeContentType__925,
                                     DocumentNameCodeContentType__926,
                                     DocumentNameCodeContentType__927,
                                     DocumentNameCodeContentType__929,
                                     DocumentNameCodeContentType__930,
                                     DocumentNameCodeContentType__931,
                                     DocumentNameCodeContentType__932,
                                     DocumentNameCodeContentType__933,
                                     DocumentNameCodeContentType__934,
                                     DocumentNameCodeContentType__935,
                                     DocumentNameCodeContentType__936,
                                     DocumentNameCodeContentType__937,
                                     DocumentNameCodeContentType__938,
                                     DocumentNameCodeContentType__940,
                                     DocumentNameCodeContentType__941,
                                     DocumentNameCodeContentType__950,
                                     DocumentNameCodeContentType__951,
                                     DocumentNameCodeContentType__952,
                                     DocumentNameCodeContentType__953,
                                     DocumentNameCodeContentType__954,
                                     DocumentNameCodeContentType__955,
                                     DocumentNameCodeContentType__960,
                                     DocumentNameCodeContentType__961,
                                     DocumentNameCodeContentType__962,
                                     DocumentNameCodeContentType__963,
                                     DocumentNameCodeContentType__964,
                                     DocumentNameCodeContentType__965,
                                     DocumentNameCodeContentType__966,
                                     DocumentNameCodeContentType__970,
                                     DocumentNameCodeContentType__971,
                                     DocumentNameCodeContentType__972,
                                     DocumentNameCodeContentType__974,
                                     DocumentNameCodeContentType__975,
                                     DocumentNameCodeContentType__976,
                                     DocumentNameCodeContentType__977,
                                     DocumentNameCodeContentType__978,
                                     DocumentNameCodeContentType__979,
                                     DocumentNameCodeContentType__990,
                                     DocumentNameCodeContentType__991,
                                     DocumentNameCodeContentType__995,
                                     DocumentNameCodeContentType__996,
                                     DocumentNameCodeContentType__998);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_Accounting_D22A }
  TXMLDocumentNameCodeAccountingContentType = (DocumentNameCodeAccountingContentType__105,
                                               DocumentNameCodeAccountingContentType__220,
                                               DocumentNameCodeAccountingContentType__223,
                                               DocumentNameCodeAccountingContentType__224,
                                               DocumentNameCodeAccountingContentType__245,
                                               DocumentNameCodeAccountingContentType__315,
                                               DocumentNameCodeAccountingContentType__320,
                                               DocumentNameCodeAccountingContentType__325,
                                               DocumentNameCodeAccountingContentType__326,
                                               DocumentNameCodeAccountingContentType__380,
                                               DocumentNameCodeAccountingContentType__389,
                                               DocumentNameCodeAccountingContentType__393,
                                               DocumentNameCodeAccountingContentType__394,
                                               DocumentNameCodeAccountingContentType__395,
                                               DocumentNameCodeAccountingContentType__398,
                                               DocumentNameCodeAccountingContentType__399,
                                               DocumentNameCodeAccountingContentType__455,
                                               DocumentNameCodeAccountingContentType__481,
                                               DocumentNameCodeAccountingContentType__533,
                                               DocumentNameCodeAccountingContentType__534,
                                               DocumentNameCodeAccountingContentType__640,
                                               DocumentNameCodeAccountingContentType__719,
                                               DocumentNameCodeAccountingContentType__731,
                                               DocumentNameCodeAccountingContentType__747);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentStatusCode_D22A }
  TXMLDocumentStatusCodeContentType = (DocumentStatusCodeContentType__1,
                                       DocumentStatusCodeContentType__2,
                                       DocumentStatusCodeContentType__3,
                                       DocumentStatusCodeContentType__4,
                                       DocumentStatusCodeContentType__5,
                                       DocumentStatusCodeContentType__6,
                                       DocumentStatusCodeContentType__7,
                                       DocumentStatusCodeContentType__8,
                                       DocumentStatusCodeContentType__9,
                                       DocumentStatusCodeContentType__10,
                                       DocumentStatusCodeContentType__11,
                                       DocumentStatusCodeContentType__12,
                                       DocumentStatusCodeContentType__13,
                                       DocumentStatusCodeContentType__14,
                                       DocumentStatusCodeContentType__15,
                                       DocumentStatusCodeContentType__16,
                                       DocumentStatusCodeContentType__17,
                                       DocumentStatusCodeContentType__18,
                                       DocumentStatusCodeContentType__19,
                                       DocumentStatusCodeContentType__20,
                                       DocumentStatusCodeContentType__21,
                                       DocumentStatusCodeContentType__22,
                                       DocumentStatusCodeContentType__23,
                                       DocumentStatusCodeContentType__24,
                                       DocumentStatusCodeContentType__25,
                                       DocumentStatusCodeContentType__26,
                                       DocumentStatusCodeContentType__27,
                                       DocumentStatusCodeContentType__28,
                                       DocumentStatusCodeContentType__29,
                                       DocumentStatusCodeContentType__30,
                                       DocumentStatusCodeContentType__31,
                                       DocumentStatusCodeContentType__32,
                                       DocumentStatusCodeContentType__33,
                                       DocumentStatusCodeContentType__34,
                                       DocumentStatusCodeContentType__35,
                                       DocumentStatusCodeContentType__36,
                                       DocumentStatusCodeContentType__37,
                                       DocumentStatusCodeContentType__38,
                                       DocumentStatusCodeContentType__39,
                                       DocumentStatusCodeContentType__40,
                                       DocumentStatusCodeContentType__41,
                                       DocumentStatusCodeContentType__42,
                                       DocumentStatusCodeContentType__43,
                                       DocumentStatusCodeContentType__44,
                                       DocumentStatusCodeContentType__45,
                                       DocumentStatusCodeContentType__46,
                                       DocumentStatusCodeContentType__47,
                                       DocumentStatusCodeContentType__48,
                                       DocumentStatusCodeContentType__49,
                                       DocumentStatusCodeContentType__50);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyTaxFeeTypeCode_D22A }
  TXMLDutyTaxFeeTypeCodeContentType = (DutyTaxFeeTypeCodeContentType_AAA,
                                       DutyTaxFeeTypeCodeContentType_AAB,
                                       DutyTaxFeeTypeCodeContentType_AAC,
                                       DutyTaxFeeTypeCodeContentType_AAD,
                                       DutyTaxFeeTypeCodeContentType_AAE,
                                       DutyTaxFeeTypeCodeContentType_AAF,
                                       DutyTaxFeeTypeCodeContentType_AAG,
                                       DutyTaxFeeTypeCodeContentType_AAH,
                                       DutyTaxFeeTypeCodeContentType_AAI,
                                       DutyTaxFeeTypeCodeContentType_AAJ,
                                       DutyTaxFeeTypeCodeContentType_AAK,
                                       DutyTaxFeeTypeCodeContentType_AAL,
                                       DutyTaxFeeTypeCodeContentType_AAM,
                                       DutyTaxFeeTypeCodeContentType_AAO,
                                       DutyTaxFeeTypeCodeContentType_AAP,
                                       DutyTaxFeeTypeCodeContentType_ADD,
                                       DutyTaxFeeTypeCodeContentType_BOL,
                                       DutyTaxFeeTypeCodeContentType_CAP,
                                       DutyTaxFeeTypeCodeContentType_CAR,
                                       DutyTaxFeeTypeCodeContentType_COC,
                                       DutyTaxFeeTypeCodeContentType_CST,
                                       DutyTaxFeeTypeCodeContentType_CUD,
                                       DutyTaxFeeTypeCodeContentType_CVD,
                                       DutyTaxFeeTypeCodeContentType_ENV,
                                       DutyTaxFeeTypeCodeContentType_EXC,
                                       DutyTaxFeeTypeCodeContentType_EXP,
                                       DutyTaxFeeTypeCodeContentType_FET,
                                       DutyTaxFeeTypeCodeContentType_FRE,
                                       DutyTaxFeeTypeCodeContentType_GCN,
                                       DutyTaxFeeTypeCodeContentType_GST,
                                       DutyTaxFeeTypeCodeContentType_ILL,
                                       DutyTaxFeeTypeCodeContentType_IMP,
                                       DutyTaxFeeTypeCodeContentType_IND,
                                       DutyTaxFeeTypeCodeContentType_LAC,
                                       DutyTaxFeeTypeCodeContentType_LCN,
                                       DutyTaxFeeTypeCodeContentType_LDP,
                                       DutyTaxFeeTypeCodeContentType_LOC,
                                       DutyTaxFeeTypeCodeContentType_LST,
                                       DutyTaxFeeTypeCodeContentType_MCA,
                                       DutyTaxFeeTypeCodeContentType_MCD,
                                       DutyTaxFeeTypeCodeContentType_OTH,
                                       DutyTaxFeeTypeCodeContentType_PDB,
                                       DutyTaxFeeTypeCodeContentType_PDC,
                                       DutyTaxFeeTypeCodeContentType_PRF,
                                       DutyTaxFeeTypeCodeContentType_SCN,
                                       DutyTaxFeeTypeCodeContentType_SSS,
                                       DutyTaxFeeTypeCodeContentType_STT,
                                       DutyTaxFeeTypeCodeContentType_SUP,
                                       DutyTaxFeeTypeCodeContentType_SUR,
                                       DutyTaxFeeTypeCodeContentType_SWT,
                                       DutyTaxFeeTypeCodeContentType_TAC,
                                       DutyTaxFeeTypeCodeContentType_TOT,
                                       DutyTaxFeeTypeCodeContentType_TOX,
                                       DutyTaxFeeTypeCodeContentType_TTA,
                                       DutyTaxFeeTypeCodeContentType_VAD,
                                       DutyTaxFeeTypeCodeContentType_VAT);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyorTaxorFeeCategoryCode_D22A }
  TXMLDutyorTaxorFeeCategoryCodeContentType = (DutyorTaxorFeeCategoryCodeContentType_A,
                                               DutyorTaxorFeeCategoryCodeContentType_AA,
                                               DutyorTaxorFeeCategoryCodeContentType_AB,
                                               DutyorTaxorFeeCategoryCodeContentType_AC,
                                               DutyorTaxorFeeCategoryCodeContentType_AD,
                                               DutyorTaxorFeeCategoryCodeContentType_AE,
                                               DutyorTaxorFeeCategoryCodeContentType_B,
                                               DutyorTaxorFeeCategoryCodeContentType_C,
                                               DutyorTaxorFeeCategoryCodeContentType_D,
                                               DutyorTaxorFeeCategoryCodeContentType_E,
                                               DutyorTaxorFeeCategoryCodeContentType_F,
                                               DutyorTaxorFeeCategoryCodeContentType_G,
                                               DutyorTaxorFeeCategoryCodeContentType_H,
                                               DutyorTaxorFeeCategoryCodeContentType_I,
                                               DutyorTaxorFeeCategoryCodeContentType_J,
                                               DutyorTaxorFeeCategoryCodeContentType_K,
                                               DutyorTaxorFeeCategoryCodeContentType_L,
                                               DutyorTaxorFeeCategoryCodeContentType_M,
                                               DutyorTaxorFeeCategoryCodeContentType_N,
                                               DutyorTaxorFeeCategoryCodeContentType_O,
                                               DutyorTaxorFeeCategoryCodeContentType_S,
                                               DutyorTaxorFeeCategoryCodeContentType_Z);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCode_D22A }
  TXMLEventTimeReferenceCodeContentType = (EventTimeReferenceCodeContentType__1,
                                           EventTimeReferenceCodeContentType__2,
                                           EventTimeReferenceCodeContentType__3,
                                           EventTimeReferenceCodeContentType__4,
                                           EventTimeReferenceCodeContentType__5,
                                           EventTimeReferenceCodeContentType__6,
                                           EventTimeReferenceCodeContentType__7,
                                           EventTimeReferenceCodeContentType__8,
                                           EventTimeReferenceCodeContentType__9,
                                           EventTimeReferenceCodeContentType__10,
                                           EventTimeReferenceCodeContentType__11,
                                           EventTimeReferenceCodeContentType__12,
                                           EventTimeReferenceCodeContentType__13,
                                           EventTimeReferenceCodeContentType__14,
                                           EventTimeReferenceCodeContentType__21,
                                           EventTimeReferenceCodeContentType__22,
                                           EventTimeReferenceCodeContentType__23,
                                           EventTimeReferenceCodeContentType__24,
                                           EventTimeReferenceCodeContentType__25,
                                           EventTimeReferenceCodeContentType__26,
                                           EventTimeReferenceCodeContentType__27,
                                           EventTimeReferenceCodeContentType__28,
                                           EventTimeReferenceCodeContentType__29,
                                           EventTimeReferenceCodeContentType__31,
                                           EventTimeReferenceCodeContentType__32,
                                           EventTimeReferenceCodeContentType__33,
                                           EventTimeReferenceCodeContentType__41,
                                           EventTimeReferenceCodeContentType__42,
                                           EventTimeReferenceCodeContentType__43,
                                           EventTimeReferenceCodeContentType__44,
                                           EventTimeReferenceCodeContentType__45,
                                           EventTimeReferenceCodeContentType__46,
                                           EventTimeReferenceCodeContentType__47,
                                           EventTimeReferenceCodeContentType__48,
                                           EventTimeReferenceCodeContentType__52,
                                           EventTimeReferenceCodeContentType__53,
                                           EventTimeReferenceCodeContentType__54,
                                           EventTimeReferenceCodeContentType__55,
                                           EventTimeReferenceCodeContentType__56,
                                           EventTimeReferenceCodeContentType__57,
                                           EventTimeReferenceCodeContentType__60,
                                           EventTimeReferenceCodeContentType__61,
                                           EventTimeReferenceCodeContentType__62,
                                           EventTimeReferenceCodeContentType__63,
                                           EventTimeReferenceCodeContentType__64,
                                           EventTimeReferenceCodeContentType__65,
                                           EventTimeReferenceCodeContentType__66,
                                           EventTimeReferenceCodeContentType__67,
                                           EventTimeReferenceCodeContentType__68,
                                           EventTimeReferenceCodeContentType__69,
                                           EventTimeReferenceCodeContentType__70,
                                           EventTimeReferenceCodeContentType__71,
                                           EventTimeReferenceCodeContentType__72,
                                           EventTimeReferenceCodeContentType__73,
                                           EventTimeReferenceCodeContentType__74,
                                           EventTimeReferenceCodeContentType__75,
                                           EventTimeReferenceCodeContentType__76,
                                           EventTimeReferenceCodeContentType__77,
                                           EventTimeReferenceCodeContentType__78,
                                           EventTimeReferenceCodeContentType__79,
                                           EventTimeReferenceCodeContentType__80,
                                           EventTimeReferenceCodeContentType__81,
                                           EventTimeReferenceCodeContentType__82,
                                           EventTimeReferenceCodeContentType__83,
                                           EventTimeReferenceCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCodePaymentTermsEvent_D22A }
  TXMLEventTimeReferenceCodePaymentTermsEventContentType = (EventTimeReferenceCodePaymentTermsEventContentType__5,
                                                            EventTimeReferenceCodePaymentTermsEventContentType__24,
                                                            EventTimeReferenceCodePaymentTermsEventContentType__29,
                                                            EventTimeReferenceCodePaymentTermsEventContentType__45,
                                                            EventTimeReferenceCodePaymentTermsEventContentType__71);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeQuantityUnitBasisCode_D22A }
  TXMLFreightChargeQuantityUnitBasisCodeContentType = (FreightChargeQuantityUnitBasisCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeTariffCode_D22A }
  TXMLFreightChargeTariffCodeContentType = (FreightChargeTariffCodeContentType_A,
                                            FreightChargeTariffCodeContentType_B,
                                            FreightChargeTariffCodeContentType_C,
                                            FreightChargeTariffCodeContentType_D,
                                            FreightChargeTariffCodeContentType_E,
                                            FreightChargeTariffCodeContentType_F,
                                            FreightChargeTariffCodeContentType_G,
                                            FreightChargeTariffCodeContentType_H,
                                            FreightChargeTariffCodeContentType_K,
                                            FreightChargeTariffCodeContentType_M,
                                            FreightChargeTariffCodeContentType_N,
                                            FreightChargeTariffCodeContentType_Q,
                                            FreightChargeTariffCodeContentType_R,
                                            FreightChargeTariffCodeContentType_S);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeCode_D22A }
  TXMLGoodsTypeCodeContentType = (GoodsTypeCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeExtensionCode_D22A }
  TXMLGoodsTypeExtensionCodeContentType = (GoodsTypeExtensionCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_LocationFunctionCode_D22A }
  TXMLLocationFunctionCodeContentType = (LocationFunctionCodeContentType__1,
                                         LocationFunctionCodeContentType__2,
                                         LocationFunctionCodeContentType__3,
                                         LocationFunctionCodeContentType__4,
                                         LocationFunctionCodeContentType__5,
                                         LocationFunctionCodeContentType__6,
                                         LocationFunctionCodeContentType__7,
                                         LocationFunctionCodeContentType__8,
                                         LocationFunctionCodeContentType__9,
                                         LocationFunctionCodeContentType__10,
                                         LocationFunctionCodeContentType__11,
                                         LocationFunctionCodeContentType__12,
                                         LocationFunctionCodeContentType__13,
                                         LocationFunctionCodeContentType__14,
                                         LocationFunctionCodeContentType__15,
                                         LocationFunctionCodeContentType__16,
                                         LocationFunctionCodeContentType__17,
                                         LocationFunctionCodeContentType__18,
                                         LocationFunctionCodeContentType__19,
                                         LocationFunctionCodeContentType__20,
                                         LocationFunctionCodeContentType__21,
                                         LocationFunctionCodeContentType__22,
                                         LocationFunctionCodeContentType__23,
                                         LocationFunctionCodeContentType__24,
                                         LocationFunctionCodeContentType__25,
                                         LocationFunctionCodeContentType__26,
                                         LocationFunctionCodeContentType__27,
                                         LocationFunctionCodeContentType__28,
                                         LocationFunctionCodeContentType__29,
                                         LocationFunctionCodeContentType__30,
                                         LocationFunctionCodeContentType__31,
                                         LocationFunctionCodeContentType__32,
                                         LocationFunctionCodeContentType__33,
                                         LocationFunctionCodeContentType__34,
                                         LocationFunctionCodeContentType__35,
                                         LocationFunctionCodeContentType__36,
                                         LocationFunctionCodeContentType__37,
                                         LocationFunctionCodeContentType__38,
                                         LocationFunctionCodeContentType__39,
                                         LocationFunctionCodeContentType__40,
                                         LocationFunctionCodeContentType__41,
                                         LocationFunctionCodeContentType__42,
                                         LocationFunctionCodeContentType__43,
                                         LocationFunctionCodeContentType__44,
                                         LocationFunctionCodeContentType__45,
                                         LocationFunctionCodeContentType__46,
                                         LocationFunctionCodeContentType__47,
                                         LocationFunctionCodeContentType__48,
                                         LocationFunctionCodeContentType__49,
                                         LocationFunctionCodeContentType__50,
                                         LocationFunctionCodeContentType__51,
                                         LocationFunctionCodeContentType__52,
                                         LocationFunctionCodeContentType__53,
                                         LocationFunctionCodeContentType__54,
                                         LocationFunctionCodeContentType__55,
                                         LocationFunctionCodeContentType__56,
                                         LocationFunctionCodeContentType__57,
                                         LocationFunctionCodeContentType__58,
                                         LocationFunctionCodeContentType__59,
                                         LocationFunctionCodeContentType__60,
                                         LocationFunctionCodeContentType__61,
                                         LocationFunctionCodeContentType__62,
                                         LocationFunctionCodeContentType__63,
                                         LocationFunctionCodeContentType__64,
                                         LocationFunctionCodeContentType__65,
                                         LocationFunctionCodeContentType__66,
                                         LocationFunctionCodeContentType__67,
                                         LocationFunctionCodeContentType__68,
                                         LocationFunctionCodeContentType__69,
                                         LocationFunctionCodeContentType__70,
                                         LocationFunctionCodeContentType__71,
                                         LocationFunctionCodeContentType__72,
                                         LocationFunctionCodeContentType__73,
                                         LocationFunctionCodeContentType__74,
                                         LocationFunctionCodeContentType__75,
                                         LocationFunctionCodeContentType__76,
                                         LocationFunctionCodeContentType__77,
                                         LocationFunctionCodeContentType__78,
                                         LocationFunctionCodeContentType__79,
                                         LocationFunctionCodeContentType__80,
                                         LocationFunctionCodeContentType__81,
                                         LocationFunctionCodeContentType__82,
                                         LocationFunctionCodeContentType__83,
                                         LocationFunctionCodeContentType__84,
                                         LocationFunctionCodeContentType__85,
                                         LocationFunctionCodeContentType__86,
                                         LocationFunctionCodeContentType__87,
                                         LocationFunctionCodeContentType__88,
                                         LocationFunctionCodeContentType__89,
                                         LocationFunctionCodeContentType__90,
                                         LocationFunctionCodeContentType__91,
                                         LocationFunctionCodeContentType__92,
                                         LocationFunctionCodeContentType__93,
                                         LocationFunctionCodeContentType__94,
                                         LocationFunctionCodeContentType__95,
                                         LocationFunctionCodeContentType__96,
                                         LocationFunctionCodeContentType__97,
                                         LocationFunctionCodeContentType__98,
                                         LocationFunctionCodeContentType__99,
                                         LocationFunctionCodeContentType__100,
                                         LocationFunctionCodeContentType__101,
                                         LocationFunctionCodeContentType__103,
                                         LocationFunctionCodeContentType__104,
                                         LocationFunctionCodeContentType__105,
                                         LocationFunctionCodeContentType__106,
                                         LocationFunctionCodeContentType__107,
                                         LocationFunctionCodeContentType__108,
                                         LocationFunctionCodeContentType__109,
                                         LocationFunctionCodeContentType__110,
                                         LocationFunctionCodeContentType__111,
                                         LocationFunctionCodeContentType__112,
                                         LocationFunctionCodeContentType__113,
                                         LocationFunctionCodeContentType__114,
                                         LocationFunctionCodeContentType__115,
                                         LocationFunctionCodeContentType__116,
                                         LocationFunctionCodeContentType__117,
                                         LocationFunctionCodeContentType__118,
                                         LocationFunctionCodeContentType__119,
                                         LocationFunctionCodeContentType__120,
                                         LocationFunctionCodeContentType__122,
                                         LocationFunctionCodeContentType__123,
                                         LocationFunctionCodeContentType__124,
                                         LocationFunctionCodeContentType__125,
                                         LocationFunctionCodeContentType__126,
                                         LocationFunctionCodeContentType__127,
                                         LocationFunctionCodeContentType__128,
                                         LocationFunctionCodeContentType__129,
                                         LocationFunctionCodeContentType__130,
                                         LocationFunctionCodeContentType__131,
                                         LocationFunctionCodeContentType__132,
                                         LocationFunctionCodeContentType__133,
                                         LocationFunctionCodeContentType__134,
                                         LocationFunctionCodeContentType__135,
                                         LocationFunctionCodeContentType__136,
                                         LocationFunctionCodeContentType__137,
                                         LocationFunctionCodeContentType__138,
                                         LocationFunctionCodeContentType__139,
                                         LocationFunctionCodeContentType__140,
                                         LocationFunctionCodeContentType__141,
                                         LocationFunctionCodeContentType__142,
                                         LocationFunctionCodeContentType__143,
                                         LocationFunctionCodeContentType__144,
                                         LocationFunctionCodeContentType__145,
                                         LocationFunctionCodeContentType__146,
                                         LocationFunctionCodeContentType__147,
                                         LocationFunctionCodeContentType__148,
                                         LocationFunctionCodeContentType__149,
                                         LocationFunctionCodeContentType__150,
                                         LocationFunctionCodeContentType__151,
                                         LocationFunctionCodeContentType__152,
                                         LocationFunctionCodeContentType__153,
                                         LocationFunctionCodeContentType__154,
                                         LocationFunctionCodeContentType__155,
                                         LocationFunctionCodeContentType__156,
                                         LocationFunctionCodeContentType__157,
                                         LocationFunctionCodeContentType__158,
                                         LocationFunctionCodeContentType__159,
                                         LocationFunctionCodeContentType__160,
                                         LocationFunctionCodeContentType__161,
                                         LocationFunctionCodeContentType__162,
                                         LocationFunctionCodeContentType__163,
                                         LocationFunctionCodeContentType__164,
                                         LocationFunctionCodeContentType__165,
                                         LocationFunctionCodeContentType__166,
                                         LocationFunctionCodeContentType__167,
                                         LocationFunctionCodeContentType__168,
                                         LocationFunctionCodeContentType__169,
                                         LocationFunctionCodeContentType__170,
                                         LocationFunctionCodeContentType__171,
                                         LocationFunctionCodeContentType__172,
                                         LocationFunctionCodeContentType__173,
                                         LocationFunctionCodeContentType__174,
                                         LocationFunctionCodeContentType__175,
                                         LocationFunctionCodeContentType__176,
                                         LocationFunctionCodeContentType__177,
                                         LocationFunctionCodeContentType__178,
                                         LocationFunctionCodeContentType__179,
                                         LocationFunctionCodeContentType__180,
                                         LocationFunctionCodeContentType__181,
                                         LocationFunctionCodeContentType__182,
                                         LocationFunctionCodeContentType__183,
                                         LocationFunctionCodeContentType__184,
                                         LocationFunctionCodeContentType__185,
                                         LocationFunctionCodeContentType__186,
                                         LocationFunctionCodeContentType__187,
                                         LocationFunctionCodeContentType__188,
                                         LocationFunctionCodeContentType__189,
                                         LocationFunctionCodeContentType__190,
                                         LocationFunctionCodeContentType__191,
                                         LocationFunctionCodeContentType__192,
                                         LocationFunctionCodeContentType__193,
                                         LocationFunctionCodeContentType__194,
                                         LocationFunctionCodeContentType__195,
                                         LocationFunctionCodeContentType__196,
                                         LocationFunctionCodeContentType__197,
                                         LocationFunctionCodeContentType__198,
                                         LocationFunctionCodeContentType__199,
                                         LocationFunctionCodeContentType__200,
                                         LocationFunctionCodeContentType__201,
                                         LocationFunctionCodeContentType__202,
                                         LocationFunctionCodeContentType__203,
                                         LocationFunctionCodeContentType__204,
                                         LocationFunctionCodeContentType__205,
                                         LocationFunctionCodeContentType__206,
                                         LocationFunctionCodeContentType__207,
                                         LocationFunctionCodeContentType__208,
                                         LocationFunctionCodeContentType__209,
                                         LocationFunctionCodeContentType__210,
                                         LocationFunctionCodeContentType__211,
                                         LocationFunctionCodeContentType__212,
                                         LocationFunctionCodeContentType__213,
                                         LocationFunctionCodeContentType__214,
                                         LocationFunctionCodeContentType__215,
                                         LocationFunctionCodeContentType__216,
                                         LocationFunctionCodeContentType__217,
                                         LocationFunctionCodeContentType__218,
                                         LocationFunctionCodeContentType__219,
                                         LocationFunctionCodeContentType__220,
                                         LocationFunctionCodeContentType__221,
                                         LocationFunctionCodeContentType__222,
                                         LocationFunctionCodeContentType__223,
                                         LocationFunctionCodeContentType__224,
                                         LocationFunctionCodeContentType__225,
                                         LocationFunctionCodeContentType__226,
                                         LocationFunctionCodeContentType__227,
                                         LocationFunctionCodeContentType__228,
                                         LocationFunctionCodeContentType__229,
                                         LocationFunctionCodeContentType__230,
                                         LocationFunctionCodeContentType__231,
                                         LocationFunctionCodeContentType__232,
                                         LocationFunctionCodeContentType__233,
                                         LocationFunctionCodeContentType__234,
                                         LocationFunctionCodeContentType__235,
                                         LocationFunctionCodeContentType__236,
                                         LocationFunctionCodeContentType__237,
                                         LocationFunctionCodeContentType__238,
                                         LocationFunctionCodeContentType__239,
                                         LocationFunctionCodeContentType__240,
                                         LocationFunctionCodeContentType__241,
                                         LocationFunctionCodeContentType__242,
                                         LocationFunctionCodeContentType__243,
                                         LocationFunctionCodeContentType__244,
                                         LocationFunctionCodeContentType__245,
                                         LocationFunctionCodeContentType__246,
                                         LocationFunctionCodeContentType__247,
                                         LocationFunctionCodeContentType__248,
                                         LocationFunctionCodeContentType__249,
                                         LocationFunctionCodeContentType__250,
                                         LocationFunctionCodeContentType__251,
                                         LocationFunctionCodeContentType__252,
                                         LocationFunctionCodeContentType__253,
                                         LocationFunctionCodeContentType__254,
                                         LocationFunctionCodeContentType__255,
                                         LocationFunctionCodeContentType__256,
                                         LocationFunctionCodeContentType__257,
                                         LocationFunctionCodeContentType__258,
                                         LocationFunctionCodeContentType__259,
                                         LocationFunctionCodeContentType__260,
                                         LocationFunctionCodeContentType__261,
                                         LocationFunctionCodeContentType__262,
                                         LocationFunctionCodeContentType__263,
                                         LocationFunctionCodeContentType__264,
                                         LocationFunctionCodeContentType__265,
                                         LocationFunctionCodeContentType__266,
                                         LocationFunctionCodeContentType__267,
                                         LocationFunctionCodeContentType__268,
                                         LocationFunctionCodeContentType__269,
                                         LocationFunctionCodeContentType__270,
                                         LocationFunctionCodeContentType__271,
                                         LocationFunctionCodeContentType__272,
                                         LocationFunctionCodeContentType__273,
                                         LocationFunctionCodeContentType__274,
                                         LocationFunctionCodeContentType__275,
                                         LocationFunctionCodeContentType__276,
                                         LocationFunctionCodeContentType__277,
                                         LocationFunctionCodeContentType__278,
                                         LocationFunctionCodeContentType__279,
                                         LocationFunctionCodeContentType__280,
                                         LocationFunctionCodeContentType__281,
                                         LocationFunctionCodeContentType__282,
                                         LocationFunctionCodeContentType__283,
                                         LocationFunctionCodeContentType__284,
                                         LocationFunctionCodeContentType__285,
                                         LocationFunctionCodeContentType__286,
                                         LocationFunctionCodeContentType__287,
                                         LocationFunctionCodeContentType__288,
                                         LocationFunctionCodeContentType__289,
                                         LocationFunctionCodeContentType__290,
                                         LocationFunctionCodeContentType__291,
                                         LocationFunctionCodeContentType__292,
                                         LocationFunctionCodeContentType__293,
                                         LocationFunctionCodeContentType__294,
                                         LocationFunctionCodeContentType__295,
                                         LocationFunctionCodeContentType__296,
                                         LocationFunctionCodeContentType__297,
                                         LocationFunctionCodeContentType__298,
                                         LocationFunctionCodeContentType__299,
                                         LocationFunctionCodeContentType__300,
                                         LocationFunctionCodeContentType__301,
                                         LocationFunctionCodeContentType__302,
                                         LocationFunctionCodeContentType__303,
                                         LocationFunctionCodeContentType__304,
                                         LocationFunctionCodeContentType__305,
                                         LocationFunctionCodeContentType__306,
                                         LocationFunctionCodeContentType__307,
                                         LocationFunctionCodeContentType__308,
                                         LocationFunctionCodeContentType__309,
                                         LocationFunctionCodeContentType__310,
                                         LocationFunctionCodeContentType__311,
                                         LocationFunctionCodeContentType__312,
                                         LocationFunctionCodeContentType__313,
                                         LocationFunctionCodeContentType__314,
                                         LocationFunctionCodeContentType__315,
                                         LocationFunctionCodeContentType__316,
                                         LocationFunctionCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeLinear_4 }
  TXMLMeasurementUnitCommonCodeLinearContentType = (MeasurementUnitCommonCodeLinearContentType_CMT,
                                                    MeasurementUnitCommonCodeLinearContentType_FOT,
                                                    MeasurementUnitCommonCodeLinearContentType_INH,
                                                    MeasurementUnitCommonCodeLinearContentType_MTR);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeVolume_4 }
  TXMLMeasurementUnitCommonCodeVolumeContentType = (MeasurementUnitCommonCodeVolumeContentType_CMQ,
                                                    MeasurementUnitCommonCodeVolumeContentType_FTQ,
                                                    MeasurementUnitCommonCodeVolumeContentType_LTR,
                                                    MeasurementUnitCommonCodeVolumeContentType_MMQ,
                                                    MeasurementUnitCommonCodeVolumeContentType_MTQ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeWeight_4 }
  TXMLMeasurementUnitCommonCodeWeightContentType = (MeasurementUnitCommonCodeWeightContentType_KGM,
                                                    MeasurementUnitCommonCodeWeightContentType_TNE);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MessageFunctionCode_D22A }
  TXMLMessageFunctionCodeContentType = (MessageFunctionCodeContentType__1,
                                        MessageFunctionCodeContentType__2,
                                        MessageFunctionCodeContentType__3,
                                        MessageFunctionCodeContentType__4,
                                        MessageFunctionCodeContentType__5,
                                        MessageFunctionCodeContentType__6,
                                        MessageFunctionCodeContentType__7,
                                        MessageFunctionCodeContentType__8,
                                        MessageFunctionCodeContentType__9,
                                        MessageFunctionCodeContentType__10,
                                        MessageFunctionCodeContentType__11,
                                        MessageFunctionCodeContentType__12,
                                        MessageFunctionCodeContentType__13,
                                        MessageFunctionCodeContentType__14,
                                        MessageFunctionCodeContentType__15,
                                        MessageFunctionCodeContentType__16,
                                        MessageFunctionCodeContentType__17,
                                        MessageFunctionCodeContentType__18,
                                        MessageFunctionCodeContentType__19,
                                        MessageFunctionCodeContentType__20,
                                        MessageFunctionCodeContentType__21,
                                        MessageFunctionCodeContentType__22,
                                        MessageFunctionCodeContentType__23,
                                        MessageFunctionCodeContentType__24,
                                        MessageFunctionCodeContentType__25,
                                        MessageFunctionCodeContentType__26,
                                        MessageFunctionCodeContentType__27,
                                        MessageFunctionCodeContentType__28,
                                        MessageFunctionCodeContentType__29,
                                        MessageFunctionCodeContentType__30,
                                        MessageFunctionCodeContentType__31,
                                        MessageFunctionCodeContentType__32,
                                        MessageFunctionCodeContentType__33,
                                        MessageFunctionCodeContentType__34,
                                        MessageFunctionCodeContentType__35,
                                        MessageFunctionCodeContentType__36,
                                        MessageFunctionCodeContentType__37,
                                        MessageFunctionCodeContentType__38,
                                        MessageFunctionCodeContentType__39,
                                        MessageFunctionCodeContentType__40,
                                        MessageFunctionCodeContentType__41,
                                        MessageFunctionCodeContentType__42,
                                        MessageFunctionCodeContentType__43,
                                        MessageFunctionCodeContentType__44,
                                        MessageFunctionCodeContentType__45,
                                        MessageFunctionCodeContentType__46,
                                        MessageFunctionCodeContentType__47,
                                        MessageFunctionCodeContentType__48,
                                        MessageFunctionCodeContentType__49,
                                        MessageFunctionCodeContentType__50,
                                        MessageFunctionCodeContentType__51,
                                        MessageFunctionCodeContentType__52,
                                        MessageFunctionCodeContentType__53,
                                        MessageFunctionCodeContentType__54,
                                        MessageFunctionCodeContentType__55,
                                        MessageFunctionCodeContentType__56,
                                        MessageFunctionCodeContentType__57,
                                        MessageFunctionCodeContentType__58,
                                        MessageFunctionCodeContentType__59,
                                        MessageFunctionCodeContentType__60,
                                        MessageFunctionCodeContentType__61,
                                        MessageFunctionCodeContentType__62,
                                        MessageFunctionCodeContentType__63,
                                        MessageFunctionCodeContentType__64,
                                        MessageFunctionCodeContentType__65,
                                        MessageFunctionCodeContentType__66,
                                        MessageFunctionCodeContentType__67,
                                        MessageFunctionCodeContentType__68,
                                        MessageFunctionCodeContentType__69,
                                        MessageFunctionCodeContentType__70,
                                        MessageFunctionCodeContentType__71,
                                        MessageFunctionCodeContentType__72,
                                        MessageFunctionCodeContentType__73);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackageTypeCode_2006 }
  TXMLPackageTypeCodeContentType = (PackageTypeCodeContentType__43,
                                    PackageTypeCodeContentType__44,
                                    PackageTypeCodeContentType__1A,
                                    PackageTypeCodeContentType__1B,
                                    PackageTypeCodeContentType__1D,
                                    PackageTypeCodeContentType__1F,
                                    PackageTypeCodeContentType__1G,
                                    PackageTypeCodeContentType__1W,
                                    PackageTypeCodeContentType__2C,
                                    PackageTypeCodeContentType__3A,
                                    PackageTypeCodeContentType__3H,
                                    PackageTypeCodeContentType__4A,
                                    PackageTypeCodeContentType__4B,
                                    PackageTypeCodeContentType__4C,
                                    PackageTypeCodeContentType__4D,
                                    PackageTypeCodeContentType__4F,
                                    PackageTypeCodeContentType__4G,
                                    PackageTypeCodeContentType__4H,
                                    PackageTypeCodeContentType__5H,
                                    PackageTypeCodeContentType__5L,
                                    PackageTypeCodeContentType__5M,
                                    PackageTypeCodeContentType__6H,
                                    PackageTypeCodeContentType__6P,
                                    PackageTypeCodeContentType__7A,
                                    PackageTypeCodeContentType__7B,
                                    PackageTypeCodeContentType__8A,
                                    PackageTypeCodeContentType__8B,
                                    PackageTypeCodeContentType__8C,
                                    PackageTypeCodeContentType_AA,
                                    PackageTypeCodeContentType_AB,
                                    PackageTypeCodeContentType_AC,
                                    PackageTypeCodeContentType_AD,
                                    PackageTypeCodeContentType_AE,
                                    PackageTypeCodeContentType_AF,
                                    PackageTypeCodeContentType_AG,
                                    PackageTypeCodeContentType_AH,
                                    PackageTypeCodeContentType_AI,
                                    PackageTypeCodeContentType_AJ,
                                    PackageTypeCodeContentType_AL,
                                    PackageTypeCodeContentType_AM,
                                    PackageTypeCodeContentType_AP,
                                    PackageTypeCodeContentType_AT,
                                    PackageTypeCodeContentType_AV,
                                    PackageTypeCodeContentType_B4,
                                    PackageTypeCodeContentType_BA,
                                    PackageTypeCodeContentType_BB,
                                    PackageTypeCodeContentType_BC,
                                    PackageTypeCodeContentType_BD,
                                    PackageTypeCodeContentType_BE,
                                    PackageTypeCodeContentType_BF,
                                    PackageTypeCodeContentType_BG,
                                    PackageTypeCodeContentType_BH,
                                    PackageTypeCodeContentType_BI,
                                    PackageTypeCodeContentType_BJ,
                                    PackageTypeCodeContentType_BK,
                                    PackageTypeCodeContentType_BL,
                                    PackageTypeCodeContentType_BM,
                                    PackageTypeCodeContentType_BN,
                                    PackageTypeCodeContentType_BO,
                                    PackageTypeCodeContentType_BP,
                                    PackageTypeCodeContentType_BQ,
                                    PackageTypeCodeContentType_BR,
                                    PackageTypeCodeContentType_BS,
                                    PackageTypeCodeContentType_BT,
                                    PackageTypeCodeContentType_BU,
                                    PackageTypeCodeContentType_BV,
                                    PackageTypeCodeContentType_BW,
                                    PackageTypeCodeContentType_BX,
                                    PackageTypeCodeContentType_BY,
                                    PackageTypeCodeContentType_BZ,
                                    PackageTypeCodeContentType_CA,
                                    PackageTypeCodeContentType_CB,
                                    PackageTypeCodeContentType_CC,
                                    PackageTypeCodeContentType_CD,
                                    PackageTypeCodeContentType_CE,
                                    PackageTypeCodeContentType_CF,
                                    PackageTypeCodeContentType_CG,
                                    PackageTypeCodeContentType_CH,
                                    PackageTypeCodeContentType_CI,
                                    PackageTypeCodeContentType_CJ,
                                    PackageTypeCodeContentType_CK,
                                    PackageTypeCodeContentType_CL,
                                    PackageTypeCodeContentType_CM,
                                    PackageTypeCodeContentType_CN,
                                    PackageTypeCodeContentType_CO,
                                    PackageTypeCodeContentType_CP,
                                    PackageTypeCodeContentType_CQ,
                                    PackageTypeCodeContentType_CR,
                                    PackageTypeCodeContentType_CS,
                                    PackageTypeCodeContentType_CT,
                                    PackageTypeCodeContentType_CU,
                                    PackageTypeCodeContentType_CV,
                                    PackageTypeCodeContentType_CW,
                                    PackageTypeCodeContentType_CX,
                                    PackageTypeCodeContentType_CY,
                                    PackageTypeCodeContentType_CZ,
                                    PackageTypeCodeContentType_DA,
                                    PackageTypeCodeContentType_DB,
                                    PackageTypeCodeContentType_DC,
                                    PackageTypeCodeContentType_DG,
                                    PackageTypeCodeContentType_DH,
                                    PackageTypeCodeContentType_DI,
                                    PackageTypeCodeContentType_DJ,
                                    PackageTypeCodeContentType_DK,
                                    PackageTypeCodeContentType_DL,
                                    PackageTypeCodeContentType_DM,
                                    PackageTypeCodeContentType_DN,
                                    PackageTypeCodeContentType_DP,
                                    PackageTypeCodeContentType_DR,
                                    PackageTypeCodeContentType_DS,
                                    PackageTypeCodeContentType_DT,
                                    PackageTypeCodeContentType_DU,
                                    PackageTypeCodeContentType_DV,
                                    PackageTypeCodeContentType_DW,
                                    PackageTypeCodeContentType_DX,
                                    PackageTypeCodeContentType_DY,
                                    PackageTypeCodeContentType_EC,
                                    PackageTypeCodeContentType_ED,
                                    PackageTypeCodeContentType_EE,
                                    PackageTypeCodeContentType_EF,
                                    PackageTypeCodeContentType_EG,
                                    PackageTypeCodeContentType_EH,
                                    PackageTypeCodeContentType_EI,
                                    PackageTypeCodeContentType_EN,
                                    PackageTypeCodeContentType_FB,
                                    PackageTypeCodeContentType_FC,
                                    PackageTypeCodeContentType_FD,
                                    PackageTypeCodeContentType_FE,
                                    PackageTypeCodeContentType_FI,
                                    PackageTypeCodeContentType_FL,
                                    PackageTypeCodeContentType_FO,
                                    PackageTypeCodeContentType_FP,
                                    PackageTypeCodeContentType_FR,
                                    PackageTypeCodeContentType_FT,
                                    PackageTypeCodeContentType_FW,
                                    PackageTypeCodeContentType_FX,
                                    PackageTypeCodeContentType_GB,
                                    PackageTypeCodeContentType_GI,
                                    PackageTypeCodeContentType_GL,
                                    PackageTypeCodeContentType_GR,
                                    PackageTypeCodeContentType_GU,
                                    PackageTypeCodeContentType_GY,
                                    PackageTypeCodeContentType_GZ,
                                    PackageTypeCodeContentType_HA,
                                    PackageTypeCodeContentType_HB,
                                    PackageTypeCodeContentType_HC,
                                    PackageTypeCodeContentType_HG,
                                    PackageTypeCodeContentType_HN,
                                    PackageTypeCodeContentType_HR,
                                    PackageTypeCodeContentType_IA,
                                    PackageTypeCodeContentType_IB,
                                    PackageTypeCodeContentType_IC,
                                    PackageTypeCodeContentType_ID,
                                    PackageTypeCodeContentType_IE,
                                    PackageTypeCodeContentType__IF,
                                    PackageTypeCodeContentType_IG,
                                    PackageTypeCodeContentType_IH,
                                    PackageTypeCodeContentType_IK,
                                    PackageTypeCodeContentType_IL,
                                    PackageTypeCodeContentType__IN,
                                    PackageTypeCodeContentType_IZ,
                                    PackageTypeCodeContentType_JB,
                                    PackageTypeCodeContentType_JC,
                                    PackageTypeCodeContentType_JG,
                                    PackageTypeCodeContentType_JR,
                                    PackageTypeCodeContentType_JT,
                                    PackageTypeCodeContentType_JY,
                                    PackageTypeCodeContentType_KG,
                                    PackageTypeCodeContentType_KI,
                                    PackageTypeCodeContentType_LE,
                                    PackageTypeCodeContentType_LG,
                                    PackageTypeCodeContentType_LT,
                                    PackageTypeCodeContentType_LU,
                                    PackageTypeCodeContentType_LV,
                                    PackageTypeCodeContentType_LZ,
                                    PackageTypeCodeContentType_MA,
                                    PackageTypeCodeContentType_MB,
                                    PackageTypeCodeContentType_MC,
                                    PackageTypeCodeContentType_ME,
                                    PackageTypeCodeContentType_MR,
                                    PackageTypeCodeContentType_MS,
                                    PackageTypeCodeContentType_MT,
                                    PackageTypeCodeContentType_MW,
                                    PackageTypeCodeContentType_MX,
                                    PackageTypeCodeContentType_NA,
                                    PackageTypeCodeContentType_NE,
                                    PackageTypeCodeContentType_NF,
                                    PackageTypeCodeContentType_NG,
                                    PackageTypeCodeContentType_NS,
                                    PackageTypeCodeContentType_NT,
                                    PackageTypeCodeContentType_NU,
                                    PackageTypeCodeContentType_NV,
                                    PackageTypeCodeContentType_O1,
                                    PackageTypeCodeContentType_O2,
                                    PackageTypeCodeContentType_O3,
                                    PackageTypeCodeContentType_O4,
                                    PackageTypeCodeContentType_O5,
                                    PackageTypeCodeContentType_O6,
                                    PackageTypeCodeContentType_O7,
                                    PackageTypeCodeContentType_O8,
                                    PackageTypeCodeContentType_O9,
                                    PackageTypeCodeContentType_OA,
                                    PackageTypeCodeContentType_OB,
                                    PackageTypeCodeContentType_OC,
                                    PackageTypeCodeContentType_OD,
                                    PackageTypeCodeContentType_OE,
                                    PackageTypeCodeContentType__OF,
                                    PackageTypeCodeContentType_OG,
                                    PackageTypeCodeContentType_OH,
                                    PackageTypeCodeContentType_OI,
                                    PackageTypeCodeContentType_OJ,
                                    PackageTypeCodeContentType_OK,
                                    PackageTypeCodeContentType_OL,
                                    PackageTypeCodeContentType_OM,
                                    PackageTypeCodeContentType_ON,
                                    PackageTypeCodeContentType_OP,
                                    PackageTypeCodeContentType_OQ,
                                    PackageTypeCodeContentType__OR,
                                    PackageTypeCodeContentType_OS,
                                    PackageTypeCodeContentType_OT,
                                    PackageTypeCodeContentType_OU,
                                    PackageTypeCodeContentType_OV,
                                    PackageTypeCodeContentType_OW,
                                    PackageTypeCodeContentType_OX,
                                    PackageTypeCodeContentType_OY,
                                    PackageTypeCodeContentType_OZ,
                                    PackageTypeCodeContentType_P1,
                                    PackageTypeCodeContentType_P2,
                                    PackageTypeCodeContentType_P3,
                                    PackageTypeCodeContentType_P4,
                                    PackageTypeCodeContentType_PA,
                                    PackageTypeCodeContentType_PB,
                                    PackageTypeCodeContentType_PC,
                                    PackageTypeCodeContentType_PD,
                                    PackageTypeCodeContentType_PE,
                                    PackageTypeCodeContentType_PF,
                                    PackageTypeCodeContentType_PG,
                                    PackageTypeCodeContentType_PH,
                                    PackageTypeCodeContentType_PI,
                                    PackageTypeCodeContentType_PJ,
                                    PackageTypeCodeContentType_PK,
                                    PackageTypeCodeContentType_PL,
                                    PackageTypeCodeContentType_PN,
                                    PackageTypeCodeContentType_PO,
                                    PackageTypeCodeContentType_PP,
                                    PackageTypeCodeContentType_PR,
                                    PackageTypeCodeContentType_PT,
                                    PackageTypeCodeContentType_PU,
                                    PackageTypeCodeContentType_PV,
                                    PackageTypeCodeContentType_PX,
                                    PackageTypeCodeContentType_PY,
                                    PackageTypeCodeContentType_PZ,
                                    PackageTypeCodeContentType_QA,
                                    PackageTypeCodeContentType_QB,
                                    PackageTypeCodeContentType_QC,
                                    PackageTypeCodeContentType_QD,
                                    PackageTypeCodeContentType_QF,
                                    PackageTypeCodeContentType_QG,
                                    PackageTypeCodeContentType_QH,
                                    PackageTypeCodeContentType_QJ,
                                    PackageTypeCodeContentType_QK,
                                    PackageTypeCodeContentType_QL,
                                    PackageTypeCodeContentType_QM,
                                    PackageTypeCodeContentType_QN,
                                    PackageTypeCodeContentType_QP,
                                    PackageTypeCodeContentType_QQ,
                                    PackageTypeCodeContentType_QR,
                                    PackageTypeCodeContentType_QS,
                                    PackageTypeCodeContentType_RD,
                                    PackageTypeCodeContentType_RG,
                                    PackageTypeCodeContentType_RJ,
                                    PackageTypeCodeContentType_RK,
                                    PackageTypeCodeContentType_RL,
                                    PackageTypeCodeContentType_RO,
                                    PackageTypeCodeContentType_RT,
                                    PackageTypeCodeContentType_RZ,
                                    PackageTypeCodeContentType_SA,
                                    PackageTypeCodeContentType_SB,
                                    PackageTypeCodeContentType_SC,
                                    PackageTypeCodeContentType_SD,
                                    PackageTypeCodeContentType_SE,
                                    PackageTypeCodeContentType_SH,
                                    PackageTypeCodeContentType_SI,
                                    PackageTypeCodeContentType_SK,
                                    PackageTypeCodeContentType_SL,
                                    PackageTypeCodeContentType_SM,
                                    PackageTypeCodeContentType_SO,
                                    PackageTypeCodeContentType_SP,
                                    PackageTypeCodeContentType_SS,
                                    PackageTypeCodeContentType_ST,
                                    PackageTypeCodeContentType_SU,
                                    PackageTypeCodeContentType_SV,
                                    PackageTypeCodeContentType_SW,
                                    PackageTypeCodeContentType_SY,
                                    PackageTypeCodeContentType_SZ,
                                    PackageTypeCodeContentType_T1,
                                    PackageTypeCodeContentType_TB,
                                    PackageTypeCodeContentType_TC,
                                    PackageTypeCodeContentType_TD,
                                    PackageTypeCodeContentType_TE,
                                    PackageTypeCodeContentType_TG,
                                    PackageTypeCodeContentType_TI,
                                    PackageTypeCodeContentType_TK,
                                    PackageTypeCodeContentType_TL,
                                    PackageTypeCodeContentType_TN,
                                    PackageTypeCodeContentType__TO,
                                    PackageTypeCodeContentType_TR,
                                    PackageTypeCodeContentType_TS,
                                    PackageTypeCodeContentType_TT,
                                    PackageTypeCodeContentType_TU,
                                    PackageTypeCodeContentType_TV,
                                    PackageTypeCodeContentType_TW,
                                    PackageTypeCodeContentType_TY,
                                    PackageTypeCodeContentType_TZ,
                                    PackageTypeCodeContentType_UC,
                                    PackageTypeCodeContentType_UN,
                                    PackageTypeCodeContentType_VA,
                                    PackageTypeCodeContentType_VG,
                                    PackageTypeCodeContentType_VI,
                                    PackageTypeCodeContentType_VK,
                                    PackageTypeCodeContentType_VL,
                                    PackageTypeCodeContentType_VN,
                                    PackageTypeCodeContentType_VO,
                                    PackageTypeCodeContentType_VP,
                                    PackageTypeCodeContentType_VQ,
                                    PackageTypeCodeContentType_VR,
                                    PackageTypeCodeContentType_VS,
                                    PackageTypeCodeContentType_VY,
                                    PackageTypeCodeContentType_WA,
                                    PackageTypeCodeContentType_WB,
                                    PackageTypeCodeContentType_WC,
                                    PackageTypeCodeContentType_WD,
                                    PackageTypeCodeContentType_WF,
                                    PackageTypeCodeContentType_WG,
                                    PackageTypeCodeContentType_WH,
                                    PackageTypeCodeContentType_WJ,
                                    PackageTypeCodeContentType_WK,
                                    PackageTypeCodeContentType_WL,
                                    PackageTypeCodeContentType_WM,
                                    PackageTypeCodeContentType_WN,
                                    PackageTypeCodeContentType_WP,
                                    PackageTypeCodeContentType_WQ,
                                    PackageTypeCodeContentType_WR,
                                    PackageTypeCodeContentType_WS,
                                    PackageTypeCodeContentType_WT,
                                    PackageTypeCodeContentType_WU,
                                    PackageTypeCodeContentType_WV,
                                    PackageTypeCodeContentType_WW,
                                    PackageTypeCodeContentType_WX,
                                    PackageTypeCodeContentType_WY,
                                    PackageTypeCodeContentType_WZ,
                                    PackageTypeCodeContentType_XA,
                                    PackageTypeCodeContentType_XB,
                                    PackageTypeCodeContentType_XC,
                                    PackageTypeCodeContentType_XD,
                                    PackageTypeCodeContentType_XF,
                                    PackageTypeCodeContentType_XG,
                                    PackageTypeCodeContentType_XH,
                                    PackageTypeCodeContentType_XJ,
                                    PackageTypeCodeContentType_XK,
                                    PackageTypeCodeContentType_YA,
                                    PackageTypeCodeContentType_YB,
                                    PackageTypeCodeContentType_YC,
                                    PackageTypeCodeContentType_YD,
                                    PackageTypeCodeContentType_YF,
                                    PackageTypeCodeContentType_YG,
                                    PackageTypeCodeContentType_YH,
                                    PackageTypeCodeContentType_YJ,
                                    PackageTypeCodeContentType_YK,
                                    PackageTypeCodeContentType_YL,
                                    PackageTypeCodeContentType_YM,
                                    PackageTypeCodeContentType_YN,
                                    PackageTypeCodeContentType_YP,
                                    PackageTypeCodeContentType_YQ,
                                    PackageTypeCodeContentType_YR,
                                    PackageTypeCodeContentType_YS,
                                    PackageTypeCodeContentType_YT,
                                    PackageTypeCodeContentType_YV,
                                    PackageTypeCodeContentType_YW,
                                    PackageTypeCodeContentType_YX,
                                    PackageTypeCodeContentType_YY,
                                    PackageTypeCodeContentType_YZ,
                                    PackageTypeCodeContentType_ZA,
                                    PackageTypeCodeContentType_ZB,
                                    PackageTypeCodeContentType_ZC,
                                    PackageTypeCodeContentType_ZD,
                                    PackageTypeCodeContentType_ZF,
                                    PackageTypeCodeContentType_ZG,
                                    PackageTypeCodeContentType_ZH,
                                    PackageTypeCodeContentType_ZJ,
                                    PackageTypeCodeContentType_ZK,
                                    PackageTypeCodeContentType_ZL,
                                    PackageTypeCodeContentType_ZM,
                                    PackageTypeCodeContentType_ZN,
                                    PackageTypeCodeContentType_ZP,
                                    PackageTypeCodeContentType_ZQ,
                                    PackageTypeCodeContentType_ZR,
                                    PackageTypeCodeContentType_ZS,
                                    PackageTypeCodeContentType_ZT,
                                    PackageTypeCodeContentType_ZU,
                                    PackageTypeCodeContentType_ZV,
                                    PackageTypeCodeContentType_ZW,
                                    PackageTypeCodeContentType_ZX,
                                    PackageTypeCodeContentType_ZY,
                                    PackageTypeCodeContentType_ZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackagingMarkingCode_D22A }
  TXMLPackagingMarkingCodeContentType = (PackagingMarkingCodeContentType__1,
                                         PackagingMarkingCodeContentType__2,
                                         PackagingMarkingCodeContentType__3,
                                         PackagingMarkingCodeContentType__4,
                                         PackagingMarkingCodeContentType__5,
                                         PackagingMarkingCodeContentType__6,
                                         PackagingMarkingCodeContentType__7,
                                         PackagingMarkingCodeContentType__8,
                                         PackagingMarkingCodeContentType__9,
                                         PackagingMarkingCodeContentType__10,
                                         PackagingMarkingCodeContentType__31,
                                         PackagingMarkingCodeContentType__32,
                                         PackagingMarkingCodeContentType__33,
                                         PackagingMarkingCodeContentType__34,
                                         PackagingMarkingCodeContentType__35,
                                         PackagingMarkingCodeContentType__36,
                                         PackagingMarkingCodeContentType__37,
                                         PackagingMarkingCodeContentType__38,
                                         PackagingMarkingCodeContentType__39,
                                         PackagingMarkingCodeContentType__40,
                                         PackagingMarkingCodeContentType__41,
                                         PackagingMarkingCodeContentType__42,
                                         PackagingMarkingCodeContentType__43,
                                         PackagingMarkingCodeContentType__44,
                                         PackagingMarkingCodeContentType__45,
                                         PackagingMarkingCodeContentType__46,
                                         PackagingMarkingCodeContentType__47,
                                         PackagingMarkingCodeContentType__48,
                                         PackagingMarkingCodeContentType__49,
                                         PackagingMarkingCodeContentType__53,
                                         PackagingMarkingCodeContentType__54,
                                         PackagingMarkingCodeContentType__55,
                                         PackagingMarkingCodeContentType__56,
                                         PackagingMarkingCodeContentType__57,
                                         PackagingMarkingCodeContentType__58,
                                         PackagingMarkingCodeContentType__59,
                                         PackagingMarkingCodeContentType__60,
                                         PackagingMarkingCodeContentType__61,
                                         PackagingMarkingCodeContentType__62,
                                         PackagingMarkingCodeContentType__63,
                                         PackagingMarkingCodeContentType__66,
                                         PackagingMarkingCodeContentType__68,
                                         PackagingMarkingCodeContentType__69,
                                         PackagingMarkingCodeContentType__70,
                                         PackagingMarkingCodeContentType__71,
                                         PackagingMarkingCodeContentType__72,
                                         PackagingMarkingCodeContentType__73,
                                         PackagingMarkingCodeContentType__74,
                                         PackagingMarkingCodeContentType__75,
                                         PackagingMarkingCodeContentType__76,
                                         PackagingMarkingCodeContentType__77,
                                         PackagingMarkingCodeContentType__80);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_D22A }
  TXMLPartyRoleCodeContentType = (PartyRoleCodeContentType_AA,
                                  PartyRoleCodeContentType_AB,
                                  PartyRoleCodeContentType_AE,
                                  PartyRoleCodeContentType_AF,
                                  PartyRoleCodeContentType_AG,
                                  PartyRoleCodeContentType_AH,
                                  PartyRoleCodeContentType_AI,
                                  PartyRoleCodeContentType_AJ,
                                  PartyRoleCodeContentType_AK,
                                  PartyRoleCodeContentType_AL,
                                  PartyRoleCodeContentType_AM,
                                  PartyRoleCodeContentType_AN,
                                  PartyRoleCodeContentType_AO,
                                  PartyRoleCodeContentType_AP,
                                  PartyRoleCodeContentType_AQ,
                                  PartyRoleCodeContentType_AR,
                                  PartyRoleCodeContentType__AS,
                                  PartyRoleCodeContentType_AT,
                                  PartyRoleCodeContentType_AU,
                                  PartyRoleCodeContentType_AV,
                                  PartyRoleCodeContentType_AW,
                                  PartyRoleCodeContentType_AX,
                                  PartyRoleCodeContentType_AY,
                                  PartyRoleCodeContentType_AZ,
                                  PartyRoleCodeContentType_B1,
                                  PartyRoleCodeContentType_B2,
                                  PartyRoleCodeContentType_BA,
                                  PartyRoleCodeContentType_BB,
                                  PartyRoleCodeContentType_BC,
                                  PartyRoleCodeContentType_BD,
                                  PartyRoleCodeContentType_BE,
                                  PartyRoleCodeContentType_BF,
                                  PartyRoleCodeContentType_BG,
                                  PartyRoleCodeContentType_BH,
                                  PartyRoleCodeContentType_BI,
                                  PartyRoleCodeContentType_BJ,
                                  PartyRoleCodeContentType_BK,
                                  PartyRoleCodeContentType_BL,
                                  PartyRoleCodeContentType_BM,
                                  PartyRoleCodeContentType_BN,
                                  PartyRoleCodeContentType_BO,
                                  PartyRoleCodeContentType_BP,
                                  PartyRoleCodeContentType_BQ,
                                  PartyRoleCodeContentType_BS,
                                  PartyRoleCodeContentType_BT,
                                  PartyRoleCodeContentType_BU,
                                  PartyRoleCodeContentType_BV,
                                  PartyRoleCodeContentType_BW,
                                  PartyRoleCodeContentType_BX,
                                  PartyRoleCodeContentType_BY,
                                  PartyRoleCodeContentType_BZ,
                                  PartyRoleCodeContentType_C1,
                                  PartyRoleCodeContentType_C2,
                                  PartyRoleCodeContentType_CA,
                                  PartyRoleCodeContentType_CB,
                                  PartyRoleCodeContentType_CC,
                                  PartyRoleCodeContentType_CD,
                                  PartyRoleCodeContentType_CE,
                                  PartyRoleCodeContentType_CF,
                                  PartyRoleCodeContentType_CG,
                                  PartyRoleCodeContentType_CH,
                                  PartyRoleCodeContentType_CI,
                                  PartyRoleCodeContentType_CJ,
                                  PartyRoleCodeContentType_CK,
                                  PartyRoleCodeContentType_CL,
                                  PartyRoleCodeContentType_CM,
                                  PartyRoleCodeContentType_CN,
                                  PartyRoleCodeContentType_CNX,
                                  PartyRoleCodeContentType_CNY,
                                  PartyRoleCodeContentType_CNZ,
                                  PartyRoleCodeContentType_CO,
                                  PartyRoleCodeContentType_COA,
                                  PartyRoleCodeContentType_COB,
                                  PartyRoleCodeContentType_COC,
                                  PartyRoleCodeContentType_COD,
                                  PartyRoleCodeContentType_COE,
                                  PartyRoleCodeContentType_COF,
                                  PartyRoleCodeContentType_COG,
                                  PartyRoleCodeContentType_COH,
                                  PartyRoleCodeContentType_COI,
                                  PartyRoleCodeContentType_COJ,
                                  PartyRoleCodeContentType_COK,
                                  PartyRoleCodeContentType_COL,
                                  PartyRoleCodeContentType_COM,
                                  PartyRoleCodeContentType_CON,
                                  PartyRoleCodeContentType_COO,
                                  PartyRoleCodeContentType_COP,
                                  PartyRoleCodeContentType_COQ,
                                  PartyRoleCodeContentType_COR,
                                  PartyRoleCodeContentType_COS,
                                  PartyRoleCodeContentType_COT,
                                  PartyRoleCodeContentType_COU,
                                  PartyRoleCodeContentType_COV,
                                  PartyRoleCodeContentType_COW,
                                  PartyRoleCodeContentType_COX,
                                  PartyRoleCodeContentType_COY,
                                  PartyRoleCodeContentType_COZ,
                                  PartyRoleCodeContentType_CP,
                                  PartyRoleCodeContentType_CPA,
                                  PartyRoleCodeContentType_CPB,
                                  PartyRoleCodeContentType_CPC,
                                  PartyRoleCodeContentType_CPD,
                                  PartyRoleCodeContentType_CPE,
                                  PartyRoleCodeContentType_CPF,
                                  PartyRoleCodeContentType_CPG,
                                  PartyRoleCodeContentType_CPH,
                                  PartyRoleCodeContentType_CPI,
                                  PartyRoleCodeContentType_CPJ,
                                  PartyRoleCodeContentType_CPK,
                                  PartyRoleCodeContentType_CPL,
                                  PartyRoleCodeContentType_CPM,
                                  PartyRoleCodeContentType_CPN,
                                  PartyRoleCodeContentType_CPO,
                                  PartyRoleCodeContentType_CQ,
                                  PartyRoleCodeContentType_CR,
                                  PartyRoleCodeContentType_CS,
                                  PartyRoleCodeContentType_CT,
                                  PartyRoleCodeContentType_CU,
                                  PartyRoleCodeContentType_CV,
                                  PartyRoleCodeContentType_CW,
                                  PartyRoleCodeContentType_CX,
                                  PartyRoleCodeContentType_CY,
                                  PartyRoleCodeContentType_CZ,
                                  PartyRoleCodeContentType_DA,
                                  PartyRoleCodeContentType_DB,
                                  PartyRoleCodeContentType_DC,
                                  PartyRoleCodeContentType_DCP,
                                  PartyRoleCodeContentType_DCQ,
                                  PartyRoleCodeContentType_DCR,
                                  PartyRoleCodeContentType_DCS,
                                  PartyRoleCodeContentType_DCT,
                                  PartyRoleCodeContentType_DCU,
                                  PartyRoleCodeContentType_DCV,
                                  PartyRoleCodeContentType_DCW,
                                  PartyRoleCodeContentType_DCX,
                                  PartyRoleCodeContentType_DCY,
                                  PartyRoleCodeContentType_DCZ,
                                  PartyRoleCodeContentType_DD,
                                  PartyRoleCodeContentType_DDA,
                                  PartyRoleCodeContentType_DDB,
                                  PartyRoleCodeContentType_DDC,
                                  PartyRoleCodeContentType_DDD,
                                  PartyRoleCodeContentType_DDE,
                                  PartyRoleCodeContentType_DDF,
                                  PartyRoleCodeContentType_DDG,
                                  PartyRoleCodeContentType_DDH,
                                  PartyRoleCodeContentType_DDI,
                                  PartyRoleCodeContentType_DDJ,
                                  PartyRoleCodeContentType_DDK,
                                  PartyRoleCodeContentType_DDL,
                                  PartyRoleCodeContentType_DDM,
                                  PartyRoleCodeContentType_DDN,
                                  PartyRoleCodeContentType_DDO,
                                  PartyRoleCodeContentType_DDP,
                                  PartyRoleCodeContentType_DDQ,
                                  PartyRoleCodeContentType_DDR,
                                  PartyRoleCodeContentType_DDS,
                                  PartyRoleCodeContentType_DDT,
                                  PartyRoleCodeContentType_DDU,
                                  PartyRoleCodeContentType_DDV,
                                  PartyRoleCodeContentType_DDW,
                                  PartyRoleCodeContentType_DDX,
                                  PartyRoleCodeContentType_DDY,
                                  PartyRoleCodeContentType_DDZ,
                                  PartyRoleCodeContentType_DE,
                                  PartyRoleCodeContentType_DEA,
                                  PartyRoleCodeContentType_DEB,
                                  PartyRoleCodeContentType_DEC,
                                  PartyRoleCodeContentType_DED,
                                  PartyRoleCodeContentType_DEE,
                                  PartyRoleCodeContentType_DEF,
                                  PartyRoleCodeContentType_DEG,
                                  PartyRoleCodeContentType_DEH,
                                  PartyRoleCodeContentType_DEI,
                                  PartyRoleCodeContentType_DEJ,
                                  PartyRoleCodeContentType_DEK,
                                  PartyRoleCodeContentType_DEL,
                                  PartyRoleCodeContentType_DEM,
                                  PartyRoleCodeContentType_DEN,
                                  PartyRoleCodeContentType_DEO,
                                  PartyRoleCodeContentType_DEP,
                                  PartyRoleCodeContentType_DEQ,
                                  PartyRoleCodeContentType_DER,
                                  PartyRoleCodeContentType_DES,
                                  PartyRoleCodeContentType_DET,
                                  PartyRoleCodeContentType_DEU,
                                  PartyRoleCodeContentType_DEV,
                                  PartyRoleCodeContentType_DEW,
                                  PartyRoleCodeContentType_DEX,
                                  PartyRoleCodeContentType_DEY,
                                  PartyRoleCodeContentType_DEZ,
                                  PartyRoleCodeContentType_DF,
                                  PartyRoleCodeContentType_DFA,
                                  PartyRoleCodeContentType_DFB,
                                  PartyRoleCodeContentType_DFC,
                                  PartyRoleCodeContentType_DFD,
                                  PartyRoleCodeContentType_DFE,
                                  PartyRoleCodeContentType_DFF,
                                  PartyRoleCodeContentType_DFG,
                                  PartyRoleCodeContentType_DFH,
                                  PartyRoleCodeContentType_DFI,
                                  PartyRoleCodeContentType_DFJ,
                                  PartyRoleCodeContentType_DFK,
                                  PartyRoleCodeContentType_DFL,
                                  PartyRoleCodeContentType_DFM,
                                  PartyRoleCodeContentType_DFN,
                                  PartyRoleCodeContentType_DFO,
                                  PartyRoleCodeContentType_DFP,
                                  PartyRoleCodeContentType_DFQ,
                                  PartyRoleCodeContentType_DFR,
                                  PartyRoleCodeContentType_DFS,
                                  PartyRoleCodeContentType_DFT,
                                  PartyRoleCodeContentType_DFU,
                                  PartyRoleCodeContentType_DFV,
                                  PartyRoleCodeContentType_DFW,
                                  PartyRoleCodeContentType_DFX,
                                  PartyRoleCodeContentType_DFY,
                                  PartyRoleCodeContentType_DFZ,
                                  PartyRoleCodeContentType_DG,
                                  PartyRoleCodeContentType_DGA,
                                  PartyRoleCodeContentType_DGB,
                                  PartyRoleCodeContentType_DGC,
                                  PartyRoleCodeContentType_DGD,
                                  PartyRoleCodeContentType_DGE,
                                  PartyRoleCodeContentType_DGF,
                                  PartyRoleCodeContentType_DGG,
                                  PartyRoleCodeContentType_DGH,
                                  PartyRoleCodeContentType_DGI,
                                  PartyRoleCodeContentType_DGJ,
                                  PartyRoleCodeContentType_DGK,
                                  PartyRoleCodeContentType_DGL,
                                  PartyRoleCodeContentType_DGM,
                                  PartyRoleCodeContentType_DGN,
                                  PartyRoleCodeContentType_DGO,
                                  PartyRoleCodeContentType_DGP,
                                  PartyRoleCodeContentType_DGQ,
                                  PartyRoleCodeContentType_DGR,
                                  PartyRoleCodeContentType_DGS,
                                  PartyRoleCodeContentType_DGT,
                                  PartyRoleCodeContentType_DGU,
                                  PartyRoleCodeContentType_DGV,
                                  PartyRoleCodeContentType_DGW,
                                  PartyRoleCodeContentType_DH,
                                  PartyRoleCodeContentType_DI,
                                  PartyRoleCodeContentType_DJ,
                                  PartyRoleCodeContentType_DK,
                                  PartyRoleCodeContentType_DL,
                                  PartyRoleCodeContentType_DM,
                                  PartyRoleCodeContentType_DN,
                                  PartyRoleCodeContentType__DO,
                                  PartyRoleCodeContentType_DP,
                                  PartyRoleCodeContentType_DQ,
                                  PartyRoleCodeContentType_DR,
                                  PartyRoleCodeContentType_DS,
                                  PartyRoleCodeContentType_DT,
                                  PartyRoleCodeContentType_DU,
                                  PartyRoleCodeContentType_DV,
                                  PartyRoleCodeContentType_DW,
                                  PartyRoleCodeContentType_DX,
                                  PartyRoleCodeContentType_DY,
                                  PartyRoleCodeContentType_DZ,
                                  PartyRoleCodeContentType_EA,
                                  PartyRoleCodeContentType_EB,
                                  PartyRoleCodeContentType_EC,
                                  PartyRoleCodeContentType_ED,
                                  PartyRoleCodeContentType_EE,
                                  PartyRoleCodeContentType_EF,
                                  PartyRoleCodeContentType_EG,
                                  PartyRoleCodeContentType_EH,
                                  PartyRoleCodeContentType_EI,
                                  PartyRoleCodeContentType_EJ,
                                  PartyRoleCodeContentType_EK,
                                  PartyRoleCodeContentType_EL,
                                  PartyRoleCodeContentType_EM,
                                  PartyRoleCodeContentType_EN,
                                  PartyRoleCodeContentType_EO,
                                  PartyRoleCodeContentType_EP,
                                  PartyRoleCodeContentType_EQ,
                                  PartyRoleCodeContentType_ER,
                                  PartyRoleCodeContentType_ES,
                                  PartyRoleCodeContentType_ET,
                                  PartyRoleCodeContentType_EU,
                                  PartyRoleCodeContentType_EV,
                                  PartyRoleCodeContentType_EW,
                                  PartyRoleCodeContentType_EX,
                                  PartyRoleCodeContentType_EY,
                                  PartyRoleCodeContentType_EZ,
                                  PartyRoleCodeContentType_FA,
                                  PartyRoleCodeContentType_FB,
                                  PartyRoleCodeContentType_FC,
                                  PartyRoleCodeContentType_FD,
                                  PartyRoleCodeContentType_FE,
                                  PartyRoleCodeContentType_FF,
                                  PartyRoleCodeContentType_FG,
                                  PartyRoleCodeContentType_FH,
                                  PartyRoleCodeContentType_FI,
                                  PartyRoleCodeContentType_FJ,
                                  PartyRoleCodeContentType_FK,
                                  PartyRoleCodeContentType_FL,
                                  PartyRoleCodeContentType_FM,
                                  PartyRoleCodeContentType_FN,
                                  PartyRoleCodeContentType_FO,
                                  PartyRoleCodeContentType_FP,
                                  PartyRoleCodeContentType_FQ,
                                  PartyRoleCodeContentType_FR,
                                  PartyRoleCodeContentType_FS,
                                  PartyRoleCodeContentType_FT,
                                  PartyRoleCodeContentType_FU,
                                  PartyRoleCodeContentType_FV,
                                  PartyRoleCodeContentType_FW,
                                  PartyRoleCodeContentType_FX,
                                  PartyRoleCodeContentType_FY,
                                  PartyRoleCodeContentType_FZ,
                                  PartyRoleCodeContentType_GA,
                                  PartyRoleCodeContentType_GB,
                                  PartyRoleCodeContentType_GC,
                                  PartyRoleCodeContentType_GD,
                                  PartyRoleCodeContentType_GE,
                                  PartyRoleCodeContentType_GF,
                                  PartyRoleCodeContentType_GH,
                                  PartyRoleCodeContentType_GI,
                                  PartyRoleCodeContentType_GJ,
                                  PartyRoleCodeContentType_GK,
                                  PartyRoleCodeContentType_GL,
                                  PartyRoleCodeContentType_GM,
                                  PartyRoleCodeContentType_GN,
                                  PartyRoleCodeContentType_GO,
                                  PartyRoleCodeContentType_GP,
                                  PartyRoleCodeContentType_GQ,
                                  PartyRoleCodeContentType_GR,
                                  PartyRoleCodeContentType_GS,
                                  PartyRoleCodeContentType_GT,
                                  PartyRoleCodeContentType_GU,
                                  PartyRoleCodeContentType_GV,
                                  PartyRoleCodeContentType_GW,
                                  PartyRoleCodeContentType_GX,
                                  PartyRoleCodeContentType_GY,
                                  PartyRoleCodeContentType_GZ,
                                  PartyRoleCodeContentType_HA,
                                  PartyRoleCodeContentType_HB,
                                  PartyRoleCodeContentType_HC,
                                  PartyRoleCodeContentType_HD,
                                  PartyRoleCodeContentType_HE,
                                  PartyRoleCodeContentType_HF,
                                  PartyRoleCodeContentType_HG,
                                  PartyRoleCodeContentType_HH,
                                  PartyRoleCodeContentType_HI,
                                  PartyRoleCodeContentType_HJ,
                                  PartyRoleCodeContentType_HK,
                                  PartyRoleCodeContentType_HL,
                                  PartyRoleCodeContentType_HM,
                                  PartyRoleCodeContentType_HN,
                                  PartyRoleCodeContentType_HO,
                                  PartyRoleCodeContentType_HP,
                                  PartyRoleCodeContentType_HQ,
                                  PartyRoleCodeContentType_HR,
                                  PartyRoleCodeContentType_HS,
                                  PartyRoleCodeContentType_HT,
                                  PartyRoleCodeContentType_HU,
                                  PartyRoleCodeContentType_HV,
                                  PartyRoleCodeContentType_HW,
                                  PartyRoleCodeContentType_HX,
                                  PartyRoleCodeContentType_HY,
                                  PartyRoleCodeContentType_HZ,
                                  PartyRoleCodeContentType_I1,
                                  PartyRoleCodeContentType_I2,
                                  PartyRoleCodeContentType_IB,
                                  PartyRoleCodeContentType_IC,
                                  PartyRoleCodeContentType_ID,
                                  PartyRoleCodeContentType_IE,
                                  PartyRoleCodeContentType__IF,
                                  PartyRoleCodeContentType_IG,
                                  PartyRoleCodeContentType_IH,
                                  PartyRoleCodeContentType_II,
                                  PartyRoleCodeContentType_IJ,
                                  PartyRoleCodeContentType_IL,
                                  PartyRoleCodeContentType_IM,
                                  PartyRoleCodeContentType__IN,
                                  PartyRoleCodeContentType_IO,
                                  PartyRoleCodeContentType_IP,
                                  PartyRoleCodeContentType_IQ,
                                  PartyRoleCodeContentType_IR,
                                  PartyRoleCodeContentType__IS,
                                  PartyRoleCodeContentType_IT,
                                  PartyRoleCodeContentType_IU,
                                  PartyRoleCodeContentType_IV,
                                  PartyRoleCodeContentType_IW,
                                  PartyRoleCodeContentType_IX,
                                  PartyRoleCodeContentType_IY,
                                  PartyRoleCodeContentType_IZ,
                                  PartyRoleCodeContentType_JA,
                                  PartyRoleCodeContentType_JB,
                                  PartyRoleCodeContentType_JC,
                                  PartyRoleCodeContentType_JD,
                                  PartyRoleCodeContentType_JE,
                                  PartyRoleCodeContentType_JF,
                                  PartyRoleCodeContentType_JG,
                                  PartyRoleCodeContentType_JH,
                                  PartyRoleCodeContentType_LA,
                                  PartyRoleCodeContentType_LB,
                                  PartyRoleCodeContentType_LC,
                                  PartyRoleCodeContentType_LD,
                                  PartyRoleCodeContentType_LE,
                                  PartyRoleCodeContentType_LF,
                                  PartyRoleCodeContentType_LG,
                                  PartyRoleCodeContentType_LH,
                                  PartyRoleCodeContentType_LI,
                                  PartyRoleCodeContentType_LJ,
                                  PartyRoleCodeContentType_LK,
                                  PartyRoleCodeContentType_LL,
                                  PartyRoleCodeContentType_LM,
                                  PartyRoleCodeContentType_LN,
                                  PartyRoleCodeContentType_LO,
                                  PartyRoleCodeContentType_LP,
                                  PartyRoleCodeContentType_LQ,
                                  PartyRoleCodeContentType_LR,
                                  PartyRoleCodeContentType_LS,
                                  PartyRoleCodeContentType_LT,
                                  PartyRoleCodeContentType_LU,
                                  PartyRoleCodeContentType_LV,
                                  PartyRoleCodeContentType_MA,
                                  PartyRoleCodeContentType_MAD,
                                  PartyRoleCodeContentType_MDR,
                                  PartyRoleCodeContentType_MF,
                                  PartyRoleCodeContentType_MG,
                                  PartyRoleCodeContentType_MI,
                                  PartyRoleCodeContentType_MOP,
                                  PartyRoleCodeContentType_MP,
                                  PartyRoleCodeContentType_MR,
                                  PartyRoleCodeContentType_MS,
                                  PartyRoleCodeContentType_MT,
                                  PartyRoleCodeContentType_N2,
                                  PartyRoleCodeContentType_NI,
                                  PartyRoleCodeContentType_OA,
                                  PartyRoleCodeContentType_OB,
                                  PartyRoleCodeContentType_OC,
                                  PartyRoleCodeContentType_OD,
                                  PartyRoleCodeContentType_OE,
                                  PartyRoleCodeContentType__OF,
                                  PartyRoleCodeContentType_OG,
                                  PartyRoleCodeContentType_OH,
                                  PartyRoleCodeContentType_OI,
                                  PartyRoleCodeContentType_OJ,
                                  PartyRoleCodeContentType_OK,
                                  PartyRoleCodeContentType_OL,
                                  PartyRoleCodeContentType_OM,
                                  PartyRoleCodeContentType_ON,
                                  PartyRoleCodeContentType_OO,
                                  PartyRoleCodeContentType_OP,
                                  PartyRoleCodeContentType_OQ,
                                  PartyRoleCodeContentType__OR,
                                  PartyRoleCodeContentType_OS,
                                  PartyRoleCodeContentType_OT,
                                  PartyRoleCodeContentType_OU,
                                  PartyRoleCodeContentType_OV,
                                  PartyRoleCodeContentType_OW,
                                  PartyRoleCodeContentType_OX,
                                  PartyRoleCodeContentType_OY,
                                  PartyRoleCodeContentType_OZ,
                                  PartyRoleCodeContentType_P1,
                                  PartyRoleCodeContentType_P2,
                                  PartyRoleCodeContentType_P3,
                                  PartyRoleCodeContentType_P4,
                                  PartyRoleCodeContentType_PA,
                                  PartyRoleCodeContentType_PAD,
                                  PartyRoleCodeContentType_PB,
                                  PartyRoleCodeContentType_PC,
                                  PartyRoleCodeContentType_PD,
                                  PartyRoleCodeContentType_PE,
                                  PartyRoleCodeContentType_PF,
                                  PartyRoleCodeContentType_PG,
                                  PartyRoleCodeContentType_PH,
                                  PartyRoleCodeContentType_PI,
                                  PartyRoleCodeContentType_PJ,
                                  PartyRoleCodeContentType_PK,
                                  PartyRoleCodeContentType_PM,
                                  PartyRoleCodeContentType_PN,
                                  PartyRoleCodeContentType_PO,
                                  PartyRoleCodeContentType_POA,
                                  PartyRoleCodeContentType_PQ,
                                  PartyRoleCodeContentType_PR,
                                  PartyRoleCodeContentType_PS,
                                  PartyRoleCodeContentType_PT,
                                  PartyRoleCodeContentType_PW,
                                  PartyRoleCodeContentType_PX,
                                  PartyRoleCodeContentType_PY,
                                  PartyRoleCodeContentType_PZ,
                                  PartyRoleCodeContentType_RA,
                                  PartyRoleCodeContentType_RB,
                                  PartyRoleCodeContentType_RCA,
                                  PartyRoleCodeContentType_RCR,
                                  PartyRoleCodeContentType_RE,
                                  PartyRoleCodeContentType_RF,
                                  PartyRoleCodeContentType_RH,
                                  PartyRoleCodeContentType_RI,
                                  PartyRoleCodeContentType_RL,
                                  PartyRoleCodeContentType_RM,
                                  PartyRoleCodeContentType_RP,
                                  PartyRoleCodeContentType_RS,
                                  PartyRoleCodeContentType_RV,
                                  PartyRoleCodeContentType_RW,
                                  PartyRoleCodeContentType_SB,
                                  PartyRoleCodeContentType_SE,
                                  PartyRoleCodeContentType_SF,
                                  PartyRoleCodeContentType_SG,
                                  PartyRoleCodeContentType_SI,
                                  PartyRoleCodeContentType_SN,
                                  PartyRoleCodeContentType_SO,
                                  PartyRoleCodeContentType_SPC,
                                  PartyRoleCodeContentType_SR,
                                  PartyRoleCodeContentType_SS,
                                  PartyRoleCodeContentType_ST,
                                  PartyRoleCodeContentType_SU,
                                  PartyRoleCodeContentType_SX,
                                  PartyRoleCodeContentType_SY,
                                  PartyRoleCodeContentType_SZ,
                                  PartyRoleCodeContentType_TA,
                                  PartyRoleCodeContentType_TB,
                                  PartyRoleCodeContentType_TC,
                                  PartyRoleCodeContentType_TCP,
                                  PartyRoleCodeContentType_TCR,
                                  PartyRoleCodeContentType_TD,
                                  PartyRoleCodeContentType_TE,
                                  PartyRoleCodeContentType_TF,
                                  PartyRoleCodeContentType_TG,
                                  PartyRoleCodeContentType_TH,
                                  PartyRoleCodeContentType_TI,
                                  PartyRoleCodeContentType_TJ,
                                  PartyRoleCodeContentType_TK,
                                  PartyRoleCodeContentType_TL,
                                  PartyRoleCodeContentType_TM,
                                  PartyRoleCodeContentType_TN,
                                  PartyRoleCodeContentType__TO,
                                  PartyRoleCodeContentType_TP,
                                  PartyRoleCodeContentType_TQ,
                                  PartyRoleCodeContentType_TR,
                                  PartyRoleCodeContentType_TS,
                                  PartyRoleCodeContentType_TT,
                                  PartyRoleCodeContentType_TU,
                                  PartyRoleCodeContentType_TV,
                                  PartyRoleCodeContentType_TW,
                                  PartyRoleCodeContentType_TX,
                                  PartyRoleCodeContentType_TY,
                                  PartyRoleCodeContentType_TZ,
                                  PartyRoleCodeContentType_UA,
                                  PartyRoleCodeContentType_UB,
                                  PartyRoleCodeContentType_UC,
                                  PartyRoleCodeContentType_UD,
                                  PartyRoleCodeContentType_UE,
                                  PartyRoleCodeContentType_UF,
                                  PartyRoleCodeContentType_UG,
                                  PartyRoleCodeContentType_UH,
                                  PartyRoleCodeContentType_UHP,
                                  PartyRoleCodeContentType_UI,
                                  PartyRoleCodeContentType_UJ,
                                  PartyRoleCodeContentType_UK,
                                  PartyRoleCodeContentType_UL,
                                  PartyRoleCodeContentType_UM,
                                  PartyRoleCodeContentType_UN,
                                  PartyRoleCodeContentType_UO,
                                  PartyRoleCodeContentType_UP,
                                  PartyRoleCodeContentType_UQ,
                                  PartyRoleCodeContentType_UR,
                                  PartyRoleCodeContentType_US,
                                  PartyRoleCodeContentType_UT,
                                  PartyRoleCodeContentType_UU,
                                  PartyRoleCodeContentType_UV,
                                  PartyRoleCodeContentType_UW,
                                  PartyRoleCodeContentType_UX,
                                  PartyRoleCodeContentType_UY,
                                  PartyRoleCodeContentType_UZ,
                                  PartyRoleCodeContentType_VA,
                                  PartyRoleCodeContentType_VB,
                                  PartyRoleCodeContentType_VC,
                                  PartyRoleCodeContentType_VE,
                                  PartyRoleCodeContentType_VF,
                                  PartyRoleCodeContentType_VG,
                                  PartyRoleCodeContentType_VH,
                                  PartyRoleCodeContentType_VI,
                                  PartyRoleCodeContentType_VJ,
                                  PartyRoleCodeContentType_VK,
                                  PartyRoleCodeContentType_VL,
                                  PartyRoleCodeContentType_VM,
                                  PartyRoleCodeContentType_VN,
                                  PartyRoleCodeContentType_VO,
                                  PartyRoleCodeContentType_VP,
                                  PartyRoleCodeContentType_VQ,
                                  PartyRoleCodeContentType_VR,
                                  PartyRoleCodeContentType_VS,
                                  PartyRoleCodeContentType_VT,
                                  PartyRoleCodeContentType_VU,
                                  PartyRoleCodeContentType_VV,
                                  PartyRoleCodeContentType_VW,
                                  PartyRoleCodeContentType_VX,
                                  PartyRoleCodeContentType_VY,
                                  PartyRoleCodeContentType_VZ,
                                  PartyRoleCodeContentType_WA,
                                  PartyRoleCodeContentType_WB,
                                  PartyRoleCodeContentType_WC,
                                  PartyRoleCodeContentType_WD,
                                  PartyRoleCodeContentType_WE,
                                  PartyRoleCodeContentType_WF,
                                  PartyRoleCodeContentType_WG,
                                  PartyRoleCodeContentType_WH,
                                  PartyRoleCodeContentType_WI,
                                  PartyRoleCodeContentType_WJ,
                                  PartyRoleCodeContentType_WK,
                                  PartyRoleCodeContentType_WL,
                                  PartyRoleCodeContentType_WM,
                                  PartyRoleCodeContentType_WN,
                                  PartyRoleCodeContentType_WO,
                                  PartyRoleCodeContentType_WP,
                                  PartyRoleCodeContentType_WPA,
                                  PartyRoleCodeContentType_WQ,
                                  PartyRoleCodeContentType_WR,
                                  PartyRoleCodeContentType_WS,
                                  PartyRoleCodeContentType_WT,
                                  PartyRoleCodeContentType_WU,
                                  PartyRoleCodeContentType_WV,
                                  PartyRoleCodeContentType_WW,
                                  PartyRoleCodeContentType_WX,
                                  PartyRoleCodeContentType_WY,
                                  PartyRoleCodeContentType_WZ,
                                  PartyRoleCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_ChargePaying_D22A }
  TXMLPartyRoleCodeChargePayingContentType = (PartyRoleCodeChargePayingContentType_AB,
                                              PartyRoleCodeChargePayingContentType_AE,
                                              PartyRoleCodeChargePayingContentType_AF,
                                              PartyRoleCodeChargePayingContentType_AH,
                                              PartyRoleCodeChargePayingContentType_AQ,
                                              PartyRoleCodeChargePayingContentType_AR,
                                              PartyRoleCodeChargePayingContentType_AT,
                                              PartyRoleCodeChargePayingContentType_AU,
                                              PartyRoleCodeChargePayingContentType_CA,
                                              PartyRoleCodeChargePayingContentType_CG,
                                              PartyRoleCodeChargePayingContentType_CN,
                                              PartyRoleCodeChargePayingContentType_CPD,
                                              PartyRoleCodeChargePayingContentType_CX,
                                              PartyRoleCodeChargePayingContentType_CZ,
                                              PartyRoleCodeChargePayingContentType_DGB,
                                              PartyRoleCodeChargePayingContentType_EX,
                                              PartyRoleCodeChargePayingContentType_FW,
                                              PartyRoleCodeChargePayingContentType_GS,
                                              PartyRoleCodeChargePayingContentType_IM,
                                              PartyRoleCodeChargePayingContentType_IV,
                                              PartyRoleCodeChargePayingContentType_PE);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentGuaranteeMeansCode_D22A }
  TXMLPaymentGuaranteeMeansCodeContentType = (PaymentGuaranteeMeansCodeContentType__1,
                                              PaymentGuaranteeMeansCodeContentType__10,
                                              PaymentGuaranteeMeansCodeContentType__11,
                                              PaymentGuaranteeMeansCodeContentType__12,
                                              PaymentGuaranteeMeansCodeContentType__13,
                                              PaymentGuaranteeMeansCodeContentType__14,
                                              PaymentGuaranteeMeansCodeContentType__20,
                                              PaymentGuaranteeMeansCodeContentType__21,
                                              PaymentGuaranteeMeansCodeContentType__23,
                                              PaymentGuaranteeMeansCodeContentType__24,
                                              PaymentGuaranteeMeansCodeContentType__45,
                                              PaymentGuaranteeMeansCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansChannelCode_D22A }
  TXMLPaymentMeansChannelCodeContentType = (PaymentMeansChannelCodeContentType__1,
                                            PaymentMeansChannelCodeContentType__2,
                                            PaymentMeansChannelCodeContentType__3,
                                            PaymentMeansChannelCodeContentType__4,
                                            PaymentMeansChannelCodeContentType__5,
                                            PaymentMeansChannelCodeContentType__6,
                                            PaymentMeansChannelCodeContentType__7,
                                            PaymentMeansChannelCodeContentType__8,
                                            PaymentMeansChannelCodeContentType__9,
                                            PaymentMeansChannelCodeContentType__10,
                                            PaymentMeansChannelCodeContentType__11,
                                            PaymentMeansChannelCodeContentType__12,
                                            PaymentMeansChannelCodeContentType__13,
                                            PaymentMeansChannelCodeContentType__14,
                                            PaymentMeansChannelCodeContentType__15,
                                            PaymentMeansChannelCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansCode_D22A }
  TXMLPaymentMeansCodeContentType = (PaymentMeansCodeContentType__1,
                                     PaymentMeansCodeContentType__2,
                                     PaymentMeansCodeContentType__3,
                                     PaymentMeansCodeContentType__4,
                                     PaymentMeansCodeContentType__5,
                                     PaymentMeansCodeContentType__6,
                                     PaymentMeansCodeContentType__7,
                                     PaymentMeansCodeContentType__8,
                                     PaymentMeansCodeContentType__9,
                                     PaymentMeansCodeContentType__10,
                                     PaymentMeansCodeContentType__11,
                                     PaymentMeansCodeContentType__12,
                                     PaymentMeansCodeContentType__13,
                                     PaymentMeansCodeContentType__14,
                                     PaymentMeansCodeContentType__15,
                                     PaymentMeansCodeContentType__16,
                                     PaymentMeansCodeContentType__17,
                                     PaymentMeansCodeContentType__18,
                                     PaymentMeansCodeContentType__19,
                                     PaymentMeansCodeContentType__20,
                                     PaymentMeansCodeContentType__21,
                                     PaymentMeansCodeContentType__22,
                                     PaymentMeansCodeContentType__23,
                                     PaymentMeansCodeContentType__24,
                                     PaymentMeansCodeContentType__25,
                                     PaymentMeansCodeContentType__26,
                                     PaymentMeansCodeContentType__27,
                                     PaymentMeansCodeContentType__28,
                                     PaymentMeansCodeContentType__29,
                                     PaymentMeansCodeContentType__30,
                                     PaymentMeansCodeContentType__31,
                                     PaymentMeansCodeContentType__32,
                                     PaymentMeansCodeContentType__33,
                                     PaymentMeansCodeContentType__34,
                                     PaymentMeansCodeContentType__35,
                                     PaymentMeansCodeContentType__36,
                                     PaymentMeansCodeContentType__37,
                                     PaymentMeansCodeContentType__38,
                                     PaymentMeansCodeContentType__39,
                                     PaymentMeansCodeContentType__40,
                                     PaymentMeansCodeContentType__41,
                                     PaymentMeansCodeContentType__42,
                                     PaymentMeansCodeContentType__43,
                                     PaymentMeansCodeContentType__44,
                                     PaymentMeansCodeContentType__45,
                                     PaymentMeansCodeContentType__46,
                                     PaymentMeansCodeContentType__47,
                                     PaymentMeansCodeContentType__48,
                                     PaymentMeansCodeContentType__49,
                                     PaymentMeansCodeContentType__50,
                                     PaymentMeansCodeContentType__51,
                                     PaymentMeansCodeContentType__52,
                                     PaymentMeansCodeContentType__53,
                                     PaymentMeansCodeContentType__54,
                                     PaymentMeansCodeContentType__55,
                                     PaymentMeansCodeContentType__56,
                                     PaymentMeansCodeContentType__57,
                                     PaymentMeansCodeContentType__58,
                                     PaymentMeansCodeContentType__59,
                                     PaymentMeansCodeContentType__60,
                                     PaymentMeansCodeContentType__61,
                                     PaymentMeansCodeContentType__62,
                                     PaymentMeansCodeContentType__63,
                                     PaymentMeansCodeContentType__64,
                                     PaymentMeansCodeContentType__65,
                                     PaymentMeansCodeContentType__66,
                                     PaymentMeansCodeContentType__67,
                                     PaymentMeansCodeContentType__68,
                                     PaymentMeansCodeContentType__69,
                                     PaymentMeansCodeContentType__70,
                                     PaymentMeansCodeContentType__74,
                                     PaymentMeansCodeContentType__75,
                                     PaymentMeansCodeContentType__76,
                                     PaymentMeansCodeContentType__77,
                                     PaymentMeansCodeContentType__78,
                                     PaymentMeansCodeContentType__91,
                                     PaymentMeansCodeContentType__92,
                                     PaymentMeansCodeContentType__93,
                                     PaymentMeansCodeContentType__94,
                                     PaymentMeansCodeContentType__95,
                                     PaymentMeansCodeContentType__96,
                                     PaymentMeansCodeContentType__97,
                                     PaymentMeansCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentTermsTypeCode_D22A }
  TXMLPaymentTermsTypeCodeContentType = (PaymentTermsTypeCodeContentType__1,
                                         PaymentTermsTypeCodeContentType__2,
                                         PaymentTermsTypeCodeContentType__3,
                                         PaymentTermsTypeCodeContentType__4,
                                         PaymentTermsTypeCodeContentType__5,
                                         PaymentTermsTypeCodeContentType__6,
                                         PaymentTermsTypeCodeContentType__7,
                                         PaymentTermsTypeCodeContentType__8,
                                         PaymentTermsTypeCodeContentType__9,
                                         PaymentTermsTypeCodeContentType__10,
                                         PaymentTermsTypeCodeContentType__11,
                                         PaymentTermsTypeCodeContentType__12,
                                         PaymentTermsTypeCodeContentType__13,
                                         PaymentTermsTypeCodeContentType__14,
                                         PaymentTermsTypeCodeContentType__15,
                                         PaymentTermsTypeCodeContentType__16,
                                         PaymentTermsTypeCodeContentType__17,
                                         PaymentTermsTypeCodeContentType__18,
                                         PaymentTermsTypeCodeContentType__19,
                                         PaymentTermsTypeCodeContentType__20,
                                         PaymentTermsTypeCodeContentType__21,
                                         PaymentTermsTypeCodeContentType__22,
                                         PaymentTermsTypeCodeContentType__23,
                                         PaymentTermsTypeCodeContentType__24,
                                         PaymentTermsTypeCodeContentType__25,
                                         PaymentTermsTypeCodeContentType__26,
                                         PaymentTermsTypeCodeContentType__27,
                                         PaymentTermsTypeCodeContentType__28,
                                         PaymentTermsTypeCodeContentType__29,
                                         PaymentTermsTypeCodeContentType__30,
                                         PaymentTermsTypeCodeContentType__31,
                                         PaymentTermsTypeCodeContentType__32,
                                         PaymentTermsTypeCodeContentType__33,
                                         PaymentTermsTypeCodeContentType__34,
                                         PaymentTermsTypeCodeContentType__35,
                                         PaymentTermsTypeCodeContentType__36,
                                         PaymentTermsTypeCodeContentType__37,
                                         PaymentTermsTypeCodeContentType__38,
                                         PaymentTermsTypeCodeContentType__39,
                                         PaymentTermsTypeCodeContentType__40,
                                         PaymentTermsTypeCodeContentType__41,
                                         PaymentTermsTypeCodeContentType__42,
                                         PaymentTermsTypeCodeContentType__43,
                                         PaymentTermsTypeCodeContentType__44,
                                         PaymentTermsTypeCodeContentType__45,
                                         PaymentTermsTypeCodeContentType__46,
                                         PaymentTermsTypeCodeContentType__47,
                                         PaymentTermsTypeCodeContentType__48,
                                         PaymentTermsTypeCodeContentType__49,
                                         PaymentTermsTypeCodeContentType__50,
                                         PaymentTermsTypeCodeContentType__51,
                                         PaymentTermsTypeCodeContentType__52,
                                         PaymentTermsTypeCodeContentType__53,
                                         PaymentTermsTypeCodeContentType__54,
                                         PaymentTermsTypeCodeContentType__55,
                                         PaymentTermsTypeCodeContentType__56,
                                         PaymentTermsTypeCodeContentType__57,
                                         PaymentTermsTypeCodeContentType__58,
                                         PaymentTermsTypeCodeContentType__59,
                                         PaymentTermsTypeCodeContentType__60,
                                         PaymentTermsTypeCodeContentType__61,
                                         PaymentTermsTypeCodeContentType__62,
                                         PaymentTermsTypeCodeContentType__63,
                                         PaymentTermsTypeCodeContentType__64,
                                         PaymentTermsTypeCodeContentType__65,
                                         PaymentTermsTypeCodeContentType__66,
                                         PaymentTermsTypeCodeContentType__67,
                                         PaymentTermsTypeCodeContentType__68,
                                         PaymentTermsTypeCodeContentType__69,
                                         PaymentTermsTypeCodeContentType__70,
                                         PaymentTermsTypeCodeContentType__71,
                                         PaymentTermsTypeCodeContentType__72,
                                         PaymentTermsTypeCodeContentType__73,
                                         PaymentTermsTypeCodeContentType__74,
                                         PaymentTermsTypeCodeContentType__75,
                                         PaymentTermsTypeCodeContentType__76,
                                         PaymentTermsTypeCodeContentType__77,
                                         PaymentTermsTypeCodeContentType__78,
                                         PaymentTermsTypeCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PriceTypeCode_D22A }
  TXMLPriceTypeCodeContentType = (PriceTypeCodeContentType_AA,
                                  PriceTypeCodeContentType_AB,
                                  PriceTypeCodeContentType_AC,
                                  PriceTypeCodeContentType_AD,
                                  PriceTypeCodeContentType_AE,
                                  PriceTypeCodeContentType_AF,
                                  PriceTypeCodeContentType_AG,
                                  PriceTypeCodeContentType_AH,
                                  PriceTypeCodeContentType_AI,
                                  PriceTypeCodeContentType_AJ,
                                  PriceTypeCodeContentType_AK,
                                  PriceTypeCodeContentType_AL,
                                  PriceTypeCodeContentType_AM,
                                  PriceTypeCodeContentType_AN,
                                  PriceTypeCodeContentType_AO,
                                  PriceTypeCodeContentType_AP,
                                  PriceTypeCodeContentType_AQ,
                                  PriceTypeCodeContentType_AR,
                                  PriceTypeCodeContentType_CA,
                                  PriceTypeCodeContentType_CT,
                                  PriceTypeCodeContentType_CU,
                                  PriceTypeCodeContentType_DI,
                                  PriceTypeCodeContentType_EC,
                                  PriceTypeCodeContentType_NW,
                                  PriceTypeCodeContentType_PC,
                                  PriceTypeCodeContentType_PE,
                                  PriceTypeCodeContentType_PK,
                                  PriceTypeCodeContentType_PL,
                                  PriceTypeCodeContentType_PT,
                                  PriceTypeCodeContentType_PU,
                                  PriceTypeCodeContentType_PV,
                                  PriceTypeCodeContentType_PW,
                                  PriceTypeCodeContentType_QT,
                                  PriceTypeCodeContentType_SR,
                                  PriceTypeCodeContentType_TB,
                                  PriceTypeCodeContentType_TU,
                                  PriceTypeCodeContentType_TW,
                                  PriceTypeCodeContentType_WH,
                                  PriceTypeCodeContentType_WI);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ReferenceTypeCode_D22A }
  TXMLReferenceTypeCodeContentType = (ReferenceTypeCodeContentType_AAA,
                                      ReferenceTypeCodeContentType_AAB,
                                      ReferenceTypeCodeContentType_AAC,
                                      ReferenceTypeCodeContentType_AAD,
                                      ReferenceTypeCodeContentType_AAE,
                                      ReferenceTypeCodeContentType_AAF,
                                      ReferenceTypeCodeContentType_AAG,
                                      ReferenceTypeCodeContentType_AAH,
                                      ReferenceTypeCodeContentType_AAI,
                                      ReferenceTypeCodeContentType_AAJ,
                                      ReferenceTypeCodeContentType_AAK,
                                      ReferenceTypeCodeContentType_AAL,
                                      ReferenceTypeCodeContentType_AAM,
                                      ReferenceTypeCodeContentType_AAN,
                                      ReferenceTypeCodeContentType_AAO,
                                      ReferenceTypeCodeContentType_AAP,
                                      ReferenceTypeCodeContentType_AAQ,
                                      ReferenceTypeCodeContentType_AAR,
                                      ReferenceTypeCodeContentType_AAS,
                                      ReferenceTypeCodeContentType_AAT,
                                      ReferenceTypeCodeContentType_AAU,
                                      ReferenceTypeCodeContentType_AAV,
                                      ReferenceTypeCodeContentType_AAW,
                                      ReferenceTypeCodeContentType_AAX,
                                      ReferenceTypeCodeContentType_AAY,
                                      ReferenceTypeCodeContentType_AAZ,
                                      ReferenceTypeCodeContentType_ABA,
                                      ReferenceTypeCodeContentType_ABB,
                                      ReferenceTypeCodeContentType_ABC,
                                      ReferenceTypeCodeContentType_ABD,
                                      ReferenceTypeCodeContentType_ABE,
                                      ReferenceTypeCodeContentType_ABF,
                                      ReferenceTypeCodeContentType_ABG,
                                      ReferenceTypeCodeContentType_ABH,
                                      ReferenceTypeCodeContentType_ABI,
                                      ReferenceTypeCodeContentType_ABJ,
                                      ReferenceTypeCodeContentType_ABK,
                                      ReferenceTypeCodeContentType_ABL,
                                      ReferenceTypeCodeContentType_ABM,
                                      ReferenceTypeCodeContentType_ABN,
                                      ReferenceTypeCodeContentType_ABO,
                                      ReferenceTypeCodeContentType_ABP,
                                      ReferenceTypeCodeContentType_ABQ,
                                      ReferenceTypeCodeContentType_ABR,
                                      ReferenceTypeCodeContentType_ABS,
                                      ReferenceTypeCodeContentType_ABT,
                                      ReferenceTypeCodeContentType_ABU,
                                      ReferenceTypeCodeContentType_ABV,
                                      ReferenceTypeCodeContentType_ABW,
                                      ReferenceTypeCodeContentType_ABX,
                                      ReferenceTypeCodeContentType_ABY,
                                      ReferenceTypeCodeContentType_ABZ,
                                      ReferenceTypeCodeContentType_AC,
                                      ReferenceTypeCodeContentType_ACA,
                                      ReferenceTypeCodeContentType_ACB,
                                      ReferenceTypeCodeContentType_ACC,
                                      ReferenceTypeCodeContentType_ACD,
                                      ReferenceTypeCodeContentType_ACE,
                                      ReferenceTypeCodeContentType_ACF,
                                      ReferenceTypeCodeContentType_ACG,
                                      ReferenceTypeCodeContentType_ACH,
                                      ReferenceTypeCodeContentType_ACI,
                                      ReferenceTypeCodeContentType_ACJ,
                                      ReferenceTypeCodeContentType_ACK,
                                      ReferenceTypeCodeContentType_ACL,
                                      ReferenceTypeCodeContentType_ACN,
                                      ReferenceTypeCodeContentType_ACO,
                                      ReferenceTypeCodeContentType_ACP,
                                      ReferenceTypeCodeContentType_ACQ,
                                      ReferenceTypeCodeContentType_ACR,
                                      ReferenceTypeCodeContentType_ACT,
                                      ReferenceTypeCodeContentType_ACU,
                                      ReferenceTypeCodeContentType_ACV,
                                      ReferenceTypeCodeContentType_ACW,
                                      ReferenceTypeCodeContentType_ACX,
                                      ReferenceTypeCodeContentType_ACY,
                                      ReferenceTypeCodeContentType_ACZ,
                                      ReferenceTypeCodeContentType_ADA,
                                      ReferenceTypeCodeContentType_ADB,
                                      ReferenceTypeCodeContentType_ADC,
                                      ReferenceTypeCodeContentType_ADD,
                                      ReferenceTypeCodeContentType_ADE,
                                      ReferenceTypeCodeContentType_ADF,
                                      ReferenceTypeCodeContentType_ADG,
                                      ReferenceTypeCodeContentType_ADI,
                                      ReferenceTypeCodeContentType_ADJ,
                                      ReferenceTypeCodeContentType_ADK,
                                      ReferenceTypeCodeContentType_ADL,
                                      ReferenceTypeCodeContentType_ADM,
                                      ReferenceTypeCodeContentType_ADN,
                                      ReferenceTypeCodeContentType_ADO,
                                      ReferenceTypeCodeContentType_ADP,
                                      ReferenceTypeCodeContentType_ADQ,
                                      ReferenceTypeCodeContentType_ADT,
                                      ReferenceTypeCodeContentType_ADU,
                                      ReferenceTypeCodeContentType_ADV,
                                      ReferenceTypeCodeContentType_ADW,
                                      ReferenceTypeCodeContentType_ADX,
                                      ReferenceTypeCodeContentType_ADY,
                                      ReferenceTypeCodeContentType_ADZ,
                                      ReferenceTypeCodeContentType_AE,
                                      ReferenceTypeCodeContentType_AEA,
                                      ReferenceTypeCodeContentType_AEB,
                                      ReferenceTypeCodeContentType_AEC,
                                      ReferenceTypeCodeContentType_AED,
                                      ReferenceTypeCodeContentType_AEE,
                                      ReferenceTypeCodeContentType_AEF,
                                      ReferenceTypeCodeContentType_AEG,
                                      ReferenceTypeCodeContentType_AEH,
                                      ReferenceTypeCodeContentType_AEI,
                                      ReferenceTypeCodeContentType_AEJ,
                                      ReferenceTypeCodeContentType_AEK,
                                      ReferenceTypeCodeContentType_AEL,
                                      ReferenceTypeCodeContentType_AEM,
                                      ReferenceTypeCodeContentType_AEN,
                                      ReferenceTypeCodeContentType_AEO,
                                      ReferenceTypeCodeContentType_AEP,
                                      ReferenceTypeCodeContentType_AEQ,
                                      ReferenceTypeCodeContentType_AER,
                                      ReferenceTypeCodeContentType_AES,
                                      ReferenceTypeCodeContentType_AET,
                                      ReferenceTypeCodeContentType_AEU,
                                      ReferenceTypeCodeContentType_AEV,
                                      ReferenceTypeCodeContentType_AEW,
                                      ReferenceTypeCodeContentType_AEX,
                                      ReferenceTypeCodeContentType_AEY,
                                      ReferenceTypeCodeContentType_AEZ,
                                      ReferenceTypeCodeContentType_AF,
                                      ReferenceTypeCodeContentType_AFA,
                                      ReferenceTypeCodeContentType_AFB,
                                      ReferenceTypeCodeContentType_AFC,
                                      ReferenceTypeCodeContentType_AFD,
                                      ReferenceTypeCodeContentType_AFE,
                                      ReferenceTypeCodeContentType_AFF,
                                      ReferenceTypeCodeContentType_AFG,
                                      ReferenceTypeCodeContentType_AFH,
                                      ReferenceTypeCodeContentType_AFI,
                                      ReferenceTypeCodeContentType_AFJ,
                                      ReferenceTypeCodeContentType_AFK,
                                      ReferenceTypeCodeContentType_AFL,
                                      ReferenceTypeCodeContentType_AFM,
                                      ReferenceTypeCodeContentType_AFN,
                                      ReferenceTypeCodeContentType_AFO,
                                      ReferenceTypeCodeContentType_AFP,
                                      ReferenceTypeCodeContentType_AFQ,
                                      ReferenceTypeCodeContentType_AFR,
                                      ReferenceTypeCodeContentType_AFS,
                                      ReferenceTypeCodeContentType_AFT,
                                      ReferenceTypeCodeContentType_AFU,
                                      ReferenceTypeCodeContentType_AFV,
                                      ReferenceTypeCodeContentType_AFW,
                                      ReferenceTypeCodeContentType_AFX,
                                      ReferenceTypeCodeContentType_AFY,
                                      ReferenceTypeCodeContentType_AFZ,
                                      ReferenceTypeCodeContentType_AGA,
                                      ReferenceTypeCodeContentType_AGB,
                                      ReferenceTypeCodeContentType_AGC,
                                      ReferenceTypeCodeContentType_AGD,
                                      ReferenceTypeCodeContentType_AGE,
                                      ReferenceTypeCodeContentType_AGF,
                                      ReferenceTypeCodeContentType_AGG,
                                      ReferenceTypeCodeContentType_AGH,
                                      ReferenceTypeCodeContentType_AGI,
                                      ReferenceTypeCodeContentType_AGJ,
                                      ReferenceTypeCodeContentType_AGK,
                                      ReferenceTypeCodeContentType_AGL,
                                      ReferenceTypeCodeContentType_AGM,
                                      ReferenceTypeCodeContentType_AGN,
                                      ReferenceTypeCodeContentType_AGO,
                                      ReferenceTypeCodeContentType_AGP,
                                      ReferenceTypeCodeContentType_AGQ,
                                      ReferenceTypeCodeContentType_AGR,
                                      ReferenceTypeCodeContentType_AGS,
                                      ReferenceTypeCodeContentType_AGT,
                                      ReferenceTypeCodeContentType_AGU,
                                      ReferenceTypeCodeContentType_AGV,
                                      ReferenceTypeCodeContentType_AGW,
                                      ReferenceTypeCodeContentType_AGX,
                                      ReferenceTypeCodeContentType_AGY,
                                      ReferenceTypeCodeContentType_AGZ,
                                      ReferenceTypeCodeContentType_AHA,
                                      ReferenceTypeCodeContentType_AHB,
                                      ReferenceTypeCodeContentType_AHC,
                                      ReferenceTypeCodeContentType_AHD,
                                      ReferenceTypeCodeContentType_AHE,
                                      ReferenceTypeCodeContentType_AHF,
                                      ReferenceTypeCodeContentType_AHG,
                                      ReferenceTypeCodeContentType_AHH,
                                      ReferenceTypeCodeContentType_AHI,
                                      ReferenceTypeCodeContentType_AHJ,
                                      ReferenceTypeCodeContentType_AHK,
                                      ReferenceTypeCodeContentType_AHL,
                                      ReferenceTypeCodeContentType_AHM,
                                      ReferenceTypeCodeContentType_AHN,
                                      ReferenceTypeCodeContentType_AHO,
                                      ReferenceTypeCodeContentType_AHP,
                                      ReferenceTypeCodeContentType_AHQ,
                                      ReferenceTypeCodeContentType_AHR,
                                      ReferenceTypeCodeContentType_AHS,
                                      ReferenceTypeCodeContentType_AHT,
                                      ReferenceTypeCodeContentType_AHU,
                                      ReferenceTypeCodeContentType_AHV,
                                      ReferenceTypeCodeContentType_AHX,
                                      ReferenceTypeCodeContentType_AHY,
                                      ReferenceTypeCodeContentType_AHZ,
                                      ReferenceTypeCodeContentType_AIA,
                                      ReferenceTypeCodeContentType_AIB,
                                      ReferenceTypeCodeContentType_AIC,
                                      ReferenceTypeCodeContentType_AID,
                                      ReferenceTypeCodeContentType_AIE,
                                      ReferenceTypeCodeContentType_AIF,
                                      ReferenceTypeCodeContentType_AIG,
                                      ReferenceTypeCodeContentType_AIH,
                                      ReferenceTypeCodeContentType_AII,
                                      ReferenceTypeCodeContentType_AIJ,
                                      ReferenceTypeCodeContentType_AIK,
                                      ReferenceTypeCodeContentType_AIL,
                                      ReferenceTypeCodeContentType_AIM,
                                      ReferenceTypeCodeContentType_AIN,
                                      ReferenceTypeCodeContentType_AIO,
                                      ReferenceTypeCodeContentType_AIP,
                                      ReferenceTypeCodeContentType_AIQ,
                                      ReferenceTypeCodeContentType_AIR,
                                      ReferenceTypeCodeContentType_AIS,
                                      ReferenceTypeCodeContentType_AIT,
                                      ReferenceTypeCodeContentType_AIU,
                                      ReferenceTypeCodeContentType_AIV,
                                      ReferenceTypeCodeContentType_AIW,
                                      ReferenceTypeCodeContentType_AIX,
                                      ReferenceTypeCodeContentType_AIY,
                                      ReferenceTypeCodeContentType_AIZ,
                                      ReferenceTypeCodeContentType_AJA,
                                      ReferenceTypeCodeContentType_AJB,
                                      ReferenceTypeCodeContentType_AJC,
                                      ReferenceTypeCodeContentType_AJD,
                                      ReferenceTypeCodeContentType_AJE,
                                      ReferenceTypeCodeContentType_AJF,
                                      ReferenceTypeCodeContentType_AJG,
                                      ReferenceTypeCodeContentType_AJH,
                                      ReferenceTypeCodeContentType_AJI,
                                      ReferenceTypeCodeContentType_AJJ,
                                      ReferenceTypeCodeContentType_AJK,
                                      ReferenceTypeCodeContentType_AJL,
                                      ReferenceTypeCodeContentType_AJM,
                                      ReferenceTypeCodeContentType_AJN,
                                      ReferenceTypeCodeContentType_AJO,
                                      ReferenceTypeCodeContentType_AJP,
                                      ReferenceTypeCodeContentType_AJQ,
                                      ReferenceTypeCodeContentType_AJR,
                                      ReferenceTypeCodeContentType_AJS,
                                      ReferenceTypeCodeContentType_AJT,
                                      ReferenceTypeCodeContentType_AJU,
                                      ReferenceTypeCodeContentType_AJV,
                                      ReferenceTypeCodeContentType_AJW,
                                      ReferenceTypeCodeContentType_AJX,
                                      ReferenceTypeCodeContentType_AJY,
                                      ReferenceTypeCodeContentType_AJZ,
                                      ReferenceTypeCodeContentType_AKA,
                                      ReferenceTypeCodeContentType_AKB,
                                      ReferenceTypeCodeContentType_AKC,
                                      ReferenceTypeCodeContentType_AKD,
                                      ReferenceTypeCodeContentType_AKE,
                                      ReferenceTypeCodeContentType_AKF,
                                      ReferenceTypeCodeContentType_AKG,
                                      ReferenceTypeCodeContentType_AKH,
                                      ReferenceTypeCodeContentType_AKI,
                                      ReferenceTypeCodeContentType_AKJ,
                                      ReferenceTypeCodeContentType_AKK,
                                      ReferenceTypeCodeContentType_AKL,
                                      ReferenceTypeCodeContentType_AKM,
                                      ReferenceTypeCodeContentType_AKN,
                                      ReferenceTypeCodeContentType_AKO,
                                      ReferenceTypeCodeContentType_AKP,
                                      ReferenceTypeCodeContentType_AKQ,
                                      ReferenceTypeCodeContentType_AKR,
                                      ReferenceTypeCodeContentType_AKS,
                                      ReferenceTypeCodeContentType_AKT,
                                      ReferenceTypeCodeContentType_AKU,
                                      ReferenceTypeCodeContentType_AKV,
                                      ReferenceTypeCodeContentType_AKW,
                                      ReferenceTypeCodeContentType_AKX,
                                      ReferenceTypeCodeContentType_AKY,
                                      ReferenceTypeCodeContentType_AKZ,
                                      ReferenceTypeCodeContentType_ALA,
                                      ReferenceTypeCodeContentType_ALB,
                                      ReferenceTypeCodeContentType_ALC,
                                      ReferenceTypeCodeContentType_ALD,
                                      ReferenceTypeCodeContentType_ALE,
                                      ReferenceTypeCodeContentType_ALF,
                                      ReferenceTypeCodeContentType_ALG,
                                      ReferenceTypeCodeContentType_ALH,
                                      ReferenceTypeCodeContentType_ALI,
                                      ReferenceTypeCodeContentType_ALJ,
                                      ReferenceTypeCodeContentType_ALK,
                                      ReferenceTypeCodeContentType_ALL,
                                      ReferenceTypeCodeContentType_ALM,
                                      ReferenceTypeCodeContentType_ALN,
                                      ReferenceTypeCodeContentType_ALO,
                                      ReferenceTypeCodeContentType_ALP,
                                      ReferenceTypeCodeContentType_ALQ,
                                      ReferenceTypeCodeContentType_ALR,
                                      ReferenceTypeCodeContentType_ALS,
                                      ReferenceTypeCodeContentType_ALT,
                                      ReferenceTypeCodeContentType_ALU,
                                      ReferenceTypeCodeContentType_ALV,
                                      ReferenceTypeCodeContentType_ALW,
                                      ReferenceTypeCodeContentType_ALX,
                                      ReferenceTypeCodeContentType_ALY,
                                      ReferenceTypeCodeContentType_ALZ,
                                      ReferenceTypeCodeContentType_AMA,
                                      ReferenceTypeCodeContentType_AMB,
                                      ReferenceTypeCodeContentType_AMC,
                                      ReferenceTypeCodeContentType_AMD,
                                      ReferenceTypeCodeContentType_AME,
                                      ReferenceTypeCodeContentType_AMF,
                                      ReferenceTypeCodeContentType_AMG,
                                      ReferenceTypeCodeContentType_AMH,
                                      ReferenceTypeCodeContentType_AMI,
                                      ReferenceTypeCodeContentType_AMJ,
                                      ReferenceTypeCodeContentType_AMK,
                                      ReferenceTypeCodeContentType_AML,
                                      ReferenceTypeCodeContentType_AMM,
                                      ReferenceTypeCodeContentType_AMN,
                                      ReferenceTypeCodeContentType_AMO,
                                      ReferenceTypeCodeContentType_AMP,
                                      ReferenceTypeCodeContentType_AMQ,
                                      ReferenceTypeCodeContentType_AMR,
                                      ReferenceTypeCodeContentType_AMS,
                                      ReferenceTypeCodeContentType_AMT,
                                      ReferenceTypeCodeContentType_AMU,
                                      ReferenceTypeCodeContentType_AMV,
                                      ReferenceTypeCodeContentType_AMW,
                                      ReferenceTypeCodeContentType_AMX,
                                      ReferenceTypeCodeContentType_AMY,
                                      ReferenceTypeCodeContentType_AMZ,
                                      ReferenceTypeCodeContentType_ANA,
                                      ReferenceTypeCodeContentType_ANB,
                                      ReferenceTypeCodeContentType_ANC,
                                      ReferenceTypeCodeContentType__AND,
                                      ReferenceTypeCodeContentType_ANE,
                                      ReferenceTypeCodeContentType_ANF,
                                      ReferenceTypeCodeContentType_ANG,
                                      ReferenceTypeCodeContentType_ANH,
                                      ReferenceTypeCodeContentType_ANI,
                                      ReferenceTypeCodeContentType_ANJ,
                                      ReferenceTypeCodeContentType_ANK,
                                      ReferenceTypeCodeContentType_ANL,
                                      ReferenceTypeCodeContentType_ANM,
                                      ReferenceTypeCodeContentType_ANN,
                                      ReferenceTypeCodeContentType_ANO,
                                      ReferenceTypeCodeContentType_ANP,
                                      ReferenceTypeCodeContentType_ANQ,
                                      ReferenceTypeCodeContentType_ANR,
                                      ReferenceTypeCodeContentType_ANS,
                                      ReferenceTypeCodeContentType_ANT,
                                      ReferenceTypeCodeContentType_ANU,
                                      ReferenceTypeCodeContentType_ANV,
                                      ReferenceTypeCodeContentType_ANW,
                                      ReferenceTypeCodeContentType_ANX,
                                      ReferenceTypeCodeContentType_ANY,
                                      ReferenceTypeCodeContentType_AOA,
                                      ReferenceTypeCodeContentType_AOD,
                                      ReferenceTypeCodeContentType_AOE,
                                      ReferenceTypeCodeContentType_AOF,
                                      ReferenceTypeCodeContentType_AOG,
                                      ReferenceTypeCodeContentType_AOH,
                                      ReferenceTypeCodeContentType_AOI,
                                      ReferenceTypeCodeContentType_AOJ,
                                      ReferenceTypeCodeContentType_AOK,
                                      ReferenceTypeCodeContentType_AOL,
                                      ReferenceTypeCodeContentType_AOM,
                                      ReferenceTypeCodeContentType_AON,
                                      ReferenceTypeCodeContentType_AOO,
                                      ReferenceTypeCodeContentType_AOP,
                                      ReferenceTypeCodeContentType_AOQ,
                                      ReferenceTypeCodeContentType_AOR,
                                      ReferenceTypeCodeContentType_AOS,
                                      ReferenceTypeCodeContentType_AOT,
                                      ReferenceTypeCodeContentType_AOU,
                                      ReferenceTypeCodeContentType_AOV,
                                      ReferenceTypeCodeContentType_AOW,
                                      ReferenceTypeCodeContentType_AOX,
                                      ReferenceTypeCodeContentType_AOY,
                                      ReferenceTypeCodeContentType_AOZ,
                                      ReferenceTypeCodeContentType_AP,
                                      ReferenceTypeCodeContentType_APA,
                                      ReferenceTypeCodeContentType_APB,
                                      ReferenceTypeCodeContentType_APC,
                                      ReferenceTypeCodeContentType_APD,
                                      ReferenceTypeCodeContentType_APE,
                                      ReferenceTypeCodeContentType_APF,
                                      ReferenceTypeCodeContentType_APG,
                                      ReferenceTypeCodeContentType_APH,
                                      ReferenceTypeCodeContentType_API,
                                      ReferenceTypeCodeContentType_APJ,
                                      ReferenceTypeCodeContentType_APK,
                                      ReferenceTypeCodeContentType_APL,
                                      ReferenceTypeCodeContentType_APM,
                                      ReferenceTypeCodeContentType_APN,
                                      ReferenceTypeCodeContentType_APO,
                                      ReferenceTypeCodeContentType_APP,
                                      ReferenceTypeCodeContentType_APQ,
                                      ReferenceTypeCodeContentType_APR,
                                      ReferenceTypeCodeContentType_APS,
                                      ReferenceTypeCodeContentType_APT,
                                      ReferenceTypeCodeContentType_APU,
                                      ReferenceTypeCodeContentType_APV,
                                      ReferenceTypeCodeContentType_APW,
                                      ReferenceTypeCodeContentType_APX,
                                      ReferenceTypeCodeContentType_APY,
                                      ReferenceTypeCodeContentType_APZ,
                                      ReferenceTypeCodeContentType_AQA,
                                      ReferenceTypeCodeContentType_AQB,
                                      ReferenceTypeCodeContentType_AQC,
                                      ReferenceTypeCodeContentType_AQD,
                                      ReferenceTypeCodeContentType_AQE,
                                      ReferenceTypeCodeContentType_AQF,
                                      ReferenceTypeCodeContentType_AQG,
                                      ReferenceTypeCodeContentType_AQH,
                                      ReferenceTypeCodeContentType_AQI,
                                      ReferenceTypeCodeContentType_AQJ,
                                      ReferenceTypeCodeContentType_AQK,
                                      ReferenceTypeCodeContentType_AQL,
                                      ReferenceTypeCodeContentType_AQM,
                                      ReferenceTypeCodeContentType_AQN,
                                      ReferenceTypeCodeContentType_AQO,
                                      ReferenceTypeCodeContentType_AQP,
                                      ReferenceTypeCodeContentType_AQQ,
                                      ReferenceTypeCodeContentType_AQR,
                                      ReferenceTypeCodeContentType_AQS,
                                      ReferenceTypeCodeContentType_AQT,
                                      ReferenceTypeCodeContentType_AQU,
                                      ReferenceTypeCodeContentType_AQV,
                                      ReferenceTypeCodeContentType_AQW,
                                      ReferenceTypeCodeContentType_AQX,
                                      ReferenceTypeCodeContentType_AQY,
                                      ReferenceTypeCodeContentType_AQZ,
                                      ReferenceTypeCodeContentType_ARA,
                                      ReferenceTypeCodeContentType_ARB,
                                      ReferenceTypeCodeContentType_ARC,
                                      ReferenceTypeCodeContentType_ARD,
                                      ReferenceTypeCodeContentType_ARE,
                                      ReferenceTypeCodeContentType_ARF,
                                      ReferenceTypeCodeContentType_ARG,
                                      ReferenceTypeCodeContentType_ARH,
                                      ReferenceTypeCodeContentType_ARI,
                                      ReferenceTypeCodeContentType_ARJ,
                                      ReferenceTypeCodeContentType_ARK,
                                      ReferenceTypeCodeContentType_ARL,
                                      ReferenceTypeCodeContentType_ARM,
                                      ReferenceTypeCodeContentType_ARN,
                                      ReferenceTypeCodeContentType_ARO,
                                      ReferenceTypeCodeContentType_ARP,
                                      ReferenceTypeCodeContentType_ARQ,
                                      ReferenceTypeCodeContentType_ARR,
                                      ReferenceTypeCodeContentType_ARS,
                                      ReferenceTypeCodeContentType_ART,
                                      ReferenceTypeCodeContentType_ARU,
                                      ReferenceTypeCodeContentType_ARV,
                                      ReferenceTypeCodeContentType_ARW,
                                      ReferenceTypeCodeContentType_ARX,
                                      ReferenceTypeCodeContentType_ARY,
                                      ReferenceTypeCodeContentType_ARZ,
                                      ReferenceTypeCodeContentType_ASA,
                                      ReferenceTypeCodeContentType_ASB,
                                      ReferenceTypeCodeContentType_ASC,
                                      ReferenceTypeCodeContentType_ASD,
                                      ReferenceTypeCodeContentType_ASE,
                                      ReferenceTypeCodeContentType_ASF,
                                      ReferenceTypeCodeContentType_ASG,
                                      ReferenceTypeCodeContentType_ASH,
                                      ReferenceTypeCodeContentType_ASI,
                                      ReferenceTypeCodeContentType_ASJ,
                                      ReferenceTypeCodeContentType_ASK,
                                      ReferenceTypeCodeContentType_ASL,
                                      ReferenceTypeCodeContentType__ASM,
                                      ReferenceTypeCodeContentType_ASN,
                                      ReferenceTypeCodeContentType_ASO,
                                      ReferenceTypeCodeContentType_ASP,
                                      ReferenceTypeCodeContentType_ASQ,
                                      ReferenceTypeCodeContentType_ASR,
                                      ReferenceTypeCodeContentType_ASS,
                                      ReferenceTypeCodeContentType_AST,
                                      ReferenceTypeCodeContentType_ASU,
                                      ReferenceTypeCodeContentType_ASV,
                                      ReferenceTypeCodeContentType_ASW,
                                      ReferenceTypeCodeContentType_ASX,
                                      ReferenceTypeCodeContentType_ASY,
                                      ReferenceTypeCodeContentType_ASZ,
                                      ReferenceTypeCodeContentType_ATA,
                                      ReferenceTypeCodeContentType_ATB,
                                      ReferenceTypeCodeContentType_ATC,
                                      ReferenceTypeCodeContentType_ATD,
                                      ReferenceTypeCodeContentType_ATE,
                                      ReferenceTypeCodeContentType_ATF,
                                      ReferenceTypeCodeContentType_ATG,
                                      ReferenceTypeCodeContentType_ATH,
                                      ReferenceTypeCodeContentType_ATI,
                                      ReferenceTypeCodeContentType_ATJ,
                                      ReferenceTypeCodeContentType_ATK,
                                      ReferenceTypeCodeContentType_ATL,
                                      ReferenceTypeCodeContentType_ATM,
                                      ReferenceTypeCodeContentType_ATN,
                                      ReferenceTypeCodeContentType_ATO,
                                      ReferenceTypeCodeContentType_ATP,
                                      ReferenceTypeCodeContentType_ATQ,
                                      ReferenceTypeCodeContentType_ATR,
                                      ReferenceTypeCodeContentType_ATS,
                                      ReferenceTypeCodeContentType_ATT,
                                      ReferenceTypeCodeContentType_ATU,
                                      ReferenceTypeCodeContentType_ATV,
                                      ReferenceTypeCodeContentType_ATW,
                                      ReferenceTypeCodeContentType_ATX,
                                      ReferenceTypeCodeContentType_ATY,
                                      ReferenceTypeCodeContentType_ATZ,
                                      ReferenceTypeCodeContentType_AU,
                                      ReferenceTypeCodeContentType_AUA,
                                      ReferenceTypeCodeContentType_AUB,
                                      ReferenceTypeCodeContentType_AUC,
                                      ReferenceTypeCodeContentType_AUD,
                                      ReferenceTypeCodeContentType_AUE,
                                      ReferenceTypeCodeContentType_AUF,
                                      ReferenceTypeCodeContentType_AUG,
                                      ReferenceTypeCodeContentType_AUH,
                                      ReferenceTypeCodeContentType_AUI,
                                      ReferenceTypeCodeContentType_AUJ,
                                      ReferenceTypeCodeContentType_AUK,
                                      ReferenceTypeCodeContentType_AUL,
                                      ReferenceTypeCodeContentType_AUM,
                                      ReferenceTypeCodeContentType_AUN,
                                      ReferenceTypeCodeContentType_AUO,
                                      ReferenceTypeCodeContentType_AUP,
                                      ReferenceTypeCodeContentType_AUQ,
                                      ReferenceTypeCodeContentType_AUR,
                                      ReferenceTypeCodeContentType_AUS,
                                      ReferenceTypeCodeContentType_AUT,
                                      ReferenceTypeCodeContentType_AUU,
                                      ReferenceTypeCodeContentType_AUV,
                                      ReferenceTypeCodeContentType_AUW,
                                      ReferenceTypeCodeContentType_AUX,
                                      ReferenceTypeCodeContentType_AUY,
                                      ReferenceTypeCodeContentType_AUZ,
                                      ReferenceTypeCodeContentType_AV,
                                      ReferenceTypeCodeContentType_AVA,
                                      ReferenceTypeCodeContentType_AVB,
                                      ReferenceTypeCodeContentType_AVC,
                                      ReferenceTypeCodeContentType_AVD,
                                      ReferenceTypeCodeContentType_AVE,
                                      ReferenceTypeCodeContentType_AVF,
                                      ReferenceTypeCodeContentType_AVG,
                                      ReferenceTypeCodeContentType_AVH,
                                      ReferenceTypeCodeContentType_AVI,
                                      ReferenceTypeCodeContentType_AVJ,
                                      ReferenceTypeCodeContentType_AVK,
                                      ReferenceTypeCodeContentType_AVL,
                                      ReferenceTypeCodeContentType_AVM,
                                      ReferenceTypeCodeContentType_AVN,
                                      ReferenceTypeCodeContentType_AVO,
                                      ReferenceTypeCodeContentType_AVP,
                                      ReferenceTypeCodeContentType_AVQ,
                                      ReferenceTypeCodeContentType_AVR,
                                      ReferenceTypeCodeContentType_AVS,
                                      ReferenceTypeCodeContentType_AVT,
                                      ReferenceTypeCodeContentType_AVU,
                                      ReferenceTypeCodeContentType_AVV,
                                      ReferenceTypeCodeContentType_AVW,
                                      ReferenceTypeCodeContentType_AVX,
                                      ReferenceTypeCodeContentType_AVY,
                                      ReferenceTypeCodeContentType_AVZ,
                                      ReferenceTypeCodeContentType_AWA,
                                      ReferenceTypeCodeContentType_AWB,
                                      ReferenceTypeCodeContentType_AWC,
                                      ReferenceTypeCodeContentType_AWD,
                                      ReferenceTypeCodeContentType_AWE,
                                      ReferenceTypeCodeContentType_AWF,
                                      ReferenceTypeCodeContentType_AWG,
                                      ReferenceTypeCodeContentType_AWH,
                                      ReferenceTypeCodeContentType_AWI,
                                      ReferenceTypeCodeContentType_AWJ,
                                      ReferenceTypeCodeContentType_AWK,
                                      ReferenceTypeCodeContentType_AWL,
                                      ReferenceTypeCodeContentType_AWM,
                                      ReferenceTypeCodeContentType_AWN,
                                      ReferenceTypeCodeContentType_AWO,
                                      ReferenceTypeCodeContentType_AWP,
                                      ReferenceTypeCodeContentType_AWQ,
                                      ReferenceTypeCodeContentType_AWR,
                                      ReferenceTypeCodeContentType_AWS,
                                      ReferenceTypeCodeContentType_AWT,
                                      ReferenceTypeCodeContentType_AWU,
                                      ReferenceTypeCodeContentType_AWV,
                                      ReferenceTypeCodeContentType_AWW,
                                      ReferenceTypeCodeContentType_AWX,
                                      ReferenceTypeCodeContentType_AWY,
                                      ReferenceTypeCodeContentType_AWZ,
                                      ReferenceTypeCodeContentType_AXA,
                                      ReferenceTypeCodeContentType_AXB,
                                      ReferenceTypeCodeContentType_AXC,
                                      ReferenceTypeCodeContentType_AXD,
                                      ReferenceTypeCodeContentType_AXE,
                                      ReferenceTypeCodeContentType_AXF,
                                      ReferenceTypeCodeContentType_AXG,
                                      ReferenceTypeCodeContentType_AXH,
                                      ReferenceTypeCodeContentType_AXI,
                                      ReferenceTypeCodeContentType_AXJ,
                                      ReferenceTypeCodeContentType_AXK,
                                      ReferenceTypeCodeContentType_AXL,
                                      ReferenceTypeCodeContentType_AXM,
                                      ReferenceTypeCodeContentType_AXN,
                                      ReferenceTypeCodeContentType_AXO,
                                      ReferenceTypeCodeContentType_AXP,
                                      ReferenceTypeCodeContentType_AXQ,
                                      ReferenceTypeCodeContentType_AXR,
                                      ReferenceTypeCodeContentType_AXS,
                                      ReferenceTypeCodeContentType_BA,
                                      ReferenceTypeCodeContentType_BC,
                                      ReferenceTypeCodeContentType_BD,
                                      ReferenceTypeCodeContentType_BE,
                                      ReferenceTypeCodeContentType_BH,
                                      ReferenceTypeCodeContentType_BM,
                                      ReferenceTypeCodeContentType_BN,
                                      ReferenceTypeCodeContentType_BO,
                                      ReferenceTypeCodeContentType_BR,
                                      ReferenceTypeCodeContentType_BT,
                                      ReferenceTypeCodeContentType_BTP,
                                      ReferenceTypeCodeContentType_BW,
                                      ReferenceTypeCodeContentType_CAS,
                                      ReferenceTypeCodeContentType_CAT,
                                      ReferenceTypeCodeContentType_CAU,
                                      ReferenceTypeCodeContentType_CAV,
                                      ReferenceTypeCodeContentType_CAW,
                                      ReferenceTypeCodeContentType_CAX,
                                      ReferenceTypeCodeContentType_CAY,
                                      ReferenceTypeCodeContentType_CAZ,
                                      ReferenceTypeCodeContentType_CBA,
                                      ReferenceTypeCodeContentType_CBB,
                                      ReferenceTypeCodeContentType_CD,
                                      ReferenceTypeCodeContentType_CEC,
                                      ReferenceTypeCodeContentType_CED,
                                      ReferenceTypeCodeContentType_CFE,
                                      ReferenceTypeCodeContentType_CFF,
                                      ReferenceTypeCodeContentType_CFO,
                                      ReferenceTypeCodeContentType_CG,
                                      ReferenceTypeCodeContentType_CH,
                                      ReferenceTypeCodeContentType_CK,
                                      ReferenceTypeCodeContentType_CKN,
                                      ReferenceTypeCodeContentType_CM,
                                      ReferenceTypeCodeContentType_CMR,
                                      ReferenceTypeCodeContentType_CN,
                                      ReferenceTypeCodeContentType_CNO,
                                      ReferenceTypeCodeContentType_COF,
                                      ReferenceTypeCodeContentType_CP,
                                      ReferenceTypeCodeContentType_CR,
                                      ReferenceTypeCodeContentType_CRN,
                                      ReferenceTypeCodeContentType_CS,
                                      ReferenceTypeCodeContentType_CST,
                                      ReferenceTypeCodeContentType_CT,
                                      ReferenceTypeCodeContentType_CU,
                                      ReferenceTypeCodeContentType_CV,
                                      ReferenceTypeCodeContentType_CW,
                                      ReferenceTypeCodeContentType_CZ,
                                      ReferenceTypeCodeContentType_DA,
                                      ReferenceTypeCodeContentType_DAN,
                                      ReferenceTypeCodeContentType_DB,
                                      ReferenceTypeCodeContentType_DI,
                                      ReferenceTypeCodeContentType_DL,
                                      ReferenceTypeCodeContentType_DM,
                                      ReferenceTypeCodeContentType_DQ,
                                      ReferenceTypeCodeContentType_DR,
                                      ReferenceTypeCodeContentType_EA,
                                      ReferenceTypeCodeContentType_EB,
                                      ReferenceTypeCodeContentType_ED,
                                      ReferenceTypeCodeContentType_EE,
                                      ReferenceTypeCodeContentType_EEP,
                                      ReferenceTypeCodeContentType_EI,
                                      ReferenceTypeCodeContentType_EN,
                                      ReferenceTypeCodeContentType_EQ,
                                      ReferenceTypeCodeContentType_ER,
                                      ReferenceTypeCodeContentType_ERN,
                                      ReferenceTypeCodeContentType_ET,
                                      ReferenceTypeCodeContentType_EX,
                                      ReferenceTypeCodeContentType_FC,
                                      ReferenceTypeCodeContentType_FF,
                                      ReferenceTypeCodeContentType_FI,
                                      ReferenceTypeCodeContentType_FLW,
                                      ReferenceTypeCodeContentType_FN,
                                      ReferenceTypeCodeContentType_FO,
                                      ReferenceTypeCodeContentType_FS,
                                      ReferenceTypeCodeContentType_FT,
                                      ReferenceTypeCodeContentType_FV,
                                      ReferenceTypeCodeContentType_FX,
                                      ReferenceTypeCodeContentType_GA,
                                      ReferenceTypeCodeContentType_GC,
                                      ReferenceTypeCodeContentType_GD,
                                      ReferenceTypeCodeContentType_GDN,
                                      ReferenceTypeCodeContentType_GN,
                                      ReferenceTypeCodeContentType_HS,
                                      ReferenceTypeCodeContentType_HWB,
                                      ReferenceTypeCodeContentType_IA,
                                      ReferenceTypeCodeContentType_IB,
                                      ReferenceTypeCodeContentType_ICA,
                                      ReferenceTypeCodeContentType_ICE,
                                      ReferenceTypeCodeContentType_ICO,
                                      ReferenceTypeCodeContentType_II,
                                      ReferenceTypeCodeContentType_IL,
                                      ReferenceTypeCodeContentType_INB,
                                      ReferenceTypeCodeContentType_INN,
                                      ReferenceTypeCodeContentType_INO,
                                      ReferenceTypeCodeContentType_IP,
                                      ReferenceTypeCodeContentType__IS,
                                      ReferenceTypeCodeContentType_IT,
                                      ReferenceTypeCodeContentType_IV,
                                      ReferenceTypeCodeContentType_JB,
                                      ReferenceTypeCodeContentType_JE,
                                      ReferenceTypeCodeContentType_LA,
                                      ReferenceTypeCodeContentType_LAN,
                                      ReferenceTypeCodeContentType_LAR,
                                      ReferenceTypeCodeContentType_LB,
                                      ReferenceTypeCodeContentType_LC,
                                      ReferenceTypeCodeContentType_LI,
                                      ReferenceTypeCodeContentType_LO,
                                      ReferenceTypeCodeContentType_LRC,
                                      ReferenceTypeCodeContentType_LS,
                                      ReferenceTypeCodeContentType_MA,
                                      ReferenceTypeCodeContentType_MB,
                                      ReferenceTypeCodeContentType_MF,
                                      ReferenceTypeCodeContentType_MG,
                                      ReferenceTypeCodeContentType_MH,
                                      ReferenceTypeCodeContentType_MR,
                                      ReferenceTypeCodeContentType_MRN,
                                      ReferenceTypeCodeContentType_MS,
                                      ReferenceTypeCodeContentType_MSS,
                                      ReferenceTypeCodeContentType_MWB,
                                      ReferenceTypeCodeContentType_NA,
                                      ReferenceTypeCodeContentType_NF,
                                      ReferenceTypeCodeContentType_OH,
                                      ReferenceTypeCodeContentType_OI,
                                      ReferenceTypeCodeContentType_ON,
                                      ReferenceTypeCodeContentType_OP,
                                      ReferenceTypeCodeContentType__OR,
                                      ReferenceTypeCodeContentType_PB,
                                      ReferenceTypeCodeContentType_PC,
                                      ReferenceTypeCodeContentType_PD,
                                      ReferenceTypeCodeContentType_PE,
                                      ReferenceTypeCodeContentType_PF,
                                      ReferenceTypeCodeContentType_PI,
                                      ReferenceTypeCodeContentType_PK,
                                      ReferenceTypeCodeContentType_PL,
                                      ReferenceTypeCodeContentType_POR,
                                      ReferenceTypeCodeContentType_PP,
                                      ReferenceTypeCodeContentType_PQ,
                                      ReferenceTypeCodeContentType_PR,
                                      ReferenceTypeCodeContentType_PS,
                                      ReferenceTypeCodeContentType_PW,
                                      ReferenceTypeCodeContentType_PY,
                                      ReferenceTypeCodeContentType_RA,
                                      ReferenceTypeCodeContentType_RC,
                                      ReferenceTypeCodeContentType_RCN,
                                      ReferenceTypeCodeContentType_RE,
                                      ReferenceTypeCodeContentType_REN,
                                      ReferenceTypeCodeContentType_RF,
                                      ReferenceTypeCodeContentType_RR,
                                      ReferenceTypeCodeContentType_RT,
                                      ReferenceTypeCodeContentType_SA,
                                      ReferenceTypeCodeContentType_SB,
                                      ReferenceTypeCodeContentType_SD,
                                      ReferenceTypeCodeContentType_SE,
                                      ReferenceTypeCodeContentType_SEA,
                                      ReferenceTypeCodeContentType_SF,
                                      ReferenceTypeCodeContentType_SH,
                                      ReferenceTypeCodeContentType_SI,
                                      ReferenceTypeCodeContentType_SM,
                                      ReferenceTypeCodeContentType_SN,
                                      ReferenceTypeCodeContentType_SP,
                                      ReferenceTypeCodeContentType_SQ,
                                      ReferenceTypeCodeContentType_SRN,
                                      ReferenceTypeCodeContentType_SS,
                                      ReferenceTypeCodeContentType_STA,
                                      ReferenceTypeCodeContentType_SW,
                                      ReferenceTypeCodeContentType_SZ,
                                      ReferenceTypeCodeContentType_TB,
                                      ReferenceTypeCodeContentType_TCR,
                                      ReferenceTypeCodeContentType_TE,
                                      ReferenceTypeCodeContentType_TF,
                                      ReferenceTypeCodeContentType_TI,
                                      ReferenceTypeCodeContentType_TIN,
                                      ReferenceTypeCodeContentType_TL,
                                      ReferenceTypeCodeContentType_TN,
                                      ReferenceTypeCodeContentType_TP,
                                      ReferenceTypeCodeContentType_UAR,
                                      ReferenceTypeCodeContentType_UC,
                                      ReferenceTypeCodeContentType_UCN,
                                      ReferenceTypeCodeContentType_UN,
                                      ReferenceTypeCodeContentType_UO,
                                      ReferenceTypeCodeContentType_URI,
                                      ReferenceTypeCodeContentType_VA,
                                      ReferenceTypeCodeContentType_VC,
                                      ReferenceTypeCodeContentType_VGR,
                                      ReferenceTypeCodeContentType_VM,
                                      ReferenceTypeCodeContentType_VN,
                                      ReferenceTypeCodeContentType_VON,
                                      ReferenceTypeCodeContentType_VOR,
                                      ReferenceTypeCodeContentType_VP,
                                      ReferenceTypeCodeContentType_VR,
                                      ReferenceTypeCodeContentType_VS,
                                      ReferenceTypeCodeContentType_VT,
                                      ReferenceTypeCodeContentType_VV,
                                      ReferenceTypeCodeContentType_WE,
                                      ReferenceTypeCodeContentType_WM,
                                      ReferenceTypeCodeContentType_WN,
                                      ReferenceTypeCodeContentType_WR,
                                      ReferenceTypeCodeContentType_WS,
                                      ReferenceTypeCodeContentType_WY,
                                      ReferenceTypeCodeContentType_XA,
                                      ReferenceTypeCodeContentType_XC,
                                      ReferenceTypeCodeContentType_XP,
                                      ReferenceTypeCodeContentType_ZZZ);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealConditionCode_D22A }
  TXMLSealConditionCodeContentType = (SealConditionCodeContentType__1,
                                      SealConditionCodeContentType__2,
                                      SealConditionCodeContentType__3,
                                      SealConditionCodeContentType__4,
                                      SealConditionCodeContentType__5);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealingPartyRoleCode_D22A }
  TXMLSealingPartyRoleCodeContentType = (SealingPartyRoleCodeContentType_AA,
                                         SealingPartyRoleCodeContentType_AB,
                                         SealingPartyRoleCodeContentType_AC,
                                         SealingPartyRoleCodeContentType_CA,
                                         SealingPartyRoleCodeContentType_CU,
                                         SealingPartyRoleCodeContentType_SH,
                                         SealingPartyRoleCodeContentType__TO);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusCode_D22A }
  TXMLStatusCodeContentType = (StatusCodeContentType__1,
                               StatusCodeContentType__2,
                               StatusCodeContentType__3,
                               StatusCodeContentType__4,
                               StatusCodeContentType__5,
                               StatusCodeContentType__6,
                               StatusCodeContentType__7,
                               StatusCodeContentType__8,
                               StatusCodeContentType__9,
                               StatusCodeContentType__10,
                               StatusCodeContentType__11,
                               StatusCodeContentType__12,
                               StatusCodeContentType__13,
                               StatusCodeContentType__14,
                               StatusCodeContentType__15,
                               StatusCodeContentType__16,
                               StatusCodeContentType__17,
                               StatusCodeContentType__18,
                               StatusCodeContentType__19,
                               StatusCodeContentType__20,
                               StatusCodeContentType__21,
                               StatusCodeContentType__22,
                               StatusCodeContentType__23,
                               StatusCodeContentType__24,
                               StatusCodeContentType__25,
                               StatusCodeContentType__26,
                               StatusCodeContentType__27,
                               StatusCodeContentType__28,
                               StatusCodeContentType__29,
                               StatusCodeContentType__30,
                               StatusCodeContentType__31,
                               StatusCodeContentType__32,
                               StatusCodeContentType__33,
                               StatusCodeContentType__34,
                               StatusCodeContentType__35,
                               StatusCodeContentType__36,
                               StatusCodeContentType__37,
                               StatusCodeContentType__38,
                               StatusCodeContentType__39,
                               StatusCodeContentType__40,
                               StatusCodeContentType__41,
                               StatusCodeContentType__42,
                               StatusCodeContentType__43,
                               StatusCodeContentType__44,
                               StatusCodeContentType__45,
                               StatusCodeContentType__46,
                               StatusCodeContentType__47,
                               StatusCodeContentType__48,
                               StatusCodeContentType__49,
                               StatusCodeContentType__50,
                               StatusCodeContentType__51,
                               StatusCodeContentType__52,
                               StatusCodeContentType__53,
                               StatusCodeContentType__54,
                               StatusCodeContentType__55,
                               StatusCodeContentType__56,
                               StatusCodeContentType__57,
                               StatusCodeContentType__58,
                               StatusCodeContentType__59,
                               StatusCodeContentType__60,
                               StatusCodeContentType__61,
                               StatusCodeContentType__62,
                               StatusCodeContentType__63,
                               StatusCodeContentType__64,
                               StatusCodeContentType__65,
                               StatusCodeContentType__66,
                               StatusCodeContentType__67,
                               StatusCodeContentType__68,
                               StatusCodeContentType__69,
                               StatusCodeContentType__70,
                               StatusCodeContentType__71,
                               StatusCodeContentType__72,
                               StatusCodeContentType__73,
                               StatusCodeContentType__74,
                               StatusCodeContentType__75,
                               StatusCodeContentType__76,
                               StatusCodeContentType__77,
                               StatusCodeContentType__78,
                               StatusCodeContentType__79,
                               StatusCodeContentType__80,
                               StatusCodeContentType__81,
                               StatusCodeContentType__82,
                               StatusCodeContentType__83,
                               StatusCodeContentType__84,
                               StatusCodeContentType__85,
                               StatusCodeContentType__86,
                               StatusCodeContentType__87,
                               StatusCodeContentType__88,
                               StatusCodeContentType__89,
                               StatusCodeContentType__90,
                               StatusCodeContentType__91,
                               StatusCodeContentType__92,
                               StatusCodeContentType__93,
                               StatusCodeContentType__94,
                               StatusCodeContentType__95,
                               StatusCodeContentType__96,
                               StatusCodeContentType__97,
                               StatusCodeContentType__98,
                               StatusCodeContentType__99,
                               StatusCodeContentType__100,
                               StatusCodeContentType__101,
                               StatusCodeContentType__102,
                               StatusCodeContentType__103,
                               StatusCodeContentType__104,
                               StatusCodeContentType__105,
                               StatusCodeContentType__106,
                               StatusCodeContentType__107,
                               StatusCodeContentType__108,
                               StatusCodeContentType__109,
                               StatusCodeContentType__110,
                               StatusCodeContentType__111,
                               StatusCodeContentType__112,
                               StatusCodeContentType__113,
                               StatusCodeContentType__114,
                               StatusCodeContentType__115,
                               StatusCodeContentType__116,
                               StatusCodeContentType__117,
                               StatusCodeContentType__118,
                               StatusCodeContentType__119,
                               StatusCodeContentType__120,
                               StatusCodeContentType__121,
                               StatusCodeContentType__122,
                               StatusCodeContentType__123,
                               StatusCodeContentType__124,
                               StatusCodeContentType__125,
                               StatusCodeContentType__126,
                               StatusCodeContentType__127,
                               StatusCodeContentType__128,
                               StatusCodeContentType__129,
                               StatusCodeContentType__130,
                               StatusCodeContentType__131,
                               StatusCodeContentType__132,
                               StatusCodeContentType__133,
                               StatusCodeContentType__134,
                               StatusCodeContentType__135,
                               StatusCodeContentType__136,
                               StatusCodeContentType__137,
                               StatusCodeContentType__138,
                               StatusCodeContentType__139,
                               StatusCodeContentType__140,
                               StatusCodeContentType__141,
                               StatusCodeContentType__142,
                               StatusCodeContentType__143,
                               StatusCodeContentType__144,
                               StatusCodeContentType__145,
                               StatusCodeContentType__146,
                               StatusCodeContentType__147,
                               StatusCodeContentType__148,
                               StatusCodeContentType__149,
                               StatusCodeContentType__150,
                               StatusCodeContentType__151,
                               StatusCodeContentType__152,
                               StatusCodeContentType__153,
                               StatusCodeContentType__154,
                               StatusCodeContentType__155,
                               StatusCodeContentType__156,
                               StatusCodeContentType__157,
                               StatusCodeContentType__158,
                               StatusCodeContentType__159,
                               StatusCodeContentType__160,
                               StatusCodeContentType__161,
                               StatusCodeContentType__162,
                               StatusCodeContentType__163,
                               StatusCodeContentType__164,
                               StatusCodeContentType__165,
                               StatusCodeContentType__166,
                               StatusCodeContentType__167,
                               StatusCodeContentType__168,
                               StatusCodeContentType__169,
                               StatusCodeContentType__170,
                               StatusCodeContentType__171,
                               StatusCodeContentType__172,
                               StatusCodeContentType__174,
                               StatusCodeContentType__175,
                               StatusCodeContentType__176,
                               StatusCodeContentType__177,
                               StatusCodeContentType__178,
                               StatusCodeContentType__179,
                               StatusCodeContentType__180,
                               StatusCodeContentType__181,
                               StatusCodeContentType__182,
                               StatusCodeContentType__183,
                               StatusCodeContentType__184,
                               StatusCodeContentType__185,
                               StatusCodeContentType__186,
                               StatusCodeContentType__187,
                               StatusCodeContentType__188,
                               StatusCodeContentType__189,
                               StatusCodeContentType__190,
                               StatusCodeContentType__191,
                               StatusCodeContentType__192,
                               StatusCodeContentType__193,
                               StatusCodeContentType__194,
                               StatusCodeContentType__195,
                               StatusCodeContentType__196,
                               StatusCodeContentType__197,
                               StatusCodeContentType__198,
                               StatusCodeContentType__199,
                               StatusCodeContentType__200,
                               StatusCodeContentType__201,
                               StatusCodeContentType__202,
                               StatusCodeContentType__203,
                               StatusCodeContentType__204,
                               StatusCodeContentType__205,
                               StatusCodeContentType__206,
                               StatusCodeContentType__207,
                               StatusCodeContentType__208,
                               StatusCodeContentType__209,
                               StatusCodeContentType__210,
                               StatusCodeContentType__211,
                               StatusCodeContentType__212,
                               StatusCodeContentType__213,
                               StatusCodeContentType__214,
                               StatusCodeContentType__215,
                               StatusCodeContentType__216,
                               StatusCodeContentType__218,
                               StatusCodeContentType__219,
                               StatusCodeContentType__220,
                               StatusCodeContentType__222,
                               StatusCodeContentType__224,
                               StatusCodeContentType__225,
                               StatusCodeContentType__227,
                               StatusCodeContentType__228,
                               StatusCodeContentType__229,
                               StatusCodeContentType__231,
                               StatusCodeContentType__232,
                               StatusCodeContentType__233,
                               StatusCodeContentType__234,
                               StatusCodeContentType__235,
                               StatusCodeContentType__236,
                               StatusCodeContentType__238,
                               StatusCodeContentType__239,
                               StatusCodeContentType__240,
                               StatusCodeContentType__241,
                               StatusCodeContentType__242,
                               StatusCodeContentType__243,
                               StatusCodeContentType__247,
                               StatusCodeContentType__248,
                               StatusCodeContentType__250,
                               StatusCodeContentType__251,
                               StatusCodeContentType__253,
                               StatusCodeContentType__254,
                               StatusCodeContentType__255,
                               StatusCodeContentType__256,
                               StatusCodeContentType__258,
                               StatusCodeContentType__260,
                               StatusCodeContentType__265,
                               StatusCodeContentType__266,
                               StatusCodeContentType__267,
                               StatusCodeContentType__269,
                               StatusCodeContentType__270,
                               StatusCodeContentType__271,
                               StatusCodeContentType__272,
                               StatusCodeContentType__273,
                               StatusCodeContentType__274,
                               StatusCodeContentType__275,
                               StatusCodeContentType__276,
                               StatusCodeContentType__277,
                               StatusCodeContentType__278,
                               StatusCodeContentType__279,
                               StatusCodeContentType__280,
                               StatusCodeContentType__281,
                               StatusCodeContentType__282,
                               StatusCodeContentType__283,
                               StatusCodeContentType__284,
                               StatusCodeContentType__285,
                               StatusCodeContentType__286,
                               StatusCodeContentType__287,
                               StatusCodeContentType__288,
                               StatusCodeContentType__291,
                               StatusCodeContentType__292,
                               StatusCodeContentType__295,
                               StatusCodeContentType__297,
                               StatusCodeContentType__298,
                               StatusCodeContentType__299,
                               StatusCodeContentType__300,
                               StatusCodeContentType__301,
                               StatusCodeContentType__302,
                               StatusCodeContentType__306,
                               StatusCodeContentType__307,
                               StatusCodeContentType__308,
                               StatusCodeContentType__309,
                               StatusCodeContentType__310,
                               StatusCodeContentType__311,
                               StatusCodeContentType__312,
                               StatusCodeContentType__313,
                               StatusCodeContentType__314,
                               StatusCodeContentType__315,
                               StatusCodeContentType__316,
                               StatusCodeContentType__317,
                               StatusCodeContentType__318,
                               StatusCodeContentType__319,
                               StatusCodeContentType__320,
                               StatusCodeContentType__321,
                               StatusCodeContentType__322,
                               StatusCodeContentType__323,
                               StatusCodeContentType__324,
                               StatusCodeContentType__325,
                               StatusCodeContentType__326,
                               StatusCodeContentType__327,
                               StatusCodeContentType__328,
                               StatusCodeContentType__329,
                               StatusCodeContentType__330,
                               StatusCodeContentType__331,
                               StatusCodeContentType__332,
                               StatusCodeContentType__333,
                               StatusCodeContentType__334,
                               StatusCodeContentType__335,
                               StatusCodeContentType__336,
                               StatusCodeContentType__337,
                               StatusCodeContentType__338,
                               StatusCodeContentType__339,
                               StatusCodeContentType__340,
                               StatusCodeContentType__341,
                               StatusCodeContentType__342,
                               StatusCodeContentType__343,
                               StatusCodeContentType__344,
                               StatusCodeContentType__345,
                               StatusCodeContentType__346,
                               StatusCodeContentType__347,
                               StatusCodeContentType__348,
                               StatusCodeContentType__349,
                               StatusCodeContentType__350,
                               StatusCodeContentType__351,
                               StatusCodeContentType__352,
                               StatusCodeContentType__353,
                               StatusCodeContentType__354,
                               StatusCodeContentType__355,
                               StatusCodeContentType__356,
                               StatusCodeContentType__357,
                               StatusCodeContentType__358,
                               StatusCodeContentType__359,
                               StatusCodeContentType__360,
                               StatusCodeContentType__361,
                               StatusCodeContentType__362,
                               StatusCodeContentType__363,
                               StatusCodeContentType__364,
                               StatusCodeContentType__365,
                               StatusCodeContentType__366,
                               StatusCodeContentType__367,
                               StatusCodeContentType__368,
                               StatusCodeContentType__369,
                               StatusCodeContentType__370,
                               StatusCodeContentType__371,
                               StatusCodeContentType__372,
                               StatusCodeContentType__373,
                               StatusCodeContentType__374,
                               StatusCodeContentType__375,
                               StatusCodeContentType__376,
                               StatusCodeContentType__377,
                               StatusCodeContentType__378,
                               StatusCodeContentType__379);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusDescriptionCode_AccountingDebitCredit_D22A }
  TXMLStatusDescriptionCodeAccountingDebitCreditContentType = (StatusDescriptionCodeAccountingDebitCreditContentType__29,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__30,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__31,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__32,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__33,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__34,
                                                               StatusDescriptionCodeAccountingDebitCreditContentType__66);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimeOnlyFormatCode_D21B }
  TXMLTimeOnlyFormatCodeContentType = (TimeOnlyFormatCodeContentType__209,
                                       TimeOnlyFormatCodeContentType__401,
                                       TimeOnlyFormatCodeContentType__402,
                                       TimeOnlyFormatCodeContentType__404,
                                       TimeOnlyFormatCodeContentType__406);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimePointFormatCode_D21B }
  TXMLTimePointFormatCodeContentType = (TimePointFormatCodeContentType__102,
                                        TimePointFormatCodeContentType__203,
                                        TimePointFormatCodeContentType__205,
                                        TimePointFormatCodeContentType__209,
                                        TimePointFormatCodeContentType__502,
                                        TimePointFormatCodeContentType__602);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentCategoryCode_D22A }
  TXMLTransportEquipmentCategoryCodeContentType = (TransportEquipmentCategoryCodeContentType_AA,
                                                   TransportEquipmentCategoryCodeContentType_AB,
                                                   TransportEquipmentCategoryCodeContentType_AD,
                                                   TransportEquipmentCategoryCodeContentType_AE,
                                                   TransportEquipmentCategoryCodeContentType_AG,
                                                   TransportEquipmentCategoryCodeContentType_AH,
                                                   TransportEquipmentCategoryCodeContentType_AI,
                                                   TransportEquipmentCategoryCodeContentType_AJ,
                                                   TransportEquipmentCategoryCodeContentType_AK,
                                                   TransportEquipmentCategoryCodeContentType_AL,
                                                   TransportEquipmentCategoryCodeContentType_AM,
                                                   TransportEquipmentCategoryCodeContentType_AN,
                                                   TransportEquipmentCategoryCodeContentType_AO,
                                                   TransportEquipmentCategoryCodeContentType_AP,
                                                   TransportEquipmentCategoryCodeContentType_AQ,
                                                   TransportEquipmentCategoryCodeContentType_AT,
                                                   TransportEquipmentCategoryCodeContentType_BB,
                                                   TransportEquipmentCategoryCodeContentType_BL,
                                                   TransportEquipmentCategoryCodeContentType_BPN,
                                                   TransportEquipmentCategoryCodeContentType_BPO,
                                                   TransportEquipmentCategoryCodeContentType_BPP,
                                                   TransportEquipmentCategoryCodeContentType_BPQ,
                                                   TransportEquipmentCategoryCodeContentType_BPR,
                                                   TransportEquipmentCategoryCodeContentType_BPS,
                                                   TransportEquipmentCategoryCodeContentType_BPT,
                                                   TransportEquipmentCategoryCodeContentType_BPU,
                                                   TransportEquipmentCategoryCodeContentType_BPV,
                                                   TransportEquipmentCategoryCodeContentType_BPW,
                                                   TransportEquipmentCategoryCodeContentType_BPX,
                                                   TransportEquipmentCategoryCodeContentType_BPY,
                                                   TransportEquipmentCategoryCodeContentType_BPZ,
                                                   TransportEquipmentCategoryCodeContentType_BR,
                                                   TransportEquipmentCategoryCodeContentType_BX,
                                                   TransportEquipmentCategoryCodeContentType_CH,
                                                   TransportEquipmentCategoryCodeContentType_CN,
                                                   TransportEquipmentCategoryCodeContentType_DPA,
                                                   TransportEquipmentCategoryCodeContentType_DPB,
                                                   TransportEquipmentCategoryCodeContentType_DPC,
                                                   TransportEquipmentCategoryCodeContentType_DPD,
                                                   TransportEquipmentCategoryCodeContentType_DPE,
                                                   TransportEquipmentCategoryCodeContentType_DPF,
                                                   TransportEquipmentCategoryCodeContentType_DPG,
                                                   TransportEquipmentCategoryCodeContentType_DPH,
                                                   TransportEquipmentCategoryCodeContentType_DPI,
                                                   TransportEquipmentCategoryCodeContentType_DPJ,
                                                   TransportEquipmentCategoryCodeContentType_DPK,
                                                   TransportEquipmentCategoryCodeContentType_DPL,
                                                   TransportEquipmentCategoryCodeContentType_DPM,
                                                   TransportEquipmentCategoryCodeContentType_DPN,
                                                   TransportEquipmentCategoryCodeContentType_DPO,
                                                   TransportEquipmentCategoryCodeContentType_EFP,
                                                   TransportEquipmentCategoryCodeContentType_EFQ,
                                                   TransportEquipmentCategoryCodeContentType_EFR,
                                                   TransportEquipmentCategoryCodeContentType_EFS,
                                                   TransportEquipmentCategoryCodeContentType_EFT,
                                                   TransportEquipmentCategoryCodeContentType_EFU,
                                                   TransportEquipmentCategoryCodeContentType_EFV,
                                                   TransportEquipmentCategoryCodeContentType_EFW,
                                                   TransportEquipmentCategoryCodeContentType_EFX,
                                                   TransportEquipmentCategoryCodeContentType_EFY,
                                                   TransportEquipmentCategoryCodeContentType_EFZ,
                                                   TransportEquipmentCategoryCodeContentType_EGA,
                                                   TransportEquipmentCategoryCodeContentType_EGB,
                                                   TransportEquipmentCategoryCodeContentType_EGC,
                                                   TransportEquipmentCategoryCodeContentType_EGD,
                                                   TransportEquipmentCategoryCodeContentType_EGE,
                                                   TransportEquipmentCategoryCodeContentType_EGF,
                                                   TransportEquipmentCategoryCodeContentType_EGG,
                                                   TransportEquipmentCategoryCodeContentType_EGH,
                                                   TransportEquipmentCategoryCodeContentType_EGI,
                                                   TransportEquipmentCategoryCodeContentType_EYP,
                                                   TransportEquipmentCategoryCodeContentType_FPN,
                                                   TransportEquipmentCategoryCodeContentType_FPR,
                                                   TransportEquipmentCategoryCodeContentType_IL,
                                                   TransportEquipmentCategoryCodeContentType_LAR,
                                                   TransportEquipmentCategoryCodeContentType_LU,
                                                   TransportEquipmentCategoryCodeContentType_MPA,
                                                   TransportEquipmentCategoryCodeContentType_PA,
                                                   TransportEquipmentCategoryCodeContentType_PBP,
                                                   TransportEquipmentCategoryCodeContentType_PFP,
                                                   TransportEquipmentCategoryCodeContentType_PL,
                                                   TransportEquipmentCategoryCodeContentType_PPA,
                                                   TransportEquipmentCategoryCodeContentType_PST,
                                                   TransportEquipmentCategoryCodeContentType_RF,
                                                   TransportEquipmentCategoryCodeContentType_RG,
                                                   TransportEquipmentCategoryCodeContentType_RGF,
                                                   TransportEquipmentCategoryCodeContentType_RO,
                                                   TransportEquipmentCategoryCodeContentType_RR,
                                                   TransportEquipmentCategoryCodeContentType_SPP,
                                                   TransportEquipmentCategoryCodeContentType_STR,
                                                   TransportEquipmentCategoryCodeContentType_SW,
                                                   TransportEquipmentCategoryCodeContentType_TE,
                                                   TransportEquipmentCategoryCodeContentType_TP,
                                                   TransportEquipmentCategoryCodeContentType_TS,
                                                   TransportEquipmentCategoryCodeContentType_TSU,
                                                   TransportEquipmentCategoryCodeContentType_UL);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentFullnessCode_D22A }
  TXMLTransportEquipmentFullnessCodeContentType = (TransportEquipmentFullnessCodeContentType__1,
                                                   TransportEquipmentFullnessCodeContentType__2,
                                                   TransportEquipmentFullnessCodeContentType__3,
                                                   TransportEquipmentFullnessCodeContentType__4,
                                                   TransportEquipmentFullnessCodeContentType__5,
                                                   TransportEquipmentFullnessCodeContentType__6,
                                                   TransportEquipmentFullnessCodeContentType__7,
                                                   TransportEquipmentFullnessCodeContentType__8,
                                                   TransportEquipmentFullnessCodeContentType__9,
                                                   TransportEquipmentFullnessCodeContentType__10,
                                                   TransportEquipmentFullnessCodeContentType__11,
                                                   TransportEquipmentFullnessCodeContentType__12,
                                                   TransportEquipmentFullnessCodeContentType__13);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMeansTypeCode_2007 }
  TXMLTransportMeansTypeCodeContentType = (TransportMeansTypeCodeContentType__1501,
                                           TransportMeansTypeCodeContentType__1502,
                                           TransportMeansTypeCodeContentType__1503,
                                           TransportMeansTypeCodeContentType__1504,
                                           TransportMeansTypeCodeContentType__1505,
                                           TransportMeansTypeCodeContentType__1506,
                                           TransportMeansTypeCodeContentType__1511,
                                           TransportMeansTypeCodeContentType__1512,
                                           TransportMeansTypeCodeContentType__1513,
                                           TransportMeansTypeCodeContentType__1514,
                                           TransportMeansTypeCodeContentType__1515,
                                           TransportMeansTypeCodeContentType__1516,
                                           TransportMeansTypeCodeContentType__1517,
                                           TransportMeansTypeCodeContentType__1518,
                                           TransportMeansTypeCodeContentType__1519,
                                           TransportMeansTypeCodeContentType__1521,
                                           TransportMeansTypeCodeContentType__1522,
                                           TransportMeansTypeCodeContentType__1523,
                                           TransportMeansTypeCodeContentType__1524,
                                           TransportMeansTypeCodeContentType__1525,
                                           TransportMeansTypeCodeContentType__1531,
                                           TransportMeansTypeCodeContentType__1532,
                                           TransportMeansTypeCodeContentType__1533,
                                           TransportMeansTypeCodeContentType__1534,
                                           TransportMeansTypeCodeContentType__1541,
                                           TransportMeansTypeCodeContentType__1542,
                                           TransportMeansTypeCodeContentType__1543,
                                           TransportMeansTypeCodeContentType__1551,
                                           TransportMeansTypeCodeContentType__1552,
                                           TransportMeansTypeCodeContentType__1553,
                                           TransportMeansTypeCodeContentType__1591,
                                           TransportMeansTypeCodeContentType__1592,
                                           TransportMeansTypeCodeContentType__1593,
                                           TransportMeansTypeCodeContentType__1594,
                                           TransportMeansTypeCodeContentType__1601,
                                           TransportMeansTypeCodeContentType__1602,
                                           TransportMeansTypeCodeContentType__1603,
                                           TransportMeansTypeCodeContentType__1604,
                                           TransportMeansTypeCodeContentType__1605,
                                           TransportMeansTypeCodeContentType__1606,
                                           TransportMeansTypeCodeContentType__1607,
                                           TransportMeansTypeCodeContentType__1711,
                                           TransportMeansTypeCodeContentType__1712,
                                           TransportMeansTypeCodeContentType__1721,
                                           TransportMeansTypeCodeContentType__1723,
                                           TransportMeansTypeCodeContentType__1724,
                                           TransportMeansTypeCodeContentType__1725,
                                           TransportMeansTypeCodeContentType__1726,
                                           TransportMeansTypeCodeContentType__1727,
                                           TransportMeansTypeCodeContentType__1728,
                                           TransportMeansTypeCodeContentType__1729,
                                           TransportMeansTypeCodeContentType__1751,
                                           TransportMeansTypeCodeContentType__1752,
                                           TransportMeansTypeCodeContentType__1753,
                                           TransportMeansTypeCodeContentType__1761,
                                           TransportMeansTypeCodeContentType__1762,
                                           TransportMeansTypeCodeContentType__1763,
                                           TransportMeansTypeCodeContentType__1764,
                                           TransportMeansTypeCodeContentType__1765,
                                           TransportMeansTypeCodeContentType__1766,
                                           TransportMeansTypeCodeContentType__1781,
                                           TransportMeansTypeCodeContentType__1782,
                                           TransportMeansTypeCodeContentType__2201,
                                           TransportMeansTypeCodeContentType__2202,
                                           TransportMeansTypeCodeContentType__2203,
                                           TransportMeansTypeCodeContentType__2301,
                                           TransportMeansTypeCodeContentType__2302,
                                           TransportMeansTypeCodeContentType__2303,
                                           TransportMeansTypeCodeContentType__2304,
                                           TransportMeansTypeCodeContentType__2305,
                                           TransportMeansTypeCodeContentType__3100,
                                           TransportMeansTypeCodeContentType__3101,
                                           TransportMeansTypeCodeContentType__3102,
                                           TransportMeansTypeCodeContentType__3103,
                                           TransportMeansTypeCodeContentType__3104,
                                           TransportMeansTypeCodeContentType__3105,
                                           TransportMeansTypeCodeContentType__3106,
                                           TransportMeansTypeCodeContentType__3107,
                                           TransportMeansTypeCodeContentType__3108,
                                           TransportMeansTypeCodeContentType__3109,
                                           TransportMeansTypeCodeContentType__3110,
                                           TransportMeansTypeCodeContentType__3111,
                                           TransportMeansTypeCodeContentType__3112,
                                           TransportMeansTypeCodeContentType__3113,
                                           TransportMeansTypeCodeContentType__3114,
                                           TransportMeansTypeCodeContentType__3115,
                                           TransportMeansTypeCodeContentType__3116,
                                           TransportMeansTypeCodeContentType__3117,
                                           TransportMeansTypeCodeContentType__3118,
                                           TransportMeansTypeCodeContentType__3119,
                                           TransportMeansTypeCodeContentType__3120,
                                           TransportMeansTypeCodeContentType__3121,
                                           TransportMeansTypeCodeContentType__3122,
                                           TransportMeansTypeCodeContentType__3123,
                                           TransportMeansTypeCodeContentType__3124,
                                           TransportMeansTypeCodeContentType__3125,
                                           TransportMeansTypeCodeContentType__3126,
                                           TransportMeansTypeCodeContentType__3127,
                                           TransportMeansTypeCodeContentType__3128,
                                           TransportMeansTypeCodeContentType__3129,
                                           TransportMeansTypeCodeContentType__3130,
                                           TransportMeansTypeCodeContentType__3131,
                                           TransportMeansTypeCodeContentType__3132,
                                           TransportMeansTypeCodeContentType__3133,
                                           TransportMeansTypeCodeContentType__3134,
                                           TransportMeansTypeCodeContentType__3135,
                                           TransportMeansTypeCodeContentType__3136,
                                           TransportMeansTypeCodeContentType__3137,
                                           TransportMeansTypeCodeContentType__3138,
                                           TransportMeansTypeCodeContentType__3201,
                                           TransportMeansTypeCodeContentType__3301,
                                           TransportMeansTypeCodeContentType__3302,
                                           TransportMeansTypeCodeContentType__3303,
                                           TransportMeansTypeCodeContentType__3304,
                                           TransportMeansTypeCodeContentType__4000,
                                           TransportMeansTypeCodeContentType__5000,
                                           TransportMeansTypeCodeContentType__8021,
                                           TransportMeansTypeCodeContentType__8022,
                                           TransportMeansTypeCodeContentType__8023,
                                           TransportMeansTypeCodeContentType__8161,
                                           TransportMeansTypeCodeContentType__8162,
                                           TransportMeansTypeCodeContentType__8163,
                                           TransportMeansTypeCodeContentType__8441,
                                           TransportMeansTypeCodeContentType__8442,
                                           TransportMeansTypeCodeContentType__8443,
                                           TransportMeansTypeCodeContentType__8444,
                                           TransportMeansTypeCodeContentType__8445,
                                           TransportMeansTypeCodeContentType__8446,
                                           TransportMeansTypeCodeContentType__8447,
                                           TransportMeansTypeCodeContentType__8448,
                                           TransportMeansTypeCodeContentType__8451,
                                           TransportMeansTypeCodeContentType__8452,
                                           TransportMeansTypeCodeContentType__8453,
                                           TransportMeansTypeCodeContentType__8454);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportModeCode_2 }
  TXMLTransportModeCodeContentType = (TransportModeCodeContentType__0,
                                      TransportModeCodeContentType__1,
                                      TransportModeCodeContentType__2,
                                      TransportModeCodeContentType__3,
                                      TransportModeCodeContentType__4,
                                      TransportModeCodeContentType__5,
                                      TransportModeCodeContentType__6,
                                      TransportModeCodeContentType__7,
                                      TransportModeCodeContentType__8,
                                      TransportModeCodeContentType__9);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMovementStageCode_D22A }
  TXMLTransportMovementStageCodeContentType = (TransportMovementStageCodeContentType__1,
                                               TransportMovementStageCodeContentType__2,
                                               TransportMovementStageCodeContentType__3,
                                               TransportMovementStageCodeContentType__4,
                                               TransportMovementStageCodeContentType__5,
                                               TransportMovementStageCodeContentType__6,
                                               TransportMovementStageCodeContentType__10,
                                               TransportMovementStageCodeContentType__11,
                                               TransportMovementStageCodeContentType__12,
                                               TransportMovementStageCodeContentType__13,
                                               TransportMovementStageCodeContentType__15,
                                               TransportMovementStageCodeContentType__16,
                                               TransportMovementStageCodeContentType__17,
                                               TransportMovementStageCodeContentType__18,
                                               TransportMovementStageCodeContentType__19,
                                               TransportMovementStageCodeContentType__20,
                                               TransportMovementStageCodeContentType__21,
                                               TransportMovementStageCodeContentType__22,
                                               TransportMovementStageCodeContentType__23,
                                               TransportMovementStageCodeContentType__24,
                                               TransportMovementStageCodeContentType__25,
                                               TransportMovementStageCodeContentType__26,
                                               TransportMovementStageCodeContentType__27,
                                               TransportMovementStageCodeContentType__28,
                                               TransportMovementStageCodeContentType__29,
                                               TransportMovementStageCodeContentType__30,
                                               TransportMovementStageCodeContentType__31,
                                               TransportMovementStageCodeContentType__32,
                                               TransportMovementStageCodeContentType__33,
                                               TransportMovementStageCodeContentType__34);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportPaymentArrangementCode_D22A }
  TXMLTransportPaymentArrangementCodeContentType = (TransportPaymentArrangementCodeContentType_A,
                                                    TransportPaymentArrangementCodeContentType_B,
                                                    TransportPaymentArrangementCodeContentType_C,
                                                    TransportPaymentArrangementCodeContentType_P);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_UnqualifiedDataType_100 }
  IXMLAmountType = interface;
  IXMLBinaryObjectType = interface;
  IXMLCodeType = interface;
  IXMLDateTimeType = interface;
  IXMLDateTimeTypeDateTimeString = interface;
  IXMLDateType = interface;
  IXMLDateString = interface;
  IXMLIDType = interface;
  IXMLIndicatorType = interface;
  IXMLIndicatorString = interface;
  IXMLMeasureType = interface;
  IXMLNumericType = interface;
  IXMLPercentType = interface;
  IXMLQuantityType = interface;
  IXMLRateType = interface;
  IXMLTextType = interface;

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_ISO_ISOTwo-letterCountryCode_SecondEdition2006 }
  TXMLISOTwoletterCountryCodeContentType = (ISOTwoletterCountryCodeContentType_AD,
                                            ISOTwoletterCountryCodeContentType_AE,
                                            ISOTwoletterCountryCodeContentType_AF,
                                            ISOTwoletterCountryCodeContentType_AG,
                                            ISOTwoletterCountryCodeContentType_AI,
                                            ISOTwoletterCountryCodeContentType_AL,
                                            ISOTwoletterCountryCodeContentType_AM,
                                            ISOTwoletterCountryCodeContentType_AO,
                                            ISOTwoletterCountryCodeContentType_AQ,
                                            ISOTwoletterCountryCodeContentType_AR,
                                            ISOTwoletterCountryCodeContentType__AS,
                                            ISOTwoletterCountryCodeContentType_AT,
                                            ISOTwoletterCountryCodeContentType_AU,
                                            ISOTwoletterCountryCodeContentType_AW,
                                            ISOTwoletterCountryCodeContentType_AX,
                                            ISOTwoletterCountryCodeContentType_AZ,
                                            ISOTwoletterCountryCodeContentType_BA,
                                            ISOTwoletterCountryCodeContentType_BB,
                                            ISOTwoletterCountryCodeContentType_BD,
                                            ISOTwoletterCountryCodeContentType_BE,
                                            ISOTwoletterCountryCodeContentType_BF,
                                            ISOTwoletterCountryCodeContentType_BG,
                                            ISOTwoletterCountryCodeContentType_BH,
                                            ISOTwoletterCountryCodeContentType_BI,
                                            ISOTwoletterCountryCodeContentType_BJ,
                                            ISOTwoletterCountryCodeContentType_BL,
                                            ISOTwoletterCountryCodeContentType_BM,
                                            ISOTwoletterCountryCodeContentType_BN,
                                            ISOTwoletterCountryCodeContentType_BO,
                                            ISOTwoletterCountryCodeContentType_BQ,
                                            ISOTwoletterCountryCodeContentType_BR,
                                            ISOTwoletterCountryCodeContentType_BS,
                                            ISOTwoletterCountryCodeContentType_BT,
                                            ISOTwoletterCountryCodeContentType_BV,
                                            ISOTwoletterCountryCodeContentType_BW,
                                            ISOTwoletterCountryCodeContentType_BY,
                                            ISOTwoletterCountryCodeContentType_BZ,
                                            ISOTwoletterCountryCodeContentType_CA,
                                            ISOTwoletterCountryCodeContentType_CC,
                                            ISOTwoletterCountryCodeContentType_CD,
                                            ISOTwoletterCountryCodeContentType_CF,
                                            ISOTwoletterCountryCodeContentType_CG,
                                            ISOTwoletterCountryCodeContentType_CH,
                                            ISOTwoletterCountryCodeContentType_CI,
                                            ISOTwoletterCountryCodeContentType_CK,
                                            ISOTwoletterCountryCodeContentType_CL,
                                            ISOTwoletterCountryCodeContentType_CM,
                                            ISOTwoletterCountryCodeContentType_CN,
                                            ISOTwoletterCountryCodeContentType_CO,
                                            ISOTwoletterCountryCodeContentType_CR,
                                            ISOTwoletterCountryCodeContentType_CU,
                                            ISOTwoletterCountryCodeContentType_CV,
                                            ISOTwoletterCountryCodeContentType_CW,
                                            ISOTwoletterCountryCodeContentType_CX,
                                            ISOTwoletterCountryCodeContentType_CY,
                                            ISOTwoletterCountryCodeContentType_CZ,
                                            ISOTwoletterCountryCodeContentType_DE,
                                            ISOTwoletterCountryCodeContentType_DJ,
                                            ISOTwoletterCountryCodeContentType_DK,
                                            ISOTwoletterCountryCodeContentType_DM,
                                            ISOTwoletterCountryCodeContentType__DO,
                                            ISOTwoletterCountryCodeContentType_DZ,
                                            ISOTwoletterCountryCodeContentType_EC,
                                            ISOTwoletterCountryCodeContentType_EE,
                                            ISOTwoletterCountryCodeContentType_EG,
                                            ISOTwoletterCountryCodeContentType_EH,
                                            ISOTwoletterCountryCodeContentType_ER,
                                            ISOTwoletterCountryCodeContentType_ES,
                                            ISOTwoletterCountryCodeContentType_ET,
                                            ISOTwoletterCountryCodeContentType_FI,
                                            ISOTwoletterCountryCodeContentType_FJ,
                                            ISOTwoletterCountryCodeContentType_FK,
                                            ISOTwoletterCountryCodeContentType_FM,
                                            ISOTwoletterCountryCodeContentType_FO,
                                            ISOTwoletterCountryCodeContentType_FR,
                                            ISOTwoletterCountryCodeContentType_GA,
                                            ISOTwoletterCountryCodeContentType_GB,
                                            ISOTwoletterCountryCodeContentType_GD,
                                            ISOTwoletterCountryCodeContentType_GE,
                                            ISOTwoletterCountryCodeContentType_GF,
                                            ISOTwoletterCountryCodeContentType_GG,
                                            ISOTwoletterCountryCodeContentType_GH,
                                            ISOTwoletterCountryCodeContentType_GI,
                                            ISOTwoletterCountryCodeContentType_GL,
                                            ISOTwoletterCountryCodeContentType_GM,
                                            ISOTwoletterCountryCodeContentType_GN,
                                            ISOTwoletterCountryCodeContentType_GP,
                                            ISOTwoletterCountryCodeContentType_GQ,
                                            ISOTwoletterCountryCodeContentType_GR,
                                            ISOTwoletterCountryCodeContentType_GS,
                                            ISOTwoletterCountryCodeContentType_GT,
                                            ISOTwoletterCountryCodeContentType_GU,
                                            ISOTwoletterCountryCodeContentType_GW,
                                            ISOTwoletterCountryCodeContentType_GY,
                                            ISOTwoletterCountryCodeContentType_HK,
                                            ISOTwoletterCountryCodeContentType_HM,
                                            ISOTwoletterCountryCodeContentType_HN,
                                            ISOTwoletterCountryCodeContentType_HR,
                                            ISOTwoletterCountryCodeContentType_HT,
                                            ISOTwoletterCountryCodeContentType_HU,
                                            ISOTwoletterCountryCodeContentType_ID,
                                            ISOTwoletterCountryCodeContentType_IE,
                                            ISOTwoletterCountryCodeContentType_IL,
                                            ISOTwoletterCountryCodeContentType_IM,
                                            ISOTwoletterCountryCodeContentType__IN,
                                            ISOTwoletterCountryCodeContentType_IO,
                                            ISOTwoletterCountryCodeContentType_IQ,
                                            ISOTwoletterCountryCodeContentType_IR,
                                            ISOTwoletterCountryCodeContentType__IS,
                                            ISOTwoletterCountryCodeContentType_IT,
                                            ISOTwoletterCountryCodeContentType_JE,
                                            ISOTwoletterCountryCodeContentType_JM,
                                            ISOTwoletterCountryCodeContentType_JO,
                                            ISOTwoletterCountryCodeContentType_JP,
                                            ISOTwoletterCountryCodeContentType_KE,
                                            ISOTwoletterCountryCodeContentType_KG,
                                            ISOTwoletterCountryCodeContentType_KH,
                                            ISOTwoletterCountryCodeContentType_KI,
                                            ISOTwoletterCountryCodeContentType_KM,
                                            ISOTwoletterCountryCodeContentType_KN,
                                            ISOTwoletterCountryCodeContentType_KP,
                                            ISOTwoletterCountryCodeContentType_KR,
                                            ISOTwoletterCountryCodeContentType_KW,
                                            ISOTwoletterCountryCodeContentType_KY,
                                            ISOTwoletterCountryCodeContentType_KZ,
                                            ISOTwoletterCountryCodeContentType_LA,
                                            ISOTwoletterCountryCodeContentType_LB,
                                            ISOTwoletterCountryCodeContentType_LC,
                                            ISOTwoletterCountryCodeContentType_LI,
                                            ISOTwoletterCountryCodeContentType_LK,
                                            ISOTwoletterCountryCodeContentType_LR,
                                            ISOTwoletterCountryCodeContentType_LS,
                                            ISOTwoletterCountryCodeContentType_LT,
                                            ISOTwoletterCountryCodeContentType_LU,
                                            ISOTwoletterCountryCodeContentType_LV,
                                            ISOTwoletterCountryCodeContentType_LY,
                                            ISOTwoletterCountryCodeContentType_MA,
                                            ISOTwoletterCountryCodeContentType_MC,
                                            ISOTwoletterCountryCodeContentType_MD,
                                            ISOTwoletterCountryCodeContentType_ME,
                                            ISOTwoletterCountryCodeContentType_MF,
                                            ISOTwoletterCountryCodeContentType_MG,
                                            ISOTwoletterCountryCodeContentType_MH,
                                            ISOTwoletterCountryCodeContentType_MK,
                                            ISOTwoletterCountryCodeContentType_ML,
                                            ISOTwoletterCountryCodeContentType_MM,
                                            ISOTwoletterCountryCodeContentType_MN,
                                            ISOTwoletterCountryCodeContentType_MO,
                                            ISOTwoletterCountryCodeContentType_MP,
                                            ISOTwoletterCountryCodeContentType_MQ,
                                            ISOTwoletterCountryCodeContentType_MR,
                                            ISOTwoletterCountryCodeContentType_MS,
                                            ISOTwoletterCountryCodeContentType_MT,
                                            ISOTwoletterCountryCodeContentType_MU,
                                            ISOTwoletterCountryCodeContentType_MV,
                                            ISOTwoletterCountryCodeContentType_MW,
                                            ISOTwoletterCountryCodeContentType_MX,
                                            ISOTwoletterCountryCodeContentType_MY,
                                            ISOTwoletterCountryCodeContentType_MZ,
                                            ISOTwoletterCountryCodeContentType_NA,
                                            ISOTwoletterCountryCodeContentType_NC,
                                            ISOTwoletterCountryCodeContentType_NE,
                                            ISOTwoletterCountryCodeContentType_NF,
                                            ISOTwoletterCountryCodeContentType_NG,
                                            ISOTwoletterCountryCodeContentType_NI,
                                            ISOTwoletterCountryCodeContentType_NL,
                                            ISOTwoletterCountryCodeContentType_NO,
                                            ISOTwoletterCountryCodeContentType_NP,
                                            ISOTwoletterCountryCodeContentType_NR,
                                            ISOTwoletterCountryCodeContentType_NU,
                                            ISOTwoletterCountryCodeContentType_NZ,
                                            ISOTwoletterCountryCodeContentType_OM,
                                            ISOTwoletterCountryCodeContentType_PA,
                                            ISOTwoletterCountryCodeContentType_PE,
                                            ISOTwoletterCountryCodeContentType_PF,
                                            ISOTwoletterCountryCodeContentType_PG,
                                            ISOTwoletterCountryCodeContentType_PH,
                                            ISOTwoletterCountryCodeContentType_PK,
                                            ISOTwoletterCountryCodeContentType_PL,
                                            ISOTwoletterCountryCodeContentType_PM,
                                            ISOTwoletterCountryCodeContentType_PN,
                                            ISOTwoletterCountryCodeContentType_PR,
                                            ISOTwoletterCountryCodeContentType_PS,
                                            ISOTwoletterCountryCodeContentType_PT,
                                            ISOTwoletterCountryCodeContentType_PW,
                                            ISOTwoletterCountryCodeContentType_PY,
                                            ISOTwoletterCountryCodeContentType_QA,
                                            ISOTwoletterCountryCodeContentType_RE,
                                            ISOTwoletterCountryCodeContentType_RO,
                                            ISOTwoletterCountryCodeContentType_RS,
                                            ISOTwoletterCountryCodeContentType_RU,
                                            ISOTwoletterCountryCodeContentType_RW,
                                            ISOTwoletterCountryCodeContentType_SA,
                                            ISOTwoletterCountryCodeContentType_SB,
                                            ISOTwoletterCountryCodeContentType_SC,
                                            ISOTwoletterCountryCodeContentType_SD,
                                            ISOTwoletterCountryCodeContentType_SE,
                                            ISOTwoletterCountryCodeContentType_SG,
                                            ISOTwoletterCountryCodeContentType_SH,
                                            ISOTwoletterCountryCodeContentType_SI,
                                            ISOTwoletterCountryCodeContentType_SJ,
                                            ISOTwoletterCountryCodeContentType_SK,
                                            ISOTwoletterCountryCodeContentType_SL,
                                            ISOTwoletterCountryCodeContentType_SM,
                                            ISOTwoletterCountryCodeContentType_SN,
                                            ISOTwoletterCountryCodeContentType_SO,
                                            ISOTwoletterCountryCodeContentType_SR,
                                            ISOTwoletterCountryCodeContentType_SS,
                                            ISOTwoletterCountryCodeContentType_ST,
                                            ISOTwoletterCountryCodeContentType_SV,
                                            ISOTwoletterCountryCodeContentType_SX,
                                            ISOTwoletterCountryCodeContentType_SY,
                                            ISOTwoletterCountryCodeContentType_SZ,
                                            ISOTwoletterCountryCodeContentType_TC,
                                            ISOTwoletterCountryCodeContentType_TD,
                                            ISOTwoletterCountryCodeContentType_TF,
                                            ISOTwoletterCountryCodeContentType_TG,
                                            ISOTwoletterCountryCodeContentType_TH,
                                            ISOTwoletterCountryCodeContentType_TJ,
                                            ISOTwoletterCountryCodeContentType_TK,
                                            ISOTwoletterCountryCodeContentType_TL,
                                            ISOTwoletterCountryCodeContentType_TM,
                                            ISOTwoletterCountryCodeContentType_TN,
                                            ISOTwoletterCountryCodeContentType__TO,
                                            ISOTwoletterCountryCodeContentType_TR,
                                            ISOTwoletterCountryCodeContentType_TT,
                                            ISOTwoletterCountryCodeContentType_TV,
                                            ISOTwoletterCountryCodeContentType_TW,
                                            ISOTwoletterCountryCodeContentType_TZ,
                                            ISOTwoletterCountryCodeContentType_UA,
                                            ISOTwoletterCountryCodeContentType_UG,
                                            ISOTwoletterCountryCodeContentType_UM,
                                            ISOTwoletterCountryCodeContentType_US,
                                            ISOTwoletterCountryCodeContentType_UY,
                                            ISOTwoletterCountryCodeContentType_UZ,
                                            ISOTwoletterCountryCodeContentType_VA,
                                            ISOTwoletterCountryCodeContentType_VC,
                                            ISOTwoletterCountryCodeContentType_VE,
                                            ISOTwoletterCountryCodeContentType_VG,
                                            ISOTwoletterCountryCodeContentType_VI,
                                            ISOTwoletterCountryCodeContentType_VN,
                                            ISOTwoletterCountryCodeContentType_VU,
                                            ISOTwoletterCountryCodeContentType_WF,
                                            ISOTwoletterCountryCodeContentType_WS,
                                            ISOTwoletterCountryCodeContentType_YE,
                                            ISOTwoletterCountryCodeContentType_YT,
                                            ISOTwoletterCountryCodeContentType_ZA,
                                            ISOTwoletterCountryCodeContentType_ZM,
                                            ISOTwoletterCountryCodeContentType_ZW);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_FreightCostCode_4 }
  TXMLFreightCostCodeContentType = (FreightCostCodeContentType__100000,
                                    FreightCostCodeContentType__100999,
                                    FreightCostCodeContentType__101000,
                                    FreightCostCodeContentType__101002,
                                    FreightCostCodeContentType__101003,
                                    FreightCostCodeContentType__101004,
                                    FreightCostCodeContentType__101005,
                                    FreightCostCodeContentType__101006,
                                    FreightCostCodeContentType__101007,
                                    FreightCostCodeContentType__101008,
                                    FreightCostCodeContentType__101009,
                                    FreightCostCodeContentType__101010,
                                    FreightCostCodeContentType__101011,
                                    FreightCostCodeContentType__101012,
                                    FreightCostCodeContentType__101013,
                                    FreightCostCodeContentType__101014,
                                    FreightCostCodeContentType__101015,
                                    FreightCostCodeContentType__101016,
                                    FreightCostCodeContentType__101017,
                                    FreightCostCodeContentType__101018,
                                    FreightCostCodeContentType__101019,
                                    FreightCostCodeContentType__101020,
                                    FreightCostCodeContentType__101021,
                                    FreightCostCodeContentType__101022,
                                    FreightCostCodeContentType__101024,
                                    FreightCostCodeContentType__101027,
                                    FreightCostCodeContentType__101028,
                                    FreightCostCodeContentType__101029,
                                    FreightCostCodeContentType__101031,
                                    FreightCostCodeContentType__101033,
                                    FreightCostCodeContentType__101034,
                                    FreightCostCodeContentType__101035,
                                    FreightCostCodeContentType__101036,
                                    FreightCostCodeContentType__101037,
                                    FreightCostCodeContentType__101038,
                                    FreightCostCodeContentType__101039,
                                    FreightCostCodeContentType__101040,
                                    FreightCostCodeContentType__101041,
                                    FreightCostCodeContentType__101042,
                                    FreightCostCodeContentType__101043,
                                    FreightCostCodeContentType__101044,
                                    FreightCostCodeContentType__101045,
                                    FreightCostCodeContentType__101046,
                                    FreightCostCodeContentType__101047,
                                    FreightCostCodeContentType__101048,
                                    FreightCostCodeContentType__101049,
                                    FreightCostCodeContentType__101050,
                                    FreightCostCodeContentType__101051,
                                    FreightCostCodeContentType__101052,
                                    FreightCostCodeContentType__101053,
                                    FreightCostCodeContentType__101054,
                                    FreightCostCodeContentType__101056,
                                    FreightCostCodeContentType__101057,
                                    FreightCostCodeContentType__101058,
                                    FreightCostCodeContentType__101059,
                                    FreightCostCodeContentType__101060,
                                    FreightCostCodeContentType__101061,
                                    FreightCostCodeContentType__102000,
                                    FreightCostCodeContentType__102002,
                                    FreightCostCodeContentType__102003,
                                    FreightCostCodeContentType__102004,
                                    FreightCostCodeContentType__102005,
                                    FreightCostCodeContentType__102006,
                                    FreightCostCodeContentType__102011,
                                    FreightCostCodeContentType__102012,
                                    FreightCostCodeContentType__102013,
                                    FreightCostCodeContentType__102014,
                                    FreightCostCodeContentType__102015,
                                    FreightCostCodeContentType__102016,
                                    FreightCostCodeContentType__102017,
                                    FreightCostCodeContentType__102018,
                                    FreightCostCodeContentType__102019,
                                    FreightCostCodeContentType__102020,
                                    FreightCostCodeContentType__102021,
                                    FreightCostCodeContentType__102022,
                                    FreightCostCodeContentType__102023,
                                    FreightCostCodeContentType__102024,
                                    FreightCostCodeContentType__102025,
                                    FreightCostCodeContentType__102026,
                                    FreightCostCodeContentType__102027,
                                    FreightCostCodeContentType__102028,
                                    FreightCostCodeContentType__102029,
                                    FreightCostCodeContentType__102030,
                                    FreightCostCodeContentType__102041,
                                    FreightCostCodeContentType__102042,
                                    FreightCostCodeContentType__102043,
                                    FreightCostCodeContentType__102044,
                                    FreightCostCodeContentType__102045,
                                    FreightCostCodeContentType__102046,
                                    FreightCostCodeContentType__102047,
                                    FreightCostCodeContentType__102049,
                                    FreightCostCodeContentType__102050,
                                    FreightCostCodeContentType__102051,
                                    FreightCostCodeContentType__102052,
                                    FreightCostCodeContentType__102070,
                                    FreightCostCodeContentType__102071,
                                    FreightCostCodeContentType__102072,
                                    FreightCostCodeContentType__102073,
                                    FreightCostCodeContentType__102074,
                                    FreightCostCodeContentType__102075,
                                    FreightCostCodeContentType__102076,
                                    FreightCostCodeContentType__102077,
                                    FreightCostCodeContentType__102078,
                                    FreightCostCodeContentType__102079,
                                    FreightCostCodeContentType__102080,
                                    FreightCostCodeContentType__102081,
                                    FreightCostCodeContentType__102082,
                                    FreightCostCodeContentType__102083,
                                    FreightCostCodeContentType__102084,
                                    FreightCostCodeContentType__102085,
                                    FreightCostCodeContentType__102086,
                                    FreightCostCodeContentType__102087,
                                    FreightCostCodeContentType__102088,
                                    FreightCostCodeContentType__103000,
                                    FreightCostCodeContentType__103001,
                                    FreightCostCodeContentType__103002,
                                    FreightCostCodeContentType__103003,
                                    FreightCostCodeContentType__103004,
                                    FreightCostCodeContentType__103005,
                                    FreightCostCodeContentType__103006,
                                    FreightCostCodeContentType__103007,
                                    FreightCostCodeContentType__103008,
                                    FreightCostCodeContentType__103009,
                                    FreightCostCodeContentType__103010,
                                    FreightCostCodeContentType__103011,
                                    FreightCostCodeContentType__103012,
                                    FreightCostCodeContentType__103013,
                                    FreightCostCodeContentType__103015,
                                    FreightCostCodeContentType__103016,
                                    FreightCostCodeContentType__103017,
                                    FreightCostCodeContentType__103018,
                                    FreightCostCodeContentType__103019,
                                    FreightCostCodeContentType__104000,
                                    FreightCostCodeContentType__104002,
                                    FreightCostCodeContentType__104003,
                                    FreightCostCodeContentType__104004,
                                    FreightCostCodeContentType__104005,
                                    FreightCostCodeContentType__104006,
                                    FreightCostCodeContentType__104007,
                                    FreightCostCodeContentType__104008,
                                    FreightCostCodeContentType__104009,
                                    FreightCostCodeContentType__104010,
                                    FreightCostCodeContentType__104011,
                                    FreightCostCodeContentType__104012,
                                    FreightCostCodeContentType__104013,
                                    FreightCostCodeContentType__104014,
                                    FreightCostCodeContentType__104015,
                                    FreightCostCodeContentType__104016,
                                    FreightCostCodeContentType__104024,
                                    FreightCostCodeContentType__104025,
                                    FreightCostCodeContentType__104027,
                                    FreightCostCodeContentType__104028,
                                    FreightCostCodeContentType__104029,
                                    FreightCostCodeContentType__104030,
                                    FreightCostCodeContentType__104031,
                                    FreightCostCodeContentType__104032,
                                    FreightCostCodeContentType__104036,
                                    FreightCostCodeContentType__104037,
                                    FreightCostCodeContentType__104038,
                                    FreightCostCodeContentType__104039,
                                    FreightCostCodeContentType__104041,
                                    FreightCostCodeContentType__104042,
                                    FreightCostCodeContentType__104043,
                                    FreightCostCodeContentType__104044,
                                    FreightCostCodeContentType__104045,
                                    FreightCostCodeContentType__104046,
                                    FreightCostCodeContentType__104052,
                                    FreightCostCodeContentType__104055,
                                    FreightCostCodeContentType__104056,
                                    FreightCostCodeContentType__104059,
                                    FreightCostCodeContentType__104060,
                                    FreightCostCodeContentType__104063,
                                    FreightCostCodeContentType__104064,
                                    FreightCostCodeContentType__104068,
                                    FreightCostCodeContentType__104069,
                                    FreightCostCodeContentType__104070,
                                    FreightCostCodeContentType__104071,
                                    FreightCostCodeContentType__104072,
                                    FreightCostCodeContentType__104073,
                                    FreightCostCodeContentType__104074,
                                    FreightCostCodeContentType__104075,
                                    FreightCostCodeContentType__104076,
                                    FreightCostCodeContentType__104077,
                                    FreightCostCodeContentType__104078,
                                    FreightCostCodeContentType__104079,
                                    FreightCostCodeContentType__104080,
                                    FreightCostCodeContentType__104081,
                                    FreightCostCodeContentType__104082,
                                    FreightCostCodeContentType__104083,
                                    FreightCostCodeContentType__104084,
                                    FreightCostCodeContentType__104085,
                                    FreightCostCodeContentType__104102,
                                    FreightCostCodeContentType__104104,
                                    FreightCostCodeContentType__104106,
                                    FreightCostCodeContentType__104107,
                                    FreightCostCodeContentType__104108,
                                    FreightCostCodeContentType__104109,
                                    FreightCostCodeContentType__104110,
                                    FreightCostCodeContentType__104111,
                                    FreightCostCodeContentType__104112,
                                    FreightCostCodeContentType__104113,
                                    FreightCostCodeContentType__104114,
                                    FreightCostCodeContentType__104115,
                                    FreightCostCodeContentType__104116,
                                    FreightCostCodeContentType__104118,
                                    FreightCostCodeContentType__104119,
                                    FreightCostCodeContentType__104120,
                                    FreightCostCodeContentType__104121,
                                    FreightCostCodeContentType__104124,
                                    FreightCostCodeContentType__104125,
                                    FreightCostCodeContentType__104127,
                                    FreightCostCodeContentType__104129,
                                    FreightCostCodeContentType__104130,
                                    FreightCostCodeContentType__104131,
                                    FreightCostCodeContentType__104132,
                                    FreightCostCodeContentType__104134,
                                    FreightCostCodeContentType__104135,
                                    FreightCostCodeContentType__104136,
                                    FreightCostCodeContentType__104137,
                                    FreightCostCodeContentType__104138,
                                    FreightCostCodeContentType__104139,
                                    FreightCostCodeContentType__104140,
                                    FreightCostCodeContentType__104141,
                                    FreightCostCodeContentType__104142,
                                    FreightCostCodeContentType__104144,
                                    FreightCostCodeContentType__104145,
                                    FreightCostCodeContentType__104146,
                                    FreightCostCodeContentType__104148,
                                    FreightCostCodeContentType__104149,
                                    FreightCostCodeContentType__104150,
                                    FreightCostCodeContentType__104151,
                                    FreightCostCodeContentType__104152,
                                    FreightCostCodeContentType__104153,
                                    FreightCostCodeContentType__104154,
                                    FreightCostCodeContentType__104155,
                                    FreightCostCodeContentType__104156,
                                    FreightCostCodeContentType__104157,
                                    FreightCostCodeContentType__104158,
                                    FreightCostCodeContentType__104159,
                                    FreightCostCodeContentType__104160,
                                    FreightCostCodeContentType__104161,
                                    FreightCostCodeContentType__104162,
                                    FreightCostCodeContentType__104163,
                                    FreightCostCodeContentType__104164,
                                    FreightCostCodeContentType__104165,
                                    FreightCostCodeContentType__104166,
                                    FreightCostCodeContentType__104167,
                                    FreightCostCodeContentType__104168,
                                    FreightCostCodeContentType__104169,
                                    FreightCostCodeContentType__104170,
                                    FreightCostCodeContentType__104172,
                                    FreightCostCodeContentType__104173,
                                    FreightCostCodeContentType__104175,
                                    FreightCostCodeContentType__104176,
                                    FreightCostCodeContentType__104177,
                                    FreightCostCodeContentType__104178,
                                    FreightCostCodeContentType__104179,
                                    FreightCostCodeContentType__104180,
                                    FreightCostCodeContentType__104181,
                                    FreightCostCodeContentType__104182,
                                    FreightCostCodeContentType__104183,
                                    FreightCostCodeContentType__104185,
                                    FreightCostCodeContentType__104186,
                                    FreightCostCodeContentType__104188,
                                    FreightCostCodeContentType__104189,
                                    FreightCostCodeContentType__104190,
                                    FreightCostCodeContentType__104191,
                                    FreightCostCodeContentType__104192,
                                    FreightCostCodeContentType__104193,
                                    FreightCostCodeContentType__104194,
                                    FreightCostCodeContentType__104195,
                                    FreightCostCodeContentType__104196,
                                    FreightCostCodeContentType__104197,
                                    FreightCostCodeContentType__104198,
                                    FreightCostCodeContentType__104199,
                                    FreightCostCodeContentType__104200,
                                    FreightCostCodeContentType__104201,
                                    FreightCostCodeContentType__104202,
                                    FreightCostCodeContentType__104203,
                                    FreightCostCodeContentType__104204,
                                    FreightCostCodeContentType__104205,
                                    FreightCostCodeContentType__104206,
                                    FreightCostCodeContentType__104207,
                                    FreightCostCodeContentType__104208,
                                    FreightCostCodeContentType__104209,
                                    FreightCostCodeContentType__104210,
                                    FreightCostCodeContentType__104211,
                                    FreightCostCodeContentType__104212,
                                    FreightCostCodeContentType__104213,
                                    FreightCostCodeContentType__105000,
                                    FreightCostCodeContentType__105001,
                                    FreightCostCodeContentType__105002,
                                    FreightCostCodeContentType__105003,
                                    FreightCostCodeContentType__105004,
                                    FreightCostCodeContentType__105005,
                                    FreightCostCodeContentType__105006,
                                    FreightCostCodeContentType__105007,
                                    FreightCostCodeContentType__105009,
                                    FreightCostCodeContentType__105010,
                                    FreightCostCodeContentType__105012,
                                    FreightCostCodeContentType__105013,
                                    FreightCostCodeContentType__105014,
                                    FreightCostCodeContentType__105015,
                                    FreightCostCodeContentType__105016,
                                    FreightCostCodeContentType__105017,
                                    FreightCostCodeContentType__105018,
                                    FreightCostCodeContentType__105020,
                                    FreightCostCodeContentType__106000,
                                    FreightCostCodeContentType__106001,
                                    FreightCostCodeContentType__106002,
                                    FreightCostCodeContentType__106003,
                                    FreightCostCodeContentType__106004,
                                    FreightCostCodeContentType__106005,
                                    FreightCostCodeContentType__106006,
                                    FreightCostCodeContentType__106007,
                                    FreightCostCodeContentType__106008,
                                    FreightCostCodeContentType__106009,
                                    FreightCostCodeContentType__106010,
                                    FreightCostCodeContentType__106011,
                                    FreightCostCodeContentType__106012,
                                    FreightCostCodeContentType__106013,
                                    FreightCostCodeContentType__106014,
                                    FreightCostCodeContentType__106015,
                                    FreightCostCodeContentType__106016,
                                    FreightCostCodeContentType__106018,
                                    FreightCostCodeContentType__107000,
                                    FreightCostCodeContentType__107001,
                                    FreightCostCodeContentType__107002,
                                    FreightCostCodeContentType__108000,
                                    FreightCostCodeContentType__108001,
                                    FreightCostCodeContentType__108002,
                                    FreightCostCodeContentType__108003,
                                    FreightCostCodeContentType__108004,
                                    FreightCostCodeContentType__108005,
                                    FreightCostCodeContentType__108006,
                                    FreightCostCodeContentType__109000,
                                    FreightCostCodeContentType__109001,
                                    FreightCostCodeContentType__110000,
                                    FreightCostCodeContentType__110001,
                                    FreightCostCodeContentType__110002,
                                    FreightCostCodeContentType__110003,
                                    FreightCostCodeContentType__110004,
                                    FreightCostCodeContentType__110005,
                                    FreightCostCodeContentType__110006,
                                    FreightCostCodeContentType__110007,
                                    FreightCostCodeContentType__110008,
                                    FreightCostCodeContentType__110009,
                                    FreightCostCodeContentType__110010,
                                    FreightCostCodeContentType__110011,
                                    FreightCostCodeContentType__200000,
                                    FreightCostCodeContentType__200999,
                                    FreightCostCodeContentType__202000,
                                    FreightCostCodeContentType__202001,
                                    FreightCostCodeContentType__202002,
                                    FreightCostCodeContentType__202003,
                                    FreightCostCodeContentType__202004,
                                    FreightCostCodeContentType__202005,
                                    FreightCostCodeContentType__202006,
                                    FreightCostCodeContentType__202007,
                                    FreightCostCodeContentType__202008,
                                    FreightCostCodeContentType__202009,
                                    FreightCostCodeContentType__202010,
                                    FreightCostCodeContentType__202011,
                                    FreightCostCodeContentType__202012,
                                    FreightCostCodeContentType__202013,
                                    FreightCostCodeContentType__203000,
                                    FreightCostCodeContentType__203001,
                                    FreightCostCodeContentType__203002,
                                    FreightCostCodeContentType__203003,
                                    FreightCostCodeContentType__203004,
                                    FreightCostCodeContentType__203005,
                                    FreightCostCodeContentType__203006,
                                    FreightCostCodeContentType__203007,
                                    FreightCostCodeContentType__203008,
                                    FreightCostCodeContentType__203009,
                                    FreightCostCodeContentType__203010,
                                    FreightCostCodeContentType__203011,
                                    FreightCostCodeContentType__203012,
                                    FreightCostCodeContentType__203013,
                                    FreightCostCodeContentType__203014,
                                    FreightCostCodeContentType__203015,
                                    FreightCostCodeContentType__203016,
                                    FreightCostCodeContentType__203017,
                                    FreightCostCodeContentType__203018,
                                    FreightCostCodeContentType__203019,
                                    FreightCostCodeContentType__203020,
                                    FreightCostCodeContentType__203021,
                                    FreightCostCodeContentType__203022,
                                    FreightCostCodeContentType__203023,
                                    FreightCostCodeContentType__203024,
                                    FreightCostCodeContentType__203025,
                                    FreightCostCodeContentType__203026,
                                    FreightCostCodeContentType__203027,
                                    FreightCostCodeContentType__203028,
                                    FreightCostCodeContentType__203029,
                                    FreightCostCodeContentType__203030,
                                    FreightCostCodeContentType__203031,
                                    FreightCostCodeContentType__203032,
                                    FreightCostCodeContentType__203033,
                                    FreightCostCodeContentType__203034,
                                    FreightCostCodeContentType__203035,
                                    FreightCostCodeContentType__203036,
                                    FreightCostCodeContentType__203037,
                                    FreightCostCodeContentType__203038,
                                    FreightCostCodeContentType__203039,
                                    FreightCostCodeContentType__203040,
                                    FreightCostCodeContentType__203041,
                                    FreightCostCodeContentType__203042,
                                    FreightCostCodeContentType__203043,
                                    FreightCostCodeContentType__203044,
                                    FreightCostCodeContentType__203045,
                                    FreightCostCodeContentType__203046,
                                    FreightCostCodeContentType__203047,
                                    FreightCostCodeContentType__203048,
                                    FreightCostCodeContentType__203049,
                                    FreightCostCodeContentType__203050,
                                    FreightCostCodeContentType__203051,
                                    FreightCostCodeContentType__203052,
                                    FreightCostCodeContentType__203053,
                                    FreightCostCodeContentType__203054,
                                    FreightCostCodeContentType__203055,
                                    FreightCostCodeContentType__203056,
                                    FreightCostCodeContentType__203057,
                                    FreightCostCodeContentType__203058,
                                    FreightCostCodeContentType__203059,
                                    FreightCostCodeContentType__203060,
                                    FreightCostCodeContentType__203061,
                                    FreightCostCodeContentType__203062,
                                    FreightCostCodeContentType__203063,
                                    FreightCostCodeContentType__203064,
                                    FreightCostCodeContentType__203065,
                                    FreightCostCodeContentType__203066,
                                    FreightCostCodeContentType__203067,
                                    FreightCostCodeContentType__203068,
                                    FreightCostCodeContentType__203069,
                                    FreightCostCodeContentType__203070,
                                    FreightCostCodeContentType__203071,
                                    FreightCostCodeContentType__203072,
                                    FreightCostCodeContentType__203073,
                                    FreightCostCodeContentType__203074,
                                    FreightCostCodeContentType__203075,
                                    FreightCostCodeContentType__203076,
                                    FreightCostCodeContentType__203077,
                                    FreightCostCodeContentType__203078,
                                    FreightCostCodeContentType__203079,
                                    FreightCostCodeContentType__203080,
                                    FreightCostCodeContentType__203081,
                                    FreightCostCodeContentType__203082,
                                    FreightCostCodeContentType__203083,
                                    FreightCostCodeContentType__203084,
                                    FreightCostCodeContentType__203085,
                                    FreightCostCodeContentType__203086,
                                    FreightCostCodeContentType__203087,
                                    FreightCostCodeContentType__203088,
                                    FreightCostCodeContentType__203089,
                                    FreightCostCodeContentType__203090,
                                    FreightCostCodeContentType__203091,
                                    FreightCostCodeContentType__203092,
                                    FreightCostCodeContentType__203093,
                                    FreightCostCodeContentType__203094,
                                    FreightCostCodeContentType__203095,
                                    FreightCostCodeContentType__203096,
                                    FreightCostCodeContentType__203097,
                                    FreightCostCodeContentType__203098,
                                    FreightCostCodeContentType__203099,
                                    FreightCostCodeContentType__203100,
                                    FreightCostCodeContentType__203102,
                                    FreightCostCodeContentType__203104,
                                    FreightCostCodeContentType__203105,
                                    FreightCostCodeContentType__203106,
                                    FreightCostCodeContentType__203107,
                                    FreightCostCodeContentType__203108,
                                    FreightCostCodeContentType__203109,
                                    FreightCostCodeContentType__203110,
                                    FreightCostCodeContentType__203111,
                                    FreightCostCodeContentType__203112,
                                    FreightCostCodeContentType__203113,
                                    FreightCostCodeContentType__203114,
                                    FreightCostCodeContentType__203115,
                                    FreightCostCodeContentType__203116,
                                    FreightCostCodeContentType__203117,
                                    FreightCostCodeContentType__203118,
                                    FreightCostCodeContentType__203119,
                                    FreightCostCodeContentType__203120,
                                    FreightCostCodeContentType__203121,
                                    FreightCostCodeContentType__203122,
                                    FreightCostCodeContentType__203123,
                                    FreightCostCodeContentType__203124,
                                    FreightCostCodeContentType__203125,
                                    FreightCostCodeContentType__203126,
                                    FreightCostCodeContentType__203127,
                                    FreightCostCodeContentType__203130,
                                    FreightCostCodeContentType__203131,
                                    FreightCostCodeContentType__203133,
                                    FreightCostCodeContentType__203134,
                                    FreightCostCodeContentType__203135,
                                    FreightCostCodeContentType__203136,
                                    FreightCostCodeContentType__203137,
                                    FreightCostCodeContentType__203138,
                                    FreightCostCodeContentType__203139,
                                    FreightCostCodeContentType__203140,
                                    FreightCostCodeContentType__203141,
                                    FreightCostCodeContentType__203142,
                                    FreightCostCodeContentType__203143,
                                    FreightCostCodeContentType__203144,
                                    FreightCostCodeContentType__203145,
                                    FreightCostCodeContentType__203146,
                                    FreightCostCodeContentType__203147,
                                    FreightCostCodeContentType__203148,
                                    FreightCostCodeContentType__203149,
                                    FreightCostCodeContentType__203150,
                                    FreightCostCodeContentType__203151,
                                    FreightCostCodeContentType__203152,
                                    FreightCostCodeContentType__203153,
                                    FreightCostCodeContentType__203154,
                                    FreightCostCodeContentType__203155,
                                    FreightCostCodeContentType__203156,
                                    FreightCostCodeContentType__203157,
                                    FreightCostCodeContentType__203158,
                                    FreightCostCodeContentType__203159,
                                    FreightCostCodeContentType__203160,
                                    FreightCostCodeContentType__203161,
                                    FreightCostCodeContentType__203162,
                                    FreightCostCodeContentType__203163,
                                    FreightCostCodeContentType__203164,
                                    FreightCostCodeContentType__203165,
                                    FreightCostCodeContentType__203166,
                                    FreightCostCodeContentType__203167,
                                    FreightCostCodeContentType__203168,
                                    FreightCostCodeContentType__203169,
                                    FreightCostCodeContentType__203170,
                                    FreightCostCodeContentType__203171,
                                    FreightCostCodeContentType__203172,
                                    FreightCostCodeContentType__203173,
                                    FreightCostCodeContentType__203174,
                                    FreightCostCodeContentType__203175,
                                    FreightCostCodeContentType__203176,
                                    FreightCostCodeContentType__203177,
                                    FreightCostCodeContentType__203178,
                                    FreightCostCodeContentType__203179,
                                    FreightCostCodeContentType__203180,
                                    FreightCostCodeContentType__203181,
                                    FreightCostCodeContentType__203182,
                                    FreightCostCodeContentType__203183,
                                    FreightCostCodeContentType__203184,
                                    FreightCostCodeContentType__203185,
                                    FreightCostCodeContentType__203186,
                                    FreightCostCodeContentType__203187,
                                    FreightCostCodeContentType__203188,
                                    FreightCostCodeContentType__203189,
                                    FreightCostCodeContentType__203190,
                                    FreightCostCodeContentType__203191,
                                    FreightCostCodeContentType__203192,
                                    FreightCostCodeContentType__203193,
                                    FreightCostCodeContentType__203194,
                                    FreightCostCodeContentType__203195,
                                    FreightCostCodeContentType__203196,
                                    FreightCostCodeContentType__203197,
                                    FreightCostCodeContentType__203198,
                                    FreightCostCodeContentType__203199,
                                    FreightCostCodeContentType__203200,
                                    FreightCostCodeContentType__203201,
                                    FreightCostCodeContentType__203202,
                                    FreightCostCodeContentType__203203,
                                    FreightCostCodeContentType__203204,
                                    FreightCostCodeContentType__203205,
                                    FreightCostCodeContentType__204000,
                                    FreightCostCodeContentType__204001,
                                    FreightCostCodeContentType__204002,
                                    FreightCostCodeContentType__204003,
                                    FreightCostCodeContentType__204004,
                                    FreightCostCodeContentType__204005,
                                    FreightCostCodeContentType__204006,
                                    FreightCostCodeContentType__204007,
                                    FreightCostCodeContentType__204008,
                                    FreightCostCodeContentType__204009,
                                    FreightCostCodeContentType__204010,
                                    FreightCostCodeContentType__204011,
                                    FreightCostCodeContentType__204012,
                                    FreightCostCodeContentType__204013,
                                    FreightCostCodeContentType__204014,
                                    FreightCostCodeContentType__204015,
                                    FreightCostCodeContentType__204016,
                                    FreightCostCodeContentType__204017,
                                    FreightCostCodeContentType__204018,
                                    FreightCostCodeContentType__204019,
                                    FreightCostCodeContentType__204020,
                                    FreightCostCodeContentType__204021,
                                    FreightCostCodeContentType__204022,
                                    FreightCostCodeContentType__204023,
                                    FreightCostCodeContentType__204024,
                                    FreightCostCodeContentType__204025,
                                    FreightCostCodeContentType__204026,
                                    FreightCostCodeContentType__204027,
                                    FreightCostCodeContentType__204028,
                                    FreightCostCodeContentType__204029,
                                    FreightCostCodeContentType__204030,
                                    FreightCostCodeContentType__204031,
                                    FreightCostCodeContentType__204032,
                                    FreightCostCodeContentType__204033,
                                    FreightCostCodeContentType__204034,
                                    FreightCostCodeContentType__204035,
                                    FreightCostCodeContentType__204036,
                                    FreightCostCodeContentType__204037,
                                    FreightCostCodeContentType__204038,
                                    FreightCostCodeContentType__204039,
                                    FreightCostCodeContentType__204040,
                                    FreightCostCodeContentType__204041,
                                    FreightCostCodeContentType__204042,
                                    FreightCostCodeContentType__204043,
                                    FreightCostCodeContentType__204044,
                                    FreightCostCodeContentType__204045,
                                    FreightCostCodeContentType__204046,
                                    FreightCostCodeContentType__204047,
                                    FreightCostCodeContentType__204048,
                                    FreightCostCodeContentType__204049,
                                    FreightCostCodeContentType__204050,
                                    FreightCostCodeContentType__204051,
                                    FreightCostCodeContentType__204052,
                                    FreightCostCodeContentType__204053,
                                    FreightCostCodeContentType__204054,
                                    FreightCostCodeContentType__204055,
                                    FreightCostCodeContentType__204056,
                                    FreightCostCodeContentType__204057,
                                    FreightCostCodeContentType__204058,
                                    FreightCostCodeContentType__204059,
                                    FreightCostCodeContentType__204060,
                                    FreightCostCodeContentType__204061,
                                    FreightCostCodeContentType__204062,
                                    FreightCostCodeContentType__204063,
                                    FreightCostCodeContentType__204064,
                                    FreightCostCodeContentType__204065,
                                    FreightCostCodeContentType__204066,
                                    FreightCostCodeContentType__204067,
                                    FreightCostCodeContentType__204068,
                                    FreightCostCodeContentType__204069,
                                    FreightCostCodeContentType__204070,
                                    FreightCostCodeContentType__204071,
                                    FreightCostCodeContentType__204072,
                                    FreightCostCodeContentType__204073,
                                    FreightCostCodeContentType__204074,
                                    FreightCostCodeContentType__204075,
                                    FreightCostCodeContentType__204076,
                                    FreightCostCodeContentType__204077,
                                    FreightCostCodeContentType__204078,
                                    FreightCostCodeContentType__204079,
                                    FreightCostCodeContentType__204080,
                                    FreightCostCodeContentType__204081,
                                    FreightCostCodeContentType__204082,
                                    FreightCostCodeContentType__204083,
                                    FreightCostCodeContentType__204084,
                                    FreightCostCodeContentType__204085,
                                    FreightCostCodeContentType__204086,
                                    FreightCostCodeContentType__204087,
                                    FreightCostCodeContentType__204088,
                                    FreightCostCodeContentType__204089,
                                    FreightCostCodeContentType__204090,
                                    FreightCostCodeContentType__204091,
                                    FreightCostCodeContentType__204092,
                                    FreightCostCodeContentType__204093,
                                    FreightCostCodeContentType__204094,
                                    FreightCostCodeContentType__204095,
                                    FreightCostCodeContentType__204096,
                                    FreightCostCodeContentType__204097,
                                    FreightCostCodeContentType__204098,
                                    FreightCostCodeContentType__204099,
                                    FreightCostCodeContentType__204100,
                                    FreightCostCodeContentType__204101,
                                    FreightCostCodeContentType__204102,
                                    FreightCostCodeContentType__204103,
                                    FreightCostCodeContentType__204104,
                                    FreightCostCodeContentType__204105,
                                    FreightCostCodeContentType__204106,
                                    FreightCostCodeContentType__204107,
                                    FreightCostCodeContentType__204108,
                                    FreightCostCodeContentType__204109,
                                    FreightCostCodeContentType__204110,
                                    FreightCostCodeContentType__204111,
                                    FreightCostCodeContentType__204112,
                                    FreightCostCodeContentType__204113,
                                    FreightCostCodeContentType__204114,
                                    FreightCostCodeContentType__204115,
                                    FreightCostCodeContentType__204116,
                                    FreightCostCodeContentType__204117,
                                    FreightCostCodeContentType__204118,
                                    FreightCostCodeContentType__204119,
                                    FreightCostCodeContentType__204120,
                                    FreightCostCodeContentType__204121,
                                    FreightCostCodeContentType__204122,
                                    FreightCostCodeContentType__204123,
                                    FreightCostCodeContentType__204124,
                                    FreightCostCodeContentType__204125,
                                    FreightCostCodeContentType__204126,
                                    FreightCostCodeContentType__204127,
                                    FreightCostCodeContentType__204128,
                                    FreightCostCodeContentType__204129,
                                    FreightCostCodeContentType__204130,
                                    FreightCostCodeContentType__204131,
                                    FreightCostCodeContentType__204132,
                                    FreightCostCodeContentType__204133,
                                    FreightCostCodeContentType__204134,
                                    FreightCostCodeContentType__204135,
                                    FreightCostCodeContentType__204136,
                                    FreightCostCodeContentType__204137,
                                    FreightCostCodeContentType__204138,
                                    FreightCostCodeContentType__204139,
                                    FreightCostCodeContentType__204140,
                                    FreightCostCodeContentType__204141,
                                    FreightCostCodeContentType__204142,
                                    FreightCostCodeContentType__204143,
                                    FreightCostCodeContentType__204144,
                                    FreightCostCodeContentType__204145,
                                    FreightCostCodeContentType__204146,
                                    FreightCostCodeContentType__204148,
                                    FreightCostCodeContentType__204150,
                                    FreightCostCodeContentType__204151,
                                    FreightCostCodeContentType__204152,
                                    FreightCostCodeContentType__204153,
                                    FreightCostCodeContentType__204154,
                                    FreightCostCodeContentType__204155,
                                    FreightCostCodeContentType__204156,
                                    FreightCostCodeContentType__204157,
                                    FreightCostCodeContentType__204158,
                                    FreightCostCodeContentType__204159,
                                    FreightCostCodeContentType__204160,
                                    FreightCostCodeContentType__204161,
                                    FreightCostCodeContentType__204162,
                                    FreightCostCodeContentType__204163,
                                    FreightCostCodeContentType__204164,
                                    FreightCostCodeContentType__204165,
                                    FreightCostCodeContentType__204166,
                                    FreightCostCodeContentType__204167,
                                    FreightCostCodeContentType__204168,
                                    FreightCostCodeContentType__204169,
                                    FreightCostCodeContentType__204170,
                                    FreightCostCodeContentType__204171,
                                    FreightCostCodeContentType__204172,
                                    FreightCostCodeContentType__204173,
                                    FreightCostCodeContentType__204175,
                                    FreightCostCodeContentType__204176,
                                    FreightCostCodeContentType__204177,
                                    FreightCostCodeContentType__204178,
                                    FreightCostCodeContentType__204179,
                                    FreightCostCodeContentType__204180,
                                    FreightCostCodeContentType__204181,
                                    FreightCostCodeContentType__204182,
                                    FreightCostCodeContentType__204183,
                                    FreightCostCodeContentType__204184,
                                    FreightCostCodeContentType__204185,
                                    FreightCostCodeContentType__204186,
                                    FreightCostCodeContentType__204187,
                                    FreightCostCodeContentType__204188,
                                    FreightCostCodeContentType__204189,
                                    FreightCostCodeContentType__204190,
                                    FreightCostCodeContentType__204191,
                                    FreightCostCodeContentType__204192,
                                    FreightCostCodeContentType__204193,
                                    FreightCostCodeContentType__204194,
                                    FreightCostCodeContentType__204195,
                                    FreightCostCodeContentType__204196,
                                    FreightCostCodeContentType__204197,
                                    FreightCostCodeContentType__204198,
                                    FreightCostCodeContentType__204199,
                                    FreightCostCodeContentType__204200,
                                    FreightCostCodeContentType__204201,
                                    FreightCostCodeContentType__204202,
                                    FreightCostCodeContentType__204203,
                                    FreightCostCodeContentType__204204,
                                    FreightCostCodeContentType__204205,
                                    FreightCostCodeContentType__204206,
                                    FreightCostCodeContentType__204207,
                                    FreightCostCodeContentType__204208,
                                    FreightCostCodeContentType__204209,
                                    FreightCostCodeContentType__204210,
                                    FreightCostCodeContentType__204211,
                                    FreightCostCodeContentType__204212,
                                    FreightCostCodeContentType__204213,
                                    FreightCostCodeContentType__204214,
                                    FreightCostCodeContentType__204215,
                                    FreightCostCodeContentType__204216,
                                    FreightCostCodeContentType__204217,
                                    FreightCostCodeContentType__204218,
                                    FreightCostCodeContentType__204219,
                                    FreightCostCodeContentType__205000,
                                    FreightCostCodeContentType__205001,
                                    FreightCostCodeContentType__205002,
                                    FreightCostCodeContentType__205003,
                                    FreightCostCodeContentType__205004,
                                    FreightCostCodeContentType__205005,
                                    FreightCostCodeContentType__205006,
                                    FreightCostCodeContentType__205007,
                                    FreightCostCodeContentType__205008,
                                    FreightCostCodeContentType__205009,
                                    FreightCostCodeContentType__205010,
                                    FreightCostCodeContentType__205011,
                                    FreightCostCodeContentType__205012,
                                    FreightCostCodeContentType__205013,
                                    FreightCostCodeContentType__205014,
                                    FreightCostCodeContentType__205015,
                                    FreightCostCodeContentType__205016,
                                    FreightCostCodeContentType__205017,
                                    FreightCostCodeContentType__205018,
                                    FreightCostCodeContentType__205019,
                                    FreightCostCodeContentType__205020,
                                    FreightCostCodeContentType__205021,
                                    FreightCostCodeContentType__205022,
                                    FreightCostCodeContentType__205023,
                                    FreightCostCodeContentType__205025,
                                    FreightCostCodeContentType__205027,
                                    FreightCostCodeContentType__205028,
                                    FreightCostCodeContentType__205029,
                                    FreightCostCodeContentType__205030,
                                    FreightCostCodeContentType__205031,
                                    FreightCostCodeContentType__205032,
                                    FreightCostCodeContentType__205033,
                                    FreightCostCodeContentType__205034,
                                    FreightCostCodeContentType__205035,
                                    FreightCostCodeContentType__205036,
                                    FreightCostCodeContentType__205037,
                                    FreightCostCodeContentType__205038,
                                    FreightCostCodeContentType__205039,
                                    FreightCostCodeContentType__205040,
                                    FreightCostCodeContentType__205041,
                                    FreightCostCodeContentType__205042,
                                    FreightCostCodeContentType__205043,
                                    FreightCostCodeContentType__205044,
                                    FreightCostCodeContentType__205045,
                                    FreightCostCodeContentType__205046,
                                    FreightCostCodeContentType__205047,
                                    FreightCostCodeContentType__205048,
                                    FreightCostCodeContentType__205049,
                                    FreightCostCodeContentType__205050,
                                    FreightCostCodeContentType__205051,
                                    FreightCostCodeContentType__205052,
                                    FreightCostCodeContentType__205053,
                                    FreightCostCodeContentType__205054,
                                    FreightCostCodeContentType__205055,
                                    FreightCostCodeContentType__205056,
                                    FreightCostCodeContentType__205057,
                                    FreightCostCodeContentType__205058,
                                    FreightCostCodeContentType__205059,
                                    FreightCostCodeContentType__205060,
                                    FreightCostCodeContentType__205061,
                                    FreightCostCodeContentType__205062,
                                    FreightCostCodeContentType__206000,
                                    FreightCostCodeContentType__206001,
                                    FreightCostCodeContentType__206002,
                                    FreightCostCodeContentType__206003,
                                    FreightCostCodeContentType__206004,
                                    FreightCostCodeContentType__206005,
                                    FreightCostCodeContentType__206006,
                                    FreightCostCodeContentType__206007,
                                    FreightCostCodeContentType__206008,
                                    FreightCostCodeContentType__206009,
                                    FreightCostCodeContentType__206010,
                                    FreightCostCodeContentType__206011,
                                    FreightCostCodeContentType__206012,
                                    FreightCostCodeContentType__206013,
                                    FreightCostCodeContentType__206014,
                                    FreightCostCodeContentType__206015,
                                    FreightCostCodeContentType__206016,
                                    FreightCostCodeContentType__206017,
                                    FreightCostCodeContentType__206018,
                                    FreightCostCodeContentType__206019,
                                    FreightCostCodeContentType__206020,
                                    FreightCostCodeContentType__206021,
                                    FreightCostCodeContentType__206023,
                                    FreightCostCodeContentType__206025,
                                    FreightCostCodeContentType__206026,
                                    FreightCostCodeContentType__206027,
                                    FreightCostCodeContentType__206028,
                                    FreightCostCodeContentType__206029,
                                    FreightCostCodeContentType__206030,
                                    FreightCostCodeContentType__206031,
                                    FreightCostCodeContentType__206032,
                                    FreightCostCodeContentType__206033,
                                    FreightCostCodeContentType__206034,
                                    FreightCostCodeContentType__206035,
                                    FreightCostCodeContentType__206036,
                                    FreightCostCodeContentType__206037,
                                    FreightCostCodeContentType__206038,
                                    FreightCostCodeContentType__206039,
                                    FreightCostCodeContentType__206040,
                                    FreightCostCodeContentType__206041,
                                    FreightCostCodeContentType__206042,
                                    FreightCostCodeContentType__206043,
                                    FreightCostCodeContentType__206044,
                                    FreightCostCodeContentType__206045,
                                    FreightCostCodeContentType__206046,
                                    FreightCostCodeContentType__206047,
                                    FreightCostCodeContentType__206048,
                                    FreightCostCodeContentType__206049,
                                    FreightCostCodeContentType__206050,
                                    FreightCostCodeContentType__206051,
                                    FreightCostCodeContentType__206052,
                                    FreightCostCodeContentType__206053,
                                    FreightCostCodeContentType__206054,
                                    FreightCostCodeContentType__206055,
                                    FreightCostCodeContentType__206056,
                                    FreightCostCodeContentType__206057,
                                    FreightCostCodeContentType__206058,
                                    FreightCostCodeContentType__206059,
                                    FreightCostCodeContentType__206060,
                                    FreightCostCodeContentType__206061,
                                    FreightCostCodeContentType__206062,
                                    FreightCostCodeContentType__206063,
                                    FreightCostCodeContentType__206064,
                                    FreightCostCodeContentType__206065,
                                    FreightCostCodeContentType__206066,
                                    FreightCostCodeContentType__207000,
                                    FreightCostCodeContentType__207001,
                                    FreightCostCodeContentType__207002,
                                    FreightCostCodeContentType__207003,
                                    FreightCostCodeContentType__207004,
                                    FreightCostCodeContentType__207005,
                                    FreightCostCodeContentType__207006,
                                    FreightCostCodeContentType__207007,
                                    FreightCostCodeContentType__207008,
                                    FreightCostCodeContentType__207009,
                                    FreightCostCodeContentType__207010,
                                    FreightCostCodeContentType__207011,
                                    FreightCostCodeContentType__207012,
                                    FreightCostCodeContentType__207013,
                                    FreightCostCodeContentType__207014,
                                    FreightCostCodeContentType__207015,
                                    FreightCostCodeContentType__207016,
                                    FreightCostCodeContentType__207017,
                                    FreightCostCodeContentType__207018,
                                    FreightCostCodeContentType__207019,
                                    FreightCostCodeContentType__207020,
                                    FreightCostCodeContentType__207022,
                                    FreightCostCodeContentType__207023,
                                    FreightCostCodeContentType__207024,
                                    FreightCostCodeContentType__207025,
                                    FreightCostCodeContentType__207026,
                                    FreightCostCodeContentType__207027,
                                    FreightCostCodeContentType__207028,
                                    FreightCostCodeContentType__207029,
                                    FreightCostCodeContentType__207030,
                                    FreightCostCodeContentType__207032,
                                    FreightCostCodeContentType__207033,
                                    FreightCostCodeContentType__207034,
                                    FreightCostCodeContentType__207035,
                                    FreightCostCodeContentType__207036,
                                    FreightCostCodeContentType__207037,
                                    FreightCostCodeContentType__207038,
                                    FreightCostCodeContentType__207039,
                                    FreightCostCodeContentType__207040,
                                    FreightCostCodeContentType__207041,
                                    FreightCostCodeContentType__207042,
                                    FreightCostCodeContentType__207043,
                                    FreightCostCodeContentType__207044,
                                    FreightCostCodeContentType__207045,
                                    FreightCostCodeContentType__207046,
                                    FreightCostCodeContentType__207047,
                                    FreightCostCodeContentType__207048,
                                    FreightCostCodeContentType__207049,
                                    FreightCostCodeContentType__207050,
                                    FreightCostCodeContentType__207051,
                                    FreightCostCodeContentType__207052,
                                    FreightCostCodeContentType__207053,
                                    FreightCostCodeContentType__207054,
                                    FreightCostCodeContentType__207055,
                                    FreightCostCodeContentType__207056,
                                    FreightCostCodeContentType__207057,
                                    FreightCostCodeContentType__207058,
                                    FreightCostCodeContentType__207059,
                                    FreightCostCodeContentType__207060,
                                    FreightCostCodeContentType__207061,
                                    FreightCostCodeContentType__207062,
                                    FreightCostCodeContentType__208000,
                                    FreightCostCodeContentType__208001,
                                    FreightCostCodeContentType__208002,
                                    FreightCostCodeContentType__208003,
                                    FreightCostCodeContentType__208004,
                                    FreightCostCodeContentType__208005,
                                    FreightCostCodeContentType__208006,
                                    FreightCostCodeContentType__208007,
                                    FreightCostCodeContentType__208008,
                                    FreightCostCodeContentType__208009,
                                    FreightCostCodeContentType__208010,
                                    FreightCostCodeContentType__208011,
                                    FreightCostCodeContentType__208012,
                                    FreightCostCodeContentType__208013,
                                    FreightCostCodeContentType__208014,
                                    FreightCostCodeContentType__208015,
                                    FreightCostCodeContentType__208016,
                                    FreightCostCodeContentType__208017,
                                    FreightCostCodeContentType__208018,
                                    FreightCostCodeContentType__208019,
                                    FreightCostCodeContentType__208020,
                                    FreightCostCodeContentType__208021,
                                    FreightCostCodeContentType__208022,
                                    FreightCostCodeContentType__208023,
                                    FreightCostCodeContentType__208024,
                                    FreightCostCodeContentType__208025,
                                    FreightCostCodeContentType__208026,
                                    FreightCostCodeContentType__208027,
                                    FreightCostCodeContentType__208028,
                                    FreightCostCodeContentType__208030,
                                    FreightCostCodeContentType__208031,
                                    FreightCostCodeContentType__208032,
                                    FreightCostCodeContentType__208034,
                                    FreightCostCodeContentType__208035,
                                    FreightCostCodeContentType__208036,
                                    FreightCostCodeContentType__208037,
                                    FreightCostCodeContentType__208038,
                                    FreightCostCodeContentType__208039,
                                    FreightCostCodeContentType__208040,
                                    FreightCostCodeContentType__208041,
                                    FreightCostCodeContentType__208042,
                                    FreightCostCodeContentType__208043,
                                    FreightCostCodeContentType__208044,
                                    FreightCostCodeContentType__208045,
                                    FreightCostCodeContentType__208046,
                                    FreightCostCodeContentType__208047,
                                    FreightCostCodeContentType__208048,
                                    FreightCostCodeContentType__208049,
                                    FreightCostCodeContentType__208050,
                                    FreightCostCodeContentType__208051,
                                    FreightCostCodeContentType__209000,
                                    FreightCostCodeContentType__209001,
                                    FreightCostCodeContentType__209002,
                                    FreightCostCodeContentType__209003,
                                    FreightCostCodeContentType__209004,
                                    FreightCostCodeContentType__209005,
                                    FreightCostCodeContentType__209006,
                                    FreightCostCodeContentType__209007,
                                    FreightCostCodeContentType__209008,
                                    FreightCostCodeContentType__209009,
                                    FreightCostCodeContentType__209010,
                                    FreightCostCodeContentType__209011,
                                    FreightCostCodeContentType__209012,
                                    FreightCostCodeContentType__209013,
                                    FreightCostCodeContentType__209014,
                                    FreightCostCodeContentType__209015,
                                    FreightCostCodeContentType__209032,
                                    FreightCostCodeContentType__209033,
                                    FreightCostCodeContentType__209034,
                                    FreightCostCodeContentType__209058,
                                    FreightCostCodeContentType__209060,
                                    FreightCostCodeContentType__209061,
                                    FreightCostCodeContentType__209062,
                                    FreightCostCodeContentType__209063,
                                    FreightCostCodeContentType__209064,
                                    FreightCostCodeContentType__209065,
                                    FreightCostCodeContentType__209066,
                                    FreightCostCodeContentType__209067,
                                    FreightCostCodeContentType__209068,
                                    FreightCostCodeContentType__209069,
                                    FreightCostCodeContentType__209070,
                                    FreightCostCodeContentType__209071,
                                    FreightCostCodeContentType__209072,
                                    FreightCostCodeContentType__209073,
                                    FreightCostCodeContentType__209074,
                                    FreightCostCodeContentType__210000,
                                    FreightCostCodeContentType__210001,
                                    FreightCostCodeContentType__210002,
                                    FreightCostCodeContentType__210003,
                                    FreightCostCodeContentType__210004,
                                    FreightCostCodeContentType__210005,
                                    FreightCostCodeContentType__210006,
                                    FreightCostCodeContentType__210007,
                                    FreightCostCodeContentType__210008,
                                    FreightCostCodeContentType__210009,
                                    FreightCostCodeContentType__210010,
                                    FreightCostCodeContentType__210011,
                                    FreightCostCodeContentType__210012,
                                    FreightCostCodeContentType__210013,
                                    FreightCostCodeContentType__210014,
                                    FreightCostCodeContentType__210015,
                                    FreightCostCodeContentType__210016,
                                    FreightCostCodeContentType__210017,
                                    FreightCostCodeContentType__210018,
                                    FreightCostCodeContentType__210019,
                                    FreightCostCodeContentType__210020,
                                    FreightCostCodeContentType__210021,
                                    FreightCostCodeContentType__210022,
                                    FreightCostCodeContentType__210023,
                                    FreightCostCodeContentType__210024,
                                    FreightCostCodeContentType__210025,
                                    FreightCostCodeContentType__210026,
                                    FreightCostCodeContentType__210027,
                                    FreightCostCodeContentType__210028,
                                    FreightCostCodeContentType__210029,
                                    FreightCostCodeContentType__210030,
                                    FreightCostCodeContentType__210031,
                                    FreightCostCodeContentType__210032,
                                    FreightCostCodeContentType__210033,
                                    FreightCostCodeContentType__210034,
                                    FreightCostCodeContentType__210035,
                                    FreightCostCodeContentType__210036,
                                    FreightCostCodeContentType__210037,
                                    FreightCostCodeContentType__210038,
                                    FreightCostCodeContentType__210039,
                                    FreightCostCodeContentType__210040,
                                    FreightCostCodeContentType__210041,
                                    FreightCostCodeContentType__210042,
                                    FreightCostCodeContentType__210043,
                                    FreightCostCodeContentType__210044,
                                    FreightCostCodeContentType__210045,
                                    FreightCostCodeContentType__210046,
                                    FreightCostCodeContentType__210047,
                                    FreightCostCodeContentType__210048,
                                    FreightCostCodeContentType__210049,
                                    FreightCostCodeContentType__210050,
                                    FreightCostCodeContentType__210051,
                                    FreightCostCodeContentType__210052,
                                    FreightCostCodeContentType__210053,
                                    FreightCostCodeContentType__210054,
                                    FreightCostCodeContentType__210055,
                                    FreightCostCodeContentType__210056,
                                    FreightCostCodeContentType__210057,
                                    FreightCostCodeContentType__210058,
                                    FreightCostCodeContentType__210059,
                                    FreightCostCodeContentType__210060,
                                    FreightCostCodeContentType__210061,
                                    FreightCostCodeContentType__210062,
                                    FreightCostCodeContentType__211000,
                                    FreightCostCodeContentType__211001,
                                    FreightCostCodeContentType__211002,
                                    FreightCostCodeContentType__211003,
                                    FreightCostCodeContentType__211004,
                                    FreightCostCodeContentType__211005,
                                    FreightCostCodeContentType__211006,
                                    FreightCostCodeContentType__211007,
                                    FreightCostCodeContentType__211008,
                                    FreightCostCodeContentType__211009,
                                    FreightCostCodeContentType__211010,
                                    FreightCostCodeContentType__211011,
                                    FreightCostCodeContentType__211012,
                                    FreightCostCodeContentType__211013,
                                    FreightCostCodeContentType__211014,
                                    FreightCostCodeContentType__211015,
                                    FreightCostCodeContentType__211016,
                                    FreightCostCodeContentType__211017,
                                    FreightCostCodeContentType__211018,
                                    FreightCostCodeContentType__211019,
                                    FreightCostCodeContentType__211020,
                                    FreightCostCodeContentType__211021,
                                    FreightCostCodeContentType__211022,
                                    FreightCostCodeContentType__211023,
                                    FreightCostCodeContentType__211024,
                                    FreightCostCodeContentType__211025,
                                    FreightCostCodeContentType__211026,
                                    FreightCostCodeContentType__211027,
                                    FreightCostCodeContentType__211028,
                                    FreightCostCodeContentType__211029,
                                    FreightCostCodeContentType__211030,
                                    FreightCostCodeContentType__211031,
                                    FreightCostCodeContentType__211032,
                                    FreightCostCodeContentType__211033,
                                    FreightCostCodeContentType__211034,
                                    FreightCostCodeContentType__211035,
                                    FreightCostCodeContentType__211036,
                                    FreightCostCodeContentType__211037,
                                    FreightCostCodeContentType__211038,
                                    FreightCostCodeContentType__211039,
                                    FreightCostCodeContentType__211040,
                                    FreightCostCodeContentType__211041,
                                    FreightCostCodeContentType__211042,
                                    FreightCostCodeContentType__211043,
                                    FreightCostCodeContentType__211044,
                                    FreightCostCodeContentType__212000,
                                    FreightCostCodeContentType__212001,
                                    FreightCostCodeContentType__212002,
                                    FreightCostCodeContentType__212003,
                                    FreightCostCodeContentType__212004,
                                    FreightCostCodeContentType__213000,
                                    FreightCostCodeContentType__213001,
                                    FreightCostCodeContentType__213002,
                                    FreightCostCodeContentType__213003,
                                    FreightCostCodeContentType__213004,
                                    FreightCostCodeContentType__213005,
                                    FreightCostCodeContentType__214000,
                                    FreightCostCodeContentType__214001,
                                    FreightCostCodeContentType__214002,
                                    FreightCostCodeContentType__214003,
                                    FreightCostCodeContentType__214004,
                                    FreightCostCodeContentType__215000,
                                    FreightCostCodeContentType__215001,
                                    FreightCostCodeContentType__215002,
                                    FreightCostCodeContentType__215004,
                                    FreightCostCodeContentType__215005,
                                    FreightCostCodeContentType__215006,
                                    FreightCostCodeContentType__215007,
                                    FreightCostCodeContentType__215008,
                                    FreightCostCodeContentType__215009,
                                    FreightCostCodeContentType__215010,
                                    FreightCostCodeContentType__215011,
                                    FreightCostCodeContentType__216000,
                                    FreightCostCodeContentType__216001,
                                    FreightCostCodeContentType__216002,
                                    FreightCostCodeContentType__216003,
                                    FreightCostCodeContentType__216004,
                                    FreightCostCodeContentType__216005,
                                    FreightCostCodeContentType__216006,
                                    FreightCostCodeContentType__216007,
                                    FreightCostCodeContentType__216008,
                                    FreightCostCodeContentType__216009,
                                    FreightCostCodeContentType__216010,
                                    FreightCostCodeContentType__216011,
                                    FreightCostCodeContentType__216012,
                                    FreightCostCodeContentType__216013,
                                    FreightCostCodeContentType__216014,
                                    FreightCostCodeContentType__216015,
                                    FreightCostCodeContentType__216016,
                                    FreightCostCodeContentType__216017,
                                    FreightCostCodeContentType__216019,
                                    FreightCostCodeContentType__216020,
                                    FreightCostCodeContentType__216021,
                                    FreightCostCodeContentType__216022,
                                    FreightCostCodeContentType__216023,
                                    FreightCostCodeContentType__216024,
                                    FreightCostCodeContentType__216025,
                                    FreightCostCodeContentType__216026,
                                    FreightCostCodeContentType__216027,
                                    FreightCostCodeContentType__216028,
                                    FreightCostCodeContentType__216029,
                                    FreightCostCodeContentType__216030,
                                    FreightCostCodeContentType__216031,
                                    FreightCostCodeContentType__216032,
                                    FreightCostCodeContentType__216033,
                                    FreightCostCodeContentType__216034,
                                    FreightCostCodeContentType__216035,
                                    FreightCostCodeContentType__216036,
                                    FreightCostCodeContentType__216037,
                                    FreightCostCodeContentType__216038,
                                    FreightCostCodeContentType__216039,
                                    FreightCostCodeContentType__216040,
                                    FreightCostCodeContentType__216041,
                                    FreightCostCodeContentType__216042,
                                    FreightCostCodeContentType__216044,
                                    FreightCostCodeContentType__216045,
                                    FreightCostCodeContentType__216046,
                                    FreightCostCodeContentType__216047,
                                    FreightCostCodeContentType__216048,
                                    FreightCostCodeContentType__216049,
                                    FreightCostCodeContentType__216050,
                                    FreightCostCodeContentType__216051,
                                    FreightCostCodeContentType__216052,
                                    FreightCostCodeContentType__216053,
                                    FreightCostCodeContentType__216054,
                                    FreightCostCodeContentType__216055,
                                    FreightCostCodeContentType__216056,
                                    FreightCostCodeContentType__216057,
                                    FreightCostCodeContentType__216058,
                                    FreightCostCodeContentType__216059,
                                    FreightCostCodeContentType__216060,
                                    FreightCostCodeContentType__216061,
                                    FreightCostCodeContentType__216062,
                                    FreightCostCodeContentType__216063,
                                    FreightCostCodeContentType__216064,
                                    FreightCostCodeContentType__216065,
                                    FreightCostCodeContentType__216066,
                                    FreightCostCodeContentType__216067,
                                    FreightCostCodeContentType__216068,
                                    FreightCostCodeContentType__216069,
                                    FreightCostCodeContentType__216070,
                                    FreightCostCodeContentType__216071,
                                    FreightCostCodeContentType__216072,
                                    FreightCostCodeContentType__216073,
                                    FreightCostCodeContentType__216074,
                                    FreightCostCodeContentType__216075,
                                    FreightCostCodeContentType__216076,
                                    FreightCostCodeContentType__216077,
                                    FreightCostCodeContentType__216078,
                                    FreightCostCodeContentType__216079,
                                    FreightCostCodeContentType__216080,
                                    FreightCostCodeContentType__216081,
                                    FreightCostCodeContentType__216082,
                                    FreightCostCodeContentType__216083,
                                    FreightCostCodeContentType__216084,
                                    FreightCostCodeContentType__216085,
                                    FreightCostCodeContentType__216086,
                                    FreightCostCodeContentType__216087,
                                    FreightCostCodeContentType__216088,
                                    FreightCostCodeContentType__216089,
                                    FreightCostCodeContentType__216090,
                                    FreightCostCodeContentType__216091,
                                    FreightCostCodeContentType__216092,
                                    FreightCostCodeContentType__216093,
                                    FreightCostCodeContentType__216094,
                                    FreightCostCodeContentType__300000,
                                    FreightCostCodeContentType__300999,
                                    FreightCostCodeContentType__301000,
                                    FreightCostCodeContentType__301001,
                                    FreightCostCodeContentType__301002,
                                    FreightCostCodeContentType__301003,
                                    FreightCostCodeContentType__301004,
                                    FreightCostCodeContentType__301005,
                                    FreightCostCodeContentType__301006,
                                    FreightCostCodeContentType__301007,
                                    FreightCostCodeContentType__301008,
                                    FreightCostCodeContentType__301009,
                                    FreightCostCodeContentType__301010,
                                    FreightCostCodeContentType__301011,
                                    FreightCostCodeContentType__301012,
                                    FreightCostCodeContentType__301013,
                                    FreightCostCodeContentType__301014,
                                    FreightCostCodeContentType__301015,
                                    FreightCostCodeContentType__301016,
                                    FreightCostCodeContentType__301017,
                                    FreightCostCodeContentType__301018,
                                    FreightCostCodeContentType__301019,
                                    FreightCostCodeContentType__301020,
                                    FreightCostCodeContentType__301021,
                                    FreightCostCodeContentType__301022,
                                    FreightCostCodeContentType__301023,
                                    FreightCostCodeContentType__301024,
                                    FreightCostCodeContentType__301025,
                                    FreightCostCodeContentType__301026,
                                    FreightCostCodeContentType__301027,
                                    FreightCostCodeContentType__301028,
                                    FreightCostCodeContentType__301029,
                                    FreightCostCodeContentType__301030,
                                    FreightCostCodeContentType__301031,
                                    FreightCostCodeContentType__301032,
                                    FreightCostCodeContentType__301033,
                                    FreightCostCodeContentType__301034,
                                    FreightCostCodeContentType__301035,
                                    FreightCostCodeContentType__301036,
                                    FreightCostCodeContentType__301037,
                                    FreightCostCodeContentType__301038,
                                    FreightCostCodeContentType__301039,
                                    FreightCostCodeContentType__301040,
                                    FreightCostCodeContentType__301041,
                                    FreightCostCodeContentType__301042,
                                    FreightCostCodeContentType__301043,
                                    FreightCostCodeContentType__301044,
                                    FreightCostCodeContentType__301045,
                                    FreightCostCodeContentType__301046,
                                    FreightCostCodeContentType__301047,
                                    FreightCostCodeContentType__301048,
                                    FreightCostCodeContentType__301049,
                                    FreightCostCodeContentType__301050,
                                    FreightCostCodeContentType__301051,
                                    FreightCostCodeContentType__301052,
                                    FreightCostCodeContentType__301053,
                                    FreightCostCodeContentType__301054,
                                    FreightCostCodeContentType__301055,
                                    FreightCostCodeContentType__301056,
                                    FreightCostCodeContentType__301057,
                                    FreightCostCodeContentType__301058,
                                    FreightCostCodeContentType__301059,
                                    FreightCostCodeContentType__301060,
                                    FreightCostCodeContentType__301061,
                                    FreightCostCodeContentType__301062,
                                    FreightCostCodeContentType__301063,
                                    FreightCostCodeContentType__301064,
                                    FreightCostCodeContentType__301065,
                                    FreightCostCodeContentType__301066,
                                    FreightCostCodeContentType__301067,
                                    FreightCostCodeContentType__301068,
                                    FreightCostCodeContentType__301069,
                                    FreightCostCodeContentType__301070,
                                    FreightCostCodeContentType__301072,
                                    FreightCostCodeContentType__301073,
                                    FreightCostCodeContentType__301074,
                                    FreightCostCodeContentType__301075,
                                    FreightCostCodeContentType__301076,
                                    FreightCostCodeContentType__301077,
                                    FreightCostCodeContentType__301078,
                                    FreightCostCodeContentType__302000,
                                    FreightCostCodeContentType__302001,
                                    FreightCostCodeContentType__302002,
                                    FreightCostCodeContentType__302003,
                                    FreightCostCodeContentType__302004,
                                    FreightCostCodeContentType__302005,
                                    FreightCostCodeContentType__302006,
                                    FreightCostCodeContentType__302007,
                                    FreightCostCodeContentType__302008,
                                    FreightCostCodeContentType__302009,
                                    FreightCostCodeContentType__302010,
                                    FreightCostCodeContentType__302011,
                                    FreightCostCodeContentType__302012,
                                    FreightCostCodeContentType__302013,
                                    FreightCostCodeContentType__302014,
                                    FreightCostCodeContentType__302016,
                                    FreightCostCodeContentType__302017,
                                    FreightCostCodeContentType__302018,
                                    FreightCostCodeContentType__400000,
                                    FreightCostCodeContentType__400999,
                                    FreightCostCodeContentType__401000,
                                    FreightCostCodeContentType__401001,
                                    FreightCostCodeContentType__401003,
                                    FreightCostCodeContentType__401004,
                                    FreightCostCodeContentType__401005,
                                    FreightCostCodeContentType__401006,
                                    FreightCostCodeContentType__401009,
                                    FreightCostCodeContentType__401015,
                                    FreightCostCodeContentType__401016,
                                    FreightCostCodeContentType__401017,
                                    FreightCostCodeContentType__401018,
                                    FreightCostCodeContentType__402000,
                                    FreightCostCodeContentType__402001,
                                    FreightCostCodeContentType__402002,
                                    FreightCostCodeContentType__402003,
                                    FreightCostCodeContentType__402004,
                                    FreightCostCodeContentType__402005,
                                    FreightCostCodeContentType__402006,
                                    FreightCostCodeContentType__402007,
                                    FreightCostCodeContentType__500000,
                                    FreightCostCodeContentType__500999,
                                    FreightCostCodeContentType__501000,
                                    FreightCostCodeContentType__501001,
                                    FreightCostCodeContentType__501002,
                                    FreightCostCodeContentType__501003,
                                    FreightCostCodeContentType__501004,
                                    FreightCostCodeContentType__501005,
                                    FreightCostCodeContentType__501006,
                                    FreightCostCodeContentType__501007,
                                    FreightCostCodeContentType__501008,
                                    FreightCostCodeContentType__501009,
                                    FreightCostCodeContentType__502000,
                                    FreightCostCodeContentType__502001,
                                    FreightCostCodeContentType__502002,
                                    FreightCostCodeContentType__502003,
                                    FreightCostCodeContentType__502004,
                                    FreightCostCodeContentType__502005,
                                    FreightCostCodeContentType__502006,
                                    FreightCostCodeContentType__600000,
                                    FreightCostCodeContentType__600018,
                                    FreightCostCodeContentType__600926,
                                    FreightCostCodeContentType__600999,
                                    FreightCostCodeContentType__601000,
                                    FreightCostCodeContentType__601001,
                                    FreightCostCodeContentType__601002,
                                    FreightCostCodeContentType__601003,
                                    FreightCostCodeContentType__601004,
                                    FreightCostCodeContentType__601005,
                                    FreightCostCodeContentType__601006,
                                    FreightCostCodeContentType__601007,
                                    FreightCostCodeContentType__601008,
                                    FreightCostCodeContentType__602000,
                                    FreightCostCodeContentType__602001,
                                    FreightCostCodeContentType__602002,
                                    FreightCostCodeContentType__602003,
                                    FreightCostCodeContentType__603000,
                                    FreightCostCodeContentType__603001,
                                    FreightCostCodeContentType__603002,
                                    FreightCostCodeContentType__603003,
                                    FreightCostCodeContentType__603004,
                                    FreightCostCodeContentType__603005,
                                    FreightCostCodeContentType__603006,
                                    FreightCostCodeContentType__603007,
                                    FreightCostCodeContentType__603008,
                                    FreightCostCodeContentType__603009,
                                    FreightCostCodeContentType__603010,
                                    FreightCostCodeContentType__604000,
                                    FreightCostCodeContentType__604001,
                                    FreightCostCodeContentType__604002,
                                    FreightCostCodeContentType__605000,
                                    FreightCostCodeContentType__606000,
                                    FreightCostCodeContentType__606003,
                                    FreightCostCodeContentType__606004,
                                    FreightCostCodeContentType__606005,
                                    FreightCostCodeContentType__606006,
                                    FreightCostCodeContentType__606007,
                                    FreightCostCodeContentType__606008,
                                    FreightCostCodeContentType__606009,
                                    FreightCostCodeContentType__607000,
                                    FreightCostCodeContentType__607001,
                                    FreightCostCodeContentType__608000,
                                    FreightCostCodeContentType__608001,
                                    FreightCostCodeContentType__608002,
                                    FreightCostCodeContentType__608003,
                                    FreightCostCodeContentType__609000,
                                    FreightCostCodeContentType__609001,
                                    FreightCostCodeContentType__609002,
                                    FreightCostCodeContentType__609003,
                                    FreightCostCodeContentType__609004,
                                    FreightCostCodeContentType__609005,
                                    FreightCostCodeContentType__609006,
                                    FreightCostCodeContentType__609007,
                                    FreightCostCodeContentType__609008,
                                    FreightCostCodeContentType__609009,
                                    FreightCostCodeContentType__609010,
                                    FreightCostCodeContentType__609011,
                                    FreightCostCodeContentType__609012,
                                    FreightCostCodeContentType__609013,
                                    FreightCostCodeContentType__609015,
                                    FreightCostCodeContentType__609016,
                                    FreightCostCodeContentType__609017,
                                    FreightCostCodeContentType__609018,
                                    FreightCostCodeContentType__609019,
                                    FreightCostCodeContentType__609020,
                                    FreightCostCodeContentType__609022,
                                    FreightCostCodeContentType__609023,
                                    FreightCostCodeContentType__609024,
                                    FreightCostCodeContentType__609025,
                                    FreightCostCodeContentType__609026,
                                    FreightCostCodeContentType__609027,
                                    FreightCostCodeContentType__609028,
                                    FreightCostCodeContentType__609029,
                                    FreightCostCodeContentType__609030,
                                    FreightCostCodeContentType__609031,
                                    FreightCostCodeContentType__609032,
                                    FreightCostCodeContentType__609033,
                                    FreightCostCodeContentType__609034,
                                    FreightCostCodeContentType__609035,
                                    FreightCostCodeContentType__609036,
                                    FreightCostCodeContentType__609037,
                                    FreightCostCodeContentType__609038,
                                    FreightCostCodeContentType__609039,
                                    FreightCostCodeContentType__609040,
                                    FreightCostCodeContentType__609041,
                                    FreightCostCodeContentType__609042,
                                    FreightCostCodeContentType__609043,
                                    FreightCostCodeContentType__609044,
                                    FreightCostCodeContentType__609045,
                                    FreightCostCodeContentType__609046,
                                    FreightCostCodeContentType__609047,
                                    FreightCostCodeContentType__609049,
                                    FreightCostCodeContentType__609050,
                                    FreightCostCodeContentType__609051,
                                    FreightCostCodeContentType__609052,
                                    FreightCostCodeContentType__609053,
                                    FreightCostCodeContentType__609054,
                                    FreightCostCodeContentType__609055,
                                    FreightCostCodeContentType__609056,
                                    FreightCostCodeContentType__609057,
                                    FreightCostCodeContentType__609058,
                                    FreightCostCodeContentType__609059,
                                    FreightCostCodeContentType__609060,
                                    FreightCostCodeContentType__609061,
                                    FreightCostCodeContentType__609062,
                                    FreightCostCodeContentType__609063,
                                    FreightCostCodeContentType__609064,
                                    FreightCostCodeContentType__609065,
                                    FreightCostCodeContentType__609067,
                                    FreightCostCodeContentType__609068,
                                    FreightCostCodeContentType__609069,
                                    FreightCostCodeContentType__609070,
                                    FreightCostCodeContentType__609071,
                                    FreightCostCodeContentType__609072,
                                    FreightCostCodeContentType__609073,
                                    FreightCostCodeContentType__609074,
                                    FreightCostCodeContentType__609075,
                                    FreightCostCodeContentType__609077,
                                    FreightCostCodeContentType__609078,
                                    FreightCostCodeContentType__609079,
                                    FreightCostCodeContentType__609080,
                                    FreightCostCodeContentType__609081,
                                    FreightCostCodeContentType__609082,
                                    FreightCostCodeContentType__609083,
                                    FreightCostCodeContentType__609084,
                                    FreightCostCodeContentType__609085,
                                    FreightCostCodeContentType__609087,
                                    FreightCostCodeContentType__609088,
                                    FreightCostCodeContentType__609089,
                                    FreightCostCodeContentType__609090,
                                    FreightCostCodeContentType__609091,
                                    FreightCostCodeContentType__609092,
                                    FreightCostCodeContentType__609093,
                                    FreightCostCodeContentType__609094,
                                    FreightCostCodeContentType__609095,
                                    FreightCostCodeContentType__609096,
                                    FreightCostCodeContentType__609097,
                                    FreightCostCodeContentType__609098,
                                    FreightCostCodeContentType__609099,
                                    FreightCostCodeContentType__609100,
                                    FreightCostCodeContentType__609101,
                                    FreightCostCodeContentType__609102,
                                    FreightCostCodeContentType__609103,
                                    FreightCostCodeContentType__609104,
                                    FreightCostCodeContentType__609105,
                                    FreightCostCodeContentType__609106,
                                    FreightCostCodeContentType__609107,
                                    FreightCostCodeContentType__609111,
                                    FreightCostCodeContentType__609112,
                                    FreightCostCodeContentType__609113,
                                    FreightCostCodeContentType__609115,
                                    FreightCostCodeContentType__609116,
                                    FreightCostCodeContentType__609117,
                                    FreightCostCodeContentType__609118,
                                    FreightCostCodeContentType__609119,
                                    FreightCostCodeContentType__609120,
                                    FreightCostCodeContentType__609122,
                                    FreightCostCodeContentType__609123,
                                    FreightCostCodeContentType__609124,
                                    FreightCostCodeContentType__609125,
                                    FreightCostCodeContentType__609126,
                                    FreightCostCodeContentType__609128,
                                    FreightCostCodeContentType__609129,
                                    FreightCostCodeContentType__609130,
                                    FreightCostCodeContentType__609131,
                                    FreightCostCodeContentType__609132,
                                    FreightCostCodeContentType__609133,
                                    FreightCostCodeContentType__609134,
                                    FreightCostCodeContentType__609135,
                                    FreightCostCodeContentType__609136,
                                    FreightCostCodeContentType__609137,
                                    FreightCostCodeContentType__609138,
                                    FreightCostCodeContentType__609139,
                                    FreightCostCodeContentType__609140,
                                    FreightCostCodeContentType__609141,
                                    FreightCostCodeContentType__609142,
                                    FreightCostCodeContentType__609143,
                                    FreightCostCodeContentType__609144,
                                    FreightCostCodeContentType__609145);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_PaymentTermsDescriptionIdentifier_D22A }
  TXMLPaymentTermsDescriptionIdentifierContentType = (PaymentTermsDescriptionIdentifierContentType__1,
                                                      PaymentTermsDescriptionIdentifierContentType__2,
                                                      PaymentTermsDescriptionIdentifierContentType__3,
                                                      PaymentTermsDescriptionIdentifierContentType__4,
                                                      PaymentTermsDescriptionIdentifierContentType__5,
                                                      PaymentTermsDescriptionIdentifierContentType__6,
                                                      PaymentTermsDescriptionIdentifierContentType__7);

  { Forward declarations for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_ReusableAggregateBusinessInformationEntity_100 }
  IXMLAdvancePaymentType = interface;
  IXMLInvoiceSpecifiedReferencedDocumentList = interface;
  IXMLAppliedAllowanceChargeType = interface;
  IXMLAppliedTaxType = interface;
  IXMLAvailablePeriodType = interface;
  IXMLBasicWorkItemType = interface;
  IXMLUnitCalculatedPriceList = interface;
  IXMLTotalQuantityWorkItemQuantityAnalysisList = interface;
  IXMLBranchFinancialInstitutionType = interface;
  IXMLCalculatedPriceType = interface;
  IXMLRelatedAppliedAllowanceChargeList = interface;
  IXMLContactPersonType = interface;
  IXMLCreditorFinancialAccountType = interface;
  IXMLCreditorFinancialInstitutionType = interface;
  IXMLCrossBorderCustomsValuationType = interface;
  IXMLSaleRestrictionList = interface;
  IXMLOtherChargeAmountList = interface;
  IXMLCrossBorderRegulatoryProcedureType = interface;
  IXMLRemarkList = interface;
  IXMLDebtorFinancialAccountType = interface;
  IXMLDebtorFinancialInstitutionType = interface;
  IXMLDeliveryAdjustmentType = interface;
  IXMLDisposalInstructionsType = interface;
  IXMLRecyclingProcedureList = interface;
  IXMLRecyclingDescriptionCodeList = interface;
  IXMLDocumentAuthenticationType = interface;
  IXMLCategoryCodeList = interface;
  IXMLDocumentContextParameterType = interface;
  IXMLDocumentLineDocumentType = interface;
  IXMLDocumentVersionType = interface;
  IXMLExchangedDocumentContextType = interface;
  IXMLUserSpecifiedDocumentContextParameterList = interface;
  IXMLSubsetSpecifiedDocumentContextParameterList = interface;
  IXMLGuidelineSpecifiedDocumentContextParameterList = interface;
  IXMLApplicationSpecifiedDocumentContextParameterList = interface;
  IXMLScenarioSpecifiedDocumentContextParameterList = interface;
  IXMLBIMSpecifiedDocumentContextParameterList = interface;
  IXMLBusinessProcessSpecifiedDocumentContextParameterList = interface;
  IXMLExchangedDocumentType = interface;
  IXMLReferenceReferencedDocumentList = interface;
  IXMLRequestedResponseTypeCodeList = interface;
  IXMLLanguageIDList = interface;
  IXMLFinancialAdjustmentType = interface;
  IXMLRelatedTradeTaxList = interface;
  IXMLReasonList = interface;
  IXMLFinancialInstitutionAddressType = interface;
  IXMLGeographicalCoordinateType = interface;
  IXMLGroupedWorkItemType = interface;
  IXMLActualWorkItemComplexDescriptionList = interface;
  IXMLHeaderTradeAgreementType = interface;
  IXMLPurchaseConditionsReferencedDocumentList = interface;
  IXMLReferenceList = interface;
  IXMLHeaderTradeDeliveryType = interface;
  IXMLPreviousDeliverySupplyChainEventList = interface;
  IXMLHeaderTradeSettlementType = interface;
  IXMLSpecifiedAdvancePaymentList = interface;
  IXMLSpecifiedTradeSettlementFinancialCardList = interface;
  IXMLFactoringListReferencedDocumentList = interface;
  IXMLFactoringAgreementReferencedDocumentList = interface;
  IXMLSpecifiedTradeSettlementPaymentMeansList = interface;
  IXMLCreditReasonList = interface;
  IXMLNextInvoiceDateTimeList = interface;
  IXMLCreditorReferenceIssuerIDList = interface;
  IXMLCreditorReferenceTypeList = interface;
  IXMLCreditorReferenceTypeCodeList = interface;
  IXMLLegalOrganizationType = interface;
  IXMLLegalRegistrationType = interface;
  IXMLLineTradeAgreementType = interface;
  IXMLUltimateCustomerOrderReferencedDocumentList = interface;
  IXMLRequisitionerReferencedDocumentList = interface;
  IXMLBuyerRequisitionerTradePartyList = interface;
  IXMLLineTradeDeliveryType = interface;
  IXMLSpecifiedDeliveryAdjustmentList = interface;
  IXMLLineTradeSettlementType = interface;
  IXMLSalesSpecifiedTradeAccountingAccountList = interface;
  IXMLPurchaseSpecifiedTradeAccountingAccountList = interface;
  IXMLReceivableSpecifiedTradeAccountingAccountList = interface;
  IXMLPayableSpecifiedTradeAccountingAccountList = interface;
  IXMLSpecifiedTradePaymentTermsList = interface;
  IXMLSpecifiedLogisticsServiceChargeList = interface;
  IXMLSubtotalCalculatedTradeTaxList = interface;
  IXMLApplicableTradeTaxList = interface;
  IXMLPaymentReferenceList = interface;
  IXMLLogisticsLocationType = interface;
  IXMLLogisticsSealType = interface;
  IXMLLogisticsServiceChargeType = interface;
  IXMLAppliedTradeTaxList = interface;
  IXMLAppliedAmountList = interface;
  IXMLDisbursementAmountList = interface;
  IXMLLogisticsTransportEquipmentType = interface;
  IXMLAffixedLogisticsSealList = interface;
  IXMLCarrierAssignedBookingIDList = interface;
  IXMLLogisticsTransportMeansType = interface;
  IXMLLogisticsTransportMovementType = interface;
  IXMLMaterialGoodsCharacteristicType = interface;
  IXMLNoteType = interface;
  IXMLSubjectCodeList = interface;
  IXMLPackagingMarkingType = interface;
  IXMLAutomaticDataCaptureMethodTypeCodeList = interface;
  IXMLContentCodeList = interface;
  IXMLBarcodeTypeCodeList = interface;
  IXMLContentAmountList = interface;
  IXMLProcuringProjectType = interface;
  IXMLProductCharacteristicConditionType = interface;
  IXMLProductCharacteristicType = interface;
  IXMLApplicableProductCharacteristicConditionList = interface;
  IXMLValueList = interface;
  IXMLProductClassificationType = interface;
  IXMLClassProductCharacteristicList = interface;
  IXMLClassNameList = interface;
  IXMLSystemNameList = interface;
  IXMLRecordedStatusType = interface;
  IXMLReferencedDocumentType = interface;
  IXMLIncludedNoteList = interface;
  IXMLAttachedSpecifiedBinaryFileList = interface;
  IXMLSubtypeCodeList = interface;
  IXMLPreviousRevisionIDList = interface;
  IXMLSectionNameList = interface;
  IXMLAttachmentBinaryObjectList = interface;
  IXMLReferencedProductType = interface;
  IXMLUnitQuantityList = interface;
  IXMLRelationshipTypeCodeList = interface;
  IXMLIndustryAssignedIDList = interface;
  IXMLManufacturerAssignedIDList = interface;
  IXMLReferencedStandardType = interface;
  IXMLReferencePriceType = interface;
  IXMLNetPriceIndicatorList = interface;
  IXMLBasisQuantityList = interface;
  IXMLRegisteredTaxType = interface;
  IXMLExemptionReasonList = interface;
  IXMLReturnableAssetInstructionsType = interface;
  IXMLDepositValueSpecifiedAmountList = interface;
  IXMLTermsAndConditionsDescriptionList = interface;
  IXMLMaterialIDList = interface;
  IXMLSpatialDimensionType = interface;
  IXMLSpecificationQueryType = interface;
  IXMLSpecificationResponseType = interface;
  IXMLSpecifiedBinaryFileType = interface;
  IXMLAccessList = interface;
  IXMLIncludedBinaryObjectList = interface;
  IXMLAuthorNameList = interface;
  IXMLTitleList = interface;
  IXMLSpecifiedMarketplaceType = interface;
  IXMLOrderingAvailablePeriodList = interface;
  IXMLWebsiteURIIDList = interface;
  IXMLSpecifiedPeriodType = interface;
  IXMLDurationMeasureList = interface;
  IXMLSubordinateLineTradeAgreementType = interface;
  IXMLNetPriceProductTradePriceList = interface;
  IXMLGrossPriceProductTradePriceList = interface;
  IXMLAdditionalReferencedDocumentList = interface;
  IXMLSubordinateLineTradeDeliveryType = interface;
  IXMLActualDeliverySupplyChainEventList = interface;
  IXMLIncludedSupplyChainPackagingList = interface;
  IXMLBilledQuantityList = interface;
  IXMLSubordinateLineTradeSettlementType = interface;
  IXMLSpecifiedTradeAllowanceChargeList = interface;
  IXMLSpecifiedFinancialAdjustmentList = interface;
  IXMLInvoiceReferencedDocumentList = interface;
  IXMLSubordinateLocationType = interface;
  IXMLSubordinateTradeLineItemType = interface;
  IXMLApplicableTradeProductList = interface;
  IXMLSupplyChainConsignmentItemType = interface;
  IXMLApplicableNoteList = interface;
  IXMLPreviousAdministrativeReferencedDocumentList = interface;
  IXMLApplicableTransportDangerousGoodsList = interface;
  IXMLInvoiceAmountList = interface;
  IXMLSupplyChainConsignmentType = interface;
  IXMLApplicableCrossBorderCustomsValuationList = interface;
  IXMLApplicableCrossBorderRegulatoryProcedureList = interface;
  IXMLSpecifiedLogisticsTransportMovementList = interface;
  IXMLUtilizedLogisticsTransportEquipmentList = interface;
  IXMLIncludedSupplyChainConsignmentItemList = interface;
  IXMLTransitLogisticsLocationList = interface;
  IXMLGroupingCentreTradePartyList = interface;
  IXMLNetVolumeMeasureList = interface;
  IXMLAssociatedInvoiceAmountList = interface;
  IXMLGrossVolumeMeasureList = interface;
  IXMLNetWeightMeasureList = interface;
  IXMLGrossWeightMeasureList = interface;
  IXMLSupplyChainEventType = interface;
  IXMLDescriptionBinaryObjectList = interface;
  IXMLSupplyChainPackagingType = interface;
  IXMLApplicableReturnableAssetInstructionsList = interface;
  IXMLApplicableDisposalInstructionsList = interface;
  IXMLSpecifiedPackagingMarkingList = interface;
  IXMLAdditionalInstructionCodeList = interface;
  IXMLWeightMeasureList = interface;
  IXMLDisposalMethodCodeList = interface;
  IXMLSupplyChainTradeLineItemType = interface;
  IXMLIncludedSubordinateTradeLineItemList = interface;
  IXMLAdditionalInformationNoteList = interface;
  IXMLSupplyChainTradeTransactionType = interface;
  IXMLTaxRegistrationType = interface;
  IXMLTradeAccountingAccountType = interface;
  IXMLTradeAddressType = interface;
  IXMLCountrySubDivisionNameList = interface;
  IXMLCountryNameList = interface;
  IXMLTradeAllowanceChargeType = interface;
  IXMLCategoryTradeTaxList = interface;
  IXMLActualAmountList = interface;
  IXMLTradeContactType = interface;
  IXMLSpecifiedNoteList = interface;
  IXMLPersonIDList = interface;
  IXMLTradeCountrySubDivisionType = interface;
  IXMLTradeCountryType = interface;
  IXMLSubordinateTradeCountrySubDivisionList = interface;
  IXMLTradeCurrencyExchangeType = interface;
  IXMLTradeDeliveryTermsType = interface;
  IXMLTradeLocationType = interface;
  IXMLTradePartyType = interface;
  IXMLLogoAssociatedSpecifiedBinaryFileList = interface;
  IXMLSpecifiedTaxRegistrationList = interface;
  IXMLSpecifiedLogisticsLocationList = interface;
  IXMLURIUniversalCommunicationList = interface;
  IXMLDefinedTradeContactList = interface;
  IXMLRoleList = interface;
  IXMLRegisteredIDList = interface;
  IXMLRoleCodeList = interface;
  IXMLGlobalIDList = interface;
  IXMLTradePaymentDiscountTermsType = interface;
  IXMLTradePaymentPenaltyTermsType = interface;
  IXMLTradePaymentTermsType = interface;
  IXMLPayeeTradePartyList = interface;
  IXMLPartialPaymentAmountList = interface;
  IXMLPaymentMeansIDList = interface;
  IXMLDirectDebitMandateIDList = interface;
  IXMLTradePriceType = interface;
  IXMLAssociatedReferencedDocumentList = interface;
  IXMLTradeComparisonReferencePriceList = interface;
  IXMLDeliveryTradeLocationList = interface;
  IXMLIncludedTradeTaxList = interface;
  IXMLAppliedTradeAllowanceChargeList = interface;
  IXML_TypeList = interface;
  IXMLChangeReasonList = interface;
  IXMLChargeAmountList = interface;
  IXMLTradeProductInstanceType = interface;
  IXMLRegistrationIDList = interface;
  IXMLSerialIDList = interface;
  IXMLTradeProductType = interface;
  IXMLBuyerSuppliedPartsReferenceReferencedDocumentList = interface;
  IXMLInformationNoteList = interface;
  IXMLIncludedReferencedProductList = interface;
  IXMLAdditionalReferenceReferencedDocumentList = interface;
  IXMLPresentationSpecifiedBinaryFileList = interface;
  IXMLLinearSpatialDimensionList = interface;
  IXMLInspectionReferenceReferencedDocumentList = interface;
  IXMLCertificationEvidenceReferenceReferencedDocumentList = interface;
  IXMLIndividualTradeProductInstanceList = interface;
  IXMLDesignatedProductClassificationList = interface;
  IXMLApplicableMaterialGoodsCharacteristicList = interface;
  IXMLApplicableProductCharacteristicList = interface;
  IXMLUltimateCustomerAssignedExtensionIDList = interface;
  IXMLDesignationList = interface;
  IXMLUnitTypeCodeList = interface;
  IXMLColourDescriptionList = interface;
  IXMLAdditionalDescriptionList = interface;
  IXMLConciseDescriptionList = interface;
  IXMLUseDescriptionList = interface;
  IXMLBatchIDList = interface;
  IXMLCustomerAssignedIDList = interface;
  IXMLEndItemNameList = interface;
  IXMLEndItemTypeCodeList = interface;
  IXMLProductGroupIDList = interface;
  IXMLNameList = interface;
  IXMLTradeSettlementFinancialCardType = interface;
  IXMLCreditAvailableAmountList = interface;
  IXMLCreditLimitAmountList = interface;
  IXMLTradeSettlementHeaderMonetarySummationType = interface;
  IXMLInsuranceChargeTotalAmountList = interface;
  IXMLProductValueExcludingTobaccoTaxInformationAmountList = interface;
  IXMLTotalDepositFeeInformationAmountList = interface;
  IXMLRetailValueExcludingTaxInformationAmountList = interface;
  IXMLDuePayableAmountList = interface;
  IXMLTotalDiscountAmountList = interface;
  IXMLTotalPrepaidAmountList = interface;
  IXMLRoundingAmountList = interface;
  IXMLTradeSettlementLineMonetarySummationType = interface;
  IXMLIncludingTaxesLineTotalAmountList = interface;
  IXMLProductWeightLossInformationAmountList = interface;
  IXMLNetIncludingTaxesLineTotalAmountList = interface;
  IXMLNetLineTotalAmountList = interface;
  IXMLGrossLineTotalAmountList = interface;
  IXMLTotalRetailValueInformationAmountList = interface;
  IXMLTotalAllowanceChargeAmountList = interface;
  IXMLTaxTotalAmountList = interface;
  IXMLTaxBasisTotalAmountList = interface;
  IXMLAllowanceTotalAmountList = interface;
  IXMLChargeTotalAmountList = interface;
  IXMLLineTotalAmountList = interface;
  IXMLTradeSettlementPaymentMeansType = interface;
  IXMLPayeePartyCreditorFinancialAccountList = interface;
  IXMLIDList = interface;
  IXMLInformationList = interface;
  IXMLTradeTaxType = interface;
  IXMLPlaceApplicableTradeLocationList = interface;
  IXMLSpecifiedTradeAccountingAccountList = interface;
  IXMLGrandTotalAmountList = interface;
  IXMLCategoryNameList = interface;
  IXMLInformationAmountList = interface;
  IXMLJurisdictionList = interface;
  IXMLAllowanceChargeBasisAmountList = interface;
  IXMLLineTotalBasisAmountList = interface;
  IXMLUnitBasisAmountList = interface;
  IXMLBasisAmountList = interface;
  IXMLCalculatedAmountList = interface;
  IXMLTransportCargoInsuranceType = interface;
  IXMLTransportCargoType = interface;
  IXMLTransportDangerousGoodsType = interface;
  IXMLTechnicalNameList = interface;
  IXMLRegulationNameList = interface;
  IXMLUniversalCommunicationType = interface;
  IXMLValuationBreakdownStatementType = interface;
  IXMLReferencedSpecifiedBinaryFileList = interface;
  IXMLReaderSpecifiedBinaryFileList = interface;
  IXMLCreationSpecifiedBinaryFileList = interface;
  IXMLTotalCalculatedPriceList = interface;
  IXMLItemBasicWorkItemList = interface;
  IXMLItemGroupedWorkItemList = interface;
  IXMLRequestedActionCodeList = interface;
  IXMLTypeCodeList = interface;
  IXMLCommentList = interface;
  IXMLMeasurementMethodIDList = interface;
  IXMLDescriptionList = interface;
  IXMLWorkItemComplexDescriptionType = interface;
  IXMLRespondingSpecificationResponseList = interface;
  IXMLRequestingSpecificationQueryList = interface;
  IXMLContentList = interface;
  IXML_AbstractList = interface;
  IXMLWorkItemDimensionType = interface;
  IXMLWorkItemQuantityAnalysisType = interface;
  IXMLChangedRecordedStatusList = interface;
  IXMLBreakdownWorkItemQuantityAnalysisList = interface;
  IXMLActualQuantityWorkItemDimensionList = interface;
  IXMLAlternativeClassificationCodeList = interface;
  IXMLPrimaryClassificationCodeList = interface;

  { Interfaces for CrossIndustryInvoice_100pD22B }
  /// <summary>
  ///    (BN/BN) Cross Industry Invoice
  /// </summary>
  IXMLCrossIndustryInvoiceType = interface(IXMLNode)
    ['{AC371439-06D9-41F5-A6EA-7FB74641843A}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetExchangedDocumentContext: IXMLExchangedDocumentContextType;
    function GetExchangedDocument: IXMLExchangedDocumentType;
    function GetSupplyChainTradeTransaction: IXMLSupplyChainTradeTransactionType;
    function GetHasValuationBreakdownStatement: Boolean;
    function GetValuationBreakdownStatement: IXMLValuationBreakdownStatementType;

    property ExchangedDocumentContext: IXMLExchangedDocumentContextType read GetExchangedDocumentContext;
    property ExchangedDocument: IXMLExchangedDocumentType read GetExchangedDocument;
    property SupplyChainTradeTransaction: IXMLSupplyChainTradeTransactionType read GetSupplyChainTradeTransaction;
    property HasValuationBreakdownStatement: Boolean read GetHasValuationBreakdownStatement;
    property ValuationBreakdownStatement: IXMLValuationBreakdownStatementType read GetValuationBreakdownStatement;
  end;

  IXMLCrossIndustryInvoice = interface(IXMLCrossIndustryInvoiceType)
    ['{D8195D60-B9FF-4D99-8286-D30726ACABDB}']
  end;


  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_QualifiedDataType_100 }
  IXMLAccountingAccountTypeCodeType = interface(IXMLNode)
    ['{B5204A03-C4CC-41A3-A600-E306248663D0}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAccountingAmountTypeCodeType = interface(IXMLNode)
    ['{4FFFB8E5-FBF9-4297-8401-8D035142F729}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAccountingDebitCreditStatusCodeType = interface(IXMLNode)
    ['{B5E0C49B-B064-4048-9F99-8EA9D06301E3}']
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHaslistURI: Boolean;
    function listURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistURI: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType);
    procedure SetlistVersionID(const Value: WideString);
    procedure SetlistURI(const Value: WideString);

    property HaslistID: Boolean read GetHaslistID;
    property listID: WideString read GetlistID write SetlistID;
    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
    property HaslistVersionID: Boolean read GetHaslistVersionID;
    property listVersionID: WideString read GetlistVersionID write SetlistVersionID;
    property HaslistURI: Boolean read GetHaslistURI;
    property listURI: WideString read GetlistURI write SetlistURI;
  end;

  IXMLAccountingDocumentCodeType = interface(IXMLNode)
    ['{DC7402CC-9F4C-489F-AAF3-F050227358B0}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAccountingDocumentCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAccountingDocumentCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAccountingDocumentCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAddressTypeCodeType = interface(IXMLNode)
    ['{D6565E67-A88F-4B72-9776-59EFEC71B9F0}']
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAddressTypeCodeListAgencyIDContentType;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHasname: Boolean;
    function nameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getname: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAddressTypeCodeListAgencyIDContentType);
    procedure SetlistVersionID(const Value: WideString);
    procedure Setname(const Value: WideString);

    property HaslistID: Boolean read GetHaslistID;
    property listID: WideString read GetlistID write SetlistID;
    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAddressTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
    property HaslistVersionID: Boolean read GetHaslistVersionID;
    property listVersionID: WideString read GetlistVersionID write SetlistVersionID;
    property Hasname: Boolean read GetHasname;
    property name: WideString read Getname write Setname;
  end;

  IXMLAdjustmentReasonCodeType = interface(IXMLNode)
    ['{68A6CBCD-34E4-4400-811F-3D7DAB2E2E30}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAdjustmentReasonCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAdjustmentReasonCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAdjustmentReasonCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAllowanceChargeIdentificationCodeType = interface(IXMLNode)
    ['{C0A89048-DFA3-449C-A693-EB0E29BFCF64}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAllowanceChargeReasonCodeType = interface(IXMLNode)
    ['{63F2E7A7-CD68-4F5A-AA3D-E965F3E95721}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAllowanceChargeReasonCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAllowanceChargeReasonCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAllowanceChargeReasonCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLAutomaticDataCaptureMethodCodeType = interface(IXMLNode)
    ['{B7A53CC7-D70C-4D5B-BF6D-8EA255F806A9}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLCargoCategoryCodeType = interface(IXMLNode)
    ['{BCBCEE06-0446-49F8-9C5E-23BD223C0296}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCargoCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCargoCategoryCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLCargoCategoryCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLCargoCommodityCategoryCodeType = interface(IXMLNode)
    ['{3E9029C9-CC29-49F7-9A5B-415EEDB336D5}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLCargoOperationalCategoryCodeType = interface(IXMLNode)
    ['{9FF366F8-2168-426B-9EAC-BDF11BDEF60D}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCargoOperationalCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCargoOperationalCategoryCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLCargoOperationalCategoryCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLChargePayingPartyRoleCodeType = interface(IXMLNode)
    ['{9C80214A-A4F9-4918-B925-50E0D1A2C3B4}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLChargePayingPartyRoleCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLChargePayingPartyRoleCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLChargePayingPartyRoleCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLCommunicationChannelCodeType = interface(IXMLNode)
    ['{470D70F2-3A4B-40A4-8FEF-67D9D746CFBC}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCommunicationChannelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCommunicationChannelCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLCommunicationChannelCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLContactTypeCodeType = interface(IXMLNode)
    ['{5CDC1661-3C8A-4678-B547-9FAF2067513D}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLContactTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLContactTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLContactTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLCountryIDType = interface(IXMLNode)
    ['{BFCB9FEA-AEBE-41DE-8969-3F2651CF7BF3}']
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLCountryIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLCountryIDSchemeAgencyIDContentType);

    property HasschemeAgencyID: Boolean read GetHasschemeAgencyID;
    property schemeAgencyIDText: WideString read GetschemeAgencyIDText write SetschemeAgencyIDText;
    property schemeAgencyID: TXMLCountryIDSchemeAgencyIDContentType read GetschemeAgencyID write SetschemeAgencyID;
  end;

  IXMLCurrencyCodeType = interface(IXMLNode)
    ['{E55FFEF3-8E2D-41F4-9BF7-6D28A2ADB2D2}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCurrencyCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCurrencyCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLCurrencyCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDangerousGoodsPackagingLevelCodeType = interface(IXMLNode)
    ['{4ADF9D54-C30D-4B6E-BFE3-E8FFEE8F4A37}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDangerousGoodsRegulationCodeType = interface(IXMLNode)
    ['{73B5E9C8-AED1-46C3-8E6C-794307261318}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDateOnlyFormattedDateTimeType = interface(IXMLNode)
    ['{BBDC9192-83C5-47F6-B66A-20902E1E9F06}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLDateOnlyFormattedDateTimeTypeDateTimeString;

    property DateTimeString: IXMLDateOnlyFormattedDateTimeTypeDateTimeString read GetDateTimeString;
  end;

  IXMLDateOnlyFormattedDateTimeTypeDateTimeString = interface(IXMLNode)
    ['{C083C84C-EDA3-4892-9A25-8DD60050BAFE}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLDateOnlyFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLDateOnlyFormatCodeContentType);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property formatText: WideString read GetformatText write SetformatText;
    property format: TXMLDateOnlyFormatCodeContentType read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLDeliveryTermsCodeType = interface(IXMLNode)
    ['{AED1D7B9-CABB-4A3F-9EFB-5988CC7EE50B}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDeliveryTermsCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDeliveryTermsCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDeliveryTermsCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDeliveryTermsFunctionCodeType = interface(IXMLNode)
    ['{B374ED40-983E-4543-99AB-8FB8AC571679}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDimensionTypeCodeType = interface(IXMLNode)
    ['{A7024674-3E46-446F-8D80-ED110B209B95}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDimensionTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDimensionTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDimensionTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDocumentCodeType = interface(IXMLNode)
    ['{B81BB650-E870-40FD-A211-D578EAA1B072}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDocumentCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDocumentCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDocumentCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLDocumentStatusCodeType = interface(IXMLNode)
    ['{3291FF23-E685-4E63-99EA-E871D8D53220}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDocumentStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDocumentStatusCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLDocumentStatusCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLFormattedDateTimeType = interface(IXMLNode)
    ['{B11B0FF7-B6F2-4A01-A448-A7D3EE55C454}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLFormattedDateTimeTypeDateTimeString;

    property DateTimeString: IXMLFormattedDateTimeTypeDateTimeString read GetDateTimeString;
  end;

  IXMLFormattedDateTimeTypeDateTimeString = interface(IXMLNode)
    ['{A00EF0C6-2BBE-4579-A589-312B45FB0D9D}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLTimePointFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLTimePointFormatCodeContentType);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property formatText: WideString read GetformatText write SetformatText;
    property format: TXMLTimePointFormatCodeContentType read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLFreightChargeTariffClassCodeType = interface(IXMLNode)
    ['{C0F06DAB-E07B-48BE-BFC2-955E2C992C4A}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLFreightChargeTariffClassCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLFreightChargeTariffClassCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLFreightChargeTariffClassCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLFreightChargeTypeIDType = interface(IXMLNode)
    ['{43233544-2086-48BC-9F29-2C31D19CC11C}']
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLFreightChargeTypeIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLFreightChargeTypeIDSchemeAgencyIDContentType);

    property HasschemeAgencyID: Boolean read GetHasschemeAgencyID;
    property schemeAgencyIDText: WideString read GetschemeAgencyIDText write SetschemeAgencyIDText;
    property schemeAgencyID: TXMLFreightChargeTypeIDSchemeAgencyIDContentType read GetschemeAgencyID write SetschemeAgencyID;
  end;

  IXMLGoodsTypeCodeType = interface(IXMLNode)
    ['{42D9EF42-E64E-48D3-9C31-69C589C74128}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLGoodsTypeExtensionCodeType = interface(IXMLNode)
    ['{43579C90-EAC7-439C-BB24-A812FA9E692A}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLLinearUnitMeasureType = interface(IXMLNode)
    ['{0DA1C9AF-5EA2-42C3-992E-F852AF5E406B}']
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeLinearContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeLinearContentType);

    property HasunitCode: Boolean read GetHasunitCode;
    property unitCodeText: WideString read GetunitCodeText write SetunitCodeText;
    property unitCode: TXMLMeasurementUnitCommonCodeLinearContentType read GetunitCode write SetunitCode;
  end;

  IXMLLineStatusCodeType = interface(IXMLNode)
    ['{C1FA9C2B-BE11-4079-BEA9-40A8D2F47F5E}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLLineStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLLineStatusCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLLineStatusCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLLocationFunctionCodeType = interface(IXMLNode)
    ['{D615155A-4979-4E2B-B7E3-4B156D8599EE}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLLocationFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLLocationFunctionCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLLocationFunctionCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLLogisticsChargeCalculationBasisCodeType = interface(IXMLNode)
    ['{4C925F9C-5BFE-423E-89F8-F2C3DC50BA9E}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLMessageFunctionCodeType = interface(IXMLNode)
    ['{6C427AE3-5237-4D6E-960B-878773A1E494}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLMessageFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLMessageFunctionCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLMessageFunctionCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPackageTypeCodeType = interface(IXMLNode)
    ['{E18ED753-9BCA-4759-B554-5060B7AFF275}']
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPackagingMarkingCodeType = interface(IXMLNode)
    ['{586B0E22-CA30-4373-9538-C4F1BEBAD8B4}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPackagingMarkingCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPackagingMarkingCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPackagingMarkingCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPartyRoleCodeType = interface(IXMLNode)
    ['{EDE42ADE-95C7-46E7-A154-EE839294C0E3}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPartyRoleCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPartyRoleCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPartyRoleCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPaymentGuaranteeMeansCodeType = interface(IXMLNode)
    ['{C7C6E67A-2724-4545-90D8-7B51D03FCB65}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPaymentMeansChannelCodeType = interface(IXMLNode)
    ['{58EBEF8B-8122-41BB-8A3C-BCADDA20157B}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentMeansChannelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentMeansChannelCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPaymentMeansChannelCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPaymentMeansCodeType = interface(IXMLNode)
    ['{4B147762-1FA4-40EF-B8E3-153A588AC2C3}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentMeansCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentMeansCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPaymentMeansCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPaymentTermsEventTimeReferenceCodeType = interface(IXMLNode)
    ['{3E16AD15-3474-496E-B198-1580902C9AF3}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPaymentTermsIDType = interface(IXMLNode)
    ['{80669645-C39F-4D39-B44D-57F267953C7E}']
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLPaymentTermsIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLPaymentTermsIDSchemeAgencyIDContentType);

    property HasschemeAgencyID: Boolean read GetHasschemeAgencyID;
    property schemeAgencyIDText: WideString read GetschemeAgencyIDText write SetschemeAgencyIDText;
    property schemeAgencyID: TXMLPaymentTermsIDSchemeAgencyIDContentType read GetschemeAgencyID write SetschemeAgencyID;
  end;

  IXMLPaymentTermsTypeCodeType = interface(IXMLNode)
    ['{143049B1-3406-49FC-8566-81913E22EB97}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentTermsTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentTermsTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPaymentTermsTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLPriceTypeCodeType = interface(IXMLNode)
    ['{844C9A59-261C-4031-AA2A-1D2910F12F9E}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPriceTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPriceTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLPriceTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLReferenceCodeType = interface(IXMLNode)
    ['{D162B31E-6DFD-4A86-AC07-AD2A9713A7F4}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLReferenceCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLReferenceCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLSealConditionCodeType = interface(IXMLNode)
    ['{BC119944-01B3-4CA5-9805-C3AB34A2F447}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLSealConditionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLSealConditionCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLSealConditionCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLSealingPartyRoleCodeType = interface(IXMLNode)
    ['{9C0241A7-3C84-47CD-90CD-06FE01AE927B}']
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLSealingPartyRoleCodeListAgencyIDContentType;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLSealingPartyRoleCodeListAgencyIDContentType);

    property HaslistID: Boolean read GetHaslistID;
    property listID: WideString read GetlistID write SetlistID;
    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLSealingPartyRoleCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLStatusCodeType = interface(IXMLNode)
    ['{6910A6D4-D7B5-4480-9AA7-1D2846542F87}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLStatusCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLStatusCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTaxCategoryCodeType = interface(IXMLNode)
    ['{32AE3CD0-DF9E-48BD-9252-31F51D49908D}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTaxCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTaxCategoryCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTaxCategoryCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTaxTypeCodeType = interface(IXMLNode)
    ['{DB364DE8-DB5C-4984-B5A0-34E293563A86}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTaxTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTaxTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTaxTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTimeOnlyFormattedDateTimeType = interface(IXMLNode)
    ['{9E4707BE-FCD7-4D42-AE62-EF25ADE8EFAB}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLTimeOnlyFormattedDateTimeTypeDateTimeString;

    property DateTimeString: IXMLTimeOnlyFormattedDateTimeTypeDateTimeString read GetDateTimeString;
  end;

  IXMLTimeOnlyFormattedDateTimeTypeDateTimeString = interface(IXMLNode)
    ['{E08A6E8C-3DCD-4C49-8634-95C6C6163632}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLTimeOnlyFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLTimeOnlyFormatCodeContentType);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property formatText: WideString read GetformatText write SetformatText;
    property format: TXMLTimeOnlyFormatCodeContentType read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLTimeReferenceCodeType = interface(IXMLNode)
    ['{44B86F5A-35DE-4CAA-AC1D-76C40E790478}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTimeReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTimeReferenceCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTimeReferenceCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportEquipmentCategoryCodeType = interface(IXMLNode)
    ['{26E8B0E9-EFFB-487E-91DC-9647A4BA38EB}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportEquipmentFullnessCodeType = interface(IXMLNode)
    ['{0F6B48C9-A083-46A9-B09E-8E8F66A8A6C6}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportMeansTypeCodeType = interface(IXMLNode)
    ['{C8E49FA8-F6F8-40E9-94D3-119286C45E3C}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportMeansTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportMeansTypeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportMeansTypeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportModeCodeType = interface(IXMLNode)
    ['{286F5775-AC92-4288-BD96-6CA4D8678225}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportModeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportModeCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportModeCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportMovementStageCodeType = interface(IXMLNode)
    ['{CE0C0CC6-765A-468A-822E-81C59FC05108}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportMovementStageCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportMovementStageCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportMovementStageCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLTransportServicePaymentArrangementCodeType = interface(IXMLNode)
    ['{4168CB90-1FC3-40EC-8767-0A34D1DB141F}']
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType);

    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyIDText: WideString read GetlistAgencyIDText write SetlistAgencyIDText;
    property listAgencyID: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType read GetlistAgencyID write SetlistAgencyID;
  end;

  IXMLVolumeUnitMeasureType = interface(IXMLNode)
    ['{5E1F9976-8854-441B-8C90-3497AD096318}']
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeVolumeContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeVolumeContentType);

    property HasunitCode: Boolean read GetHasunitCode;
    property unitCodeText: WideString read GetunitCodeText write SetunitCodeText;
    property unitCode: TXMLMeasurementUnitCommonCodeVolumeContentType read GetunitCode write SetunitCode;
  end;

  IXMLWeightUnitMeasureType = interface(IXMLNode)
    ['{02A0E53F-0B3F-4C05-AF88-D6E707F6E2F7}']
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeWeightContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeWeightContentType);

    property HasunitCode: Boolean read GetHasunitCode;
    property unitCodeText: WideString read GetunitCodeText write SetunitCodeText;
    property unitCode: TXMLMeasurementUnitCommonCodeWeightContentType read GetunitCode write SetunitCode;
  end;


  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAccountType_D11A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAmountType_D11A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_ISO_ISO3AlphaCurrencyCode_2012-08-31 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ActionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AddressType_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AdjustmentReasonDescriptionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeIdentificationCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeReasonCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AutomaticDataCaptureMethodCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoOperationalCategoryCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoTypeCode_1996Rev2Final }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommodityIdentificationCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommunicationMeansTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ContactFunctionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsPackingCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsRegulationCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DateOnlyFormatCode_D21B }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsCode_2020 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsFunctionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DimensionTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_Accounting_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentStatusCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyTaxFeeTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyorTaxorFeeCategoryCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCodePaymentTermsEvent_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeQuantityUnitBasisCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeTariffCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeExtensionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_LocationFunctionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeLinear_4 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeVolume_4 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeWeight_4 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MessageFunctionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackageTypeCode_2006 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackagingMarkingCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_ChargePaying_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentGuaranteeMeansCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansChannelCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentTermsTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PriceTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ReferenceTypeCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealConditionCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealingPartyRoleCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusDescriptionCode_AccountingDebitCredit_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimeOnlyFormatCode_D21B }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimePointFormatCode_D21B }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentCategoryCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentFullnessCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMeansTypeCode_2007 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportModeCode_2 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMovementStageCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportPaymentArrangementCode_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_UnqualifiedDataType_100 }
  IXMLAmountType = interface(IXMLNode)
    ['{0FB311A7-1F52-42DE-877E-BDD9BBBF6104}']
    function GetHascurrencyID: Boolean;
    function currencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcurrencyID: WideString;
    function GetHascurrencyCodeListVersionID: Boolean;
    function currencyCodeListVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcurrencyCodeListVersionID: WideString;

    procedure SetcurrencyID(const Value: WideString);
    procedure SetcurrencyCodeListVersionID(const Value: WideString);

    property HascurrencyID: Boolean read GetHascurrencyID;
    property currencyID: WideString read GetcurrencyID write SetcurrencyID;
    property HascurrencyCodeListVersionID: Boolean read GetHascurrencyCodeListVersionID;
    property currencyCodeListVersionID: WideString read GetcurrencyCodeListVersionID write SetcurrencyCodeListVersionID;
  end;

  IXMLBinaryObjectType = interface(IXMLNode)
    ['{A3973462-0660-4BAE-8EEB-4D2FC14133FB}']
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetHasmimeCode: Boolean;
    function mimeCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetmimeCode: WideString;
    function GetHasencodingCode: Boolean;
    function encodingCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetencodingCode: WideString;
    function GetHascharacterSetCode: Boolean;
    function characterSetCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcharacterSetCode: WideString;
    function GetHasuri: Boolean;
    function uriDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Geturi: WideString;
    function GetHasfilename: Boolean;
    function filenameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getfilename: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetmimeCode(const Value: WideString);
    procedure SetencodingCode(const Value: WideString);
    procedure SetcharacterSetCode(const Value: WideString);
    procedure Seturi(const Value: WideString);
    procedure Setfilename(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
    property HasmimeCode: Boolean read GetHasmimeCode;
    property mimeCode: WideString read GetmimeCode write SetmimeCode;
    property HasencodingCode: Boolean read GetHasencodingCode;
    property encodingCode: WideString read GetencodingCode write SetencodingCode;
    property HascharacterSetCode: Boolean read GetHascharacterSetCode;
    property characterSetCode: WideString read GetcharacterSetCode write SetcharacterSetCode;
    property Hasuri: Boolean read GetHasuri;
    property uri: WideString read Geturi write Seturi;
    property Hasfilename: Boolean read GetHasfilename;
    property filename: WideString read Getfilename write Setfilename;
  end;

  IXMLCodeType = interface(IXMLNode)
    ['{7393BFFD-BD61-4A18-96B3-27251F284E53}']
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;
    function GetHaslistAgencyName: Boolean;
    function listAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyName: WideString;
    function GetHaslistName: Boolean;
    function listNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistName: WideString;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHasname: Boolean;
    function nameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getname: WideString;
    function GetHaslanguageID: Boolean;
    function languageIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageID: WideString;
    function GetHaslistURI: Boolean;
    function listURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistURI: WideString;
    function GetHaslistSchemeURI: Boolean;
    function listSchemeURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistSchemeURI: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyID(const Value: WideString);
    procedure SetlistAgencyName(const Value: WideString);
    procedure SetlistName(const Value: WideString);
    procedure SetlistVersionID(const Value: WideString);
    procedure Setname(const Value: WideString);
    procedure SetlanguageID(const Value: WideString);
    procedure SetlistURI(const Value: WideString);
    procedure SetlistSchemeURI(const Value: WideString);

    property HaslistID: Boolean read GetHaslistID;
    property listID: WideString read GetlistID write SetlistID;
    property HaslistAgencyID: Boolean read GetHaslistAgencyID;
    property listAgencyID: WideString read GetlistAgencyID write SetlistAgencyID;
    property HaslistAgencyName: Boolean read GetHaslistAgencyName;
    property listAgencyName: WideString read GetlistAgencyName write SetlistAgencyName;
    property HaslistName: Boolean read GetHaslistName;
    property listName: WideString read GetlistName write SetlistName;
    property HaslistVersionID: Boolean read GetHaslistVersionID;
    property listVersionID: WideString read GetlistVersionID write SetlistVersionID;
    property Hasname: Boolean read GetHasname;
    property name: WideString read Getname write Setname;
    property HaslanguageID: Boolean read GetHaslanguageID;
    property languageID: WideString read GetlanguageID write SetlanguageID;
    property HaslistURI: Boolean read GetHaslistURI;
    property listURI: WideString read GetlistURI write SetlistURI;
    property HaslistSchemeURI: Boolean read GetHaslistSchemeURI;
    property listSchemeURI: WideString read GetlistSchemeURI write SetlistSchemeURI;
  end;

  IXMLDateTimeType = interface(IXMLNode)
    ['{8BAAB6A7-1F74-4912-906A-91B5DBE15303}']
    function GetHasDateTimeString: Boolean;
    function GetDateTimeString: IXMLDateTimeTypeDateTimeString;
    function GetHasDateTime: Boolean;
    function DateTimeDef(const ADefaultValue: TDateTime = Default(TDateTime)): TDateTime;
    function GetDateTime: TDateTime;

    procedure SetDateTime(const Value: TDateTime);

    property HasDateTimeString: Boolean read GetHasDateTimeString;
    property DateTimeString: IXMLDateTimeTypeDateTimeString read GetDateTimeString;
    property HasDateTime: Boolean read GetHasDateTime;
    property DateTime: TDateTime read GetDateTime write SetDateTime;
  end;

  IXMLDateTimeTypeDateTimeString = interface(IXMLNode)
    ['{5303A3F5-6E2A-42FA-8335-399932DA42E2}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLDateType = interface(IXMLNode)
    ['{C63834D0-262D-4516-BD64-22480ABB4CDB}']
    function GetHasDateString: Boolean;
    function GetDateString: IXMLDateString;
    function GetHasDate: Boolean;
    function DateDef(const ADefaultValue: TDateTime = Default(TDateTime)): TDateTime;
    function GetDate: TDateTime;

    procedure SetDate(const Value: TDateTime);

    property HasDateString: Boolean read GetHasDateString;
    property DateString: IXMLDateString read GetDateString;
    property HasDate: Boolean read GetHasDate;
    property Date: TDateTime read GetDate write SetDate;
  end;

  IXMLDateString = interface(IXMLNode)
    ['{8AA33C7B-1D67-4520-9FCE-E4127023E7C5}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLIDType = interface(IXMLNode)
    ['{CAD82B71-9C5E-4B7C-8D9F-5777AF5617F5}']
    function GetHasschemeID: Boolean;
    function schemeIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeID: WideString;
    function GetHasschemeName: Boolean;
    function schemeNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeName: WideString;
    function GetHasschemeAgencyID: Boolean;
    function schemeAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeAgencyID: WideString;
    function GetHasschemeAgencyName: Boolean;
    function schemeAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeAgencyName: WideString;
    function GetHasschemeVersionID: Boolean;
    function schemeVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeVersionID: WideString;
    function GetHasschemeDataURI: Boolean;
    function schemeDataURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeDataURI: WideString;
    function GetHasschemeURI: Boolean;
    function schemeURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeURI: WideString;

    procedure SetschemeID(const Value: WideString);
    procedure SetschemeName(const Value: WideString);
    procedure SetschemeAgencyID(const Value: WideString);
    procedure SetschemeAgencyName(const Value: WideString);
    procedure SetschemeVersionID(const Value: WideString);
    procedure SetschemeDataURI(const Value: WideString);
    procedure SetschemeURI(const Value: WideString);

    property HasschemeID: Boolean read GetHasschemeID;
    property schemeID: WideString read GetschemeID write SetschemeID;
    property HasschemeName: Boolean read GetHasschemeName;
    property schemeName: WideString read GetschemeName write SetschemeName;
    property HasschemeAgencyID: Boolean read GetHasschemeAgencyID;
    property schemeAgencyID: WideString read GetschemeAgencyID write SetschemeAgencyID;
    property HasschemeAgencyName: Boolean read GetHasschemeAgencyName;
    property schemeAgencyName: WideString read GetschemeAgencyName write SetschemeAgencyName;
    property HasschemeVersionID: Boolean read GetHasschemeVersionID;
    property schemeVersionID: WideString read GetschemeVersionID write SetschemeVersionID;
    property HasschemeDataURI: Boolean read GetHasschemeDataURI;
    property schemeDataURI: WideString read GetschemeDataURI write SetschemeDataURI;
    property HasschemeURI: Boolean read GetHasschemeURI;
    property schemeURI: WideString read GetschemeURI write SetschemeURI;
  end;

  IXMLIndicatorType = interface(IXMLNode)
    ['{4905E881-2603-459A-BE70-208D52EB0622}']
    function GetHasIndicatorString: Boolean;
    function GetIndicatorString: IXMLIndicatorString;
    function GetHasIndicator: Boolean;
    function IndicatorDef(const ADefaultValue: Boolean = Default(Boolean)): Boolean;
    function GetIndicator: Boolean;

    procedure SetIndicator(const Value: Boolean);

    property HasIndicatorString: Boolean read GetHasIndicatorString;
    property IndicatorString: IXMLIndicatorString read GetIndicatorString;
    property HasIndicator: Boolean read GetHasIndicator;
    property Indicator: Boolean read GetIndicator write SetIndicator;
  end;

  IXMLIndicatorString = interface(IXMLNode)
    ['{385AED9C-63EC-4B46-88C0-F5443B300E5B}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
    property Value: WideString read GetValue write SetValue;
  end;

  IXMLMeasureType = interface(IXMLNode)
    ['{6EF7E839-6BEA-468E-A697-9D616F20283B}']
    function GetHasunitCode: Boolean;
    function unitCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCode: WideString;
    function GetHasunitCodeListVersionID: Boolean;
    function unitCodeListVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListVersionID: WideString;

    procedure SetunitCode(const Value: WideString);
    procedure SetunitCodeListVersionID(const Value: WideString);

    property HasunitCode: Boolean read GetHasunitCode;
    property unitCode: WideString read GetunitCode write SetunitCode;
    property HasunitCodeListVersionID: Boolean read GetHasunitCodeListVersionID;
    property unitCodeListVersionID: WideString read GetunitCodeListVersionID write SetunitCodeListVersionID;
  end;

  IXMLNumericType = interface(IXMLNode)
    ['{782EE76F-99B9-433B-A6C9-54A9549D6F85}']
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
  end;

  IXMLPercentType = interface(IXMLNode)
    ['{B2461F4D-86BD-4CEC-80B0-2162DAE2E1CC}']
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
  end;

  IXMLQuantityType = interface(IXMLNode)
    ['{48F26C4B-D996-471F-BE98-7DB2468DFD67}']
    function GetHasunitCode: Boolean;
    function unitCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCode: WideString;
    function GetHasunitCodeListID: Boolean;
    function unitCodeListIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListID: WideString;
    function GetHasunitCodeListAgencyID: Boolean;
    function unitCodeListAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListAgencyID: WideString;
    function GetHasunitCodeListAgencyName: Boolean;
    function unitCodeListAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListAgencyName: WideString;

    procedure SetunitCode(const Value: WideString);
    procedure SetunitCodeListID(const Value: WideString);
    procedure SetunitCodeListAgencyID(const Value: WideString);
    procedure SetunitCodeListAgencyName(const Value: WideString);

    property HasunitCode: Boolean read GetHasunitCode;
    property unitCode: WideString read GetunitCode write SetunitCode;
    property HasunitCodeListID: Boolean read GetHasunitCodeListID;
    property unitCodeListID: WideString read GetunitCodeListID write SetunitCodeListID;
    property HasunitCodeListAgencyID: Boolean read GetHasunitCodeListAgencyID;
    property unitCodeListAgencyID: WideString read GetunitCodeListAgencyID write SetunitCodeListAgencyID;
    property HasunitCodeListAgencyName: Boolean read GetHasunitCodeListAgencyName;
    property unitCodeListAgencyName: WideString read GetunitCodeListAgencyName write SetunitCodeListAgencyName;
  end;

  IXMLRateType = interface(IXMLNode)
    ['{CC2FF4C2-B1AF-4869-9801-F87AA3F5C04A}']
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);

    property Hasformat: Boolean read GetHasformat;
    property format: WideString read Getformat write Setformat;
  end;

  IXMLTextType = interface(IXMLNode)
    ['{F9CEC971-7A1E-4C8F-9056-AC7842C06436}']
    function GetHaslanguageID: Boolean;
    function languageIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageID: WideString;
    function GetHaslanguageLocaleID: Boolean;
    function languageLocaleIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageLocaleID: WideString;

    procedure SetlanguageID(const Value: WideString);
    procedure SetlanguageLocaleID(const Value: WideString);

    property HaslanguageID: Boolean read GetHaslanguageID;
    property languageID: WideString read GetlanguageID write SetlanguageID;
    property HaslanguageLocaleID: Boolean read GetHaslanguageLocaleID;
    property languageLocaleID: WideString read GetlanguageLocaleID write SetlanguageLocaleID;
  end;


  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_ISO_ISOTwo-letterCountryCode_SecondEdition2006 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_FreightCostCode_4 }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_PaymentTermsDescriptionIdentifier_D22A }

  { Interfaces for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_ReusableAggregateBusinessInformationEntity_100 }
  /// <summary>
  ///    (BN/BN) Advance Payment
  /// </summary>
  IXMLAdvancePaymentType = interface(IXMLNode)
    ['{C978BE09-B444-4D9A-B375-7C46AE1350AC}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetPaidAmount: IXMLAmountType;
    function GetHasFormattedReceivedDateTime: Boolean;
    function GetFormattedReceivedDateTime: IXMLFormattedDateTimeType;
    function GetIncludedTradeTax: IXMLIncludedTradeTaxList;
    function GetInvoiceSpecifiedReferencedDocument: IXMLInvoiceSpecifiedReferencedDocumentList;

    property PaidAmount: IXMLAmountType read GetPaidAmount;
    property HasFormattedReceivedDateTime: Boolean read GetHasFormattedReceivedDateTime;
    property FormattedReceivedDateTime: IXMLFormattedDateTimeType read GetFormattedReceivedDateTime;
    property IncludedTradeTax: IXMLIncludedTradeTaxList read GetIncludedTradeTax;
    property InvoiceSpecifiedReferencedDocument: IXMLInvoiceSpecifiedReferencedDocumentList read GetInvoiceSpecifiedReferencedDocument;
  end;

  IXMLInvoiceSpecifiedReferencedDocumentListEnumerator = interface
    ['{A4865F6E-372E-4D41-860B-927BBD2E73AC}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Invoice Document
  /// </summary>
  IXMLInvoiceSpecifiedReferencedDocumentList = interface(IXMLNodeCollection)
    ['{0E29D10D-0FA0-4989-AD99-A1FA4CE5A640}']
    function GetEnumerator: IXMLInvoiceSpecifiedReferencedDocumentListEnumerator;

    function Get_InvoiceSpecifiedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property InvoiceSpecifiedReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_InvoiceSpecifiedReferencedDocument; default;
  end;

  /// <summary>
  ///    (BN/BN) Applied Allowance/Charge
  /// </summary>
  IXMLAppliedAllowanceChargeType = interface(IXMLNode)
    ['{6D252F61-67CD-4EE8-ABB4-850E7CF43E38}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasActualAmount: Boolean;
    function GetActualAmount: IXMLAmountType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLCodeType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetChargeIndicator: IXMLIndicatorType;
    function GetHasCategoryAppliedTax: Boolean;
    function GetCategoryAppliedTax: IXMLAppliedTaxType;

    property HasActualAmount: Boolean read GetHasActualAmount;
    property ActualAmount: IXMLAmountType read GetActualAmount;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
    property HasReasonCode: Boolean read GetHasReasonCode;
    property ReasonCode: IXMLCodeType read GetReasonCode;
    property HasCalculationPercent: Boolean read GetHasCalculationPercent;
    property CalculationPercent: IXMLPercentType read GetCalculationPercent;
    property HasBasisAmount: Boolean read GetHasBasisAmount;
    property BasisAmount: IXMLAmountType read GetBasisAmount;
    property ChargeIndicator: IXMLIndicatorType read GetChargeIndicator;
    property HasCategoryAppliedTax: Boolean read GetHasCategoryAppliedTax;
    property CategoryAppliedTax: IXMLAppliedTaxType read GetCategoryAppliedTax;
  end;

  /// <summary>
  ///    (BN/BN) Applied Tax
  /// </summary>
  IXMLAppliedTaxType = interface(IXMLNode)
    ['{425A983E-DFDA-49B3-9AED-154431940E79}']
    function GetHasCalculatedAmount: Boolean;
    function GetCalculatedAmount: IXMLAmountType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasCalculatedRate: Boolean;
    function GetCalculatedRate: IXMLRateType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasTaxPointDate: Boolean;
    function GetTaxPointDate: IXMLDateType;

    property HasCalculatedAmount: Boolean read GetHasCalculatedAmount;
    property CalculatedAmount: IXMLAmountType read GetCalculatedAmount;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasCalculatedRate: Boolean read GetHasCalculatedRate;
    property CalculatedRate: IXMLRateType read GetCalculatedRate;
    property HasBasisAmount: Boolean read GetHasBasisAmount;
    property BasisAmount: IXMLAmountType read GetBasisAmount;
    property HasTaxPointDate: Boolean read GetHasTaxPointDate;
    property TaxPointDate: IXMLDateType read GetTaxPointDate;
  end;

  /// <summary>
  ///    (BN/BN) Available Period
  /// </summary>
  IXMLAvailablePeriodType = interface(IXMLNode)
    ['{6ED3AFEF-1B97-46FA-9121-B41842C6C125}']
    function GetHasStartDateTime: Boolean;
    function GetStartDateTime: IXMLDateTimeType;
    function GetHasEndDateTime: Boolean;
    function GetEndDateTime: IXMLDateTimeType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;

    property HasStartDateTime: Boolean read GetHasStartDateTime;
    property StartDateTime: IXMLDateTimeType read GetStartDateTime;
    property HasEndDateTime: Boolean read GetHasEndDateTime;
    property EndDateTime: IXMLDateTimeType read GetEndDateTime;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
  end;

  /// <summary>
  ///    (BN/BN) Basic Work Item
  /// </summary>
  IXMLBasicWorkItemType = interface(IXMLNode)
    ['{3CAFFD28-EBEA-46D2-B36A-CA91869E668E}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasReferenceID: Boolean;
    function GetReferenceID: IXMLIDType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetComment: IXMLCommentList;
    function GetHasTotalQuantity: Boolean;
    function GetTotalQuantity: IXMLQuantityType;
    function GetHasTotalQuantityClassificationCode: Boolean;
    function GetTotalQuantityClassificationCode: IXMLCodeType;
    function GetHas_Index: Boolean;
    function Get_Index: IXMLTextType;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListItemID: Boolean;
    function GetPriceListItemID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    function GetTotalQuantityWorkItemQuantityAnalysis: IXMLTotalQuantityWorkItemQuantityAnalysisList;
    function GetUnitCalculatedPrice: IXMLUnitCalculatedPriceList;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;

    property ID: IXMLIDType read GetID;
    property HasReferenceID: Boolean read GetHasReferenceID;
    property ReferenceID: IXMLIDType read GetReferenceID;
    property PrimaryClassificationCode: IXMLPrimaryClassificationCodeList read GetPrimaryClassificationCode;
    property AlternativeClassificationCode: IXMLAlternativeClassificationCodeList read GetAlternativeClassificationCode;
    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property Comment: IXMLCommentList read GetComment;
    property HasTotalQuantity: Boolean read GetHasTotalQuantity;
    property TotalQuantity: IXMLQuantityType read GetTotalQuantity;
    property HasTotalQuantityClassificationCode: Boolean read GetHasTotalQuantityClassificationCode;
    property TotalQuantityClassificationCode: IXMLCodeType read GetTotalQuantityClassificationCode;
    property Has_Index: Boolean read GetHas_Index;
    property _Index: IXMLTextType read Get_Index;
    property RequestedActionCode: IXMLRequestedActionCodeList read GetRequestedActionCode;
    property HasPriceListItemID: Boolean read GetHasPriceListItemID;
    property PriceListItemID: IXMLIDType read GetPriceListItemID;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
    property ActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList read GetActualWorkItemComplexDescription;
    property TotalQuantityWorkItemQuantityAnalysis: IXMLTotalQuantityWorkItemQuantityAnalysisList read GetTotalQuantityWorkItemQuantityAnalysis;
    property UnitCalculatedPrice: IXMLUnitCalculatedPriceList read GetUnitCalculatedPrice;
    property TotalCalculatedPrice: IXMLTotalCalculatedPriceList read GetTotalCalculatedPrice;
    property ChangedRecordedStatus: IXMLChangedRecordedStatusList read GetChangedRecordedStatus;
    property ItemBasicWorkItem: IXMLItemBasicWorkItemList read GetItemBasicWorkItem;
    property ReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList read GetReferencedSpecifiedBinaryFile;
  end;

  IXMLUnitCalculatedPriceListEnumerator = interface
    ['{B905EBBF-F0D3-47FE-8B7D-B669F350F800}']
    function GetCurrent: IXMLCalculatedPriceType;
    function MoveNext: Boolean;
    property Current: IXMLCalculatedPriceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Calculated Unit Price
  /// </summary>
  IXMLUnitCalculatedPriceList = interface(IXMLNodeCollection)
    ['{09DDF2BE-3657-44C8-8365-C68919F4B1C6}']
    function GetEnumerator: IXMLUnitCalculatedPriceListEnumerator;

    function Get_UnitCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
    function Add: IXMLCalculatedPriceType;
    function Insert(Index: Integer): IXMLCalculatedPriceType;

    property UnitCalculatedPrice[Index: Integer]: IXMLCalculatedPriceType read Get_UnitCalculatedPrice; default;
  end;

  IXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator = interface
    ['{2D224BF2-49DC-4ECE-8589-B9FB114805A4}']
    function GetCurrent: IXMLWorkItemQuantityAnalysisType;
    function MoveNext: Boolean;
    property Current: IXMLWorkItemQuantityAnalysisType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Quantity Analysis
  /// </summary>
  IXMLTotalQuantityWorkItemQuantityAnalysisList = interface(IXMLNodeCollection)
    ['{717A6089-1087-49AD-810C-BA30AC039B3C}']
    function GetEnumerator: IXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator;

    function Get_TotalQuantityWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
    function Add: IXMLWorkItemQuantityAnalysisType;
    function Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;

    property TotalQuantityWorkItemQuantityAnalysis[Index: Integer]: IXMLWorkItemQuantityAnalysisType read Get_TotalQuantityWorkItemQuantityAnalysis; default;
  end;

  /// <summary>
  ///    (BN/BN) Branch Financial Institution
  /// </summary>
  IXMLBranchFinancialInstitutionType = interface(IXMLNode)
    ['{DE2044D0-AD56-4D19-988F-678D4ECF1A5D}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasLocationFinancialInstitutionAddress: Boolean read GetHasLocationFinancialInstitutionAddress;
    property LocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType read GetLocationFinancialInstitutionAddress;
  end;

  /// <summary>
  ///    (BN/BN) Calculated Price
  /// </summary>
  IXMLCalculatedPriceType = interface(IXMLNode)
    ['{6225E265-BCE0-4321-8131-6BBDBBB38C66}']
    function GetTypeCode: IXMLTypeCodeList;
    function GetChargeAmount: IXMLChargeAmountList;
    function GetRelatedAppliedAllowanceCharge: IXMLRelatedAppliedAllowanceChargeList;

    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property ChargeAmount: IXMLChargeAmountList read GetChargeAmount;
    property RelatedAppliedAllowanceCharge: IXMLRelatedAppliedAllowanceChargeList read GetRelatedAppliedAllowanceCharge;
  end;

  IXMLRelatedAppliedAllowanceChargeListEnumerator = interface
    ['{D25C2BAA-2CE0-4D0A-A3DA-538480BD80DE}']
    function GetCurrent: IXMLAppliedAllowanceChargeType;
    function MoveNext: Boolean;
    property Current: IXMLAppliedAllowanceChargeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applied Allowance/Charge
  /// </summary>
  IXMLRelatedAppliedAllowanceChargeList = interface(IXMLNodeCollection)
    ['{1F727EDA-D177-4B0D-96D4-E9DFCD2D64BE}']
    function GetEnumerator: IXMLRelatedAppliedAllowanceChargeListEnumerator;

    function Get_RelatedAppliedAllowanceCharge(Index: Integer): IXMLAppliedAllowanceChargeType;
    function Add: IXMLAppliedAllowanceChargeType;
    function Insert(Index: Integer): IXMLAppliedAllowanceChargeType;

    property RelatedAppliedAllowanceCharge[Index: Integer]: IXMLAppliedAllowanceChargeType read Get_RelatedAppliedAllowanceCharge; default;
  end;

  /// <summary>
  ///    (BN/BN) Contact Person
  /// </summary>
  IXMLContactPersonType = interface(IXMLNode)
    ['{16A474C6-1DBD-4A7F-85EE-3896A14A0304}']
    function GetHasGivenName: Boolean;
    function GetGivenName: IXMLTextType;
    function GetHasMiddleName: Boolean;
    function GetMiddleName: IXMLTextType;
    function GetHasFamilyName: Boolean;
    function GetFamilyName: IXMLTextType;

    property HasGivenName: Boolean read GetHasGivenName;
    property GivenName: IXMLTextType read GetGivenName;
    property HasMiddleName: Boolean read GetHasMiddleName;
    property MiddleName: IXMLTextType read GetMiddleName;
    property HasFamilyName: Boolean read GetHasFamilyName;
    property FamilyName: IXMLTextType read GetFamilyName;
  end;

  /// <summary>
  ///    (BN/BN) Creditor Financial Account
  /// </summary>
  IXMLCreditorFinancialAccountType = interface(IXMLNode)
    ['{FDCE6F0D-AAE4-42DA-811A-D4DD9ADEAD4F}']
    function GetHasIBANID: Boolean;
    function GetIBANID: IXMLIDType;
    function GetHasAccountName: Boolean;
    function GetAccountName: IXMLTextType;
    function GetHasProprietaryID: Boolean;
    function GetProprietaryID: IXMLIDType;

    property HasIBANID: Boolean read GetHasIBANID;
    property IBANID: IXMLIDType read GetIBANID;
    property HasAccountName: Boolean read GetHasAccountName;
    property AccountName: IXMLTextType read GetAccountName;
    property HasProprietaryID: Boolean read GetHasProprietaryID;
    property ProprietaryID: IXMLIDType read GetProprietaryID;
  end;

  /// <summary>
  ///    (BN/BN) Creditor Financial Institution
  /// </summary>
  IXMLCreditorFinancialInstitutionType = interface(IXMLNode)
    ['{6B7FFC2F-BFC6-429F-8791-2FF77698D531}']
    function GetHasBICID: Boolean;
    function GetBICID: IXMLIDType;
    function GetHasCHIPSUniversalID: Boolean;
    function GetCHIPSUniversalID: IXMLIDType;
    function GetHasNewZealandNCCID: Boolean;
    function GetNewZealandNCCID: IXMLIDType;
    function GetHasIrishNSCID: Boolean;
    function GetIrishNSCID: IXMLIDType;
    function GetHasUKSortCodeID: Boolean;
    function GetUKSortCodeID: IXMLIDType;
    function GetHasCHIPSParticipantID: Boolean;
    function GetCHIPSParticipantID: IXMLIDType;
    function GetHasSwissBCID: Boolean;
    function GetSwissBCID: IXMLIDType;
    function GetHasFedwireRoutingNumberID: Boolean;
    function GetFedwireRoutingNumberID: IXMLIDType;
    function GetHasPortugueseNCCID: Boolean;
    function GetPortugueseNCCID: IXMLIDType;
    function GetHasRussianCentralBankID: Boolean;
    function GetRussianCentralBankID: IXMLIDType;
    function GetHasItalianDomesticID: Boolean;
    function GetItalianDomesticID: IXMLIDType;
    function GetHasAustrianBankleitzahlID: Boolean;
    function GetAustrianBankleitzahlID: IXMLIDType;
    function GetHasCanadianPaymentsAssociationID: Boolean;
    function GetCanadianPaymentsAssociationID: IXMLIDType;
    function GetHasSICID: Boolean;
    function GetSICID: IXMLIDType;
    function GetHasGermanBankleitzahlID: Boolean;
    function GetGermanBankleitzahlID: IXMLIDType;
    function GetHasSpanishDomesticInterbankingID: Boolean;
    function GetSpanishDomesticInterbankingID: IXMLIDType;
    function GetHasSouthAfricanNCCID: Boolean;
    function GetSouthAfricanNCCID: IXMLIDType;
    function GetHasHongKongBankID: Boolean;
    function GetHongKongBankID: IXMLIDType;
    function GetHasAustralianBSBID: Boolean;
    function GetAustralianBSBID: IXMLIDType;
    function GetHasIndianFinancialSystemID: Boolean;
    function GetIndianFinancialSystemID: IXMLIDType;
    function GetHasHellenicBankID: Boolean;
    function GetHellenicBankID: IXMLIDType;
    function GetHasPolishNationalClearingID: Boolean;
    function GetPolishNationalClearingID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasClearingSystemName: Boolean;
    function GetClearingSystemName: IXMLTextType;
    function GetHasJapanFinancialInstitutionCommonID: Boolean;
    function GetJapanFinancialInstitutionCommonID: IXMLIDType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
    function GetHasSubDivisionBranchFinancialInstitution: Boolean;
    function GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;

    property HasBICID: Boolean read GetHasBICID;
    property BICID: IXMLIDType read GetBICID;
    property HasCHIPSUniversalID: Boolean read GetHasCHIPSUniversalID;
    property CHIPSUniversalID: IXMLIDType read GetCHIPSUniversalID;
    property HasNewZealandNCCID: Boolean read GetHasNewZealandNCCID;
    property NewZealandNCCID: IXMLIDType read GetNewZealandNCCID;
    property HasIrishNSCID: Boolean read GetHasIrishNSCID;
    property IrishNSCID: IXMLIDType read GetIrishNSCID;
    property HasUKSortCodeID: Boolean read GetHasUKSortCodeID;
    property UKSortCodeID: IXMLIDType read GetUKSortCodeID;
    property HasCHIPSParticipantID: Boolean read GetHasCHIPSParticipantID;
    property CHIPSParticipantID: IXMLIDType read GetCHIPSParticipantID;
    property HasSwissBCID: Boolean read GetHasSwissBCID;
    property SwissBCID: IXMLIDType read GetSwissBCID;
    property HasFedwireRoutingNumberID: Boolean read GetHasFedwireRoutingNumberID;
    property FedwireRoutingNumberID: IXMLIDType read GetFedwireRoutingNumberID;
    property HasPortugueseNCCID: Boolean read GetHasPortugueseNCCID;
    property PortugueseNCCID: IXMLIDType read GetPortugueseNCCID;
    property HasRussianCentralBankID: Boolean read GetHasRussianCentralBankID;
    property RussianCentralBankID: IXMLIDType read GetRussianCentralBankID;
    property HasItalianDomesticID: Boolean read GetHasItalianDomesticID;
    property ItalianDomesticID: IXMLIDType read GetItalianDomesticID;
    property HasAustrianBankleitzahlID: Boolean read GetHasAustrianBankleitzahlID;
    property AustrianBankleitzahlID: IXMLIDType read GetAustrianBankleitzahlID;
    property HasCanadianPaymentsAssociationID: Boolean read GetHasCanadianPaymentsAssociationID;
    property CanadianPaymentsAssociationID: IXMLIDType read GetCanadianPaymentsAssociationID;
    property HasSICID: Boolean read GetHasSICID;
    property SICID: IXMLIDType read GetSICID;
    property HasGermanBankleitzahlID: Boolean read GetHasGermanBankleitzahlID;
    property GermanBankleitzahlID: IXMLIDType read GetGermanBankleitzahlID;
    property HasSpanishDomesticInterbankingID: Boolean read GetHasSpanishDomesticInterbankingID;
    property SpanishDomesticInterbankingID: IXMLIDType read GetSpanishDomesticInterbankingID;
    property HasSouthAfricanNCCID: Boolean read GetHasSouthAfricanNCCID;
    property SouthAfricanNCCID: IXMLIDType read GetSouthAfricanNCCID;
    property HasHongKongBankID: Boolean read GetHasHongKongBankID;
    property HongKongBankID: IXMLIDType read GetHongKongBankID;
    property HasAustralianBSBID: Boolean read GetHasAustralianBSBID;
    property AustralianBSBID: IXMLIDType read GetAustralianBSBID;
    property HasIndianFinancialSystemID: Boolean read GetHasIndianFinancialSystemID;
    property IndianFinancialSystemID: IXMLIDType read GetIndianFinancialSystemID;
    property HasHellenicBankID: Boolean read GetHasHellenicBankID;
    property HellenicBankID: IXMLIDType read GetHellenicBankID;
    property HasPolishNationalClearingID: Boolean read GetHasPolishNationalClearingID;
    property PolishNationalClearingID: IXMLIDType read GetPolishNationalClearingID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasClearingSystemName: Boolean read GetHasClearingSystemName;
    property ClearingSystemName: IXMLTextType read GetClearingSystemName;
    property HasJapanFinancialInstitutionCommonID: Boolean read GetHasJapanFinancialInstitutionCommonID;
    property JapanFinancialInstitutionCommonID: IXMLIDType read GetJapanFinancialInstitutionCommonID;
    property HasLocationFinancialInstitutionAddress: Boolean read GetHasLocationFinancialInstitutionAddress;
    property LocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType read GetLocationFinancialInstitutionAddress;
    property HasSubDivisionBranchFinancialInstitution: Boolean read GetHasSubDivisionBranchFinancialInstitution;
    property SubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType read GetSubDivisionBranchFinancialInstitution;
  end;

  /// <summary>
  ///    (BN/BN) Cross-Border Customs Valuation
  /// </summary>
  IXMLCrossBorderCustomsValuationType = interface(IXMLNode)
    ['{067BFD32-92AE-4A41-8C0C-C2DD0E443AAD}']
    function GetHasAddedAdjustmentAmount: Boolean;
    function GetAddedAdjustmentAmount: IXMLAmountType;
    function GetHasDeductedAdjustmentAmount: Boolean;
    function GetDeductedAdjustmentAmount: IXMLAmountType;
    function GetHasAddedAdjustmentPercent: Boolean;
    function GetAddedAdjustmentPercent: IXMLPercentType;
    function GetHasDeductedAdjustmentPercent: Boolean;
    function GetDeductedAdjustmentPercent: IXMLPercentType;
    function GetHasMethodCode: Boolean;
    function GetMethodCode: IXMLCodeType;
    function GetHasWTOAdditionCode: Boolean;
    function GetWTOAdditionCode: IXMLCodeType;
    function GetHasChargeApportionMethodCode: Boolean;
    function GetChargeApportionMethodCode: IXMLCodeType;
    function GetOtherChargeAmount: IXMLOtherChargeAmountList;
    function GetHasBuyerSellerRelationshipIndicator: Boolean;
    function GetBuyerSellerRelationshipIndicator: IXMLIndicatorType;
    function GetHasBuyerSellerRelationshipPriceInfluenceIndicator: Boolean;
    function GetBuyerSellerRelationshipPriceInfluenceIndicator: IXMLIndicatorType;
    function GetHasSaleRestrictionIndicator: Boolean;
    function GetSaleRestrictionIndicator: IXMLIndicatorType;
    function GetHasSalePriceConditionIndicator: Boolean;
    function GetSalePriceConditionIndicator: IXMLIndicatorType;
    function GetHasRoyaltyLicenseFeeIndicator: Boolean;
    function GetRoyaltyLicenseFeeIndicator: IXMLIndicatorType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetSaleRestriction: IXMLSaleRestrictionList;
    function GetHasApplicableTradeCurrencyExchange: Boolean;
    function GetApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;

    property HasAddedAdjustmentAmount: Boolean read GetHasAddedAdjustmentAmount;
    property AddedAdjustmentAmount: IXMLAmountType read GetAddedAdjustmentAmount;
    property HasDeductedAdjustmentAmount: Boolean read GetHasDeductedAdjustmentAmount;
    property DeductedAdjustmentAmount: IXMLAmountType read GetDeductedAdjustmentAmount;
    property HasAddedAdjustmentPercent: Boolean read GetHasAddedAdjustmentPercent;
    property AddedAdjustmentPercent: IXMLPercentType read GetAddedAdjustmentPercent;
    property HasDeductedAdjustmentPercent: Boolean read GetHasDeductedAdjustmentPercent;
    property DeductedAdjustmentPercent: IXMLPercentType read GetDeductedAdjustmentPercent;
    property HasMethodCode: Boolean read GetHasMethodCode;
    property MethodCode: IXMLCodeType read GetMethodCode;
    property HasWTOAdditionCode: Boolean read GetHasWTOAdditionCode;
    property WTOAdditionCode: IXMLCodeType read GetWTOAdditionCode;
    property HasChargeApportionMethodCode: Boolean read GetHasChargeApportionMethodCode;
    property ChargeApportionMethodCode: IXMLCodeType read GetChargeApportionMethodCode;
    property OtherChargeAmount: IXMLOtherChargeAmountList read GetOtherChargeAmount;
    property HasBuyerSellerRelationshipIndicator: Boolean read GetHasBuyerSellerRelationshipIndicator;
    property BuyerSellerRelationshipIndicator: IXMLIndicatorType read GetBuyerSellerRelationshipIndicator;
    property HasBuyerSellerRelationshipPriceInfluenceIndicator: Boolean read GetHasBuyerSellerRelationshipPriceInfluenceIndicator;
    property BuyerSellerRelationshipPriceInfluenceIndicator: IXMLIndicatorType read GetBuyerSellerRelationshipPriceInfluenceIndicator;
    property HasSaleRestrictionIndicator: Boolean read GetHasSaleRestrictionIndicator;
    property SaleRestrictionIndicator: IXMLIndicatorType read GetSaleRestrictionIndicator;
    property HasSalePriceConditionIndicator: Boolean read GetHasSalePriceConditionIndicator;
    property SalePriceConditionIndicator: IXMLIndicatorType read GetSalePriceConditionIndicator;
    property HasRoyaltyLicenseFeeIndicator: Boolean read GetHasRoyaltyLicenseFeeIndicator;
    property RoyaltyLicenseFeeIndicator: IXMLIndicatorType read GetRoyaltyLicenseFeeIndicator;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property SaleRestriction: IXMLSaleRestrictionList read GetSaleRestriction;
    property HasApplicableTradeCurrencyExchange: Boolean read GetHasApplicableTradeCurrencyExchange;
    property ApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType read GetApplicableTradeCurrencyExchange;
  end;

  IXMLSaleRestrictionListEnumerator = interface
    ['{57F7F073-DCB8-47AD-B283-BCAEE7542C6A}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Sale Restriction Text
  /// </summary>
  IXMLSaleRestrictionList = interface(IXMLNodeCollection)
    ['{32856E67-CEFC-4388-BAD4-FF87599AC4EA}']
    function GetEnumerator: IXMLSaleRestrictionListEnumerator;

    function Get_SaleRestriction(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property SaleRestriction[Index: Integer]: IXMLTextType read Get_SaleRestriction; default;
  end;

  IXMLOtherChargeAmountListEnumerator = interface
    ['{CCDE6D03-9B48-45AD-A0F5-3182848E87C6}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Other Charge Amount
  /// </summary>
  IXMLOtherChargeAmountList = interface(IXMLNodeCollection)
    ['{8D70C417-AA7F-4110-BBD4-C347CA7FCB6A}']
    function GetEnumerator: IXMLOtherChargeAmountListEnumerator;

    function Get_OtherChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property OtherChargeAmount[Index: Integer]: IXMLAmountType read Get_OtherChargeAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Cross-Border Regulatory Procedure
  /// </summary>
  IXMLCrossBorderRegulatoryProcedureType = interface(IXMLNode)
    ['{42870001-188C-4130-A9AF-BE4BF506A56D}']
    function GetTypeCode: IXMLTypeCodeList;
    function GetHasTransactionNatureCode: Boolean;
    function GetTransactionNatureCode: IXMLCodeType;
    function GetHasTariffAmount: Boolean;
    function GetTariffAmount: IXMLAmountType;
    function GetHasNonTariffChargeAmount: Boolean;
    function GetNonTariffChargeAmount: IXMLAmountType;
    function GetHasTotalChargeAmount: Boolean;
    function GetTotalChargeAmount: IXMLAmountType;
    function GetRemark: IXMLRemarkList;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;

    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property HasTransactionNatureCode: Boolean read GetHasTransactionNatureCode;
    property TransactionNatureCode: IXMLCodeType read GetTransactionNatureCode;
    property HasTariffAmount: Boolean read GetHasTariffAmount;
    property TariffAmount: IXMLAmountType read GetTariffAmount;
    property HasNonTariffChargeAmount: Boolean read GetHasNonTariffChargeAmount;
    property NonTariffChargeAmount: IXMLAmountType read GetNonTariffChargeAmount;
    property HasTotalChargeAmount: Boolean read GetHasTotalChargeAmount;
    property TotalChargeAmount: IXMLAmountType read GetTotalChargeAmount;
    property Remark: IXMLRemarkList read GetRemark;
    property ApplicableTradeTax: IXMLApplicableTradeTaxList read GetApplicableTradeTax;
  end;

  IXMLRemarkListEnumerator = interface
    ['{57FA088F-4B3F-41E2-81AA-632FBF6C2CC6}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Remark
  /// </summary>
  IXMLRemarkList = interface(IXMLNodeCollection)
    ['{25CB07C1-FF22-4B52-8DDA-616C689025E8}']
    function GetEnumerator: IXMLRemarkListEnumerator;

    function Get_Remark(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Remark[Index: Integer]: IXMLTextType read Get_Remark; default;
  end;

  /// <summary>
  ///    (BN/BN) Debtor Financial Account
  /// </summary>
  IXMLDebtorFinancialAccountType = interface(IXMLNode)
    ['{9D3D4211-9615-43CE-AD55-4BCD9D11AD85}']
    function GetHasIBANID: Boolean;
    function GetIBANID: IXMLIDType;
    function GetHasAccountName: Boolean;
    function GetAccountName: IXMLTextType;
    function GetHasProprietaryID: Boolean;
    function GetProprietaryID: IXMLIDType;

    property HasIBANID: Boolean read GetHasIBANID;
    property IBANID: IXMLIDType read GetIBANID;
    property HasAccountName: Boolean read GetHasAccountName;
    property AccountName: IXMLTextType read GetAccountName;
    property HasProprietaryID: Boolean read GetHasProprietaryID;
    property ProprietaryID: IXMLIDType read GetProprietaryID;
  end;

  /// <summary>
  ///    (BN/BN) Debtor Financial Institution
  /// </summary>
  IXMLDebtorFinancialInstitutionType = interface(IXMLNode)
    ['{B293B5EA-4982-4800-9F58-984D65863441}']
    function GetHasBICID: Boolean;
    function GetBICID: IXMLIDType;
    function GetHasClearingSystemName: Boolean;
    function GetClearingSystemName: IXMLTextType;
    function GetHasCHIPSUniversalID: Boolean;
    function GetCHIPSUniversalID: IXMLIDType;
    function GetHasNewZealandNCCID: Boolean;
    function GetNewZealandNCCID: IXMLIDType;
    function GetHasIrishNSCID: Boolean;
    function GetIrishNSCID: IXMLIDType;
    function GetHasUKSortCodeID: Boolean;
    function GetUKSortCodeID: IXMLIDType;
    function GetHasCHIPSParticipantID: Boolean;
    function GetCHIPSParticipantID: IXMLIDType;
    function GetHasSwissBCID: Boolean;
    function GetSwissBCID: IXMLIDType;
    function GetHasFedwireRoutingNumberID: Boolean;
    function GetFedwireRoutingNumberID: IXMLIDType;
    function GetHasPortugueseNCCID: Boolean;
    function GetPortugueseNCCID: IXMLIDType;
    function GetHasRussianCentralBankID: Boolean;
    function GetRussianCentralBankID: IXMLIDType;
    function GetHasItalianDomesticID: Boolean;
    function GetItalianDomesticID: IXMLIDType;
    function GetHasAustrianBankleitzahlID: Boolean;
    function GetAustrianBankleitzahlID: IXMLIDType;
    function GetHasCanadianPaymentsAssociationID: Boolean;
    function GetCanadianPaymentsAssociationID: IXMLIDType;
    function GetHasSICID: Boolean;
    function GetSICID: IXMLIDType;
    function GetHasGermanBankleitzahlID: Boolean;
    function GetGermanBankleitzahlID: IXMLIDType;
    function GetHasSpanishDomesticInterbankingID: Boolean;
    function GetSpanishDomesticInterbankingID: IXMLIDType;
    function GetHasSouthAfricanNCCID: Boolean;
    function GetSouthAfricanNCCID: IXMLIDType;
    function GetHasHongKongBankID: Boolean;
    function GetHongKongBankID: IXMLIDType;
    function GetHasAustralianBSBID: Boolean;
    function GetAustralianBSBID: IXMLIDType;
    function GetHasIndianFinancialSystemID: Boolean;
    function GetIndianFinancialSystemID: IXMLIDType;
    function GetHasHellenicBankID: Boolean;
    function GetHellenicBankID: IXMLIDType;
    function GetHasPolishNationalClearingID: Boolean;
    function GetPolishNationalClearingID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasJapanFinancialInstitutionCommonID: Boolean;
    function GetJapanFinancialInstitutionCommonID: IXMLIDType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
    function GetHasSubDivisionBranchFinancialInstitution: Boolean;
    function GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;

    property HasBICID: Boolean read GetHasBICID;
    property BICID: IXMLIDType read GetBICID;
    property HasClearingSystemName: Boolean read GetHasClearingSystemName;
    property ClearingSystemName: IXMLTextType read GetClearingSystemName;
    property HasCHIPSUniversalID: Boolean read GetHasCHIPSUniversalID;
    property CHIPSUniversalID: IXMLIDType read GetCHIPSUniversalID;
    property HasNewZealandNCCID: Boolean read GetHasNewZealandNCCID;
    property NewZealandNCCID: IXMLIDType read GetNewZealandNCCID;
    property HasIrishNSCID: Boolean read GetHasIrishNSCID;
    property IrishNSCID: IXMLIDType read GetIrishNSCID;
    property HasUKSortCodeID: Boolean read GetHasUKSortCodeID;
    property UKSortCodeID: IXMLIDType read GetUKSortCodeID;
    property HasCHIPSParticipantID: Boolean read GetHasCHIPSParticipantID;
    property CHIPSParticipantID: IXMLIDType read GetCHIPSParticipantID;
    property HasSwissBCID: Boolean read GetHasSwissBCID;
    property SwissBCID: IXMLIDType read GetSwissBCID;
    property HasFedwireRoutingNumberID: Boolean read GetHasFedwireRoutingNumberID;
    property FedwireRoutingNumberID: IXMLIDType read GetFedwireRoutingNumberID;
    property HasPortugueseNCCID: Boolean read GetHasPortugueseNCCID;
    property PortugueseNCCID: IXMLIDType read GetPortugueseNCCID;
    property HasRussianCentralBankID: Boolean read GetHasRussianCentralBankID;
    property RussianCentralBankID: IXMLIDType read GetRussianCentralBankID;
    property HasItalianDomesticID: Boolean read GetHasItalianDomesticID;
    property ItalianDomesticID: IXMLIDType read GetItalianDomesticID;
    property HasAustrianBankleitzahlID: Boolean read GetHasAustrianBankleitzahlID;
    property AustrianBankleitzahlID: IXMLIDType read GetAustrianBankleitzahlID;
    property HasCanadianPaymentsAssociationID: Boolean read GetHasCanadianPaymentsAssociationID;
    property CanadianPaymentsAssociationID: IXMLIDType read GetCanadianPaymentsAssociationID;
    property HasSICID: Boolean read GetHasSICID;
    property SICID: IXMLIDType read GetSICID;
    property HasGermanBankleitzahlID: Boolean read GetHasGermanBankleitzahlID;
    property GermanBankleitzahlID: IXMLIDType read GetGermanBankleitzahlID;
    property HasSpanishDomesticInterbankingID: Boolean read GetHasSpanishDomesticInterbankingID;
    property SpanishDomesticInterbankingID: IXMLIDType read GetSpanishDomesticInterbankingID;
    property HasSouthAfricanNCCID: Boolean read GetHasSouthAfricanNCCID;
    property SouthAfricanNCCID: IXMLIDType read GetSouthAfricanNCCID;
    property HasHongKongBankID: Boolean read GetHasHongKongBankID;
    property HongKongBankID: IXMLIDType read GetHongKongBankID;
    property HasAustralianBSBID: Boolean read GetHasAustralianBSBID;
    property AustralianBSBID: IXMLIDType read GetAustralianBSBID;
    property HasIndianFinancialSystemID: Boolean read GetHasIndianFinancialSystemID;
    property IndianFinancialSystemID: IXMLIDType read GetIndianFinancialSystemID;
    property HasHellenicBankID: Boolean read GetHasHellenicBankID;
    property HellenicBankID: IXMLIDType read GetHellenicBankID;
    property HasPolishNationalClearingID: Boolean read GetHasPolishNationalClearingID;
    property PolishNationalClearingID: IXMLIDType read GetPolishNationalClearingID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasJapanFinancialInstitutionCommonID: Boolean read GetHasJapanFinancialInstitutionCommonID;
    property JapanFinancialInstitutionCommonID: IXMLIDType read GetJapanFinancialInstitutionCommonID;
    property HasLocationFinancialInstitutionAddress: Boolean read GetHasLocationFinancialInstitutionAddress;
    property LocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType read GetLocationFinancialInstitutionAddress;
    property HasSubDivisionBranchFinancialInstitution: Boolean read GetHasSubDivisionBranchFinancialInstitution;
    property SubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType read GetSubDivisionBranchFinancialInstitution;
  end;

  /// <summary>
  ///    (BN/BN) Delivery Adjustment
  /// </summary>
  IXMLDeliveryAdjustmentType = interface(IXMLNode)
    ['{82DAF39C-24D3-45E8-83C5-566E13FF0280}']
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLAdjustmentReasonCodeType;
    function GetReason: IXMLReasonList;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;

    property HasReasonCode: Boolean read GetHasReasonCode;
    property ReasonCode: IXMLAdjustmentReasonCodeType read GetReasonCode;
    property Reason: IXMLReasonList read GetReason;
    property ActualAmount: IXMLActualAmountList read GetActualAmount;
    property HasActualQuantity: Boolean read GetHasActualQuantity;
    property ActualQuantity: IXMLQuantityType read GetActualQuantity;
    property HasActualDateTime: Boolean read GetHasActualDateTime;
    property ActualDateTime: IXMLDateTimeType read GetActualDateTime;
  end;

  /// <summary>
  ///    (BN/BN) Disposal Instructions
  /// </summary>
  IXMLDisposalInstructionsType = interface(IXMLNode)
    ['{FA083DDC-1CC5-4D48-A8B9-77266BEA470F}']
    function GetHasMaterialID: Boolean;
    function GetMaterialID: IXMLIDType;
    function GetRecyclingDescriptionCode: IXMLRecyclingDescriptionCodeList;
    function GetDescription: IXMLDescriptionList;
    function GetRecyclingProcedure: IXMLRecyclingProcedureList;

    property HasMaterialID: Boolean read GetHasMaterialID;
    property MaterialID: IXMLIDType read GetMaterialID;
    property RecyclingDescriptionCode: IXMLRecyclingDescriptionCodeList read GetRecyclingDescriptionCode;
    property Description: IXMLDescriptionList read GetDescription;
    property RecyclingProcedure: IXMLRecyclingProcedureList read GetRecyclingProcedure;
  end;

  IXMLRecyclingProcedureListEnumerator = interface
    ['{A5CF76F4-5C65-42EC-ACBA-EE7FD1DDEC2B}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Recycling Procedure Text
  /// </summary>
  IXMLRecyclingProcedureList = interface(IXMLNodeCollection)
    ['{DAC45200-78C9-4013-9FC4-9EED9CD56C9F}']
    function GetEnumerator: IXMLRecyclingProcedureListEnumerator;

    function Get_RecyclingProcedure(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property RecyclingProcedure[Index: Integer]: IXMLTextType read Get_RecyclingProcedure; default;
  end;

  IXMLRecyclingDescriptionCodeListEnumerator = interface
    ['{A610DD8E-5D07-4118-BC34-D4423CB25BCF}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Recycling Description Code
  /// </summary>
  IXMLRecyclingDescriptionCodeList = interface(IXMLNodeCollection)
    ['{D8D78ADE-9E67-4DA0-B1E2-FA5EB0B48E83}']
    function GetEnumerator: IXMLRecyclingDescriptionCodeListEnumerator;

    function Get_RecyclingDescriptionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property RecyclingDescriptionCode[Index: Integer]: IXMLCodeType read Get_RecyclingDescriptionCode; default;
  end;

  /// <summary>
  ///    (BN/BN) Document Authentication
  /// </summary>
  IXMLDocumentAuthenticationType = interface(IXMLNode)
    ['{D1DBB0D1-9BCB-4122-A05C-C5C16DDDABF6}']
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetInformation: IXMLInformationList;
    function GetHasSignatory: Boolean;
    function GetSignatory: IXMLTextType;
    function GetHasSignatoryImageBinaryObject: Boolean;
    function GetSignatoryImageBinaryObject: IXMLBinaryObjectType;
    function GetCategoryCode: IXMLCategoryCodeList;

    property HasActualDateTime: Boolean read GetHasActualDateTime;
    property ActualDateTime: IXMLDateTimeType read GetActualDateTime;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property Information: IXMLInformationList read GetInformation;
    property HasSignatory: Boolean read GetHasSignatory;
    property Signatory: IXMLTextType read GetSignatory;
    property HasSignatoryImageBinaryObject: Boolean read GetHasSignatoryImageBinaryObject;
    property SignatoryImageBinaryObject: IXMLBinaryObjectType read GetSignatoryImageBinaryObject;
    property CategoryCode: IXMLCategoryCodeList read GetCategoryCode;
  end;

  IXMLCategoryCodeListEnumerator = interface
    ['{1380D4D2-FCD4-49D0-8EC0-479E727A4ED7}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Category Code
  /// </summary>
  IXMLCategoryCodeList = interface(IXMLNodeCollection)
    ['{8BE454A6-D875-4C33-B7A8-EFB05E43F810}']
    function GetEnumerator: IXMLCategoryCodeListEnumerator;

    function Get_CategoryCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property CategoryCode[Index: Integer]: IXMLCodeType read Get_CategoryCode; default;
  end;

  /// <summary>
  ///    (BN/BN) Document Context Parameter
  /// </summary>
  IXMLDocumentContextParameterType = interface(IXMLNode)
    ['{F33AC6EA-4265-47EA-9F74-7AE970C6094B}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasValue: Boolean;
    function GetValue: IXMLTextType;
    function GetHasSpecifiedDocumentVersion: Boolean;
    function GetSpecifiedDocumentVersion: IXMLDocumentVersionType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasValue: Boolean read GetHasValue;
    property Value: IXMLTextType read GetValue;
    property HasSpecifiedDocumentVersion: Boolean read GetHasSpecifiedDocumentVersion;
    property SpecifiedDocumentVersion: IXMLDocumentVersionType read GetSpecifiedDocumentVersion;
  end;

  /// <summary>
  ///    (BN/BN) Document Line
  /// </summary>
  IXMLDocumentLineDocumentType = interface(IXMLNode)
    ['{8D71205D-30EE-4423-A4E4-97829BF1FCDA}']
    function GetHasLineID: Boolean;
    function GetLineID: IXMLIDType;
    function GetHasParentLineID: Boolean;
    function GetParentLineID: IXMLIDType;
    function GetHasLineStatusCode: Boolean;
    function GetLineStatusCode: IXMLLineStatusCodeType;
    function GetHasLineStatusReasonCode: Boolean;
    function GetLineStatusReasonCode: IXMLCodeType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasResponseReasonCode: Boolean;
    function GetResponseReasonCode: IXMLCodeType;
    function GetIncludedNote: IXMLIncludedNoteList;
    function GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;

    property HasLineID: Boolean read GetHasLineID;
    property LineID: IXMLIDType read GetLineID;
    property HasParentLineID: Boolean read GetHasParentLineID;
    property ParentLineID: IXMLIDType read GetParentLineID;
    property HasLineStatusCode: Boolean read GetHasLineStatusCode;
    property LineStatusCode: IXMLLineStatusCodeType read GetLineStatusCode;
    property HasLineStatusReasonCode: Boolean read GetHasLineStatusReasonCode;
    property LineStatusReasonCode: IXMLCodeType read GetLineStatusReasonCode;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLCodeType read GetCategoryCode;
    property HasResponseReasonCode: Boolean read GetHasResponseReasonCode;
    property ResponseReasonCode: IXMLCodeType read GetResponseReasonCode;
    property IncludedNote: IXMLIncludedNoteList read GetIncludedNote;
    property ReferenceReferencedDocument: IXMLReferenceReferencedDocumentList read GetReferenceReferencedDocument;
  end;

  /// <summary>
  ///    (BN/BN) Document Version
  /// </summary>
  IXMLDocumentVersionType = interface(IXMLNode)
    ['{7339DE3E-F8AB-45E2-8C93-10ABC079E89A}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasIssueDateTime: Boolean;
    function GetIssueDateTime: IXMLDateTimeType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasIssueDateTime: Boolean read GetHasIssueDateTime;
    property IssueDateTime: IXMLDateTimeType read GetIssueDateTime;
  end;

  /// <summary>
  ///    (BN/BN) Exchanged Document Context
  /// </summary>
  IXMLExchangedDocumentContextType = interface(IXMLNode)
    ['{9CEC8071-87A2-4D2D-A89A-9B7C3F9BA14E}']
    function GetHasSpecifiedTransactionID: Boolean;
    function GetSpecifiedTransactionID: IXMLIDType;
    function GetHasTestIndicator: Boolean;
    function GetTestIndicator: IXMLIndicatorType;
    function GetBusinessProcessSpecifiedDocumentContextParameter: IXMLBusinessProcessSpecifiedDocumentContextParameterList;
    function GetBIMSpecifiedDocumentContextParameter: IXMLBIMSpecifiedDocumentContextParameterList;
    function GetScenarioSpecifiedDocumentContextParameter: IXMLScenarioSpecifiedDocumentContextParameterList;
    function GetApplicationSpecifiedDocumentContextParameter: IXMLApplicationSpecifiedDocumentContextParameterList;
    function GetGuidelineSpecifiedDocumentContextParameter: IXMLGuidelineSpecifiedDocumentContextParameterList;
    function GetSubsetSpecifiedDocumentContextParameter: IXMLSubsetSpecifiedDocumentContextParameterList;
    function GetHasMessageStandardSpecifiedDocumentContextParameter: Boolean;
    function GetMessageStandardSpecifiedDocumentContextParameter: IXMLDocumentContextParameterType;
    function GetUserSpecifiedDocumentContextParameter: IXMLUserSpecifiedDocumentContextParameterList;

    property HasSpecifiedTransactionID: Boolean read GetHasSpecifiedTransactionID;
    property SpecifiedTransactionID: IXMLIDType read GetSpecifiedTransactionID;
    property HasTestIndicator: Boolean read GetHasTestIndicator;
    property TestIndicator: IXMLIndicatorType read GetTestIndicator;
    property BusinessProcessSpecifiedDocumentContextParameter: IXMLBusinessProcessSpecifiedDocumentContextParameterList read GetBusinessProcessSpecifiedDocumentContextParameter;
    property BIMSpecifiedDocumentContextParameter: IXMLBIMSpecifiedDocumentContextParameterList read GetBIMSpecifiedDocumentContextParameter;
    property ScenarioSpecifiedDocumentContextParameter: IXMLScenarioSpecifiedDocumentContextParameterList read GetScenarioSpecifiedDocumentContextParameter;
    property ApplicationSpecifiedDocumentContextParameter: IXMLApplicationSpecifiedDocumentContextParameterList read GetApplicationSpecifiedDocumentContextParameter;
    property GuidelineSpecifiedDocumentContextParameter: IXMLGuidelineSpecifiedDocumentContextParameterList read GetGuidelineSpecifiedDocumentContextParameter;
    property SubsetSpecifiedDocumentContextParameter: IXMLSubsetSpecifiedDocumentContextParameterList read GetSubsetSpecifiedDocumentContextParameter;
    property HasMessageStandardSpecifiedDocumentContextParameter: Boolean read GetHasMessageStandardSpecifiedDocumentContextParameter;
    property MessageStandardSpecifiedDocumentContextParameter: IXMLDocumentContextParameterType read GetMessageStandardSpecifiedDocumentContextParameter;
    property UserSpecifiedDocumentContextParameter: IXMLUserSpecifiedDocumentContextParameterList read GetUserSpecifiedDocumentContextParameter;
  end;

  IXMLUserSpecifiedDocumentContextParameterListEnumerator = interface
    ['{92E56B12-9646-4966-B625-35446F0948DF}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) User Specified Parameter
  /// </summary>
  IXMLUserSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{FD70F8A9-C1FB-41A9-B13F-F24EB95A62AC}']
    function GetEnumerator: IXMLUserSpecifiedDocumentContextParameterListEnumerator;

    function Get_UserSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property UserSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_UserSpecifiedDocumentContextParameter; default;
  end;

  IXMLSubsetSpecifiedDocumentContextParameterListEnumerator = interface
    ['{7EE32F2D-6D90-4DFA-9A89-4C47D2CC95CD}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Subset
  /// </summary>
  IXMLSubsetSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{F192028D-F5BD-47DF-AEED-F83D2BCD8E8B}']
    function GetEnumerator: IXMLSubsetSpecifiedDocumentContextParameterListEnumerator;

    function Get_SubsetSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property SubsetSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_SubsetSpecifiedDocumentContextParameter; default;
  end;

  IXMLGuidelineSpecifiedDocumentContextParameterListEnumerator = interface
    ['{DA0991F9-1E1D-4C93-AA3A-895CD258DD34}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Guideline
  /// </summary>
  IXMLGuidelineSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{25EDBBB7-F806-42D3-8F44-A0BDCCCF64F2}']
    function GetEnumerator: IXMLGuidelineSpecifiedDocumentContextParameterListEnumerator;

    function Get_GuidelineSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property GuidelineSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_GuidelineSpecifiedDocumentContextParameter; default;
  end;

  IXMLApplicationSpecifiedDocumentContextParameterListEnumerator = interface
    ['{B302693D-E9D2-4195-B775-D4416C2AF2CF}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Application
  /// </summary>
  IXMLApplicationSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{232F8C92-3258-449B-8D32-30D572470182}']
    function GetEnumerator: IXMLApplicationSpecifiedDocumentContextParameterListEnumerator;

    function Get_ApplicationSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property ApplicationSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_ApplicationSpecifiedDocumentContextParameter; default;
  end;

  IXMLScenarioSpecifiedDocumentContextParameterListEnumerator = interface
    ['{42C8BA73-558C-4ABB-8484-BFE3DD14E028}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Scenario
  /// </summary>
  IXMLScenarioSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{A9DD774C-F811-402C-B087-A9AC54609DDE}']
    function GetEnumerator: IXMLScenarioSpecifiedDocumentContextParameterListEnumerator;

    function Get_ScenarioSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property ScenarioSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_ScenarioSpecifiedDocumentContextParameter; default;
  end;

  IXMLBIMSpecifiedDocumentContextParameterListEnumerator = interface
    ['{008623A1-FB76-4432-BA1A-38DB686A5D1B}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) BIM
  /// </summary>
  IXMLBIMSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{A87F1055-456B-4AD4-A2CB-E9B3577DD853}']
    function GetEnumerator: IXMLBIMSpecifiedDocumentContextParameterListEnumerator;

    function Get_BIMSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property BIMSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_BIMSpecifiedDocumentContextParameter; default;
  end;

  IXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator = interface
    ['{3AAC9F0E-0041-4A15-BA99-AC7529FFC681}']
    function GetCurrent: IXMLDocumentContextParameterType;
    function MoveNext: Boolean;
    property Current: IXMLDocumentContextParameterType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Business Process
  /// </summary>
  IXMLBusinessProcessSpecifiedDocumentContextParameterList = interface(IXMLNodeCollection)
    ['{112710F4-FD04-495E-BA17-5349E32B526F}']
    function GetEnumerator: IXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator;

    function Get_BusinessProcessSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;

    property BusinessProcessSpecifiedDocumentContextParameter[Index: Integer]: IXMLDocumentContextParameterType read Get_BusinessProcessSpecifiedDocumentContextParameter; default;
  end;

  /// <summary>
  ///    (BN/BN) Exchanged Document
  /// </summary>
  IXMLExchangedDocumentType = interface(IXMLNode)
    ['{7C759F5C-8933-4CF8-BF27-60190891F02B}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDocumentCodeType;
    function GetIssueDateTime: IXMLDateTimeType;
    function GetHasCopyIndicator: Boolean;
    function GetCopyIndicator: IXMLIndicatorType;
    function GetHasPurpose: Boolean;
    function GetPurpose: IXMLTextType;
    function GetHasControlRequirementIndicator: Boolean;
    function GetControlRequirementIndicator: IXMLIndicatorType;
    function GetLanguageID: IXMLLanguageIDList;
    function GetHasPurposeCode: Boolean;
    function GetPurposeCode: IXMLMessageFunctionCodeType;
    function GetHasRevisionDateTime: Boolean;
    function GetRevisionDateTime: IXMLDateTimeType;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasRevisionID: Boolean;
    function GetRevisionID: IXMLIDType;
    function GetHasPreviousRevisionID: Boolean;
    function GetPreviousRevisionID: IXMLIDType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetRequestedResponseTypeCode: IXMLRequestedResponseTypeCodeList;
    function GetHasCreationDateTime: Boolean;
    function GetCreationDateTime: IXMLFormattedDateTimeType;
    function GetHasFirstVersionIssueDateTime: Boolean;
    function GetFirstVersionIssueDateTime: IXMLDateTimeType;
    function GetHasSubtypeCode: Boolean;
    function GetSubtypeCode: IXMLCodeType;
    function GetIncludedNote: IXMLIncludedNoteList;
    function GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
    function GetHasSignatoryDocumentAuthentication: Boolean;
    function GetSignatoryDocumentAuthentication: IXMLDocumentAuthenticationType;
    function GetHasEffectiveSpecifiedPeriod: Boolean;
    function GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasIssuerTradeParty: Boolean;
    function GetIssuerTradeParty: IXMLTradePartyType;
    function GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property Name: IXMLNameList read GetName;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLDocumentCodeType read GetTypeCode;
    property IssueDateTime: IXMLDateTimeType read GetIssueDateTime;
    property HasCopyIndicator: Boolean read GetHasCopyIndicator;
    property CopyIndicator: IXMLIndicatorType read GetCopyIndicator;
    property HasPurpose: Boolean read GetHasPurpose;
    property Purpose: IXMLTextType read GetPurpose;
    property HasControlRequirementIndicator: Boolean read GetHasControlRequirementIndicator;
    property ControlRequirementIndicator: IXMLIndicatorType read GetControlRequirementIndicator;
    property LanguageID: IXMLLanguageIDList read GetLanguageID;
    property HasPurposeCode: Boolean read GetHasPurposeCode;
    property PurposeCode: IXMLMessageFunctionCodeType read GetPurposeCode;
    property HasRevisionDateTime: Boolean read GetHasRevisionDateTime;
    property RevisionDateTime: IXMLDateTimeType read GetRevisionDateTime;
    property HasVersionID: Boolean read GetHasVersionID;
    property VersionID: IXMLIDType read GetVersionID;
    property HasGlobalID: Boolean read GetHasGlobalID;
    property GlobalID: IXMLIDType read GetGlobalID;
    property HasRevisionID: Boolean read GetHasRevisionID;
    property RevisionID: IXMLIDType read GetRevisionID;
    property HasPreviousRevisionID: Boolean read GetHasPreviousRevisionID;
    property PreviousRevisionID: IXMLIDType read GetPreviousRevisionID;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLCodeType read GetCategoryCode;
    property RequestedResponseTypeCode: IXMLRequestedResponseTypeCodeList read GetRequestedResponseTypeCode;
    property HasCreationDateTime: Boolean read GetHasCreationDateTime;
    property CreationDateTime: IXMLFormattedDateTimeType read GetCreationDateTime;
    property HasFirstVersionIssueDateTime: Boolean read GetHasFirstVersionIssueDateTime;
    property FirstVersionIssueDateTime: IXMLDateTimeType read GetFirstVersionIssueDateTime;
    property HasSubtypeCode: Boolean read GetHasSubtypeCode;
    property SubtypeCode: IXMLCodeType read GetSubtypeCode;
    property IncludedNote: IXMLIncludedNoteList read GetIncludedNote;
    property ReferenceReferencedDocument: IXMLReferenceReferencedDocumentList read GetReferenceReferencedDocument;
    property HasSignatoryDocumentAuthentication: Boolean read GetHasSignatoryDocumentAuthentication;
    property SignatoryDocumentAuthentication: IXMLDocumentAuthenticationType read GetSignatoryDocumentAuthentication;
    property HasEffectiveSpecifiedPeriod: Boolean read GetHasEffectiveSpecifiedPeriod;
    property EffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType read GetEffectiveSpecifiedPeriod;
    property HasIssuerTradeParty: Boolean read GetHasIssuerTradeParty;
    property IssuerTradeParty: IXMLTradePartyType read GetIssuerTradeParty;
    property AttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList read GetAttachedSpecifiedBinaryFile;
  end;

  IXMLReferenceReferencedDocumentListEnumerator = interface
    ['{42F22C43-2221-4498-9490-753887A73892}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Reference Document
  /// </summary>
  IXMLReferenceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{C009B933-E8F5-4D2A-9F3A-B0BECA5191C7}']
    function GetEnumerator: IXMLReferenceReferencedDocumentListEnumerator;

    function Get_ReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property ReferenceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_ReferenceReferencedDocument; default;
  end;

  IXMLRequestedResponseTypeCodeListEnumerator = interface
    ['{96587CA1-94F2-4BC2-ABFC-9BA7B32C6B39}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Response Request Type Code
  /// </summary>
  IXMLRequestedResponseTypeCodeList = interface(IXMLNodeCollection)
    ['{FFC17D8E-5CE5-4689-B840-46378573B46E}']
    function GetEnumerator: IXMLRequestedResponseTypeCodeListEnumerator;

    function Get_RequestedResponseTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property RequestedResponseTypeCode[Index: Integer]: IXMLCodeType read Get_RequestedResponseTypeCode; default;
  end;

  IXMLLanguageIDListEnumerator = interface
    ['{09F06507-9B66-47AF-9504-0739CEE28235}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Language Code
  /// </summary>
  IXMLLanguageIDList = interface(IXMLNodeCollection)
    ['{7CA53DFF-160C-4F66-9770-6F1062C5C607}']
    function GetEnumerator: IXMLLanguageIDListEnumerator;

    function Get_LanguageID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property LanguageID[Index: Integer]: IXMLIDType read Get_LanguageID; default;
  end;

  /// <summary>
  ///    (BN/BN) Financial Adjustment
  /// </summary>
  IXMLFinancialAdjustmentType = interface(IXMLNode)
    ['{A7EBEDF5-8BF9-48F2-AF71-0FB7A68D7722}']
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLCodeType;
    function GetReason: IXMLReasonList;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;
    function GetHasDirectionCode: Boolean;
    function GetDirectionCode: IXMLAccountingDebitCreditStatusCodeType;
    function GetHasClaimRelatedTradeParty: Boolean;
    function GetClaimRelatedTradeParty: IXMLTradePartyType;
    function GetHasInvoiceReferenceReferencedDocument: Boolean;
    function GetInvoiceReferenceReferencedDocument: IXMLReferencedDocumentType;
    function GetRelatedTradeTax: IXMLRelatedTradeTaxList;

    property HasReasonCode: Boolean read GetHasReasonCode;
    property ReasonCode: IXMLCodeType read GetReasonCode;
    property Reason: IXMLReasonList read GetReason;
    property ActualAmount: IXMLActualAmountList read GetActualAmount;
    property HasActualQuantity: Boolean read GetHasActualQuantity;
    property ActualQuantity: IXMLQuantityType read GetActualQuantity;
    property HasActualDateTime: Boolean read GetHasActualDateTime;
    property ActualDateTime: IXMLDateTimeType read GetActualDateTime;
    property HasDirectionCode: Boolean read GetHasDirectionCode;
    property DirectionCode: IXMLAccountingDebitCreditStatusCodeType read GetDirectionCode;
    property HasClaimRelatedTradeParty: Boolean read GetHasClaimRelatedTradeParty;
    property ClaimRelatedTradeParty: IXMLTradePartyType read GetClaimRelatedTradeParty;
    property HasInvoiceReferenceReferencedDocument: Boolean read GetHasInvoiceReferenceReferencedDocument;
    property InvoiceReferenceReferencedDocument: IXMLReferencedDocumentType read GetInvoiceReferenceReferencedDocument;
    property RelatedTradeTax: IXMLRelatedTradeTaxList read GetRelatedTradeTax;
  end;

  IXMLRelatedTradeTaxListEnumerator = interface
    ['{287A401E-C885-4D45-A113-E0A0523A8C79}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Related Tax
  /// </summary>
  IXMLRelatedTradeTaxList = interface(IXMLNodeCollection)
    ['{9A0F99DB-5ECC-4C25-8F2E-262564ED7A10}']
    function GetEnumerator: IXMLRelatedTradeTaxListEnumerator;

    function Get_RelatedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property RelatedTradeTax[Index: Integer]: IXMLTradeTaxType read Get_RelatedTradeTax; default;
  end;

  IXMLReasonListEnumerator = interface
    ['{77EE0D30-57F1-49DC-8A45-0F7BF6EBFC0D}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Reason Text
  /// </summary>
  IXMLReasonList = interface(IXMLNodeCollection)
    ['{FE3BF6C1-9655-419A-9E10-C6CA84DC7D80}']
    function GetEnumerator: IXMLReasonListEnumerator;

    function Get_Reason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Reason[Index: Integer]: IXMLTextType read Get_Reason; default;
  end;

  /// <summary>
  ///    (BN/BN) Financial Institution Address
  /// </summary>
  IXMLFinancialInstitutionAddressType = interface(IXMLNode)
    ['{85B44CC9-A3EA-4F92-8429-2F462A8D1AEB}']
    function GetHasPostcodeCode: Boolean;
    function GetPostcodeCode: IXMLCodeType;
    function GetHasBuildingNumber: Boolean;
    function GetBuildingNumber: IXMLTextType;
    function GetHasLineOne: Boolean;
    function GetLineOne: IXMLTextType;
    function GetHasLineTwo: Boolean;
    function GetLineTwo: IXMLTextType;
    function GetHasLineThree: Boolean;
    function GetLineThree: IXMLTextType;
    function GetHasLineFour: Boolean;
    function GetLineFour: IXMLTextType;
    function GetHasLineFive: Boolean;
    function GetLineFive: IXMLTextType;
    function GetHasStreetName: Boolean;
    function GetStreetName: IXMLTextType;
    function GetHasCityName: Boolean;
    function GetCityName: IXMLTextType;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasPostOfficeBox: Boolean;
    function GetPostOfficeBox: IXMLTextType;
    function GetHasCityID: Boolean;
    function GetCityID: IXMLIDType;
    function GetHasCountrySubDivisionName: Boolean;
    function GetCountrySubDivisionName: IXMLTextType;
    function GetHasCountryName: Boolean;
    function GetCountryName: IXMLTextType;

    property HasPostcodeCode: Boolean read GetHasPostcodeCode;
    property PostcodeCode: IXMLCodeType read GetPostcodeCode;
    property HasBuildingNumber: Boolean read GetHasBuildingNumber;
    property BuildingNumber: IXMLTextType read GetBuildingNumber;
    property HasLineOne: Boolean read GetHasLineOne;
    property LineOne: IXMLTextType read GetLineOne;
    property HasLineTwo: Boolean read GetHasLineTwo;
    property LineTwo: IXMLTextType read GetLineTwo;
    property HasLineThree: Boolean read GetHasLineThree;
    property LineThree: IXMLTextType read GetLineThree;
    property HasLineFour: Boolean read GetHasLineFour;
    property LineFour: IXMLTextType read GetLineFour;
    property HasLineFive: Boolean read GetHasLineFive;
    property LineFive: IXMLTextType read GetLineFive;
    property HasStreetName: Boolean read GetHasStreetName;
    property StreetName: IXMLTextType read GetStreetName;
    property HasCityName: Boolean read GetHasCityName;
    property CityName: IXMLTextType read GetCityName;
    property HasCountrySubDivisionID: Boolean read GetHasCountrySubDivisionID;
    property CountrySubDivisionID: IXMLIDType read GetCountrySubDivisionID;
    property HasCountryID: Boolean read GetHasCountryID;
    property CountryID: IXMLIDType read GetCountryID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasDepartmentName: Boolean read GetHasDepartmentName;
    property DepartmentName: IXMLTextType read GetDepartmentName;
    property HasPostOfficeBox: Boolean read GetHasPostOfficeBox;
    property PostOfficeBox: IXMLTextType read GetPostOfficeBox;
    property HasCityID: Boolean read GetHasCityID;
    property CityID: IXMLIDType read GetCityID;
    property HasCountrySubDivisionName: Boolean read GetHasCountrySubDivisionName;
    property CountrySubDivisionName: IXMLTextType read GetCountrySubDivisionName;
    property HasCountryName: Boolean read GetHasCountryName;
    property CountryName: IXMLTextType read GetCountryName;
  end;

  /// <summary>
  ///    (BN/BN) Geographical Coordinate
  /// </summary>
  IXMLGeographicalCoordinateType = interface(IXMLNode)
    ['{EF0E7867-A2B4-46D8-8646-4AB0F021BA3B}']
    function GetHasAltitudeMeasure: Boolean;
    function GetAltitudeMeasure: IXMLMeasureType;
    function GetHasLatitudeMeasure: Boolean;
    function GetLatitudeMeasure: IXMLMeasureType;
    function GetHasLongitudeMeasure: Boolean;
    function GetLongitudeMeasure: IXMLMeasureType;
    function GetHasSystemID: Boolean;
    function GetSystemID: IXMLIDType;

    property HasAltitudeMeasure: Boolean read GetHasAltitudeMeasure;
    property AltitudeMeasure: IXMLMeasureType read GetAltitudeMeasure;
    property HasLatitudeMeasure: Boolean read GetHasLatitudeMeasure;
    property LatitudeMeasure: IXMLMeasureType read GetLatitudeMeasure;
    property HasLongitudeMeasure: Boolean read GetHasLongitudeMeasure;
    property LongitudeMeasure: IXMLMeasureType read GetLongitudeMeasure;
    property HasSystemID: Boolean read GetHasSystemID;
    property SystemID: IXMLIDType read GetSystemID;
  end;

  /// <summary>
  ///    (BN/BN) Grouped Work Item
  /// </summary>
  IXMLGroupedWorkItemType = interface(IXMLNode)
    ['{05955561-BC44-45C7-873C-46B3F835BE4B}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetComment: IXMLCommentList;
    function GetHasTotalQuantity: Boolean;
    function GetTotalQuantity: IXMLQuantityType;
    function GetHas_Index: Boolean;
    function Get_Index: IXMLTextType;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListItemID: Boolean;
    function GetPriceListItemID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;

    property ID: IXMLIDType read GetID;
    property PrimaryClassificationCode: IXMLPrimaryClassificationCodeList read GetPrimaryClassificationCode;
    property AlternativeClassificationCode: IXMLAlternativeClassificationCodeList read GetAlternativeClassificationCode;
    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property Comment: IXMLCommentList read GetComment;
    property HasTotalQuantity: Boolean read GetHasTotalQuantity;
    property TotalQuantity: IXMLQuantityType read GetTotalQuantity;
    property Has_Index: Boolean read GetHas_Index;
    property _Index: IXMLTextType read Get_Index;
    property RequestedActionCode: IXMLRequestedActionCodeList read GetRequestedActionCode;
    property HasPriceListItemID: Boolean read GetHasPriceListItemID;
    property PriceListItemID: IXMLIDType read GetPriceListItemID;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
    property TotalCalculatedPrice: IXMLTotalCalculatedPriceList read GetTotalCalculatedPrice;
    property ItemGroupedWorkItem: IXMLItemGroupedWorkItemList read GetItemGroupedWorkItem;
    property ItemBasicWorkItem: IXMLItemBasicWorkItemList read GetItemBasicWorkItem;
    property ChangedRecordedStatus: IXMLChangedRecordedStatusList read GetChangedRecordedStatus;
    property ActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList read GetActualWorkItemComplexDescription;
    property ReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList read GetReferencedSpecifiedBinaryFile;
  end;

  IXMLActualWorkItemComplexDescriptionListEnumerator = interface
    ['{732BB2BA-A766-4A63-9F41-67A758DCD98D}']
    function GetCurrent: IXMLWorkItemComplexDescriptionType;
    function MoveNext: Boolean;
    property Current: IXMLWorkItemComplexDescriptionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Complex Description
  /// </summary>
  IXMLActualWorkItemComplexDescriptionList = interface(IXMLNodeCollection)
    ['{510D63A2-021D-4535-B541-30F92B9C0643}']
    function GetEnumerator: IXMLActualWorkItemComplexDescriptionListEnumerator;

    function Get_ActualWorkItemComplexDescription(Index: Integer): IXMLWorkItemComplexDescriptionType;
    function Add: IXMLWorkItemComplexDescriptionType;
    function Insert(Index: Integer): IXMLWorkItemComplexDescriptionType;

    property ActualWorkItemComplexDescription[Index: Integer]: IXMLWorkItemComplexDescriptionType read Get_ActualWorkItemComplexDescription; default;
  end;

  /// <summary>
  ///    (BN/BN) Header Trade Agreement
  /// </summary>
  IXMLHeaderTradeAgreementType = interface(IXMLNode)
    ['{AA99B69D-2D58-41A2-911B-E4D6F79FA5FD}']
    function GetReference: IXMLReferenceList;
    function GetHasBuyerReference: Boolean;
    function GetBuyerReference: IXMLTextType;
    function GetHasSellerTradeParty: Boolean;
    function GetSellerTradeParty: IXMLTradePartyType;
    function GetHasBuyerTradeParty: Boolean;
    function GetBuyerTradeParty: IXMLTradePartyType;
    function GetHasSalesAgentTradeParty: Boolean;
    function GetSalesAgentTradeParty: IXMLTradePartyType;
    function GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    function GetHasBuyerAssignedAccountantTradeParty: Boolean;
    function GetBuyerAssignedAccountantTradeParty: IXMLTradePartyType;
    function GetHasSellerAssignedAccountantTradeParty: Boolean;
    function GetSellerAssignedAccountantTradeParty: IXMLTradePartyType;
    function GetHasBuyerTaxRepresentativeTradeParty: Boolean;
    function GetBuyerTaxRepresentativeTradeParty: IXMLTradePartyType;
    function GetHasSellerTaxRepresentativeTradeParty: Boolean;
    function GetSellerTaxRepresentativeTradeParty: IXMLTradePartyType;
    function GetHasProductEndUserTradeParty: Boolean;
    function GetProductEndUserTradeParty: IXMLTradePartyType;
    function GetHasApplicableTradeDeliveryTerms: Boolean;
    function GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasQuotationReferencedDocument: Boolean;
    function GetQuotationReferencedDocument: IXMLReferencedDocumentType;
    function GetHasOrderResponseReferencedDocument: Boolean;
    function GetOrderResponseReferencedDocument: IXMLReferencedDocumentType;
    function GetHasContractReferencedDocument: Boolean;
    function GetContractReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDemandForecastReferencedDocument: Boolean;
    function GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
    function GetHasSupplyInstructionReferencedDocument: Boolean;
    function GetSupplyInstructionReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPromotionalDealReferencedDocument: Boolean;
    function GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPriceListReferencedDocument: Boolean;
    function GetPriceListReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    function GetHasBuyerAgentTradeParty: Boolean;
    function GetBuyerAgentTradeParty: IXMLTradePartyType;
    function GetPurchaseConditionsReferencedDocument: IXMLPurchaseConditionsReferencedDocumentList;
    function GetHasSpecifiedProcuringProject: Boolean;
    function GetSpecifiedProcuringProject: IXMLProcuringProjectType;
    function GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
    function GetHasPricingBaseApplicableLogisticsLocation: Boolean;
    function GetPricingBaseApplicableLogisticsLocation: IXMLLogisticsLocationType;

    property Reference: IXMLReferenceList read GetReference;
    property HasBuyerReference: Boolean read GetHasBuyerReference;
    property BuyerReference: IXMLTextType read GetBuyerReference;
    property HasSellerTradeParty: Boolean read GetHasSellerTradeParty;
    property SellerTradeParty: IXMLTradePartyType read GetSellerTradeParty;
    property HasBuyerTradeParty: Boolean read GetHasBuyerTradeParty;
    property BuyerTradeParty: IXMLTradePartyType read GetBuyerTradeParty;
    property HasSalesAgentTradeParty: Boolean read GetHasSalesAgentTradeParty;
    property SalesAgentTradeParty: IXMLTradePartyType read GetSalesAgentTradeParty;
    property BuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList read GetBuyerRequisitionerTradeParty;
    property HasBuyerAssignedAccountantTradeParty: Boolean read GetHasBuyerAssignedAccountantTradeParty;
    property BuyerAssignedAccountantTradeParty: IXMLTradePartyType read GetBuyerAssignedAccountantTradeParty;
    property HasSellerAssignedAccountantTradeParty: Boolean read GetHasSellerAssignedAccountantTradeParty;
    property SellerAssignedAccountantTradeParty: IXMLTradePartyType read GetSellerAssignedAccountantTradeParty;
    property HasBuyerTaxRepresentativeTradeParty: Boolean read GetHasBuyerTaxRepresentativeTradeParty;
    property BuyerTaxRepresentativeTradeParty: IXMLTradePartyType read GetBuyerTaxRepresentativeTradeParty;
    property HasSellerTaxRepresentativeTradeParty: Boolean read GetHasSellerTaxRepresentativeTradeParty;
    property SellerTaxRepresentativeTradeParty: IXMLTradePartyType read GetSellerTaxRepresentativeTradeParty;
    property HasProductEndUserTradeParty: Boolean read GetHasProductEndUserTradeParty;
    property ProductEndUserTradeParty: IXMLTradePartyType read GetProductEndUserTradeParty;
    property HasApplicableTradeDeliveryTerms: Boolean read GetHasApplicableTradeDeliveryTerms;
    property ApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType read GetApplicableTradeDeliveryTerms;
    property HasSellerOrderReferencedDocument: Boolean read GetHasSellerOrderReferencedDocument;
    property SellerOrderReferencedDocument: IXMLReferencedDocumentType read GetSellerOrderReferencedDocument;
    property HasBuyerOrderReferencedDocument: Boolean read GetHasBuyerOrderReferencedDocument;
    property BuyerOrderReferencedDocument: IXMLReferencedDocumentType read GetBuyerOrderReferencedDocument;
    property HasQuotationReferencedDocument: Boolean read GetHasQuotationReferencedDocument;
    property QuotationReferencedDocument: IXMLReferencedDocumentType read GetQuotationReferencedDocument;
    property HasOrderResponseReferencedDocument: Boolean read GetHasOrderResponseReferencedDocument;
    property OrderResponseReferencedDocument: IXMLReferencedDocumentType read GetOrderResponseReferencedDocument;
    property HasContractReferencedDocument: Boolean read GetHasContractReferencedDocument;
    property ContractReferencedDocument: IXMLReferencedDocumentType read GetContractReferencedDocument;
    property HasDemandForecastReferencedDocument: Boolean read GetHasDemandForecastReferencedDocument;
    property DemandForecastReferencedDocument: IXMLReferencedDocumentType read GetDemandForecastReferencedDocument;
    property HasSupplyInstructionReferencedDocument: Boolean read GetHasSupplyInstructionReferencedDocument;
    property SupplyInstructionReferencedDocument: IXMLReferencedDocumentType read GetSupplyInstructionReferencedDocument;
    property HasPromotionalDealReferencedDocument: Boolean read GetHasPromotionalDealReferencedDocument;
    property PromotionalDealReferencedDocument: IXMLReferencedDocumentType read GetPromotionalDealReferencedDocument;
    property HasPriceListReferencedDocument: Boolean read GetHasPriceListReferencedDocument;
    property PriceListReferencedDocument: IXMLReferencedDocumentType read GetPriceListReferencedDocument;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property RequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList read GetRequisitionerReferencedDocument;
    property HasBuyerAgentTradeParty: Boolean read GetHasBuyerAgentTradeParty;
    property BuyerAgentTradeParty: IXMLTradePartyType read GetBuyerAgentTradeParty;
    property PurchaseConditionsReferencedDocument: IXMLPurchaseConditionsReferencedDocumentList read GetPurchaseConditionsReferencedDocument;
    property HasSpecifiedProcuringProject: Boolean read GetHasSpecifiedProcuringProject;
    property SpecifiedProcuringProject: IXMLProcuringProjectType read GetSpecifiedProcuringProject;
    property UltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList read GetUltimateCustomerOrderReferencedDocument;
    property HasPricingBaseApplicableLogisticsLocation: Boolean read GetHasPricingBaseApplicableLogisticsLocation;
    property PricingBaseApplicableLogisticsLocation: IXMLLogisticsLocationType read GetPricingBaseApplicableLogisticsLocation;
  end;

  IXMLPurchaseConditionsReferencedDocumentListEnumerator = interface
    ['{1576EC15-94C1-4693-8ED7-49043BA5B2C6}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Purchase Conditions Document
  /// </summary>
  IXMLPurchaseConditionsReferencedDocumentList = interface(IXMLNodeCollection)
    ['{D30062D5-6348-403F-9EE4-DF8B7556F697}']
    function GetEnumerator: IXMLPurchaseConditionsReferencedDocumentListEnumerator;

    function Get_PurchaseConditionsReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property PurchaseConditionsReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_PurchaseConditionsReferencedDocument; default;
  end;

  IXMLReferenceListEnumerator = interface
    ['{F5ECF081-E7B5-437F-9AA4-7CFF5F5979CC}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Reference Text
  /// </summary>
  IXMLReferenceList = interface(IXMLNodeCollection)
    ['{4C203570-77D7-4C5C-85FE-15600B73E9BD}']
    function GetEnumerator: IXMLReferenceListEnumerator;

    function Get_Reference(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Reference[Index: Integer]: IXMLTextType read Get_Reference; default;
  end;

  /// <summary>
  ///    (BN/BN) Header Trade Delivery
  /// </summary>
  IXMLHeaderTradeDeliveryType = interface(IXMLNode)
    ['{CFFF8D98-3BC2-4ED2-8383-7ECF0323F38A}']
    function GetHasRelatedSupplyChainConsignment: Boolean;
    function GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
    function GetHasShipToTradeParty: Boolean;
    function GetShipToTradeParty: IXMLTradePartyType;
    function GetHasUltimateShipToTradeParty: Boolean;
    function GetUltimateShipToTradeParty: IXMLTradePartyType;
    function GetHasShipFromTradeParty: Boolean;
    function GetShipFromTradeParty: IXMLTradePartyType;
    function GetHasActualDespatchSupplyChainEvent: Boolean;
    function GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualPickUpSupplyChainEvent: Boolean;
    function GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualDeliverySupplyChainEvent: Boolean;
    function GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualReceiptSupplyChainEvent: Boolean;
    function GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasDespatchAdviceReferencedDocument: Boolean;
    function GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasReceivingAdviceReferencedDocument: Boolean;
    function GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDeliveryNoteReferencedDocument: Boolean;
    function GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
    function GetHasConsumptionReportReferencedDocument: Boolean;
    function GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
    function GetPreviousDeliverySupplyChainEvent: IXMLPreviousDeliverySupplyChainEventList;
    function GetHasPackingListReferencedDocument: Boolean;
    function GetPackingListReferencedDocument: IXMLReferencedDocumentType;

    property HasRelatedSupplyChainConsignment: Boolean read GetHasRelatedSupplyChainConsignment;
    property RelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType read GetRelatedSupplyChainConsignment;
    property HasShipToTradeParty: Boolean read GetHasShipToTradeParty;
    property ShipToTradeParty: IXMLTradePartyType read GetShipToTradeParty;
    property HasUltimateShipToTradeParty: Boolean read GetHasUltimateShipToTradeParty;
    property UltimateShipToTradeParty: IXMLTradePartyType read GetUltimateShipToTradeParty;
    property HasShipFromTradeParty: Boolean read GetHasShipFromTradeParty;
    property ShipFromTradeParty: IXMLTradePartyType read GetShipFromTradeParty;
    property HasActualDespatchSupplyChainEvent: Boolean read GetHasActualDespatchSupplyChainEvent;
    property ActualDespatchSupplyChainEvent: IXMLSupplyChainEventType read GetActualDespatchSupplyChainEvent;
    property HasActualPickUpSupplyChainEvent: Boolean read GetHasActualPickUpSupplyChainEvent;
    property ActualPickUpSupplyChainEvent: IXMLSupplyChainEventType read GetActualPickUpSupplyChainEvent;
    property HasActualDeliverySupplyChainEvent: Boolean read GetHasActualDeliverySupplyChainEvent;
    property ActualDeliverySupplyChainEvent: IXMLSupplyChainEventType read GetActualDeliverySupplyChainEvent;
    property HasActualReceiptSupplyChainEvent: Boolean read GetHasActualReceiptSupplyChainEvent;
    property ActualReceiptSupplyChainEvent: IXMLSupplyChainEventType read GetActualReceiptSupplyChainEvent;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property HasDespatchAdviceReferencedDocument: Boolean read GetHasDespatchAdviceReferencedDocument;
    property DespatchAdviceReferencedDocument: IXMLReferencedDocumentType read GetDespatchAdviceReferencedDocument;
    property HasReceivingAdviceReferencedDocument: Boolean read GetHasReceivingAdviceReferencedDocument;
    property ReceivingAdviceReferencedDocument: IXMLReferencedDocumentType read GetReceivingAdviceReferencedDocument;
    property HasDeliveryNoteReferencedDocument: Boolean read GetHasDeliveryNoteReferencedDocument;
    property DeliveryNoteReferencedDocument: IXMLReferencedDocumentType read GetDeliveryNoteReferencedDocument;
    property HasConsumptionReportReferencedDocument: Boolean read GetHasConsumptionReportReferencedDocument;
    property ConsumptionReportReferencedDocument: IXMLReferencedDocumentType read GetConsumptionReportReferencedDocument;
    property PreviousDeliverySupplyChainEvent: IXMLPreviousDeliverySupplyChainEventList read GetPreviousDeliverySupplyChainEvent;
    property HasPackingListReferencedDocument: Boolean read GetHasPackingListReferencedDocument;
    property PackingListReferencedDocument: IXMLReferencedDocumentType read GetPackingListReferencedDocument;
  end;

  IXMLPreviousDeliverySupplyChainEventListEnumerator = interface
    ['{A95A21C4-C283-40E3-A7E9-20F9F12AE90A}']
    function GetCurrent: IXMLSupplyChainEventType;
    function MoveNext: Boolean;
    property Current: IXMLSupplyChainEventType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Previous Delivery Event
  /// </summary>
  IXMLPreviousDeliverySupplyChainEventList = interface(IXMLNodeCollection)
    ['{42DA8265-FCAB-4754-B607-5F7694F5C15A}']
    function GetEnumerator: IXMLPreviousDeliverySupplyChainEventListEnumerator;

    function Get_PreviousDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
    function Add: IXMLSupplyChainEventType;
    function Insert(Index: Integer): IXMLSupplyChainEventType;

    property PreviousDeliverySupplyChainEvent[Index: Integer]: IXMLSupplyChainEventType read Get_PreviousDeliverySupplyChainEvent; default;
  end;

  /// <summary>
  ///    (BN/BN) Header Trade Settlement
  /// </summary>
  IXMLHeaderTradeSettlementType = interface(IXMLNode)
    ['{F22016D6-B891-4065-A068-7193493EDC31}']
    function GetDuePayableAmount: IXMLDuePayableAmountList;
    function GetCreditorReferenceTypeCode: IXMLCreditorReferenceTypeCodeList;
    function GetCreditorReferenceType: IXMLCreditorReferenceTypeList;
    function GetCreditorReferenceIssuerID: IXMLCreditorReferenceIssuerIDList;
    function GetHasCreditorReferenceID: Boolean;
    function GetCreditorReferenceID: IXMLIDType;
    function GetPaymentReference: IXMLPaymentReferenceList;
    function GetHasTaxCurrencyCode: Boolean;
    function GetTaxCurrencyCode: IXMLCurrencyCodeType;
    function GetHasInvoiceCurrencyCode: Boolean;
    function GetInvoiceCurrencyCode: IXMLCurrencyCodeType;
    function GetHasPaymentCurrencyCode: Boolean;
    function GetPaymentCurrencyCode: IXMLCurrencyCodeType;
    function GetHasInvoiceIssuerReference: Boolean;
    function GetInvoiceIssuerReference: IXMLTextType;
    function GetHasInvoiceDateTime: Boolean;
    function GetInvoiceDateTime: IXMLDateTimeType;
    function GetNextInvoiceDateTime: IXMLNextInvoiceDateTimeList;
    function GetHasCreditReasonCode: Boolean;
    function GetCreditReasonCode: IXMLCodeType;
    function GetCreditReason: IXMLCreditReasonList;
    function GetHasInvoicerTradeParty: Boolean;
    function GetInvoicerTradeParty: IXMLTradePartyType;
    function GetHasInvoiceeTradeParty: Boolean;
    function GetInvoiceeTradeParty: IXMLTradePartyType;
    function GetHasPayeeTradeParty: Boolean;
    function GetPayeeTradeParty: IXMLTradePartyType;
    function GetHasPayerTradeParty: Boolean;
    function GetPayerTradeParty: IXMLTradePartyType;
    function GetHasTaxApplicableTradeCurrencyExchange: Boolean;
    function GetTaxApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetHasInvoiceApplicableTradeCurrencyExchange: Boolean;
    function GetInvoiceApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetHasPaymentApplicableTradeCurrencyExchange: Boolean;
    function GetPaymentApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetSpecifiedTradeSettlementPaymentMeans: IXMLSpecifiedTradeSettlementPaymentMeansList;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;
    function GetHasBillingSpecifiedPeriod: Boolean;
    function GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    function GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    function GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    function GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    function GetHasSpecifiedTradeSettlementHeaderMonetarySummation: Boolean;
    function GetSpecifiedTradeSettlementHeaderMonetarySummation: IXMLTradeSettlementHeaderMonetarySummationType;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetHasProFormaInvoiceReferencedDocument: Boolean;
    function GetProFormaInvoiceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasLetterOfCreditReferencedDocument: Boolean;
    function GetLetterOfCreditReferencedDocument: IXMLReferencedDocumentType;
    function GetFactoringAgreementReferencedDocument: IXMLFactoringAgreementReferencedDocumentList;
    function GetFactoringListReferencedDocument: IXMLFactoringListReferencedDocumentList;
    function GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    function GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    function GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    function GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
    function GetSpecifiedTradeSettlementFinancialCard: IXMLSpecifiedTradeSettlementFinancialCardList;
    function GetSpecifiedAdvancePayment: IXMLSpecifiedAdvancePaymentList;
    function GetHasUltimatePayeeTradeParty: Boolean;
    function GetUltimatePayeeTradeParty: IXMLTradePartyType;

    property DuePayableAmount: IXMLDuePayableAmountList read GetDuePayableAmount;
    property CreditorReferenceTypeCode: IXMLCreditorReferenceTypeCodeList read GetCreditorReferenceTypeCode;
    property CreditorReferenceType: IXMLCreditorReferenceTypeList read GetCreditorReferenceType;
    property CreditorReferenceIssuerID: IXMLCreditorReferenceIssuerIDList read GetCreditorReferenceIssuerID;
    property HasCreditorReferenceID: Boolean read GetHasCreditorReferenceID;
    property CreditorReferenceID: IXMLIDType read GetCreditorReferenceID;
    property PaymentReference: IXMLPaymentReferenceList read GetPaymentReference;
    property HasTaxCurrencyCode: Boolean read GetHasTaxCurrencyCode;
    property TaxCurrencyCode: IXMLCurrencyCodeType read GetTaxCurrencyCode;
    property HasInvoiceCurrencyCode: Boolean read GetHasInvoiceCurrencyCode;
    property InvoiceCurrencyCode: IXMLCurrencyCodeType read GetInvoiceCurrencyCode;
    property HasPaymentCurrencyCode: Boolean read GetHasPaymentCurrencyCode;
    property PaymentCurrencyCode: IXMLCurrencyCodeType read GetPaymentCurrencyCode;
    property HasInvoiceIssuerReference: Boolean read GetHasInvoiceIssuerReference;
    property InvoiceIssuerReference: IXMLTextType read GetInvoiceIssuerReference;
    property HasInvoiceDateTime: Boolean read GetHasInvoiceDateTime;
    property InvoiceDateTime: IXMLDateTimeType read GetInvoiceDateTime;
    property NextInvoiceDateTime: IXMLNextInvoiceDateTimeList read GetNextInvoiceDateTime;
    property HasCreditReasonCode: Boolean read GetHasCreditReasonCode;
    property CreditReasonCode: IXMLCodeType read GetCreditReasonCode;
    property CreditReason: IXMLCreditReasonList read GetCreditReason;
    property HasInvoicerTradeParty: Boolean read GetHasInvoicerTradeParty;
    property InvoicerTradeParty: IXMLTradePartyType read GetInvoicerTradeParty;
    property HasInvoiceeTradeParty: Boolean read GetHasInvoiceeTradeParty;
    property InvoiceeTradeParty: IXMLTradePartyType read GetInvoiceeTradeParty;
    property HasPayeeTradeParty: Boolean read GetHasPayeeTradeParty;
    property PayeeTradeParty: IXMLTradePartyType read GetPayeeTradeParty;
    property HasPayerTradeParty: Boolean read GetHasPayerTradeParty;
    property PayerTradeParty: IXMLTradePartyType read GetPayerTradeParty;
    property HasTaxApplicableTradeCurrencyExchange: Boolean read GetHasTaxApplicableTradeCurrencyExchange;
    property TaxApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType read GetTaxApplicableTradeCurrencyExchange;
    property HasInvoiceApplicableTradeCurrencyExchange: Boolean read GetHasInvoiceApplicableTradeCurrencyExchange;
    property InvoiceApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType read GetInvoiceApplicableTradeCurrencyExchange;
    property HasPaymentApplicableTradeCurrencyExchange: Boolean read GetHasPaymentApplicableTradeCurrencyExchange;
    property PaymentApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType read GetPaymentApplicableTradeCurrencyExchange;
    property SpecifiedTradeSettlementPaymentMeans: IXMLSpecifiedTradeSettlementPaymentMeansList read GetSpecifiedTradeSettlementPaymentMeans;
    property ApplicableTradeTax: IXMLApplicableTradeTaxList read GetApplicableTradeTax;
    property HasBillingSpecifiedPeriod: Boolean read GetHasBillingSpecifiedPeriod;
    property BillingSpecifiedPeriod: IXMLSpecifiedPeriodType read GetBillingSpecifiedPeriod;
    property SpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList read GetSpecifiedTradeAllowanceCharge;
    property SubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList read GetSubtotalCalculatedTradeTax;
    property SpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList read GetSpecifiedLogisticsServiceCharge;
    property SpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList read GetSpecifiedTradePaymentTerms;
    property HasSpecifiedTradeSettlementHeaderMonetarySummation: Boolean read GetHasSpecifiedTradeSettlementHeaderMonetarySummation;
    property SpecifiedTradeSettlementHeaderMonetarySummation: IXMLTradeSettlementHeaderMonetarySummationType read GetSpecifiedTradeSettlementHeaderMonetarySummation;
    property SpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList read GetSpecifiedFinancialAdjustment;
    property InvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList read GetInvoiceReferencedDocument;
    property HasProFormaInvoiceReferencedDocument: Boolean read GetHasProFormaInvoiceReferencedDocument;
    property ProFormaInvoiceReferencedDocument: IXMLReferencedDocumentType read GetProFormaInvoiceReferencedDocument;
    property HasLetterOfCreditReferencedDocument: Boolean read GetHasLetterOfCreditReferencedDocument;
    property LetterOfCreditReferencedDocument: IXMLReferencedDocumentType read GetLetterOfCreditReferencedDocument;
    property FactoringAgreementReferencedDocument: IXMLFactoringAgreementReferencedDocumentList read GetFactoringAgreementReferencedDocument;
    property FactoringListReferencedDocument: IXMLFactoringListReferencedDocumentList read GetFactoringListReferencedDocument;
    property PayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList read GetPayableSpecifiedTradeAccountingAccount;
    property ReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList read GetReceivableSpecifiedTradeAccountingAccount;
    property PurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList read GetPurchaseSpecifiedTradeAccountingAccount;
    property SalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList read GetSalesSpecifiedTradeAccountingAccount;
    property SpecifiedTradeSettlementFinancialCard: IXMLSpecifiedTradeSettlementFinancialCardList read GetSpecifiedTradeSettlementFinancialCard;
    property SpecifiedAdvancePayment: IXMLSpecifiedAdvancePaymentList read GetSpecifiedAdvancePayment;
    property HasUltimatePayeeTradeParty: Boolean read GetHasUltimatePayeeTradeParty;
    property UltimatePayeeTradeParty: IXMLTradePartyType read GetUltimatePayeeTradeParty;
  end;

  IXMLSpecifiedAdvancePaymentListEnumerator = interface
    ['{D4696171-9340-4643-BA77-047D3CD03202}']
    function GetCurrent: IXMLAdvancePaymentType;
    function MoveNext: Boolean;
    property Current: IXMLAdvancePaymentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Advance Payment
  /// </summary>
  IXMLSpecifiedAdvancePaymentList = interface(IXMLNodeCollection)
    ['{013AA3DD-0BC1-4276-891E-DCB246505A5D}']
    function GetEnumerator: IXMLSpecifiedAdvancePaymentListEnumerator;

    function Get_SpecifiedAdvancePayment(Index: Integer): IXMLAdvancePaymentType;
    function Add: IXMLAdvancePaymentType;
    function Insert(Index: Integer): IXMLAdvancePaymentType;

    property SpecifiedAdvancePayment[Index: Integer]: IXMLAdvancePaymentType read Get_SpecifiedAdvancePayment; default;
  end;

  IXMLSpecifiedTradeSettlementFinancialCardListEnumerator = interface
    ['{89C7EF40-03B1-49FD-A962-30555E8398FD}']
    function GetCurrent: IXMLTradeSettlementFinancialCardType;
    function MoveNext: Boolean;
    property Current: IXMLTradeSettlementFinancialCardType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Financial Card
  /// </summary>
  IXMLSpecifiedTradeSettlementFinancialCardList = interface(IXMLNodeCollection)
    ['{1255678D-F022-4C1E-BA0B-332B43E45DD4}']
    function GetEnumerator: IXMLSpecifiedTradeSettlementFinancialCardListEnumerator;

    function Get_SpecifiedTradeSettlementFinancialCard(Index: Integer): IXMLTradeSettlementFinancialCardType;
    function Add: IXMLTradeSettlementFinancialCardType;
    function Insert(Index: Integer): IXMLTradeSettlementFinancialCardType;

    property SpecifiedTradeSettlementFinancialCard[Index: Integer]: IXMLTradeSettlementFinancialCardType read Get_SpecifiedTradeSettlementFinancialCard; default;
  end;

  IXMLFactoringListReferencedDocumentListEnumerator = interface
    ['{604DCFD2-7614-4905-88B1-342C2B2AE03C}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Factoring List Document
  /// </summary>
  IXMLFactoringListReferencedDocumentList = interface(IXMLNodeCollection)
    ['{B247B1D4-52E7-43D6-B256-0C3DB86D217A}']
    function GetEnumerator: IXMLFactoringListReferencedDocumentListEnumerator;

    function Get_FactoringListReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property FactoringListReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_FactoringListReferencedDocument; default;
  end;

  IXMLFactoringAgreementReferencedDocumentListEnumerator = interface
    ['{26F9AB86-FE12-4819-8427-5009C7F78A4F}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Factoring Agreement Document
  /// </summary>
  IXMLFactoringAgreementReferencedDocumentList = interface(IXMLNodeCollection)
    ['{86D931D3-67BF-4F4A-8B1C-80095151C572}']
    function GetEnumerator: IXMLFactoringAgreementReferencedDocumentListEnumerator;

    function Get_FactoringAgreementReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property FactoringAgreementReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_FactoringAgreementReferencedDocument; default;
  end;

  IXMLSpecifiedTradeSettlementPaymentMeansListEnumerator = interface
    ['{37383E74-E46F-4DF9-8A0B-3B3BF811E853}']
    function GetCurrent: IXMLTradeSettlementPaymentMeansType;
    function MoveNext: Boolean;
    property Current: IXMLTradeSettlementPaymentMeansType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payment Means
  /// </summary>
  IXMLSpecifiedTradeSettlementPaymentMeansList = interface(IXMLNodeCollection)
    ['{D4A82C41-5A8F-468F-9DE6-B0BA7CC08666}']
    function GetEnumerator: IXMLSpecifiedTradeSettlementPaymentMeansListEnumerator;

    function Get_SpecifiedTradeSettlementPaymentMeans(Index: Integer): IXMLTradeSettlementPaymentMeansType;
    function Add: IXMLTradeSettlementPaymentMeansType;
    function Insert(Index: Integer): IXMLTradeSettlementPaymentMeansType;

    property SpecifiedTradeSettlementPaymentMeans[Index: Integer]: IXMLTradeSettlementPaymentMeansType read Get_SpecifiedTradeSettlementPaymentMeans; default;
  end;

  IXMLCreditReasonListEnumerator = interface
    ['{030767FE-8FA6-496F-B8C3-AF7A8E0E3E3C}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Credit Reason Text
  /// </summary>
  IXMLCreditReasonList = interface(IXMLNodeCollection)
    ['{47421A5D-5C72-4A85-8725-0C4D203FE529}']
    function GetEnumerator: IXMLCreditReasonListEnumerator;

    function Get_CreditReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property CreditReason[Index: Integer]: IXMLTextType read Get_CreditReason; default;
  end;

  IXMLNextInvoiceDateTimeListEnumerator = interface
    ['{C58B4573-11C1-4E16-83C9-0A22389829FB}']
    function GetCurrent: IXMLDateTimeType;
    function MoveNext: Boolean;
    property Current: IXMLDateTimeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Next Invoice Date Time
  /// </summary>
  IXMLNextInvoiceDateTimeList = interface(IXMLNodeCollection)
    ['{67D2FF7A-E5FE-433D-BAD3-70D7FA02B14F}']
    function GetEnumerator: IXMLNextInvoiceDateTimeListEnumerator;

    function Get_NextInvoiceDateTime(Index: Integer): IXMLDateTimeType;
    function Add: IXMLDateTimeType;
    function Insert(Index: Integer): IXMLDateTimeType;

    property NextInvoiceDateTime[Index: Integer]: IXMLDateTimeType read Get_NextInvoiceDateTime; default;
  end;

  IXMLCreditorReferenceIssuerIDListEnumerator = interface
    ['{943E68F9-29A0-4BCA-83CD-F09AC4D4DF90}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Creditor Reference Issuer ID
  /// </summary>
  IXMLCreditorReferenceIssuerIDList = interface(IXMLNodeCollection)
    ['{568E1FF5-EFFA-4774-A6CB-87CDA1131F80}']
    function GetEnumerator: IXMLCreditorReferenceIssuerIDListEnumerator;

    function Get_CreditorReferenceIssuerID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property CreditorReferenceIssuerID[Index: Integer]: IXMLIDType read Get_CreditorReferenceIssuerID; default;
  end;

  IXMLCreditorReferenceTypeListEnumerator = interface
    ['{AF8F920F-4C70-4B67-A1BE-947AB1E68BE2}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Creditor Reference Type Text
  /// </summary>
  IXMLCreditorReferenceTypeList = interface(IXMLNodeCollection)
    ['{E6F6B469-9A8A-4755-ADE1-F36419B19C09}']
    function GetEnumerator: IXMLCreditorReferenceTypeListEnumerator;

    function Get_CreditorReferenceType(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property CreditorReferenceType[Index: Integer]: IXMLTextType read Get_CreditorReferenceType; default;
  end;

  IXMLCreditorReferenceTypeCodeListEnumerator = interface
    ['{FDFFD64D-E07A-4333-880D-9BFAC3F525D9}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Creditor Reference Type Code
  /// </summary>
  IXMLCreditorReferenceTypeCodeList = interface(IXMLNodeCollection)
    ['{41A992A7-9C7F-4CEF-9D37-E79C95713B6E}']
    function GetEnumerator: IXMLCreditorReferenceTypeCodeListEnumerator;

    function Get_CreditorReferenceTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property CreditorReferenceTypeCode[Index: Integer]: IXMLCodeType read Get_CreditorReferenceTypeCode; default;
  end;

  IXMLLegalOrganizationTypeEnumerator = interface
    ['{EFC33E32-AC99-4EAF-AF2A-C36570A62352}']
    function GetCurrent: IXMLLegalRegistrationType;
    function MoveNext: Boolean;
    property Current: IXMLLegalRegistrationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Legal Organization
  /// </summary>
  IXMLLegalOrganizationType = interface(IXMLNodeCollection)
    ['{C6B34308-E14D-4189-861E-3CC08E836390}']
    function GetEnumerator: IXMLLegalOrganizationTypeEnumerator;

    function Get_AuthorizedLegalRegistration(Index: Integer): IXMLLegalRegistrationType;
    function Add: IXMLLegalRegistrationType;
    function Insert(Index: Integer): IXMLLegalRegistrationType;

    property AuthorizedLegalRegistration[Index: Integer]: IXMLLegalRegistrationType read Get_AuthorizedLegalRegistration; default;

    function GetHasLegalClassificationCode: Boolean;
    function GetLegalClassificationCode: IXMLCodeType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasTradingBusinessName: Boolean;
    function GetTradingBusinessName: IXMLTextType;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;

    property HasLegalClassificationCode: Boolean read GetHasLegalClassificationCode;
    property LegalClassificationCode: IXMLCodeType read GetLegalClassificationCode;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasTradingBusinessName: Boolean read GetHasTradingBusinessName;
    property TradingBusinessName: IXMLTextType read GetTradingBusinessName;
    property HasPostalTradeAddress: Boolean read GetHasPostalTradeAddress;
    property PostalTradeAddress: IXMLTradeAddressType read GetPostalTradeAddress;
  end;

  /// <summary>
  ///    (BN/BN) Legal Registration
  /// </summary>
  IXMLLegalRegistrationType = interface(IXMLNode)
    ['{B379A020-1DDF-45E3-B65D-3FDC1F329DAD}']
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
  end;

  /// <summary>
  ///    (BN/BN) Line Trade Agreement
  /// </summary>
  IXMLLineTradeAgreementType = interface(IXMLNode)
    ['{7EE9B43D-AC73-4920-9DA5-01CFD2BA87DB}']
    function GetHasBuyerReference: Boolean;
    function GetBuyerReference: IXMLTextType;
    function GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    function GetHasApplicableTradeDeliveryTerms: Boolean;
    function GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasQuotationReferencedDocument: Boolean;
    function GetQuotationReferencedDocument: IXMLReferencedDocumentType;
    function GetHasContractReferencedDocument: Boolean;
    function GetContractReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDemandForecastReferencedDocument: Boolean;
    function GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPromotionalDealReferencedDocument: Boolean;
    function GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasGrossPriceProductTradePrice: Boolean;
    function GetGrossPriceProductTradePrice: IXMLTradePriceType;
    function GetHasNetPriceProductTradePrice: Boolean;
    function GetNetPriceProductTradePrice: IXMLTradePriceType;
    function GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    function GetHasItemSellerTradeParty: Boolean;
    function GetItemSellerTradeParty: IXMLTradePartyType;
    function GetHasItemBuyerTradeParty: Boolean;
    function GetItemBuyerTradeParty: IXMLTradePartyType;
    function GetHasIncludedSpecifiedMarketplace: Boolean;
    function GetIncludedSpecifiedMarketplace: IXMLSpecifiedMarketplaceType;
    function GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;

    property HasBuyerReference: Boolean read GetHasBuyerReference;
    property BuyerReference: IXMLTextType read GetBuyerReference;
    property BuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList read GetBuyerRequisitionerTradeParty;
    property HasApplicableTradeDeliveryTerms: Boolean read GetHasApplicableTradeDeliveryTerms;
    property ApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType read GetApplicableTradeDeliveryTerms;
    property HasSellerOrderReferencedDocument: Boolean read GetHasSellerOrderReferencedDocument;
    property SellerOrderReferencedDocument: IXMLReferencedDocumentType read GetSellerOrderReferencedDocument;
    property HasBuyerOrderReferencedDocument: Boolean read GetHasBuyerOrderReferencedDocument;
    property BuyerOrderReferencedDocument: IXMLReferencedDocumentType read GetBuyerOrderReferencedDocument;
    property HasQuotationReferencedDocument: Boolean read GetHasQuotationReferencedDocument;
    property QuotationReferencedDocument: IXMLReferencedDocumentType read GetQuotationReferencedDocument;
    property HasContractReferencedDocument: Boolean read GetHasContractReferencedDocument;
    property ContractReferencedDocument: IXMLReferencedDocumentType read GetContractReferencedDocument;
    property HasDemandForecastReferencedDocument: Boolean read GetHasDemandForecastReferencedDocument;
    property DemandForecastReferencedDocument: IXMLReferencedDocumentType read GetDemandForecastReferencedDocument;
    property HasPromotionalDealReferencedDocument: Boolean read GetHasPromotionalDealReferencedDocument;
    property PromotionalDealReferencedDocument: IXMLReferencedDocumentType read GetPromotionalDealReferencedDocument;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property HasGrossPriceProductTradePrice: Boolean read GetHasGrossPriceProductTradePrice;
    property GrossPriceProductTradePrice: IXMLTradePriceType read GetGrossPriceProductTradePrice;
    property HasNetPriceProductTradePrice: Boolean read GetHasNetPriceProductTradePrice;
    property NetPriceProductTradePrice: IXMLTradePriceType read GetNetPriceProductTradePrice;
    property RequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList read GetRequisitionerReferencedDocument;
    property HasItemSellerTradeParty: Boolean read GetHasItemSellerTradeParty;
    property ItemSellerTradeParty: IXMLTradePartyType read GetItemSellerTradeParty;
    property HasItemBuyerTradeParty: Boolean read GetHasItemBuyerTradeParty;
    property ItemBuyerTradeParty: IXMLTradePartyType read GetItemBuyerTradeParty;
    property HasIncludedSpecifiedMarketplace: Boolean read GetHasIncludedSpecifiedMarketplace;
    property IncludedSpecifiedMarketplace: IXMLSpecifiedMarketplaceType read GetIncludedSpecifiedMarketplace;
    property UltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList read GetUltimateCustomerOrderReferencedDocument;
  end;

  IXMLUltimateCustomerOrderReferencedDocumentListEnumerator = interface
    ['{64CD63F0-247E-42B1-B938-E6D81FFE3502}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Ultimate Customer Order Document
  /// </summary>
  IXMLUltimateCustomerOrderReferencedDocumentList = interface(IXMLNodeCollection)
    ['{1474C1BE-520A-4CE7-94B4-6C1E7919754D}']
    function GetEnumerator: IXMLUltimateCustomerOrderReferencedDocumentListEnumerator;

    function Get_UltimateCustomerOrderReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property UltimateCustomerOrderReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_UltimateCustomerOrderReferencedDocument; default;
  end;

  IXMLRequisitionerReferencedDocumentListEnumerator = interface
    ['{6941888E-549D-4238-86BE-83E210529839}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Requisitioner Document
  /// </summary>
  IXMLRequisitionerReferencedDocumentList = interface(IXMLNodeCollection)
    ['{319A4633-9F40-410E-828B-6DFA0A1662EC}']
    function GetEnumerator: IXMLRequisitionerReferencedDocumentListEnumerator;

    function Get_RequisitionerReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property RequisitionerReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_RequisitionerReferencedDocument; default;
  end;

  IXMLBuyerRequisitionerTradePartyListEnumerator = interface
    ['{626A1508-EA64-4FCA-A2C8-15C591CA957A}']
    function GetCurrent: IXMLTradePartyType;
    function MoveNext: Boolean;
    property Current: IXMLTradePartyType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Buyer Requisitioner
  /// </summary>
  IXMLBuyerRequisitionerTradePartyList = interface(IXMLNodeCollection)
    ['{32806845-C299-47B2-BDCD-34E2DB4C97DC}']
    function GetEnumerator: IXMLBuyerRequisitionerTradePartyListEnumerator;

    function Get_BuyerRequisitionerTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;

    property BuyerRequisitionerTradeParty[Index: Integer]: IXMLTradePartyType read Get_BuyerRequisitionerTradeParty; default;
  end;

  /// <summary>
  ///    (BN/BN) Line Trade Delivery
  /// </summary>
  IXMLLineTradeDeliveryType = interface(IXMLNode)
    ['{3996E6A5-A6E7-47E1-88E0-71FCCFA4BF03}']
    function GetHasRequestedQuantity: Boolean;
    function GetRequestedQuantity: IXMLQuantityType;
    function GetHasReceivedQuantity: Boolean;
    function GetReceivedQuantity: IXMLQuantityType;
    function GetHasBilledQuantity: Boolean;
    function GetBilledQuantity: IXMLQuantityType;
    function GetHasChargeFreeQuantity: Boolean;
    function GetChargeFreeQuantity: IXMLQuantityType;
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetHasProductUnitQuantity: Boolean;
    function GetProductUnitQuantity: IXMLQuantityType;
    function GetHasPerPackageUnitQuantity: Boolean;
    function GetPerPackageUnitQuantity: IXMLQuantityType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasTheoreticalWeightMeasure: Boolean;
    function GetTheoreticalWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasDespatchedQuantity: Boolean;
    function GetDespatchedQuantity: IXMLQuantityType;
    function GetSpecifiedDeliveryAdjustment: IXMLSpecifiedDeliveryAdjustmentList;
    function GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    function GetHasRelatedSupplyChainConsignment: Boolean;
    function GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
    function GetHasShipToTradeParty: Boolean;
    function GetShipToTradeParty: IXMLTradePartyType;
    function GetHasUltimateShipToTradeParty: Boolean;
    function GetUltimateShipToTradeParty: IXMLTradePartyType;
    function GetHasShipFromTradeParty: Boolean;
    function GetShipFromTradeParty: IXMLTradePartyType;
    function GetHasActualDespatchSupplyChainEvent: Boolean;
    function GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualPickUpSupplyChainEvent: Boolean;
    function GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasRequestedDeliverySupplyChainEvent: Boolean;
    function GetRequestedDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualDeliverySupplyChainEvent: Boolean;
    function GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualReceiptSupplyChainEvent: Boolean;
    function GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasDespatchAdviceReferencedDocument: Boolean;
    function GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasReceivingAdviceReferencedDocument: Boolean;
    function GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDeliveryNoteReferencedDocument: Boolean;
    function GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
    function GetHasConsumptionReportReferencedDocument: Boolean;
    function GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPackingListReferencedDocument: Boolean;
    function GetPackingListReferencedDocument: IXMLReferencedDocumentType;

    property HasRequestedQuantity: Boolean read GetHasRequestedQuantity;
    property RequestedQuantity: IXMLQuantityType read GetRequestedQuantity;
    property HasReceivedQuantity: Boolean read GetHasReceivedQuantity;
    property ReceivedQuantity: IXMLQuantityType read GetReceivedQuantity;
    property HasBilledQuantity: Boolean read GetHasBilledQuantity;
    property BilledQuantity: IXMLQuantityType read GetBilledQuantity;
    property HasChargeFreeQuantity: Boolean read GetHasChargeFreeQuantity;
    property ChargeFreeQuantity: IXMLQuantityType read GetChargeFreeQuantity;
    property HasPackageQuantity: Boolean read GetHasPackageQuantity;
    property PackageQuantity: IXMLQuantityType read GetPackageQuantity;
    property HasProductUnitQuantity: Boolean read GetHasProductUnitQuantity;
    property ProductUnitQuantity: IXMLQuantityType read GetProductUnitQuantity;
    property HasPerPackageUnitQuantity: Boolean read GetHasPerPackageUnitQuantity;
    property PerPackageUnitQuantity: IXMLQuantityType read GetPerPackageUnitQuantity;
    property HasNetWeightMeasure: Boolean read GetHasNetWeightMeasure;
    property NetWeightMeasure: IXMLWeightUnitMeasureType read GetNetWeightMeasure;
    property HasGrossWeightMeasure: Boolean read GetHasGrossWeightMeasure;
    property GrossWeightMeasure: IXMLWeightUnitMeasureType read GetGrossWeightMeasure;
    property HasTheoreticalWeightMeasure: Boolean read GetHasTheoreticalWeightMeasure;
    property TheoreticalWeightMeasure: IXMLWeightUnitMeasureType read GetTheoreticalWeightMeasure;
    property HasDespatchedQuantity: Boolean read GetHasDespatchedQuantity;
    property DespatchedQuantity: IXMLQuantityType read GetDespatchedQuantity;
    property SpecifiedDeliveryAdjustment: IXMLSpecifiedDeliveryAdjustmentList read GetSpecifiedDeliveryAdjustment;
    property IncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList read GetIncludedSupplyChainPackaging;
    property HasRelatedSupplyChainConsignment: Boolean read GetHasRelatedSupplyChainConsignment;
    property RelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType read GetRelatedSupplyChainConsignment;
    property HasShipToTradeParty: Boolean read GetHasShipToTradeParty;
    property ShipToTradeParty: IXMLTradePartyType read GetShipToTradeParty;
    property HasUltimateShipToTradeParty: Boolean read GetHasUltimateShipToTradeParty;
    property UltimateShipToTradeParty: IXMLTradePartyType read GetUltimateShipToTradeParty;
    property HasShipFromTradeParty: Boolean read GetHasShipFromTradeParty;
    property ShipFromTradeParty: IXMLTradePartyType read GetShipFromTradeParty;
    property HasActualDespatchSupplyChainEvent: Boolean read GetHasActualDespatchSupplyChainEvent;
    property ActualDespatchSupplyChainEvent: IXMLSupplyChainEventType read GetActualDespatchSupplyChainEvent;
    property HasActualPickUpSupplyChainEvent: Boolean read GetHasActualPickUpSupplyChainEvent;
    property ActualPickUpSupplyChainEvent: IXMLSupplyChainEventType read GetActualPickUpSupplyChainEvent;
    property HasRequestedDeliverySupplyChainEvent: Boolean read GetHasRequestedDeliverySupplyChainEvent;
    property RequestedDeliverySupplyChainEvent: IXMLSupplyChainEventType read GetRequestedDeliverySupplyChainEvent;
    property HasActualDeliverySupplyChainEvent: Boolean read GetHasActualDeliverySupplyChainEvent;
    property ActualDeliverySupplyChainEvent: IXMLSupplyChainEventType read GetActualDeliverySupplyChainEvent;
    property HasActualReceiptSupplyChainEvent: Boolean read GetHasActualReceiptSupplyChainEvent;
    property ActualReceiptSupplyChainEvent: IXMLSupplyChainEventType read GetActualReceiptSupplyChainEvent;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property HasDespatchAdviceReferencedDocument: Boolean read GetHasDespatchAdviceReferencedDocument;
    property DespatchAdviceReferencedDocument: IXMLReferencedDocumentType read GetDespatchAdviceReferencedDocument;
    property HasReceivingAdviceReferencedDocument: Boolean read GetHasReceivingAdviceReferencedDocument;
    property ReceivingAdviceReferencedDocument: IXMLReferencedDocumentType read GetReceivingAdviceReferencedDocument;
    property HasDeliveryNoteReferencedDocument: Boolean read GetHasDeliveryNoteReferencedDocument;
    property DeliveryNoteReferencedDocument: IXMLReferencedDocumentType read GetDeliveryNoteReferencedDocument;
    property HasConsumptionReportReferencedDocument: Boolean read GetHasConsumptionReportReferencedDocument;
    property ConsumptionReportReferencedDocument: IXMLReferencedDocumentType read GetConsumptionReportReferencedDocument;
    property HasPackingListReferencedDocument: Boolean read GetHasPackingListReferencedDocument;
    property PackingListReferencedDocument: IXMLReferencedDocumentType read GetPackingListReferencedDocument;
  end;

  IXMLSpecifiedDeliveryAdjustmentListEnumerator = interface
    ['{2F35F5EC-F6D7-4490-84F5-98FABE38CFCB}']
    function GetCurrent: IXMLDeliveryAdjustmentType;
    function MoveNext: Boolean;
    property Current: IXMLDeliveryAdjustmentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Delivery Adjustment
  /// </summary>
  IXMLSpecifiedDeliveryAdjustmentList = interface(IXMLNodeCollection)
    ['{C2A1581E-3F0F-4045-857E-FF96C3902867}']
    function GetEnumerator: IXMLSpecifiedDeliveryAdjustmentListEnumerator;

    function Get_SpecifiedDeliveryAdjustment(Index: Integer): IXMLDeliveryAdjustmentType;
    function Add: IXMLDeliveryAdjustmentType;
    function Insert(Index: Integer): IXMLDeliveryAdjustmentType;

    property SpecifiedDeliveryAdjustment[Index: Integer]: IXMLDeliveryAdjustmentType read Get_SpecifiedDeliveryAdjustment; default;
  end;

  /// <summary>
  ///    (BN/BN) Line Trade Settlement
  /// </summary>
  IXMLLineTradeSettlementType = interface(IXMLNode)
    ['{8DC7E27E-C5FD-4273-8657-133D9650D38A}']
    function GetPaymentReference: IXMLPaymentReferenceList;
    function GetHasInvoiceIssuerReference: Boolean;
    function GetInvoiceIssuerReference: IXMLTextType;
    function GetHasTotalAdjustmentAmount: Boolean;
    function GetTotalAdjustmentAmount: IXMLAmountType;
    function GetHasDiscountIndicator: Boolean;
    function GetDiscountIndicator: IXMLIndicatorType;
    function GetHasInvoiceDateTime: Boolean;
    function GetInvoiceDateTime: IXMLDateTimeType;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;
    function GetHasBillingSpecifiedPeriod: Boolean;
    function GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    function GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    function GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    function GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    function GetHasSpecifiedTradeSettlementLineMonetarySummation: Boolean;
    function GetSpecifiedTradeSettlementLineMonetarySummation: IXMLTradeSettlementLineMonetarySummationType;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    function GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    function GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    function GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
    function GetHasSpecifiedTradeSettlementFinancialCard: Boolean;
    function GetSpecifiedTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;

    property PaymentReference: IXMLPaymentReferenceList read GetPaymentReference;
    property HasInvoiceIssuerReference: Boolean read GetHasInvoiceIssuerReference;
    property InvoiceIssuerReference: IXMLTextType read GetInvoiceIssuerReference;
    property HasTotalAdjustmentAmount: Boolean read GetHasTotalAdjustmentAmount;
    property TotalAdjustmentAmount: IXMLAmountType read GetTotalAdjustmentAmount;
    property HasDiscountIndicator: Boolean read GetHasDiscountIndicator;
    property DiscountIndicator: IXMLIndicatorType read GetDiscountIndicator;
    property HasInvoiceDateTime: Boolean read GetHasInvoiceDateTime;
    property InvoiceDateTime: IXMLDateTimeType read GetInvoiceDateTime;
    property ApplicableTradeTax: IXMLApplicableTradeTaxList read GetApplicableTradeTax;
    property HasBillingSpecifiedPeriod: Boolean read GetHasBillingSpecifiedPeriod;
    property BillingSpecifiedPeriod: IXMLSpecifiedPeriodType read GetBillingSpecifiedPeriod;
    property SpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList read GetSpecifiedTradeAllowanceCharge;
    property SubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList read GetSubtotalCalculatedTradeTax;
    property SpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList read GetSpecifiedLogisticsServiceCharge;
    property SpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList read GetSpecifiedTradePaymentTerms;
    property HasSpecifiedTradeSettlementLineMonetarySummation: Boolean read GetHasSpecifiedTradeSettlementLineMonetarySummation;
    property SpecifiedTradeSettlementLineMonetarySummation: IXMLTradeSettlementLineMonetarySummationType read GetSpecifiedTradeSettlementLineMonetarySummation;
    property SpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList read GetSpecifiedFinancialAdjustment;
    property InvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList read GetInvoiceReferencedDocument;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property PayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList read GetPayableSpecifiedTradeAccountingAccount;
    property ReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList read GetReceivableSpecifiedTradeAccountingAccount;
    property PurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList read GetPurchaseSpecifiedTradeAccountingAccount;
    property SalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList read GetSalesSpecifiedTradeAccountingAccount;
    property HasSpecifiedTradeSettlementFinancialCard: Boolean read GetHasSpecifiedTradeSettlementFinancialCard;
    property SpecifiedTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType read GetSpecifiedTradeSettlementFinancialCard;
  end;

  IXMLSalesSpecifiedTradeAccountingAccountListEnumerator = interface
    ['{EE6931AD-42A8-4950-93DA-B4EC37D83ADE}']
    function GetCurrent: IXMLTradeAccountingAccountType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAccountingAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Sales Accounting Account
  /// </summary>
  IXMLSalesSpecifiedTradeAccountingAccountList = interface(IXMLNodeCollection)
    ['{CEB62249-69EA-4945-903A-99BC08471D0E}']
    function GetEnumerator: IXMLSalesSpecifiedTradeAccountingAccountListEnumerator;

    function Get_SalesSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;

    property SalesSpecifiedTradeAccountingAccount[Index: Integer]: IXMLTradeAccountingAccountType read Get_SalesSpecifiedTradeAccountingAccount; default;
  end;

  IXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator = interface
    ['{BB062357-2F88-4682-9E0D-E45DE55FA0C6}']
    function GetCurrent: IXMLTradeAccountingAccountType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAccountingAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Purchase Accounting Account
  /// </summary>
  IXMLPurchaseSpecifiedTradeAccountingAccountList = interface(IXMLNodeCollection)
    ['{DF8D6D38-4E5A-4C80-858F-4671121DE8D8}']
    function GetEnumerator: IXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator;

    function Get_PurchaseSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;

    property PurchaseSpecifiedTradeAccountingAccount[Index: Integer]: IXMLTradeAccountingAccountType read Get_PurchaseSpecifiedTradeAccountingAccount; default;
  end;

  IXMLReceivableSpecifiedTradeAccountingAccountListEnumerator = interface
    ['{13B75627-B871-48DD-B719-A3222CD6DC65}']
    function GetCurrent: IXMLTradeAccountingAccountType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAccountingAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Accounts Receivable
  /// </summary>
  IXMLReceivableSpecifiedTradeAccountingAccountList = interface(IXMLNodeCollection)
    ['{A2EEC13D-5F7A-4816-B3B9-070DA19F5F2B}']
    function GetEnumerator: IXMLReceivableSpecifiedTradeAccountingAccountListEnumerator;

    function Get_ReceivableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;

    property ReceivableSpecifiedTradeAccountingAccount[Index: Integer]: IXMLTradeAccountingAccountType read Get_ReceivableSpecifiedTradeAccountingAccount; default;
  end;

  IXMLPayableSpecifiedTradeAccountingAccountListEnumerator = interface
    ['{758B208F-88E0-47AA-8603-D741D2DAAB88}']
    function GetCurrent: IXMLTradeAccountingAccountType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAccountingAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Accounts Payable
  /// </summary>
  IXMLPayableSpecifiedTradeAccountingAccountList = interface(IXMLNodeCollection)
    ['{437C93D5-907C-4935-9E93-916DCFF0B281}']
    function GetEnumerator: IXMLPayableSpecifiedTradeAccountingAccountListEnumerator;

    function Get_PayableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;

    property PayableSpecifiedTradeAccountingAccount[Index: Integer]: IXMLTradeAccountingAccountType read Get_PayableSpecifiedTradeAccountingAccount; default;
  end;

  IXMLSpecifiedTradePaymentTermsListEnumerator = interface
    ['{8459FD6C-BEE8-4ECE-BF7C-92BBD4C6F481}']
    function GetCurrent: IXMLTradePaymentTermsType;
    function MoveNext: Boolean;
    property Current: IXMLTradePaymentTermsType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payment Terms
  /// </summary>
  IXMLSpecifiedTradePaymentTermsList = interface(IXMLNodeCollection)
    ['{6AC803AA-4C74-4D07-ACCA-4CD8A66956A3}']
    function GetEnumerator: IXMLSpecifiedTradePaymentTermsListEnumerator;

    function Get_SpecifiedTradePaymentTerms(Index: Integer): IXMLTradePaymentTermsType;
    function Add: IXMLTradePaymentTermsType;
    function Insert(Index: Integer): IXMLTradePaymentTermsType;

    property SpecifiedTradePaymentTerms[Index: Integer]: IXMLTradePaymentTermsType read Get_SpecifiedTradePaymentTerms; default;
  end;

  IXMLSpecifiedLogisticsServiceChargeListEnumerator = interface
    ['{0D10867B-7CA3-49C0-92CA-9F371D1149B2}']
    function GetCurrent: IXMLLogisticsServiceChargeType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsServiceChargeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Logistics Service Charge
  /// </summary>
  IXMLSpecifiedLogisticsServiceChargeList = interface(IXMLNodeCollection)
    ['{9F0EB8C5-9A57-4437-9164-3AC47A2893DF}']
    function GetEnumerator: IXMLSpecifiedLogisticsServiceChargeListEnumerator;

    function Get_SpecifiedLogisticsServiceCharge(Index: Integer): IXMLLogisticsServiceChargeType;
    function Add: IXMLLogisticsServiceChargeType;
    function Insert(Index: Integer): IXMLLogisticsServiceChargeType;

    property SpecifiedLogisticsServiceCharge[Index: Integer]: IXMLLogisticsServiceChargeType read Get_SpecifiedLogisticsServiceCharge; default;
  end;

  IXMLSubtotalCalculatedTradeTaxListEnumerator = interface
    ['{2D79180F-CFDE-41BB-81FA-7280D1EBD105}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Subtotal Calculated Tax
  /// </summary>
  IXMLSubtotalCalculatedTradeTaxList = interface(IXMLNodeCollection)
    ['{DDF06E33-286A-4501-80F1-6523F9FE3F18}']
    function GetEnumerator: IXMLSubtotalCalculatedTradeTaxListEnumerator;

    function Get_SubtotalCalculatedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property SubtotalCalculatedTradeTax[Index: Integer]: IXMLTradeTaxType read Get_SubtotalCalculatedTradeTax; default;
  end;

  IXMLApplicableTradeTaxListEnumerator = interface
    ['{6A335C42-E7E5-46CB-B556-175DD519ED15}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Tax
  /// </summary>
  IXMLApplicableTradeTaxList = interface(IXMLNodeCollection)
    ['{FEF4C274-3DE2-4E07-894B-13F3140623E1}']
    function GetEnumerator: IXMLApplicableTradeTaxListEnumerator;

    function Get_ApplicableTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property ApplicableTradeTax[Index: Integer]: IXMLTradeTaxType read Get_ApplicableTradeTax; default;
  end;

  IXMLPaymentReferenceListEnumerator = interface
    ['{5D8F7ADB-2BD9-4137-A45E-373B05B4D5A9}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payment Reference Text
  /// </summary>
  IXMLPaymentReferenceList = interface(IXMLNodeCollection)
    ['{BF557BBD-8C0F-4A8A-B160-B3B903DCD345}']
    function GetEnumerator: IXMLPaymentReferenceListEnumerator;

    function Get_PaymentReference(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property PaymentReference[Index: Integer]: IXMLTextType read Get_PaymentReference; default;
  end;

  /// <summary>
  ///    (BN/BN) Logistics Location
  /// </summary>
  IXMLLogisticsLocationType = interface(IXMLNode)
    ['{FB6CC10F-0BB2-4598-A7AC-DFE6D77A45D9}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLLocationFunctionCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetHasPhysicalGeographicalCoordinate: Boolean;
    function GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;
    function GetHasSubordinateLocation: Boolean;
    function GetSubordinateLocation: IXMLSubordinateLocationType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property Name: IXMLNameList read GetName;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLLocationFunctionCodeType read GetTypeCode;
    property Description: IXMLDescriptionList read GetDescription;
    property HasCountryID: Boolean read GetHasCountryID;
    property CountryID: IXMLCountryIDType read GetCountryID;
    property HasCountrySubDivisionID: Boolean read GetHasCountrySubDivisionID;
    property CountrySubDivisionID: IXMLIDType read GetCountrySubDivisionID;
    property HasPhysicalGeographicalCoordinate: Boolean read GetHasPhysicalGeographicalCoordinate;
    property PhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType read GetPhysicalGeographicalCoordinate;
    property HasPostalTradeAddress: Boolean read GetHasPostalTradeAddress;
    property PostalTradeAddress: IXMLTradeAddressType read GetPostalTradeAddress;
    property HasSubordinateLocation: Boolean read GetHasSubordinateLocation;
    property SubordinateLocation: IXMLSubordinateLocationType read GetSubordinateLocation;
  end;

  IXMLLogisticsSealTypeEnumerator = interface
    ['{4A1DD651-5D9A-4F3E-83EB-9E56101FDBC2}']
    function GetCurrent: IXMLSealConditionCodeType;
    function MoveNext: Boolean;
    property Current: IXMLSealConditionCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Logistics Seal
  /// </summary>
  IXMLLogisticsSealType = interface(IXMLNodeCollection)
    ['{21817C21-9EE2-41D4-BF05-42710A5A452E}']
    function GetEnumerator: IXMLLogisticsSealTypeEnumerator;

    function Get_ConditionCode(Index: Integer): IXMLSealConditionCodeType;
    function Add: IXMLSealConditionCodeType;
    function Insert(Index: Integer): IXMLSealConditionCodeType;

    property ConditionCode[Index: Integer]: IXMLSealConditionCodeType read Get_ConditionCode; default;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasMaximumID: Boolean;
    function GetMaximumID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasSealingPartyRoleCode: Boolean;
    function GetSealingPartyRoleCode: IXMLSealingPartyRoleCodeType;
    function GetHasIssuingTradeParty: Boolean;
    function GetIssuingTradeParty: IXMLTradePartyType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasMaximumID: Boolean read GetHasMaximumID;
    property MaximumID: IXMLIDType read GetMaximumID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasSealingPartyRoleCode: Boolean read GetHasSealingPartyRoleCode;
    property SealingPartyRoleCode: IXMLSealingPartyRoleCodeType read GetSealingPartyRoleCode;
    property HasIssuingTradeParty: Boolean read GetHasIssuingTradeParty;
    property IssuingTradeParty: IXMLTradePartyType read GetIssuingTradeParty;
  end;

  /// <summary>
  ///    (BN/BN) Logistics Service Charge
  /// </summary>
  IXMLLogisticsServiceChargeType = interface(IXMLNode)
    ['{DDE5EFB1-FBFA-4A71-8E6F-5FBACFD1FA06}']
    function GetHasID: Boolean;
    function GetID: IXMLFreightChargeTypeIDType;
    function GetDescription: IXMLDescriptionList;
    function GetHasPaymentArrangementCode: Boolean;
    function GetPaymentArrangementCode: IXMLTransportServicePaymentArrangementCodeType;
    function GetHasTariffClassCode: Boolean;
    function GetTariffClassCode: IXMLFreightChargeTariffClassCodeType;
    function GetHasChargeCategoryCode: Boolean;
    function GetChargeCategoryCode: IXMLCodeType;
    function GetHasServiceCategoryCode: Boolean;
    function GetServiceCategoryCode: IXMLCodeType;
    function GetDisbursementAmount: IXMLDisbursementAmountList;
    function GetAppliedAmount: IXMLAppliedAmountList;
    function GetHasAllowanceCharge: Boolean;
    function GetAllowanceCharge: IXMLTextType;
    function GetHasPayingPartyRoleCode: Boolean;
    function GetPayingPartyRoleCode: IXMLChargePayingPartyRoleCodeType;
    function GetHasCalculationBasisCode: Boolean;
    function GetCalculationBasisCode: IXMLLogisticsChargeCalculationBasisCodeType;
    function GetHasCalculationBasis: Boolean;
    function GetCalculationBasis: IXMLTextType;
    function GetHasTransportPaymentMethodCode: Boolean;
    function GetTransportPaymentMethodCode: IXMLCodeType;
    function GetHasPaymentPlaceLogisticsLocation: Boolean;
    function GetPaymentPlaceLogisticsLocation: IXMLLogisticsLocationType;
    function GetHasAppliedFromLogisticsLocation: Boolean;
    function GetAppliedFromLogisticsLocation: IXMLLogisticsLocationType;
    function GetHasAppliedToLogisticsLocation: Boolean;
    function GetAppliedToLogisticsLocation: IXMLLogisticsLocationType;
    function GetAppliedTradeTax: IXMLAppliedTradeTaxList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLFreightChargeTypeIDType read GetID;
    property Description: IXMLDescriptionList read GetDescription;
    property HasPaymentArrangementCode: Boolean read GetHasPaymentArrangementCode;
    property PaymentArrangementCode: IXMLTransportServicePaymentArrangementCodeType read GetPaymentArrangementCode;
    property HasTariffClassCode: Boolean read GetHasTariffClassCode;
    property TariffClassCode: IXMLFreightChargeTariffClassCodeType read GetTariffClassCode;
    property HasChargeCategoryCode: Boolean read GetHasChargeCategoryCode;
    property ChargeCategoryCode: IXMLCodeType read GetChargeCategoryCode;
    property HasServiceCategoryCode: Boolean read GetHasServiceCategoryCode;
    property ServiceCategoryCode: IXMLCodeType read GetServiceCategoryCode;
    property DisbursementAmount: IXMLDisbursementAmountList read GetDisbursementAmount;
    property AppliedAmount: IXMLAppliedAmountList read GetAppliedAmount;
    property HasAllowanceCharge: Boolean read GetHasAllowanceCharge;
    property AllowanceCharge: IXMLTextType read GetAllowanceCharge;
    property HasPayingPartyRoleCode: Boolean read GetHasPayingPartyRoleCode;
    property PayingPartyRoleCode: IXMLChargePayingPartyRoleCodeType read GetPayingPartyRoleCode;
    property HasCalculationBasisCode: Boolean read GetHasCalculationBasisCode;
    property CalculationBasisCode: IXMLLogisticsChargeCalculationBasisCodeType read GetCalculationBasisCode;
    property HasCalculationBasis: Boolean read GetHasCalculationBasis;
    property CalculationBasis: IXMLTextType read GetCalculationBasis;
    property HasTransportPaymentMethodCode: Boolean read GetHasTransportPaymentMethodCode;
    property TransportPaymentMethodCode: IXMLCodeType read GetTransportPaymentMethodCode;
    property HasPaymentPlaceLogisticsLocation: Boolean read GetHasPaymentPlaceLogisticsLocation;
    property PaymentPlaceLogisticsLocation: IXMLLogisticsLocationType read GetPaymentPlaceLogisticsLocation;
    property HasAppliedFromLogisticsLocation: Boolean read GetHasAppliedFromLogisticsLocation;
    property AppliedFromLogisticsLocation: IXMLLogisticsLocationType read GetAppliedFromLogisticsLocation;
    property HasAppliedToLogisticsLocation: Boolean read GetHasAppliedToLogisticsLocation;
    property AppliedToLogisticsLocation: IXMLLogisticsLocationType read GetAppliedToLogisticsLocation;
    property AppliedTradeTax: IXMLAppliedTradeTaxList read GetAppliedTradeTax;
  end;

  IXMLAppliedTradeTaxListEnumerator = interface
    ['{F55963DC-78AE-4F98-B3A6-7C35B11E8C1C}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Tax
  /// </summary>
  IXMLAppliedTradeTaxList = interface(IXMLNodeCollection)
    ['{3B27A19E-0C2F-4000-90AA-37B0C210ECC1}']
    function GetEnumerator: IXMLAppliedTradeTaxListEnumerator;

    function Get_AppliedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property AppliedTradeTax[Index: Integer]: IXMLTradeTaxType read Get_AppliedTradeTax; default;
  end;

  IXMLAppliedAmountListEnumerator = interface
    ['{53FA8CCA-ACB4-41AE-A573-A27184264AC6}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applied Amount
  /// </summary>
  IXMLAppliedAmountList = interface(IXMLNodeCollection)
    ['{8174EECD-F4F5-4D2A-AA91-65DE3F3D9267}']
    function GetEnumerator: IXMLAppliedAmountListEnumerator;

    function Get_AppliedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property AppliedAmount[Index: Integer]: IXMLAmountType read Get_AppliedAmount; default;
  end;

  IXMLDisbursementAmountListEnumerator = interface
    ['{B92DC47B-1979-4D9E-94E1-291505E85CD9}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Disbursement Amount
  /// </summary>
  IXMLDisbursementAmountList = interface(IXMLNodeCollection)
    ['{63C57267-BABE-4BA6-B7EC-D648576EE7A9}']
    function GetEnumerator: IXMLDisbursementAmountListEnumerator;

    function Get_DisbursementAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property DisbursementAmount[Index: Integer]: IXMLAmountType read Get_DisbursementAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Logistics Transport Equipment
  /// </summary>
  IXMLLogisticsTransportEquipmentType = interface(IXMLNode)
    ['{686CE13F-7F32-462E-A655-1BD75B297C1A}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasLoadingLengthMeasure: Boolean;
    function GetLoadingLengthMeasure: IXMLLinearUnitMeasureType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLTransportEquipmentCategoryCodeType;
    function GetHasCharacteristicCode: Boolean;
    function GetCharacteristicCode: IXMLCodeType;
    function GetHasCharacteristic: Boolean;
    function GetCharacteristic: IXMLTextType;
    function GetHasUsedCapacityCode: Boolean;
    function GetUsedCapacityCode: IXMLTransportEquipmentFullnessCodeType;
    function GetCarrierAssignedBookingID: IXMLCarrierAssignedBookingIDList;
    function GetHasSealedIndicator: Boolean;
    function GetSealedIndicator: IXMLIndicatorType;
    function GetHasReturnableIndicator: Boolean;
    function GetReturnableIndicator: IXMLIndicatorType;
    function GetAffixedLogisticsSeal: IXMLAffixedLogisticsSealList;
    function GetHasLinearSpatialDimension: Boolean;
    function GetLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetApplicableNote: IXMLApplicableNoteList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasLoadingLengthMeasure: Boolean read GetHasLoadingLengthMeasure;
    property LoadingLengthMeasure: IXMLLinearUnitMeasureType read GetLoadingLengthMeasure;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLTransportEquipmentCategoryCodeType read GetCategoryCode;
    property HasCharacteristicCode: Boolean read GetHasCharacteristicCode;
    property CharacteristicCode: IXMLCodeType read GetCharacteristicCode;
    property HasCharacteristic: Boolean read GetHasCharacteristic;
    property Characteristic: IXMLTextType read GetCharacteristic;
    property HasUsedCapacityCode: Boolean read GetHasUsedCapacityCode;
    property UsedCapacityCode: IXMLTransportEquipmentFullnessCodeType read GetUsedCapacityCode;
    property CarrierAssignedBookingID: IXMLCarrierAssignedBookingIDList read GetCarrierAssignedBookingID;
    property HasSealedIndicator: Boolean read GetHasSealedIndicator;
    property SealedIndicator: IXMLIndicatorType read GetSealedIndicator;
    property HasReturnableIndicator: Boolean read GetHasReturnableIndicator;
    property ReturnableIndicator: IXMLIndicatorType read GetReturnableIndicator;
    property AffixedLogisticsSeal: IXMLAffixedLogisticsSealList read GetAffixedLogisticsSeal;
    property HasLinearSpatialDimension: Boolean read GetHasLinearSpatialDimension;
    property LinearSpatialDimension: IXMLSpatialDimensionType read GetLinearSpatialDimension;
    property ApplicableNote: IXMLApplicableNoteList read GetApplicableNote;
  end;

  IXMLAffixedLogisticsSealListEnumerator = interface
    ['{183FBA37-E2FF-46FD-8D5D-B0EACCE5E1F1}']
    function GetCurrent: IXMLLogisticsSealType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsSealType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Affixed Seal
  /// </summary>
  IXMLAffixedLogisticsSealList = interface(IXMLNodeCollection)
    ['{B6F6073B-A690-4F0E-9A30-AF8F6CE996E0}']
    function GetEnumerator: IXMLAffixedLogisticsSealListEnumerator;

    function Get_AffixedLogisticsSeal(Index: Integer): IXMLLogisticsSealType;
    function Add: IXMLLogisticsSealType;
    function Insert(Index: Integer): IXMLLogisticsSealType;

    property AffixedLogisticsSeal[Index: Integer]: IXMLLogisticsSealType read Get_AffixedLogisticsSeal; default;
  end;

  IXMLCarrierAssignedBookingIDListEnumerator = interface
    ['{894E7EE7-9D08-45FF-87D7-F77289319B91}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Carrier Assigned Booking ID
  /// </summary>
  IXMLCarrierAssignedBookingIDList = interface(IXMLNodeCollection)
    ['{94DA457D-BE52-4120-9E58-1FACD87D2822}']
    function GetEnumerator: IXMLCarrierAssignedBookingIDListEnumerator;

    function Get_CarrierAssignedBookingID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property CarrierAssignedBookingID[Index: Integer]: IXMLIDType read Get_CarrierAssignedBookingID; default;
  end;

  /// <summary>
  ///    (BN/BN) Logistics Transport Means
  /// </summary>
  IXMLLogisticsTransportMeansType = interface(IXMLNode)
    ['{36B7AFCA-ED13-455B-9D93-E143E7730DC8}']
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLTransportMeansTypeCodeType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasOwnerTradeParty: Boolean;
    function GetOwnerTradeParty: IXMLTradePartyType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLTransportMeansTypeCodeType read GetTypeCode;
    property Has_Type: Boolean read GetHas_Type;
    property _Type: IXMLTextType read Get_Type;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasOwnerTradeParty: Boolean read GetHasOwnerTradeParty;
    property OwnerTradeParty: IXMLTradePartyType read GetOwnerTradeParty;
  end;

  /// <summary>
  ///    (BN/BN) Logistics Transport Movement
  /// </summary>
  IXMLLogisticsTransportMovementType = interface(IXMLNode)
    ['{4B5366D9-1633-427A-9FA2-711A3F254398}']
    function GetHasStageCode: Boolean;
    function GetStageCode: IXMLTransportMovementStageCodeType;
    function GetHasModeCode: Boolean;
    function GetModeCode: IXMLTransportModeCodeType;
    function GetHasMode: Boolean;
    function GetMode: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLStatusCodeType;
    function GetHasServiceCode: Boolean;
    function GetServiceCode: IXMLCodeType;
    function GetHasService: Boolean;
    function GetService: IXMLTextType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetHasCycle: Boolean;
    function GetCycle: IXMLTextType;
    function GetHasUsedLogisticsTransportMeans: Boolean;
    function GetUsedLogisticsTransportMeans: IXMLLogisticsTransportMeansType;

    property HasStageCode: Boolean read GetHasStageCode;
    property StageCode: IXMLTransportMovementStageCodeType read GetStageCode;
    property HasModeCode: Boolean read GetHasModeCode;
    property ModeCode: IXMLTransportModeCodeType read GetModeCode;
    property HasMode: Boolean read GetHasMode;
    property Mode: IXMLTextType read GetMode;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasStatusCode: Boolean read GetHasStatusCode;
    property StatusCode: IXMLStatusCodeType read GetStatusCode;
    property HasServiceCode: Boolean read GetHasServiceCode;
    property ServiceCode: IXMLCodeType read GetServiceCode;
    property HasService: Boolean read GetHasService;
    property Service: IXMLTextType read GetService;
    property Has_Type: Boolean read GetHas_Type;
    property _Type: IXMLTextType read Get_Type;
    property HasCycle: Boolean read GetHasCycle;
    property Cycle: IXMLTextType read GetCycle;
    property HasUsedLogisticsTransportMeans: Boolean read GetHasUsedLogisticsTransportMeans;
    property UsedLogisticsTransportMeans: IXMLLogisticsTransportMeansType read GetUsedLogisticsTransportMeans;
  end;

  IXMLMaterialGoodsCharacteristicTypeEnumerator = interface
    ['{CB8A1144-2E0B-48BD-BC33-87F5A589CE0E}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Material Goods Characteristic
  /// </summary>
  IXMLMaterialGoodsCharacteristicType = interface(IXMLNodeCollection)
    ['{9142FBEB-C447-49C5-9AFE-9AC74F94DC2D}']
    function GetEnumerator: IXMLMaterialGoodsCharacteristicTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Description[Index: Integer]: IXMLTextType read Get_Description; default;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasProportionalConstituentPercent: Boolean;
    function GetProportionalConstituentPercent: IXMLPercentType;
    function GetHasAbsolutePresenceWeightMeasure: Boolean;
    function GetAbsolutePresenceWeightMeasure: IXMLMeasureType;
    function GetHasAbsolutePresenceVolumeMeasure: Boolean;
    function GetAbsolutePresenceVolumeMeasure: IXMLMeasureType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasProportionalConstituentPercent: Boolean read GetHasProportionalConstituentPercent;
    property ProportionalConstituentPercent: IXMLPercentType read GetProportionalConstituentPercent;
    property HasAbsolutePresenceWeightMeasure: Boolean read GetHasAbsolutePresenceWeightMeasure;
    property AbsolutePresenceWeightMeasure: IXMLMeasureType read GetAbsolutePresenceWeightMeasure;
    property HasAbsolutePresenceVolumeMeasure: Boolean read GetHasAbsolutePresenceVolumeMeasure;
    property AbsolutePresenceVolumeMeasure: IXMLMeasureType read GetAbsolutePresenceVolumeMeasure;
  end;

  /// <summary>
  ///    (BN/BN) Note
  /// </summary>
  IXMLNoteType = interface(IXMLNode)
    ['{056F685C-028D-4DDE-8773-D0B4DE95029F}']
    function GetHasSubject: Boolean;
    function GetSubject: IXMLTextType;
    function GetHasContentCode: Boolean;
    function GetContentCode: IXMLCodeType;
    function GetContent: IXMLContentList;
    function GetSubjectCode: IXMLSubjectCodeList;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;

    property HasSubject: Boolean read GetHasSubject;
    property Subject: IXMLTextType read GetSubject;
    property HasContentCode: Boolean read GetHasContentCode;
    property ContentCode: IXMLCodeType read GetContentCode;
    property Content: IXMLContentList read GetContent;
    property SubjectCode: IXMLSubjectCodeList read GetSubjectCode;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
  end;

  IXMLSubjectCodeListEnumerator = interface
    ['{D0443FD3-A496-43B9-B488-BF67585AFA0F}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Subject Code
  /// </summary>
  IXMLSubjectCodeList = interface(IXMLNodeCollection)
    ['{A217F49F-65DB-4FB5-80FB-4086C35B78F7}']
    function GetEnumerator: IXMLSubjectCodeListEnumerator;

    function Get_SubjectCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property SubjectCode[Index: Integer]: IXMLCodeType read Get_SubjectCode; default;
  end;

  /// <summary>
  ///    (BN/BN) Packaging Marking
  /// </summary>
  IXMLPackagingMarkingType = interface(IXMLNode)
    ['{1364B57E-3941-490C-B899-4FC82817EB28}']
    function GetTypeCode: IXMLTypeCodeList;
    function GetContent: IXMLContentList;
    function GetHasContentDateTime: Boolean;
    function GetContentDateTime: IXMLDateTimeType;
    function GetContentAmount: IXMLContentAmountList;
    function GetBarcodeTypeCode: IXMLBarcodeTypeCodeList;
    function GetContentCode: IXMLContentCodeList;
    function GetAutomaticDataCaptureMethodTypeCode: IXMLAutomaticDataCaptureMethodTypeCodeList;

    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property Content: IXMLContentList read GetContent;
    property HasContentDateTime: Boolean read GetHasContentDateTime;
    property ContentDateTime: IXMLDateTimeType read GetContentDateTime;
    property ContentAmount: IXMLContentAmountList read GetContentAmount;
    property BarcodeTypeCode: IXMLBarcodeTypeCodeList read GetBarcodeTypeCode;
    property ContentCode: IXMLContentCodeList read GetContentCode;
    property AutomaticDataCaptureMethodTypeCode: IXMLAutomaticDataCaptureMethodTypeCodeList read GetAutomaticDataCaptureMethodTypeCode;
  end;

  IXMLAutomaticDataCaptureMethodTypeCodeListEnumerator = interface
    ['{40CE3DB2-F1A6-46DE-BCEE-A1BEF3E7E361}']
    function GetCurrent: IXMLAutomaticDataCaptureMethodCodeType;
    function MoveNext: Boolean;
    property Current: IXMLAutomaticDataCaptureMethodCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Automatic Data Capture Method Type Code
  /// </summary>
  IXMLAutomaticDataCaptureMethodTypeCodeList = interface(IXMLNodeCollection)
    ['{7B695020-C38F-43AA-8383-38AB810DE7CB}']
    function GetEnumerator: IXMLAutomaticDataCaptureMethodTypeCodeListEnumerator;

    function Get_AutomaticDataCaptureMethodTypeCode(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;
    function Add: IXMLAutomaticDataCaptureMethodCodeType;
    function Insert(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;

    property AutomaticDataCaptureMethodTypeCode[Index: Integer]: IXMLAutomaticDataCaptureMethodCodeType read Get_AutomaticDataCaptureMethodTypeCode; default;
  end;

  IXMLContentCodeListEnumerator = interface
    ['{44A52ECE-705F-4EC9-99C5-9BD7CB7D7A5D}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Content Code
  /// </summary>
  IXMLContentCodeList = interface(IXMLNodeCollection)
    ['{2B552161-3534-4442-874E-B6158F1AFD67}']
    function GetEnumerator: IXMLContentCodeListEnumerator;

    function Get_ContentCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property ContentCode[Index: Integer]: IXMLCodeType read Get_ContentCode; default;
  end;

  IXMLBarcodeTypeCodeListEnumerator = interface
    ['{93D16E8F-50DC-4166-99C6-43A1BD3ABD8D}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Barcode Type Code
  /// </summary>
  IXMLBarcodeTypeCodeList = interface(IXMLNodeCollection)
    ['{29D2DC58-67C6-485F-9ED7-C9D72ED1117A}']
    function GetEnumerator: IXMLBarcodeTypeCodeListEnumerator;

    function Get_BarcodeTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property BarcodeTypeCode[Index: Integer]: IXMLCodeType read Get_BarcodeTypeCode; default;
  end;

  IXMLContentAmountListEnumerator = interface
    ['{6E95A286-06B6-459B-A7BA-0A07795DA6F3}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Content Amount
  /// </summary>
  IXMLContentAmountList = interface(IXMLNodeCollection)
    ['{DFF8140E-56C1-4007-8578-9472BEE01A79}']
    function GetEnumerator: IXMLContentAmountListEnumerator;

    function Get_ContentAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ContentAmount[Index: Integer]: IXMLAmountType read Get_ContentAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Procuring Project
  /// </summary>
  IXMLProcuringProjectType = interface(IXMLNode)
    ['{2FA74AD1-05A2-444C-BB0E-D751EB128A35}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetName: IXMLTextType;

    property ID: IXMLIDType read GetID;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
    property Name: IXMLTextType read GetName;
  end;

  IXMLProductCharacteristicConditionTypeEnumerator = interface
    ['{213630D9-F5D2-4655-AB77-3F4F96EBB2A9}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Product Characteristic Condition
  /// </summary>
  IXMLProductCharacteristicConditionType = interface(IXMLNodeCollection)
    ['{573541C3-F0DC-4B02-A558-EB2AAADD56BD}']
    function GetEnumerator: IXMLProductCharacteristicConditionTypeEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Name[Index: Integer]: IXMLTextType read Get_Name; default;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasValueMeasure: Boolean read GetHasValueMeasure;
    property ValueMeasure: IXMLMeasureType read GetValueMeasure;
  end;

  /// <summary>
  ///    (BN/BN) Product Characteristic
  /// </summary>
  IXMLProductCharacteristicType = interface(IXMLNode)
    ['{9EB8E3A6-49C8-4F48-9076-90B4FCBC93DF}']
    function GetID: IXMLIDList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasMeasurementMethodCode: Boolean;
    function GetMeasurementMethodCode: IXMLCodeType;
    function GetValue: IXMLValueList;
    function GetHasValueCode: Boolean;
    function GetValueCode: IXMLCodeType;
    function GetHasValueDateTime: Boolean;
    function GetValueDateTime: IXMLDateTimeType;
    function GetHasValueIndicator: Boolean;
    function GetValueIndicator: IXMLIndicatorType;
    function GetHasContentTypeCode: Boolean;
    function GetContentTypeCode: IXMLCodeType;
    function GetHasValueSpecifiedBinaryFile: Boolean;
    function GetValueSpecifiedBinaryFile: IXMLSpecifiedBinaryFileType;
    function GetApplicableProductCharacteristicCondition: IXMLApplicableProductCharacteristicConditionList;
    function GetHasApplicableReferencedStandard: Boolean;
    function GetApplicableReferencedStandard: IXMLReferencedStandardType;

    property ID: IXMLIDList read GetID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property Description: IXMLDescriptionList read GetDescription;
    property HasValueMeasure: Boolean read GetHasValueMeasure;
    property ValueMeasure: IXMLMeasureType read GetValueMeasure;
    property HasMeasurementMethodCode: Boolean read GetHasMeasurementMethodCode;
    property MeasurementMethodCode: IXMLCodeType read GetMeasurementMethodCode;
    property Value: IXMLValueList read GetValue;
    property HasValueCode: Boolean read GetHasValueCode;
    property ValueCode: IXMLCodeType read GetValueCode;
    property HasValueDateTime: Boolean read GetHasValueDateTime;
    property ValueDateTime: IXMLDateTimeType read GetValueDateTime;
    property HasValueIndicator: Boolean read GetHasValueIndicator;
    property ValueIndicator: IXMLIndicatorType read GetValueIndicator;
    property HasContentTypeCode: Boolean read GetHasContentTypeCode;
    property ContentTypeCode: IXMLCodeType read GetContentTypeCode;
    property HasValueSpecifiedBinaryFile: Boolean read GetHasValueSpecifiedBinaryFile;
    property ValueSpecifiedBinaryFile: IXMLSpecifiedBinaryFileType read GetValueSpecifiedBinaryFile;
    property ApplicableProductCharacteristicCondition: IXMLApplicableProductCharacteristicConditionList read GetApplicableProductCharacteristicCondition;
    property HasApplicableReferencedStandard: Boolean read GetHasApplicableReferencedStandard;
    property ApplicableReferencedStandard: IXMLReferencedStandardType read GetApplicableReferencedStandard;
  end;

  IXMLApplicableProductCharacteristicConditionListEnumerator = interface
    ['{2F99EC38-11F2-422F-A73F-E6EF941AA3F1}']
    function GetCurrent: IXMLProductCharacteristicConditionType;
    function MoveNext: Boolean;
    property Current: IXMLProductCharacteristicConditionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applicable Condition
  /// </summary>
  IXMLApplicableProductCharacteristicConditionList = interface(IXMLNodeCollection)
    ['{B9457BE1-37FB-4584-8EED-7B543D6ECFE2}']
    function GetEnumerator: IXMLApplicableProductCharacteristicConditionListEnumerator;

    function Get_ApplicableProductCharacteristicCondition(Index: Integer): IXMLProductCharacteristicConditionType;
    function Add: IXMLProductCharacteristicConditionType;
    function Insert(Index: Integer): IXMLProductCharacteristicConditionType;

    property ApplicableProductCharacteristicCondition[Index: Integer]: IXMLProductCharacteristicConditionType read Get_ApplicableProductCharacteristicCondition; default;
  end;

  IXMLValueListEnumerator = interface
    ['{F09362E7-A80F-40FE-BC3D-DB09C27472E7}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Value Text
  /// </summary>
  IXMLValueList = interface(IXMLNodeCollection)
    ['{9A4C78E2-2795-47CA-BBEE-F13216133AB6}']
    function GetEnumerator: IXMLValueListEnumerator;

    function Get_Value(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Value[Index: Integer]: IXMLTextType read Get_Value; default;
  end;

  /// <summary>
  ///    (BN/BN) Product Classification
  /// </summary>
  IXMLProductClassificationType = interface(IXMLNode)
    ['{BE09032E-9012-482B-9C67-ECE5574A8AF6}']
    function GetHasSystemID: Boolean;
    function GetSystemID: IXMLIDType;
    function GetSystemName: IXMLSystemNameList;
    function GetHasClassCode: Boolean;
    function GetClassCode: IXMLCodeType;
    function GetClassName: IXMLClassNameList;
    function GetHasSubClassCode: Boolean;
    function GetSubClassCode: IXMLCodeType;
    function GetClassProductCharacteristic: IXMLClassProductCharacteristicList;
    function GetHasApplicableReferencedStandard: Boolean;
    function GetApplicableReferencedStandard: IXMLReferencedStandardType;

    property HasSystemID: Boolean read GetHasSystemID;
    property SystemID: IXMLIDType read GetSystemID;
    property SystemName: IXMLSystemNameList read GetSystemName;
    property HasClassCode: Boolean read GetHasClassCode;
    property ClassCode: IXMLCodeType read GetClassCode;
    property ClassName: IXMLClassNameList read GetClassName;
    property HasSubClassCode: Boolean read GetHasSubClassCode;
    property SubClassCode: IXMLCodeType read GetSubClassCode;
    property ClassProductCharacteristic: IXMLClassProductCharacteristicList read GetClassProductCharacteristic;
    property HasApplicableReferencedStandard: Boolean read GetHasApplicableReferencedStandard;
    property ApplicableReferencedStandard: IXMLReferencedStandardType read GetApplicableReferencedStandard;
  end;

  IXMLClassProductCharacteristicListEnumerator = interface
    ['{C489DD3D-BF09-4441-87BC-17B383870305}']
    function GetCurrent: IXMLProductCharacteristicType;
    function MoveNext: Boolean;
    property Current: IXMLProductCharacteristicType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Product Class Characteristic
  /// </summary>
  IXMLClassProductCharacteristicList = interface(IXMLNodeCollection)
    ['{EEB47E66-D578-47B6-BDD3-4D2D05425748}']
    function GetEnumerator: IXMLClassProductCharacteristicListEnumerator;

    function Get_ClassProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
    function Add: IXMLProductCharacteristicType;
    function Insert(Index: Integer): IXMLProductCharacteristicType;

    property ClassProductCharacteristic[Index: Integer]: IXMLProductCharacteristicType read Get_ClassProductCharacteristic; default;
  end;

  IXMLClassNameListEnumerator = interface
    ['{1E3B55CC-075E-415E-98FB-4CD3548FE621}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Class Name
  /// </summary>
  IXMLClassNameList = interface(IXMLNodeCollection)
    ['{AFD08E2C-6CE7-4FA3-9214-46F84DF4F0F2}']
    function GetEnumerator: IXMLClassNameListEnumerator;

    function Get_ClassName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property ClassName[Index: Integer]: IXMLTextType read Get_ClassName; default;
  end;

  IXMLSystemNameListEnumerator = interface
    ['{ADE5A8A9-D4EC-403F-AC7C-65004901566E}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) System Name
  /// </summary>
  IXMLSystemNameList = interface(IXMLNodeCollection)
    ['{B567F793-233F-4239-BD27-E81DD0814287}']
    function GetEnumerator: IXMLSystemNameListEnumerator;

    function Get_SystemName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property SystemName[Index: Integer]: IXMLTextType read Get_SystemName; default;
  end;

  /// <summary>
  ///    (BN/BN) Recorded Status
  /// </summary>
  IXMLRecordedStatusType = interface(IXMLNode)
    ['{E34C7307-E782-4E87-87AC-B3175DB2AB5E}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetConditionCode: IXMLCodeType;
    function GetHasChangerName: Boolean;
    function GetChangerName: IXMLTextType;
    function GetChangedDateTime: IXMLDateTimeType;

    property ConditionCode: IXMLCodeType read GetConditionCode;
    property HasChangerName: Boolean read GetHasChangerName;
    property ChangerName: IXMLTextType read GetChangerName;
    property ChangedDateTime: IXMLDateTimeType read GetChangedDateTime;
  end;

  /// <summary>
  ///    (BN/BN) Referenced Document
  /// </summary>
  IXMLReferencedDocumentType = interface(IXMLNode)
    ['{723A7D6A-A90A-40E6-95AA-B31B0F766F06}']
    function GetHasIssuerAssignedID: Boolean;
    function GetIssuerAssignedID: IXMLIDType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLDocumentStatusCodeType;
    function GetHasCopyIndicator: Boolean;
    function GetCopyIndicator: IXMLIndicatorType;
    function GetHasLineID: Boolean;
    function GetLineID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDocumentCodeType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasRevisionID: Boolean;
    function GetRevisionID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasReceiptDateTime: Boolean;
    function GetReceiptDateTime: IXMLDateTimeType;
    function GetAttachmentBinaryObject: IXMLAttachmentBinaryObjectList;
    function GetInformation: IXMLInformationList;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasReferenceTypeCode: Boolean;
    function GetReferenceTypeCode: IXMLReferenceCodeType;
    function GetSectionName: IXMLSectionNameList;
    function GetPreviousRevisionID: IXMLPreviousRevisionIDList;
    function GetHasFormattedIssueDateTime: Boolean;
    function GetFormattedIssueDateTime: IXMLFormattedDateTimeType;
    function GetHasPageID: Boolean;
    function GetPageID: IXMLIDType;
    function GetHasSubordinateLineID: Boolean;
    function GetSubordinateLineID: IXMLIDType;
    function GetSubtypeCode: IXMLSubtypeCodeList;
    function GetHasEffectiveSpecifiedPeriod: Boolean;
    function GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasIssuerTradeParty: Boolean;
    function GetIssuerTradeParty: IXMLTradePartyType;
    function GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
    function GetIncludedNote: IXMLIncludedNoteList;

    property HasIssuerAssignedID: Boolean read GetHasIssuerAssignedID;
    property IssuerAssignedID: IXMLIDType read GetIssuerAssignedID;
    property HasURIID: Boolean read GetHasURIID;
    property URIID: IXMLIDType read GetURIID;
    property HasStatusCode: Boolean read GetHasStatusCode;
    property StatusCode: IXMLDocumentStatusCodeType read GetStatusCode;
    property HasCopyIndicator: Boolean read GetHasCopyIndicator;
    property CopyIndicator: IXMLIndicatorType read GetCopyIndicator;
    property HasLineID: Boolean read GetHasLineID;
    property LineID: IXMLIDType read GetLineID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLDocumentCodeType read GetTypeCode;
    property HasGlobalID: Boolean read GetHasGlobalID;
    property GlobalID: IXMLIDType read GetGlobalID;
    property HasRevisionID: Boolean read GetHasRevisionID;
    property RevisionID: IXMLIDType read GetRevisionID;
    property Name: IXMLNameList read GetName;
    property HasReceiptDateTime: Boolean read GetHasReceiptDateTime;
    property ReceiptDateTime: IXMLDateTimeType read GetReceiptDateTime;
    property AttachmentBinaryObject: IXMLAttachmentBinaryObjectList read GetAttachmentBinaryObject;
    property Information: IXMLInformationList read GetInformation;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLCodeType read GetCategoryCode;
    property HasReferenceTypeCode: Boolean read GetHasReferenceTypeCode;
    property ReferenceTypeCode: IXMLReferenceCodeType read GetReferenceTypeCode;
    property SectionName: IXMLSectionNameList read GetSectionName;
    property PreviousRevisionID: IXMLPreviousRevisionIDList read GetPreviousRevisionID;
    property HasFormattedIssueDateTime: Boolean read GetHasFormattedIssueDateTime;
    property FormattedIssueDateTime: IXMLFormattedDateTimeType read GetFormattedIssueDateTime;
    property HasPageID: Boolean read GetHasPageID;
    property PageID: IXMLIDType read GetPageID;
    property HasSubordinateLineID: Boolean read GetHasSubordinateLineID;
    property SubordinateLineID: IXMLIDType read GetSubordinateLineID;
    property SubtypeCode: IXMLSubtypeCodeList read GetSubtypeCode;
    property HasEffectiveSpecifiedPeriod: Boolean read GetHasEffectiveSpecifiedPeriod;
    property EffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType read GetEffectiveSpecifiedPeriod;
    property HasIssuerTradeParty: Boolean read GetHasIssuerTradeParty;
    property IssuerTradeParty: IXMLTradePartyType read GetIssuerTradeParty;
    property AttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList read GetAttachedSpecifiedBinaryFile;
    property IncludedNote: IXMLIncludedNoteList read GetIncludedNote;
  end;

  IXMLIncludedNoteListEnumerator = interface
    ['{CFFA5A1E-B4B8-4543-A22C-C51A58686C2F}']
    function GetCurrent: IXMLNoteType;
    function MoveNext: Boolean;
    property Current: IXMLNoteType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Note
  /// </summary>
  IXMLIncludedNoteList = interface(IXMLNodeCollection)
    ['{75388280-A208-470E-9461-C023018DA493}']
    function GetEnumerator: IXMLIncludedNoteListEnumerator;

    function Get_IncludedNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;

    property IncludedNote[Index: Integer]: IXMLNoteType read Get_IncludedNote; default;
  end;

  IXMLAttachedSpecifiedBinaryFileListEnumerator = interface
    ['{130AF90D-7AEC-45E3-98C2-5648BA299930}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Attached Binary File
  /// </summary>
  IXMLAttachedSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{C6207A21-861D-44D3-8A3C-A183377E1E59}']
    function GetEnumerator: IXMLAttachedSpecifiedBinaryFileListEnumerator;

    function Get_AttachedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property AttachedSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_AttachedSpecifiedBinaryFile; default;
  end;

  IXMLSubtypeCodeListEnumerator = interface
    ['{2DA2B5E5-2D92-49A7-A13D-A944F6017E42}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Subtype Code
  /// </summary>
  IXMLSubtypeCodeList = interface(IXMLNodeCollection)
    ['{561FF786-266D-45FD-94F3-D3C4D78C537F}']
    function GetEnumerator: IXMLSubtypeCodeListEnumerator;

    function Get_SubtypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property SubtypeCode[Index: Integer]: IXMLCodeType read Get_SubtypeCode; default;
  end;

  IXMLPreviousRevisionIDListEnumerator = interface
    ['{AF5B726B-1888-4AE3-8E49-429205740411}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Previous Revision ID
  /// </summary>
  IXMLPreviousRevisionIDList = interface(IXMLNodeCollection)
    ['{0B0E892A-1C22-4406-9789-ADE4CFCD007D}']
    function GetEnumerator: IXMLPreviousRevisionIDListEnumerator;

    function Get_PreviousRevisionID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property PreviousRevisionID[Index: Integer]: IXMLIDType read Get_PreviousRevisionID; default;
  end;

  IXMLSectionNameListEnumerator = interface
    ['{C478C635-A7EB-4F6A-B470-EB4EE916C91B}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Section Name
  /// </summary>
  IXMLSectionNameList = interface(IXMLNodeCollection)
    ['{E2F9F7F8-E346-4FF8-BF82-7CDAEFB08098}']
    function GetEnumerator: IXMLSectionNameListEnumerator;

    function Get_SectionName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property SectionName[Index: Integer]: IXMLTextType read Get_SectionName; default;
  end;

  IXMLAttachmentBinaryObjectListEnumerator = interface
    ['{F9BFB1E1-3710-4471-B706-DA234974723C}']
    function GetCurrent: IXMLBinaryObjectType;
    function MoveNext: Boolean;
    property Current: IXMLBinaryObjectType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Attached Binary Object
  /// </summary>
  IXMLAttachmentBinaryObjectList = interface(IXMLNodeCollection)
    ['{80168A28-EF34-404A-BA7A-6F81C7F41141}']
    function GetEnumerator: IXMLAttachmentBinaryObjectListEnumerator;

    function Get_AttachmentBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;

    property AttachmentBinaryObject[Index: Integer]: IXMLBinaryObjectType read Get_AttachmentBinaryObject; default;
  end;

  /// <summary>
  ///    (BN/BN) Referenced Product
  /// </summary>
  IXMLReferencedProductType = interface(IXMLNode)
    ['{6A5F340B-84E7-437C-869C-FA17EC9E959E}']
    function GetID: IXMLIDList;
    function GetGlobalID: IXMLGlobalIDList;
    function GetHasSellerAssignedID: Boolean;
    function GetSellerAssignedID: IXMLIDType;
    function GetHasBuyerAssignedID: Boolean;
    function GetBuyerAssignedID: IXMLIDType;
    function GetManufacturerAssignedID: IXMLManufacturerAssignedIDList;
    function GetIndustryAssignedID: IXMLIndustryAssignedIDList;
    function GetName: IXMLNameList;
    function GetDescription: IXMLDescriptionList;
    function GetRelationshipTypeCode: IXMLRelationshipTypeCodeList;
    function GetUnitQuantity: IXMLUnitQuantityList;

    property ID: IXMLIDList read GetID;
    property GlobalID: IXMLGlobalIDList read GetGlobalID;
    property HasSellerAssignedID: Boolean read GetHasSellerAssignedID;
    property SellerAssignedID: IXMLIDType read GetSellerAssignedID;
    property HasBuyerAssignedID: Boolean read GetHasBuyerAssignedID;
    property BuyerAssignedID: IXMLIDType read GetBuyerAssignedID;
    property ManufacturerAssignedID: IXMLManufacturerAssignedIDList read GetManufacturerAssignedID;
    property IndustryAssignedID: IXMLIndustryAssignedIDList read GetIndustryAssignedID;
    property Name: IXMLNameList read GetName;
    property Description: IXMLDescriptionList read GetDescription;
    property RelationshipTypeCode: IXMLRelationshipTypeCodeList read GetRelationshipTypeCode;
    property UnitQuantity: IXMLUnitQuantityList read GetUnitQuantity;
  end;

  IXMLUnitQuantityListEnumerator = interface
    ['{BBEE4BBD-52BC-4AAD-8E66-A38EB3FD5A80}']
    function GetCurrent: IXMLQuantityType;
    function MoveNext: Boolean;
    property Current: IXMLQuantityType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Unit Quantity
  /// </summary>
  IXMLUnitQuantityList = interface(IXMLNodeCollection)
    ['{6406E43F-37EA-4190-A270-CD79F21C40E2}']
    function GetEnumerator: IXMLUnitQuantityListEnumerator;

    function Get_UnitQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;

    property UnitQuantity[Index: Integer]: IXMLQuantityType read Get_UnitQuantity; default;
  end;

  IXMLRelationshipTypeCodeListEnumerator = interface
    ['{B60EB009-F0F4-4714-B1C3-9BF8B9F7E50B}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Relationship Type Code
  /// </summary>
  IXMLRelationshipTypeCodeList = interface(IXMLNodeCollection)
    ['{87873BAC-1C6F-410F-A7E6-C5CA55DC8CF5}']
    function GetEnumerator: IXMLRelationshipTypeCodeListEnumerator;

    function Get_RelationshipTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property RelationshipTypeCode[Index: Integer]: IXMLCodeType read Get_RelationshipTypeCode; default;
  end;

  IXMLIndustryAssignedIDListEnumerator = interface
    ['{C1C3A5BD-CA4E-4D7F-B3A3-CB542C102CBA}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Industry Assigned ID
  /// </summary>
  IXMLIndustryAssignedIDList = interface(IXMLNodeCollection)
    ['{4047FEC9-F687-497F-8E48-C15F356E6009}']
    function GetEnumerator: IXMLIndustryAssignedIDListEnumerator;

    function Get_IndustryAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property IndustryAssignedID[Index: Integer]: IXMLIDType read Get_IndustryAssignedID; default;
  end;

  IXMLManufacturerAssignedIDListEnumerator = interface
    ['{9FEC240B-F36D-42CF-9562-4ABB192DBCBA}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Manufacturer Assigned ID
  /// </summary>
  IXMLManufacturerAssignedIDList = interface(IXMLNodeCollection)
    ['{06F0F6B5-BE7F-47DA-A938-1E0BBDD6D14E}']
    function GetEnumerator: IXMLManufacturerAssignedIDListEnumerator;

    function Get_ManufacturerAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property ManufacturerAssignedID[Index: Integer]: IXMLIDType read Get_ManufacturerAssignedID; default;
  end;

  /// <summary>
  ///    (BN/BN) Referenced Standard
  /// </summary>
  IXMLReferencedStandardType = interface(IXMLNode)
    ['{61A4B55A-CDD7-4BEA-B8A3-D70DF951D901}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasElementVersionID: Boolean;
    function GetElementVersionID: IXMLIDType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasPartID: Boolean;
    function GetPartID: IXMLIDType;
    function GetHasAgencyID: Boolean;
    function GetAgencyID: IXMLIDType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasVersionID: Boolean read GetHasVersionID;
    property VersionID: IXMLIDType read GetVersionID;
    property HasElementVersionID: Boolean read GetHasElementVersionID;
    property ElementVersionID: IXMLIDType read GetElementVersionID;
    property HasURIID: Boolean read GetHasURIID;
    property URIID: IXMLIDType read GetURIID;
    property HasPartID: Boolean read GetHasPartID;
    property PartID: IXMLIDType read GetPartID;
    property HasAgencyID: Boolean read GetHasAgencyID;
    property AgencyID: IXMLIDType read GetAgencyID;
  end;

  /// <summary>
  ///    (BN/BN) Reference Price
  /// </summary>
  IXMLReferencePriceType = interface(IXMLNode)
    ['{982DC5E4-A496-4867-B3F6-0645C9E5F681}']
    function GetHasChargeAmount: Boolean;
    function GetChargeAmount: IXMLAmountType;
    function GetBasisQuantity: IXMLBasisQuantityList;
    function GetNetPriceIndicator: IXMLNetPriceIndicatorList;
    function GetHasComparisonMethodCode: Boolean;
    function GetComparisonMethodCode: IXMLCodeType;

    property HasChargeAmount: Boolean read GetHasChargeAmount;
    property ChargeAmount: IXMLAmountType read GetChargeAmount;
    property BasisQuantity: IXMLBasisQuantityList read GetBasisQuantity;
    property NetPriceIndicator: IXMLNetPriceIndicatorList read GetNetPriceIndicator;
    property HasComparisonMethodCode: Boolean read GetHasComparisonMethodCode;
    property ComparisonMethodCode: IXMLCodeType read GetComparisonMethodCode;
  end;

  IXMLNetPriceIndicatorListEnumerator = interface
    ['{E5DDA7C9-F057-488F-9251-024A2CBF492D}']
    function GetCurrent: IXMLIndicatorType;
    function MoveNext: Boolean;
    property Current: IXMLIndicatorType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Price Indicator
  /// </summary>
  IXMLNetPriceIndicatorList = interface(IXMLNodeCollection)
    ['{29B94514-9CBE-449C-94AF-3B15BE94A9EB}']
    function GetEnumerator: IXMLNetPriceIndicatorListEnumerator;

    function Get_NetPriceIndicator(Index: Integer): IXMLIndicatorType;
    function Add: IXMLIndicatorType;
    function Insert(Index: Integer): IXMLIndicatorType;

    property NetPriceIndicator[Index: Integer]: IXMLIndicatorType read Get_NetPriceIndicator; default;
  end;

  IXMLBasisQuantityListEnumerator = interface
    ['{9F562252-2ABD-4F0A-AACD-F21768C3E7AC}']
    function GetCurrent: IXMLQuantityType;
    function MoveNext: Boolean;
    property Current: IXMLQuantityType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Basis Quantity
  /// </summary>
  IXMLBasisQuantityList = interface(IXMLNodeCollection)
    ['{08E20F46-FE05-46DD-AB8C-384380033C94}']
    function GetEnumerator: IXMLBasisQuantityListEnumerator;

    function Get_BasisQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;

    property BasisQuantity[Index: Integer]: IXMLQuantityType read Get_BasisQuantity; default;
  end;

  /// <summary>
  ///    (BN/BN) Registered Tax
  /// </summary>
  IXMLRegisteredTaxType = interface(IXMLNode)
    ['{3E09EB4A-8C06-457E-B44C-1BED9B7DCDF2}']
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasExemptionReasonCode: Boolean;
    function GetExemptionReasonCode: IXMLCodeType;
    function GetExemptionReason: IXMLExemptionReasonList;
    function GetHasCurrencyCode: Boolean;
    function GetCurrencyCode: IXMLCodeType;
    function GetJurisdiction: IXMLJurisdictionList;
    function GetDescription: IXMLDescriptionList;
    function GetHasCustomsDutyIndicator: Boolean;
    function GetCustomsDutyIndicator: IXMLIndicatorType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasExemptionReasonCode: Boolean read GetHasExemptionReasonCode;
    property ExemptionReasonCode: IXMLCodeType read GetExemptionReasonCode;
    property ExemptionReason: IXMLExemptionReasonList read GetExemptionReason;
    property HasCurrencyCode: Boolean read GetHasCurrencyCode;
    property CurrencyCode: IXMLCodeType read GetCurrencyCode;
    property Jurisdiction: IXMLJurisdictionList read GetJurisdiction;
    property Description: IXMLDescriptionList read GetDescription;
    property HasCustomsDutyIndicator: Boolean read GetHasCustomsDutyIndicator;
    property CustomsDutyIndicator: IXMLIndicatorType read GetCustomsDutyIndicator;
  end;

  IXMLExemptionReasonListEnumerator = interface
    ['{8E3C0CBC-9EEF-4D88-9B1A-AEEF0795AF77}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Exemption Reason Text
  /// </summary>
  IXMLExemptionReasonList = interface(IXMLNodeCollection)
    ['{6BF70F1F-B0BE-4A87-80EB-728507EA6EF5}']
    function GetEnumerator: IXMLExemptionReasonListEnumerator;

    function Get_ExemptionReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property ExemptionReason[Index: Integer]: IXMLTextType read Get_ExemptionReason; default;
  end;

  /// <summary>
  ///    (BN/BN) Returnable Asset Instructions
  /// </summary>
  IXMLReturnableAssetInstructionsType = interface(IXMLNode)
    ['{DDE5FBC5-1DA7-4767-BAF8-240CD18FBA67}']
    function GetMaterialID: IXMLMaterialIDList;
    function GetTermsAndConditionsDescription: IXMLTermsAndConditionsDescriptionList;
    function GetHasTermsAndConditionsDescriptionCode: Boolean;
    function GetTermsAndConditionsDescriptionCode: IXMLCodeType;
    function GetDepositValueSpecifiedAmount: IXMLDepositValueSpecifiedAmountList;
    function GetHasDepositValueValiditySpecifiedPeriod: Boolean;
    function GetDepositValueValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;

    property MaterialID: IXMLMaterialIDList read GetMaterialID;
    property TermsAndConditionsDescription: IXMLTermsAndConditionsDescriptionList read GetTermsAndConditionsDescription;
    property HasTermsAndConditionsDescriptionCode: Boolean read GetHasTermsAndConditionsDescriptionCode;
    property TermsAndConditionsDescriptionCode: IXMLCodeType read GetTermsAndConditionsDescriptionCode;
    property DepositValueSpecifiedAmount: IXMLDepositValueSpecifiedAmountList read GetDepositValueSpecifiedAmount;
    property HasDepositValueValiditySpecifiedPeriod: Boolean read GetHasDepositValueValiditySpecifiedPeriod;
    property DepositValueValiditySpecifiedPeriod: IXMLSpecifiedPeriodType read GetDepositValueValiditySpecifiedPeriod;
  end;

  IXMLDepositValueSpecifiedAmountListEnumerator = interface
    ['{5B9918C3-55E1-4715-AF48-5B2DE04F66B9}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Deposit Amount
  /// </summary>
  IXMLDepositValueSpecifiedAmountList = interface(IXMLNodeCollection)
    ['{A590C2AE-5158-47F5-AA5B-CAF4413C53FB}']
    function GetEnumerator: IXMLDepositValueSpecifiedAmountListEnumerator;

    function Get_DepositValueSpecifiedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property DepositValueSpecifiedAmount[Index: Integer]: IXMLAmountType read Get_DepositValueSpecifiedAmount; default;
  end;

  IXMLTermsAndConditionsDescriptionListEnumerator = interface
    ['{CE0CB88F-6FA9-4FA8-90D3-AAD162AE032D}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Terms And Conditions Text
  /// </summary>
  IXMLTermsAndConditionsDescriptionList = interface(IXMLNodeCollection)
    ['{692C19C4-66BF-40C3-8CDD-464EDC60E148}']
    function GetEnumerator: IXMLTermsAndConditionsDescriptionListEnumerator;

    function Get_TermsAndConditionsDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property TermsAndConditionsDescription[Index: Integer]: IXMLTextType read Get_TermsAndConditionsDescription; default;
  end;

  IXMLMaterialIDListEnumerator = interface
    ['{419F95B6-08A1-490A-B065-271F4B28F691}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Material ID
  /// </summary>
  IXMLMaterialIDList = interface(IXMLNodeCollection)
    ['{D4017C0B-942F-4FBD-B6F5-F28DAA8C82C1}']
    function GetEnumerator: IXMLMaterialIDListEnumerator;

    function Get_MaterialID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property MaterialID[Index: Integer]: IXMLIDType read Get_MaterialID; default;
  end;

  IXMLSpatialDimensionTypeEnumerator = interface
    ['{08384FF3-32B2-473B-A3FE-7462A02074E5}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Spatial Dimensions
  /// </summary>
  IXMLSpatialDimensionType = interface(IXMLNodeCollection)
    ['{26A02845-1B63-4D7C-A647-E8A8D5B96ECC}']
    function GetEnumerator: IXMLSpatialDimensionTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Description[Index: Integer]: IXMLTextType read Get_Description; default;

    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDimensionTypeCodeType;
    function GetHasWidthMeasure: Boolean;
    function GetWidthMeasure: IXMLMeasureType;
    function GetHasLengthMeasure: Boolean;
    function GetLengthMeasure: IXMLMeasureType;
    function GetHasHeightMeasure: Boolean;
    function GetHeightMeasure: IXMLMeasureType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasDiameterMeasure: Boolean;
    function GetDiameterMeasure: IXMLLinearUnitMeasureType;

    property HasValueMeasure: Boolean read GetHasValueMeasure;
    property ValueMeasure: IXMLMeasureType read GetValueMeasure;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLDimensionTypeCodeType read GetTypeCode;
    property HasWidthMeasure: Boolean read GetHasWidthMeasure;
    property WidthMeasure: IXMLMeasureType read GetWidthMeasure;
    property HasLengthMeasure: Boolean read GetHasLengthMeasure;
    property LengthMeasure: IXMLMeasureType read GetLengthMeasure;
    property HasHeightMeasure: Boolean read GetHasHeightMeasure;
    property HeightMeasure: IXMLMeasureType read GetHeightMeasure;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasDiameterMeasure: Boolean read GetHasDiameterMeasure;
    property DiameterMeasure: IXMLLinearUnitMeasureType read GetDiameterMeasure;
  end;

  /// <summary>
  ///    (BN/BN) Specification Query
  /// </summary>
  IXMLSpecificationQueryType = interface(IXMLNode)
    ['{AAA73FB8-92AA-45D7-9A15-540BF991072E}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetContent: IXMLTextType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;

    property ID: IXMLIDType read GetID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property Content: IXMLTextType read GetContent;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
  end;

  /// <summary>
  ///    (BN/BN) Specification Response
  /// </summary>
  IXMLSpecificationResponseType = interface(IXMLNode)
    ['{0395C885-AAA8-4CA1-82C7-214344644DB4}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasQueryID: Boolean;
    function GetQueryID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetContent: IXMLTextType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;

    property ID: IXMLIDType read GetID;
    property HasQueryID: Boolean read GetHasQueryID;
    property QueryID: IXMLIDType read GetQueryID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property Content: IXMLTextType read GetContent;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
  end;

  /// <summary>
  ///    (BN/BN) Binary File
  /// </summary>
  IXMLSpecifiedBinaryFileType = interface(IXMLNode)
    ['{D92713EA-C681-4CD7-8D58-9FE1F470AFC1}']
    function GetID: IXMLIDList;
    function GetTitle: IXMLTitleList;
    function GetAuthorName: IXMLAuthorNameList;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasFileName: Boolean;
    function GetFileName: IXMLTextType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasMIMECode: Boolean;
    function GetMIMECode: IXMLCodeType;
    function GetHasEncodingCode: Boolean;
    function GetEncodingCode: IXMLCodeType;
    function GetHasCharacterSetCode: Boolean;
    function GetCharacterSetCode: IXMLCodeType;
    function GetIncludedBinaryObject: IXMLIncludedBinaryObjectList;
    function GetAccess: IXMLAccessList;
    function GetDescription: IXMLDescriptionList;
    function GetHasSizeMeasure: Boolean;
    function GetSizeMeasure: IXMLMeasureType;
    function GetHasAccessAvailabilitySpecifiedPeriod: Boolean;
    function GetAccessAvailabilitySpecifiedPeriod: IXMLSpecifiedPeriodType;

    property ID: IXMLIDList read GetID;
    property Title: IXMLTitleList read GetTitle;
    property AuthorName: IXMLAuthorNameList read GetAuthorName;
    property HasVersionID: Boolean read GetHasVersionID;
    property VersionID: IXMLIDType read GetVersionID;
    property HasFileName: Boolean read GetHasFileName;
    property FileName: IXMLTextType read GetFileName;
    property HasURIID: Boolean read GetHasURIID;
    property URIID: IXMLIDType read GetURIID;
    property HasMIMECode: Boolean read GetHasMIMECode;
    property MIMECode: IXMLCodeType read GetMIMECode;
    property HasEncodingCode: Boolean read GetHasEncodingCode;
    property EncodingCode: IXMLCodeType read GetEncodingCode;
    property HasCharacterSetCode: Boolean read GetHasCharacterSetCode;
    property CharacterSetCode: IXMLCodeType read GetCharacterSetCode;
    property IncludedBinaryObject: IXMLIncludedBinaryObjectList read GetIncludedBinaryObject;
    property Access: IXMLAccessList read GetAccess;
    property Description: IXMLDescriptionList read GetDescription;
    property HasSizeMeasure: Boolean read GetHasSizeMeasure;
    property SizeMeasure: IXMLMeasureType read GetSizeMeasure;
    property HasAccessAvailabilitySpecifiedPeriod: Boolean read GetHasAccessAvailabilitySpecifiedPeriod;
    property AccessAvailabilitySpecifiedPeriod: IXMLSpecifiedPeriodType read GetAccessAvailabilitySpecifiedPeriod;
  end;

  IXMLAccessListEnumerator = interface
    ['{D38A8094-1D9A-4EF9-BA11-999C65038B3C}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Access Text
  /// </summary>
  IXMLAccessList = interface(IXMLNodeCollection)
    ['{895A171B-015D-44A4-B6EC-8616328DFD11}']
    function GetEnumerator: IXMLAccessListEnumerator;

    function Get_Access(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Access[Index: Integer]: IXMLTextType read Get_Access; default;
  end;

  IXMLIncludedBinaryObjectListEnumerator = interface
    ['{34A22F04-E29A-46ED-8D01-7DE85610FE69}']
    function GetCurrent: IXMLBinaryObjectType;
    function MoveNext: Boolean;
    property Current: IXMLBinaryObjectType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Binary Object
  /// </summary>
  IXMLIncludedBinaryObjectList = interface(IXMLNodeCollection)
    ['{5208AE74-D8A4-4218-8899-158976503BC5}']
    function GetEnumerator: IXMLIncludedBinaryObjectListEnumerator;

    function Get_IncludedBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;

    property IncludedBinaryObject[Index: Integer]: IXMLBinaryObjectType read Get_IncludedBinaryObject; default;
  end;

  IXMLAuthorNameListEnumerator = interface
    ['{13C564BE-3487-4602-AB51-55D5A2CBAFA5}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Author Name
  /// </summary>
  IXMLAuthorNameList = interface(IXMLNodeCollection)
    ['{9056BEA6-2F48-42F9-9BF0-EC1420B18334}']
    function GetEnumerator: IXMLAuthorNameListEnumerator;

    function Get_AuthorName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property AuthorName[Index: Integer]: IXMLTextType read Get_AuthorName; default;
  end;

  IXMLTitleListEnumerator = interface
    ['{27EAEA60-B5CB-4B65-AD50-5940E15DE8B9}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Title
  /// </summary>
  IXMLTitleList = interface(IXMLNodeCollection)
    ['{52532EA1-6B90-4DCF-8253-B1DEC2BF9248}']
    function GetEnumerator: IXMLTitleListEnumerator;

    function Get_Title(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Title[Index: Integer]: IXMLTextType read Get_Title; default;
  end;

  /// <summary>
  ///    (BN/BN) Marketplace
  /// </summary>
  IXMLSpecifiedMarketplaceType = interface(IXMLNode)
    ['{5EEB0AAE-DDF6-49E4-8A16-B74FCC85E18F}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasVirtualIndicator: Boolean;
    function GetVirtualIndicator: IXMLIndicatorType;
    function GetWebsiteURIID: IXMLWebsiteURIIDList;
    function GetHasSalesMethodCode: Boolean;
    function GetSalesMethodCode: IXMLCodeType;
    function GetOrderingAvailablePeriod: IXMLOrderingAvailablePeriodList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasVirtualIndicator: Boolean read GetHasVirtualIndicator;
    property VirtualIndicator: IXMLIndicatorType read GetVirtualIndicator;
    property WebsiteURIID: IXMLWebsiteURIIDList read GetWebsiteURIID;
    property HasSalesMethodCode: Boolean read GetHasSalesMethodCode;
    property SalesMethodCode: IXMLCodeType read GetSalesMethodCode;
    property OrderingAvailablePeriod: IXMLOrderingAvailablePeriodList read GetOrderingAvailablePeriod;
  end;

  IXMLOrderingAvailablePeriodListEnumerator = interface
    ['{8D83B47B-705C-4842-B253-43EF84AC3C7A}']
    function GetCurrent: IXMLAvailablePeriodType;
    function MoveNext: Boolean;
    property Current: IXMLAvailablePeriodType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Available Ordering Period
  /// </summary>
  IXMLOrderingAvailablePeriodList = interface(IXMLNodeCollection)
    ['{D33C4BC0-A9F3-432E-ADB8-748FB3DC4A3C}']
    function GetEnumerator: IXMLOrderingAvailablePeriodListEnumerator;

    function Get_OrderingAvailablePeriod(Index: Integer): IXMLAvailablePeriodType;
    function Add: IXMLAvailablePeriodType;
    function Insert(Index: Integer): IXMLAvailablePeriodType;

    property OrderingAvailablePeriod[Index: Integer]: IXMLAvailablePeriodType read Get_OrderingAvailablePeriod; default;
  end;

  IXMLWebsiteURIIDListEnumerator = interface
    ['{B1AAB390-AEBD-44C0-8BF7-CA1ED9C2F631}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Website
  /// </summary>
  IXMLWebsiteURIIDList = interface(IXMLNodeCollection)
    ['{61DF2706-740B-41BB-8417-073FC258AE06}']
    function GetEnumerator: IXMLWebsiteURIIDListEnumerator;

    function Get_WebsiteURIID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property WebsiteURIID[Index: Integer]: IXMLIDType read Get_WebsiteURIID; default;
  end;

  /// <summary>
  ///    (BN/BN) Period
  /// </summary>
  IXMLSpecifiedPeriodType = interface(IXMLNode)
    ['{19ADAB9F-40B5-4686-9D27-4C92EDC712DB}']
    function GetDurationMeasure: IXMLDurationMeasureList;
    function GetHasInclusiveIndicator: Boolean;
    function GetInclusiveIndicator: IXMLIndicatorType;
    function GetDescription: IXMLDescriptionList;
    function GetHasStartDateTime: Boolean;
    function GetStartDateTime: IXMLDateTimeType;
    function GetHasEndDateTime: Boolean;
    function GetEndDateTime: IXMLDateTimeType;
    function GetHasCompleteDateTime: Boolean;
    function GetCompleteDateTime: IXMLDateTimeType;
    function GetHasOpenIndicator: Boolean;
    function GetOpenIndicator: IXMLIndicatorType;
    function GetHasSeasonCode: Boolean;
    function GetSeasonCode: IXMLCodeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasSequenceNumeric: Boolean;
    function GetSequenceNumeric: IXMLNumericType;
    function GetHasStartDateFlexibilityCode: Boolean;
    function GetStartDateFlexibilityCode: IXMLCodeType;
    function GetHasContinuousIndicator: Boolean;
    function GetContinuousIndicator: IXMLIndicatorType;
    function GetHasPurposeCode: Boolean;
    function GetPurposeCode: IXMLCodeType;

    property DurationMeasure: IXMLDurationMeasureList read GetDurationMeasure;
    property HasInclusiveIndicator: Boolean read GetHasInclusiveIndicator;
    property InclusiveIndicator: IXMLIndicatorType read GetInclusiveIndicator;
    property Description: IXMLDescriptionList read GetDescription;
    property HasStartDateTime: Boolean read GetHasStartDateTime;
    property StartDateTime: IXMLDateTimeType read GetStartDateTime;
    property HasEndDateTime: Boolean read GetHasEndDateTime;
    property EndDateTime: IXMLDateTimeType read GetEndDateTime;
    property HasCompleteDateTime: Boolean read GetHasCompleteDateTime;
    property CompleteDateTime: IXMLDateTimeType read GetCompleteDateTime;
    property HasOpenIndicator: Boolean read GetHasOpenIndicator;
    property OpenIndicator: IXMLIndicatorType read GetOpenIndicator;
    property HasSeasonCode: Boolean read GetHasSeasonCode;
    property SeasonCode: IXMLCodeType read GetSeasonCode;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property Name: IXMLNameList read GetName;
    property HasSequenceNumeric: Boolean read GetHasSequenceNumeric;
    property SequenceNumeric: IXMLNumericType read GetSequenceNumeric;
    property HasStartDateFlexibilityCode: Boolean read GetHasStartDateFlexibilityCode;
    property StartDateFlexibilityCode: IXMLCodeType read GetStartDateFlexibilityCode;
    property HasContinuousIndicator: Boolean read GetHasContinuousIndicator;
    property ContinuousIndicator: IXMLIndicatorType read GetContinuousIndicator;
    property HasPurposeCode: Boolean read GetHasPurposeCode;
    property PurposeCode: IXMLCodeType read GetPurposeCode;
  end;

  IXMLDurationMeasureListEnumerator = interface
    ['{9C45ACE0-ED1A-4217-83D3-65822810F7C0}']
    function GetCurrent: IXMLMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Duration Measure
  /// </summary>
  IXMLDurationMeasureList = interface(IXMLNodeCollection)
    ['{8F0BD698-7E50-4148-B700-C4D133EB4DCF}']
    function GetEnumerator: IXMLDurationMeasureListEnumerator;

    function Get_DurationMeasure(Index: Integer): IXMLMeasureType;
    function Add: IXMLMeasureType;
    function Insert(Index: Integer): IXMLMeasureType;

    property DurationMeasure[Index: Integer]: IXMLMeasureType read Get_DurationMeasure; default;
  end;

  /// <summary>
  ///    (BN/BN) Subordinate Line Trade Agreement
  /// </summary>
  IXMLSubordinateLineTradeAgreementType = interface(IXMLNode)
    ['{6C2A6A46-71DD-4107-94F5-CD90496DA070}']
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetGrossPriceProductTradePrice: IXMLGrossPriceProductTradePriceList;
    function GetNetPriceProductTradePrice: IXMLNetPriceProductTradePriceList;

    property HasSellerOrderReferencedDocument: Boolean read GetHasSellerOrderReferencedDocument;
    property SellerOrderReferencedDocument: IXMLReferencedDocumentType read GetSellerOrderReferencedDocument;
    property HasBuyerOrderReferencedDocument: Boolean read GetHasBuyerOrderReferencedDocument;
    property BuyerOrderReferencedDocument: IXMLReferencedDocumentType read GetBuyerOrderReferencedDocument;
    property AdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList read GetAdditionalReferencedDocument;
    property GrossPriceProductTradePrice: IXMLGrossPriceProductTradePriceList read GetGrossPriceProductTradePrice;
    property NetPriceProductTradePrice: IXMLNetPriceProductTradePriceList read GetNetPriceProductTradePrice;
  end;

  IXMLNetPriceProductTradePriceListEnumerator = interface
    ['{3781A1C5-EEF6-43A0-9BCA-15C59342ED3D}']
    function GetCurrent: IXMLTradePriceType;
    function MoveNext: Boolean;
    property Current: IXMLTradePriceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Price
  /// </summary>
  IXMLNetPriceProductTradePriceList = interface(IXMLNodeCollection)
    ['{E5D7751E-CE12-48F6-B680-9A0EFF516048}']
    function GetEnumerator: IXMLNetPriceProductTradePriceListEnumerator;

    function Get_NetPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
    function Add: IXMLTradePriceType;
    function Insert(Index: Integer): IXMLTradePriceType;

    property NetPriceProductTradePrice[Index: Integer]: IXMLTradePriceType read Get_NetPriceProductTradePrice; default;
  end;

  IXMLGrossPriceProductTradePriceListEnumerator = interface
    ['{87A7185C-D096-4DDA-A43C-576687981AF2}']
    function GetCurrent: IXMLTradePriceType;
    function MoveNext: Boolean;
    property Current: IXMLTradePriceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Gross Price
  /// </summary>
  IXMLGrossPriceProductTradePriceList = interface(IXMLNodeCollection)
    ['{EAFC4D5D-A214-453A-ACAE-4317A8F5ED09}']
    function GetEnumerator: IXMLGrossPriceProductTradePriceListEnumerator;

    function Get_GrossPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
    function Add: IXMLTradePriceType;
    function Insert(Index: Integer): IXMLTradePriceType;

    property GrossPriceProductTradePrice[Index: Integer]: IXMLTradePriceType read Get_GrossPriceProductTradePrice; default;
  end;

  IXMLAdditionalReferencedDocumentListEnumerator = interface
    ['{C2C665CC-F829-4BE9-9B30-403E0D0C8990}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Additional Document
  /// </summary>
  IXMLAdditionalReferencedDocumentList = interface(IXMLNodeCollection)
    ['{2FB4AE25-A839-435B-B8D7-DDA0CCF496E4}']
    function GetEnumerator: IXMLAdditionalReferencedDocumentListEnumerator;

    function Get_AdditionalReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property AdditionalReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_AdditionalReferencedDocument; default;
  end;

  /// <summary>
  ///    (BN/BN) Subordinate Line Trade Delivery
  /// </summary>
  IXMLSubordinateLineTradeDeliveryType = interface(IXMLNode)
    ['{1CEED930-E737-4D32-B7BB-CE289004FB81}']
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetHasProductUnitQuantity: Boolean;
    function GetProductUnitQuantity: IXMLQuantityType;
    function GetHasPerPackageUnitQuantity: Boolean;
    function GetPerPackageUnitQuantity: IXMLQuantityType;
    function GetBilledQuantity: IXMLBilledQuantityList;
    function GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    function GetActualDeliverySupplyChainEvent: IXMLActualDeliverySupplyChainEventList;

    property HasPackageQuantity: Boolean read GetHasPackageQuantity;
    property PackageQuantity: IXMLQuantityType read GetPackageQuantity;
    property HasProductUnitQuantity: Boolean read GetHasProductUnitQuantity;
    property ProductUnitQuantity: IXMLQuantityType read GetProductUnitQuantity;
    property HasPerPackageUnitQuantity: Boolean read GetHasPerPackageUnitQuantity;
    property PerPackageUnitQuantity: IXMLQuantityType read GetPerPackageUnitQuantity;
    property BilledQuantity: IXMLBilledQuantityList read GetBilledQuantity;
    property IncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList read GetIncludedSupplyChainPackaging;
    property ActualDeliverySupplyChainEvent: IXMLActualDeliverySupplyChainEventList read GetActualDeliverySupplyChainEvent;
  end;

  IXMLActualDeliverySupplyChainEventListEnumerator = interface
    ['{EE6AA1DA-E4D0-4399-BB02-E6D2567280B1}']
    function GetCurrent: IXMLSupplyChainEventType;
    function MoveNext: Boolean;
    property Current: IXMLSupplyChainEventType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Actual Delivery Event
  /// </summary>
  IXMLActualDeliverySupplyChainEventList = interface(IXMLNodeCollection)
    ['{BF71882C-3D76-4E14-9F4F-26C7679EA028}']
    function GetEnumerator: IXMLActualDeliverySupplyChainEventListEnumerator;

    function Get_ActualDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
    function Add: IXMLSupplyChainEventType;
    function Insert(Index: Integer): IXMLSupplyChainEventType;

    property ActualDeliverySupplyChainEvent[Index: Integer]: IXMLSupplyChainEventType read Get_ActualDeliverySupplyChainEvent; default;
  end;

  IXMLIncludedSupplyChainPackagingListEnumerator = interface
    ['{DE211067-9A60-463B-89AD-311381063E82}']
    function GetCurrent: IXMLSupplyChainPackagingType;
    function MoveNext: Boolean;
    property Current: IXMLSupplyChainPackagingType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Packaging
  /// </summary>
  IXMLIncludedSupplyChainPackagingList = interface(IXMLNodeCollection)
    ['{35BD005F-29EC-4ED5-B856-3403AC52C3EF}']
    function GetEnumerator: IXMLIncludedSupplyChainPackagingListEnumerator;

    function Get_IncludedSupplyChainPackaging(Index: Integer): IXMLSupplyChainPackagingType;
    function Add: IXMLSupplyChainPackagingType;
    function Insert(Index: Integer): IXMLSupplyChainPackagingType;

    property IncludedSupplyChainPackaging[Index: Integer]: IXMLSupplyChainPackagingType read Get_IncludedSupplyChainPackaging; default;
  end;

  IXMLBilledQuantityListEnumerator = interface
    ['{ADAEF9F6-5942-44BA-ABF5-EA5CBD20929B}']
    function GetCurrent: IXMLQuantityType;
    function MoveNext: Boolean;
    property Current: IXMLQuantityType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Billed Quantity
  /// </summary>
  IXMLBilledQuantityList = interface(IXMLNodeCollection)
    ['{05ECB5EA-27D9-49EB-A192-7CDF987C8FA2}']
    function GetEnumerator: IXMLBilledQuantityListEnumerator;

    function Get_BilledQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;

    property BilledQuantity[Index: Integer]: IXMLQuantityType read Get_BilledQuantity; default;
  end;

  /// <summary>
  ///    (BN/BN) Subordinate Line Trade Settlement
  /// </summary>
  IXMLSubordinateLineTradeSettlementType = interface(IXMLNode)
    ['{C9F170C8-35BD-4325-9949-90368F74A588}']
    function GetHasAmountDirectionCode: Boolean;
    function GetAmountDirectionCode: IXMLCodeType;
    function GetHasApplicableTradeTax: Boolean;
    function GetApplicableTradeTax: IXMLTradeTaxType;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;

    property HasAmountDirectionCode: Boolean read GetHasAmountDirectionCode;
    property AmountDirectionCode: IXMLCodeType read GetAmountDirectionCode;
    property HasApplicableTradeTax: Boolean read GetHasApplicableTradeTax;
    property ApplicableTradeTax: IXMLTradeTaxType read GetApplicableTradeTax;
    property InvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList read GetInvoiceReferencedDocument;
    property SpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList read GetSpecifiedFinancialAdjustment;
    property SpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList read GetSpecifiedTradeAllowanceCharge;
  end;

  IXMLSpecifiedTradeAllowanceChargeListEnumerator = interface
    ['{121236DD-95CE-4DE6-9B91-A5CB73665221}']
    function GetCurrent: IXMLTradeAllowanceChargeType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAllowanceChargeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Specified Allowance Charge
  /// </summary>
  IXMLSpecifiedTradeAllowanceChargeList = interface(IXMLNodeCollection)
    ['{CA8AACAC-B0CF-4B75-A78C-2019DF6029E2}']
    function GetEnumerator: IXMLSpecifiedTradeAllowanceChargeListEnumerator;

    function Get_SpecifiedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
    function Add: IXMLTradeAllowanceChargeType;
    function Insert(Index: Integer): IXMLTradeAllowanceChargeType;

    property SpecifiedTradeAllowanceCharge[Index: Integer]: IXMLTradeAllowanceChargeType read Get_SpecifiedTradeAllowanceCharge; default;
  end;

  IXMLSpecifiedFinancialAdjustmentListEnumerator = interface
    ['{0930D7E0-C79F-4FD5-99C6-7FB3E2A3D065}']
    function GetCurrent: IXMLFinancialAdjustmentType;
    function MoveNext: Boolean;
    property Current: IXMLFinancialAdjustmentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Specified Financial Adjustment
  /// </summary>
  IXMLSpecifiedFinancialAdjustmentList = interface(IXMLNodeCollection)
    ['{0AE72FDC-F738-4D82-87C9-B1D14490A353}']
    function GetEnumerator: IXMLSpecifiedFinancialAdjustmentListEnumerator;

    function Get_SpecifiedFinancialAdjustment(Index: Integer): IXMLFinancialAdjustmentType;
    function Add: IXMLFinancialAdjustmentType;
    function Insert(Index: Integer): IXMLFinancialAdjustmentType;

    property SpecifiedFinancialAdjustment[Index: Integer]: IXMLFinancialAdjustmentType read Get_SpecifiedFinancialAdjustment; default;
  end;

  IXMLInvoiceReferencedDocumentListEnumerator = interface
    ['{7CFAF158-C6F5-4D59-93F3-EB763A046E06}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Invoice Document
  /// </summary>
  IXMLInvoiceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{7CC74425-8458-4E3D-8CBC-405A4DB72F43}']
    function GetEnumerator: IXMLInvoiceReferencedDocumentListEnumerator;

    function Get_InvoiceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property InvoiceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_InvoiceReferencedDocument; default;
  end;

  /// <summary>
  ///    (BN/BN) Subordinate Location
  /// </summary>
  IXMLSubordinateLocationType = interface(IXMLNode)
    ['{DAC68FF6-2E8B-4000-B173-D235034A6EAF}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLLocationFunctionCodeType;
    function GetHasPhysicalGeographicalCoordinate: Boolean;
    function GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLLocationFunctionCodeType read GetTypeCode;
    property HasPhysicalGeographicalCoordinate: Boolean read GetHasPhysicalGeographicalCoordinate;
    property PhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType read GetPhysicalGeographicalCoordinate;
  end;

  /// <summary>
  ///    (BN/BN) Subordinate Trade Line Item
  /// </summary>
  IXMLSubordinateTradeLineItemType = interface(IXMLNode)
    ['{5C6558B9-8977-4B45-AC6F-63AAC2694602}']
    function GetID: IXMLIDList;
    function GetHasResponseReasonCode: Boolean;
    function GetResponseReasonCode: IXMLCodeType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasSpecifiedReferencedProduct: Boolean;
    function GetSpecifiedReferencedProduct: IXMLReferencedProductType;
    function GetApplicableTradeProduct: IXMLApplicableTradeProductList;
    function GetHasSpecifiedSubordinateLineTradeAgreement: Boolean;
    function GetSpecifiedSubordinateLineTradeAgreement: IXMLSubordinateLineTradeAgreementType;
    function GetHasSpecifiedSubordinateLineTradeDelivery: Boolean;
    function GetSpecifiedSubordinateLineTradeDelivery: IXMLSubordinateLineTradeDeliveryType;
    function GetHasSpecifiedSubordinateLineTradeSettlement: Boolean;
    function GetSpecifiedSubordinateLineTradeSettlement: IXMLSubordinateLineTradeSettlementType;

    property ID: IXMLIDList read GetID;
    property HasResponseReasonCode: Boolean read GetHasResponseReasonCode;
    property ResponseReasonCode: IXMLCodeType read GetResponseReasonCode;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLCodeType read GetCategoryCode;
    property HasSpecifiedReferencedProduct: Boolean read GetHasSpecifiedReferencedProduct;
    property SpecifiedReferencedProduct: IXMLReferencedProductType read GetSpecifiedReferencedProduct;
    property ApplicableTradeProduct: IXMLApplicableTradeProductList read GetApplicableTradeProduct;
    property HasSpecifiedSubordinateLineTradeAgreement: Boolean read GetHasSpecifiedSubordinateLineTradeAgreement;
    property SpecifiedSubordinateLineTradeAgreement: IXMLSubordinateLineTradeAgreementType read GetSpecifiedSubordinateLineTradeAgreement;
    property HasSpecifiedSubordinateLineTradeDelivery: Boolean read GetHasSpecifiedSubordinateLineTradeDelivery;
    property SpecifiedSubordinateLineTradeDelivery: IXMLSubordinateLineTradeDeliveryType read GetSpecifiedSubordinateLineTradeDelivery;
    property HasSpecifiedSubordinateLineTradeSettlement: Boolean read GetHasSpecifiedSubordinateLineTradeSettlement;
    property SpecifiedSubordinateLineTradeSettlement: IXMLSubordinateLineTradeSettlementType read GetSpecifiedSubordinateLineTradeSettlement;
  end;

  IXMLApplicableTradeProductListEnumerator = interface
    ['{885EE8C7-F751-4437-AC1E-D8C96AED6C54}']
    function GetCurrent: IXMLTradeProductType;
    function MoveNext: Boolean;
    property Current: IXMLTradeProductType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applicable Product
  /// </summary>
  IXMLApplicableTradeProductList = interface(IXMLNodeCollection)
    ['{85C4B39B-B16B-4FD8-86AD-83E7A2EF87EE}']
    function GetEnumerator: IXMLApplicableTradeProductListEnumerator;

    function Get_ApplicableTradeProduct(Index: Integer): IXMLTradeProductType;
    function Add: IXMLTradeProductType;
    function Insert(Index: Integer): IXMLTradeProductType;

    property ApplicableTradeProduct[Index: Integer]: IXMLTradeProductType read Get_ApplicableTradeProduct; default;
  end;

  /// <summary>
  ///    (BN/BN) Supply Chain Consignment Item
  /// </summary>
  IXMLSupplyChainConsignmentItemType = interface(IXMLNode)
    ['{3ADE8FF3-F886-4D60-9033-8E8295848FCB}']
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLGoodsTypeCodeType;
    function GetHasTypeExtensionCode: Boolean;
    function GetTypeExtensionCode: IXMLGoodsTypeExtensionCodeType;
    function GetHasDeclaredValueForCustomsAmount: Boolean;
    function GetDeclaredValueForCustomsAmount: IXMLAmountType;
    function GetHasDeclaredValueForStatisticsAmount: Boolean;
    function GetDeclaredValueForStatisticsAmount: IXMLAmountType;
    function GetInvoiceAmount: IXMLInvoiceAmountList;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasTariffQuantity: Boolean;
    function GetTariffQuantity: IXMLQuantityType;
    function GetGlobalID: IXMLGlobalIDList;
    function GetHasNatureIdentificationTransportCargo: Boolean;
    function GetNatureIdentificationTransportCargo: IXMLTransportCargoType;
    function GetApplicableTransportDangerousGoods: IXMLApplicableTransportDangerousGoodsList;
    function GetPreviousAdministrativeReferencedDocument: IXMLPreviousAdministrativeReferencedDocumentList;
    function GetApplicableNote: IXMLApplicableNoteList;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLGoodsTypeCodeType read GetTypeCode;
    property HasTypeExtensionCode: Boolean read GetHasTypeExtensionCode;
    property TypeExtensionCode: IXMLGoodsTypeExtensionCodeType read GetTypeExtensionCode;
    property HasDeclaredValueForCustomsAmount: Boolean read GetHasDeclaredValueForCustomsAmount;
    property DeclaredValueForCustomsAmount: IXMLAmountType read GetDeclaredValueForCustomsAmount;
    property HasDeclaredValueForStatisticsAmount: Boolean read GetHasDeclaredValueForStatisticsAmount;
    property DeclaredValueForStatisticsAmount: IXMLAmountType read GetDeclaredValueForStatisticsAmount;
    property InvoiceAmount: IXMLInvoiceAmountList read GetInvoiceAmount;
    property HasGrossWeightMeasure: Boolean read GetHasGrossWeightMeasure;
    property GrossWeightMeasure: IXMLWeightUnitMeasureType read GetGrossWeightMeasure;
    property HasNetWeightMeasure: Boolean read GetHasNetWeightMeasure;
    property NetWeightMeasure: IXMLWeightUnitMeasureType read GetNetWeightMeasure;
    property HasTariffQuantity: Boolean read GetHasTariffQuantity;
    property TariffQuantity: IXMLQuantityType read GetTariffQuantity;
    property GlobalID: IXMLGlobalIDList read GetGlobalID;
    property HasNatureIdentificationTransportCargo: Boolean read GetHasNatureIdentificationTransportCargo;
    property NatureIdentificationTransportCargo: IXMLTransportCargoType read GetNatureIdentificationTransportCargo;
    property ApplicableTransportDangerousGoods: IXMLApplicableTransportDangerousGoodsList read GetApplicableTransportDangerousGoods;
    property PreviousAdministrativeReferencedDocument: IXMLPreviousAdministrativeReferencedDocumentList read GetPreviousAdministrativeReferencedDocument;
    property ApplicableNote: IXMLApplicableNoteList read GetApplicableNote;
  end;

  IXMLApplicableNoteListEnumerator = interface
    ['{F258DBEB-8FAA-476D-B231-92CBC39EE215}']
    function GetCurrent: IXMLNoteType;
    function MoveNext: Boolean;
    property Current: IXMLNoteType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applicable Note
  /// </summary>
  IXMLApplicableNoteList = interface(IXMLNodeCollection)
    ['{E45A65B8-BFD1-4667-A2AB-35B560EDCA00}']
    function GetEnumerator: IXMLApplicableNoteListEnumerator;

    function Get_ApplicableNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;

    property ApplicableNote[Index: Integer]: IXMLNoteType read Get_ApplicableNote; default;
  end;

  IXMLPreviousAdministrativeReferencedDocumentListEnumerator = interface
    ['{8C22B051-F0BF-496F-98D8-FD6204C48F94}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Previous Administrative Document
  /// </summary>
  IXMLPreviousAdministrativeReferencedDocumentList = interface(IXMLNodeCollection)
    ['{01546D67-4FE5-4129-93EF-CE591E2FF94B}']
    function GetEnumerator: IXMLPreviousAdministrativeReferencedDocumentListEnumerator;

    function Get_PreviousAdministrativeReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property PreviousAdministrativeReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_PreviousAdministrativeReferencedDocument; default;
  end;

  IXMLApplicableTransportDangerousGoodsListEnumerator = interface
    ['{8F6065E8-DD7B-4A98-AE91-3B8B9D71C306}']
    function GetCurrent: IXMLTransportDangerousGoodsType;
    function MoveNext: Boolean;
    property Current: IXMLTransportDangerousGoodsType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Transport Dangerous Goods
  /// </summary>
  IXMLApplicableTransportDangerousGoodsList = interface(IXMLNodeCollection)
    ['{FA718123-3FAD-4794-BF80-A7E76D2A891B}']
    function GetEnumerator: IXMLApplicableTransportDangerousGoodsListEnumerator;

    function Get_ApplicableTransportDangerousGoods(Index: Integer): IXMLTransportDangerousGoodsType;
    function Add: IXMLTransportDangerousGoodsType;
    function Insert(Index: Integer): IXMLTransportDangerousGoodsType;

    property ApplicableTransportDangerousGoods[Index: Integer]: IXMLTransportDangerousGoodsType read Get_ApplicableTransportDangerousGoods; default;
  end;

  IXMLInvoiceAmountListEnumerator = interface
    ['{3008B5DC-AB73-4501-9245-DD0C462D03C8}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Invoice Amount
  /// </summary>
  IXMLInvoiceAmountList = interface(IXMLNodeCollection)
    ['{F40E9F4A-820A-4C22-BAE5-A4C0727BA237}']
    function GetEnumerator: IXMLInvoiceAmountListEnumerator;

    function Get_InvoiceAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property InvoiceAmount[Index: Integer]: IXMLAmountType read Get_InvoiceAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Supply Chain Consignment
  /// </summary>
  IXMLSupplyChainConsignmentType = interface(IXMLNode)
    ['{62D0B3F8-241A-4E51-A695-BDE18D260B1D}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetGrossWeightMeasure: IXMLGrossWeightMeasureList;
    function GetNetWeightMeasure: IXMLNetWeightMeasureList;
    function GetGrossVolumeMeasure: IXMLGrossVolumeMeasureList;
    function GetHasChargeableWeightMeasure: Boolean;
    function GetChargeableWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasInsurancePremiumAmount: Boolean;
    function GetInsurancePremiumAmount: IXMLAmountType;
    function GetAssociatedInvoiceAmount: IXMLAssociatedInvoiceAmountList;
    function GetHasTotalChargeAmount: Boolean;
    function GetTotalChargeAmount: IXMLAmountType;
    function GetHasDeclaredValueForCustomsAmount: Boolean;
    function GetDeclaredValueForCustomsAmount: IXMLAmountType;
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetNetVolumeMeasure: IXMLNetVolumeMeasureList;
    function GetHasConsignorTradeParty: Boolean;
    function GetConsignorTradeParty: IXMLTradePartyType;
    function GetHasConsigneeTradeParty: Boolean;
    function GetConsigneeTradeParty: IXMLTradePartyType;
    function GetHasCarrierTradeParty: Boolean;
    function GetCarrierTradeParty: IXMLTradePartyType;
    function GetHasFreightForwarderTradeParty: Boolean;
    function GetFreightForwarderTradeParty: IXMLTradePartyType;
    function GetHasDeliveryTradeParty: Boolean;
    function GetDeliveryTradeParty: IXMLTradePartyType;
    function GetHasCustomsImportAgentTradeParty: Boolean;
    function GetCustomsImportAgentTradeParty: IXMLTradePartyType;
    function GetHasCustomsExportAgentTradeParty: Boolean;
    function GetCustomsExportAgentTradeParty: IXMLTradePartyType;
    function GetGroupingCentreTradeParty: IXMLGroupingCentreTradePartyList;
    function GetTransitLogisticsLocation: IXMLTransitLogisticsLocationList;
    function GetHasTransportContractReferencedDocument: Boolean;
    function GetTransportContractReferencedDocument: IXMLReferencedDocumentType;
    function GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
    function GetIncludedSupplyChainConsignmentItem: IXMLIncludedSupplyChainConsignmentItemList;
    function GetUtilizedLogisticsTransportEquipment: IXMLUtilizedLogisticsTransportEquipmentList;
    function GetSpecifiedLogisticsTransportMovement: IXMLSpecifiedLogisticsTransportMovementList;
    function GetHasApplicableTransportCargoInsurance: Boolean;
    function GetApplicableTransportCargoInsurance: IXMLTransportCargoInsuranceType;
    function GetApplicableCrossBorderRegulatoryProcedure: IXMLApplicableCrossBorderRegulatoryProcedureList;
    function GetApplicableCrossBorderCustomsValuation: IXMLApplicableCrossBorderCustomsValuationList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property GrossWeightMeasure: IXMLGrossWeightMeasureList read GetGrossWeightMeasure;
    property NetWeightMeasure: IXMLNetWeightMeasureList read GetNetWeightMeasure;
    property GrossVolumeMeasure: IXMLGrossVolumeMeasureList read GetGrossVolumeMeasure;
    property HasChargeableWeightMeasure: Boolean read GetHasChargeableWeightMeasure;
    property ChargeableWeightMeasure: IXMLWeightUnitMeasureType read GetChargeableWeightMeasure;
    property HasInsurancePremiumAmount: Boolean read GetHasInsurancePremiumAmount;
    property InsurancePremiumAmount: IXMLAmountType read GetInsurancePremiumAmount;
    property AssociatedInvoiceAmount: IXMLAssociatedInvoiceAmountList read GetAssociatedInvoiceAmount;
    property HasTotalChargeAmount: Boolean read GetHasTotalChargeAmount;
    property TotalChargeAmount: IXMLAmountType read GetTotalChargeAmount;
    property HasDeclaredValueForCustomsAmount: Boolean read GetHasDeclaredValueForCustomsAmount;
    property DeclaredValueForCustomsAmount: IXMLAmountType read GetDeclaredValueForCustomsAmount;
    property HasPackageQuantity: Boolean read GetHasPackageQuantity;
    property PackageQuantity: IXMLQuantityType read GetPackageQuantity;
    property NetVolumeMeasure: IXMLNetVolumeMeasureList read GetNetVolumeMeasure;
    property HasConsignorTradeParty: Boolean read GetHasConsignorTradeParty;
    property ConsignorTradeParty: IXMLTradePartyType read GetConsignorTradeParty;
    property HasConsigneeTradeParty: Boolean read GetHasConsigneeTradeParty;
    property ConsigneeTradeParty: IXMLTradePartyType read GetConsigneeTradeParty;
    property HasCarrierTradeParty: Boolean read GetHasCarrierTradeParty;
    property CarrierTradeParty: IXMLTradePartyType read GetCarrierTradeParty;
    property HasFreightForwarderTradeParty: Boolean read GetHasFreightForwarderTradeParty;
    property FreightForwarderTradeParty: IXMLTradePartyType read GetFreightForwarderTradeParty;
    property HasDeliveryTradeParty: Boolean read GetHasDeliveryTradeParty;
    property DeliveryTradeParty: IXMLTradePartyType read GetDeliveryTradeParty;
    property HasCustomsImportAgentTradeParty: Boolean read GetHasCustomsImportAgentTradeParty;
    property CustomsImportAgentTradeParty: IXMLTradePartyType read GetCustomsImportAgentTradeParty;
    property HasCustomsExportAgentTradeParty: Boolean read GetHasCustomsExportAgentTradeParty;
    property CustomsExportAgentTradeParty: IXMLTradePartyType read GetCustomsExportAgentTradeParty;
    property GroupingCentreTradeParty: IXMLGroupingCentreTradePartyList read GetGroupingCentreTradeParty;
    property TransitLogisticsLocation: IXMLTransitLogisticsLocationList read GetTransitLogisticsLocation;
    property HasTransportContractReferencedDocument: Boolean read GetHasTransportContractReferencedDocument;
    property TransportContractReferencedDocument: IXMLReferencedDocumentType read GetTransportContractReferencedDocument;
    property AssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList read GetAssociatedReferencedDocument;
    property IncludedSupplyChainConsignmentItem: IXMLIncludedSupplyChainConsignmentItemList read GetIncludedSupplyChainConsignmentItem;
    property UtilizedLogisticsTransportEquipment: IXMLUtilizedLogisticsTransportEquipmentList read GetUtilizedLogisticsTransportEquipment;
    property SpecifiedLogisticsTransportMovement: IXMLSpecifiedLogisticsTransportMovementList read GetSpecifiedLogisticsTransportMovement;
    property HasApplicableTransportCargoInsurance: Boolean read GetHasApplicableTransportCargoInsurance;
    property ApplicableTransportCargoInsurance: IXMLTransportCargoInsuranceType read GetApplicableTransportCargoInsurance;
    property ApplicableCrossBorderRegulatoryProcedure: IXMLApplicableCrossBorderRegulatoryProcedureList read GetApplicableCrossBorderRegulatoryProcedure;
    property ApplicableCrossBorderCustomsValuation: IXMLApplicableCrossBorderCustomsValuationList read GetApplicableCrossBorderCustomsValuation;
  end;

  IXMLApplicableCrossBorderCustomsValuationListEnumerator = interface
    ['{19CBD320-606C-41EB-BDAF-FE2E9B09C483}']
    function GetCurrent: IXMLCrossBorderCustomsValuationType;
    function MoveNext: Boolean;
    property Current: IXMLCrossBorderCustomsValuationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Customs Valuation
  /// </summary>
  IXMLApplicableCrossBorderCustomsValuationList = interface(IXMLNodeCollection)
    ['{79F416A2-8ECE-4A17-A883-2A949B2ADC5B}']
    function GetEnumerator: IXMLApplicableCrossBorderCustomsValuationListEnumerator;

    function Get_ApplicableCrossBorderCustomsValuation(Index: Integer): IXMLCrossBorderCustomsValuationType;
    function Add: IXMLCrossBorderCustomsValuationType;
    function Insert(Index: Integer): IXMLCrossBorderCustomsValuationType;

    property ApplicableCrossBorderCustomsValuation[Index: Integer]: IXMLCrossBorderCustomsValuationType read Get_ApplicableCrossBorderCustomsValuation; default;
  end;

  IXMLApplicableCrossBorderRegulatoryProcedureListEnumerator = interface
    ['{153B7A9D-B847-46D0-AD22-60D046CFCD26}']
    function GetCurrent: IXMLCrossBorderRegulatoryProcedureType;
    function MoveNext: Boolean;
    property Current: IXMLCrossBorderRegulatoryProcedureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Regulatory Procedure
  /// </summary>
  IXMLApplicableCrossBorderRegulatoryProcedureList = interface(IXMLNodeCollection)
    ['{A073662A-DF5F-4F3F-BD72-7E9569CD5211}']
    function GetEnumerator: IXMLApplicableCrossBorderRegulatoryProcedureListEnumerator;

    function Get_ApplicableCrossBorderRegulatoryProcedure(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;
    function Add: IXMLCrossBorderRegulatoryProcedureType;
    function Insert(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;

    property ApplicableCrossBorderRegulatoryProcedure[Index: Integer]: IXMLCrossBorderRegulatoryProcedureType read Get_ApplicableCrossBorderRegulatoryProcedure; default;
  end;

  IXMLSpecifiedLogisticsTransportMovementListEnumerator = interface
    ['{B1F5756C-E659-4A91-BFBD-09A7D710E3EC}']
    function GetCurrent: IXMLLogisticsTransportMovementType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsTransportMovementType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Specified Transport Movement
  /// </summary>
  IXMLSpecifiedLogisticsTransportMovementList = interface(IXMLNodeCollection)
    ['{AC6C0F60-35BC-4452-A018-A02B3DA8FC19}']
    function GetEnumerator: IXMLSpecifiedLogisticsTransportMovementListEnumerator;

    function Get_SpecifiedLogisticsTransportMovement(Index: Integer): IXMLLogisticsTransportMovementType;
    function Add: IXMLLogisticsTransportMovementType;
    function Insert(Index: Integer): IXMLLogisticsTransportMovementType;

    property SpecifiedLogisticsTransportMovement[Index: Integer]: IXMLLogisticsTransportMovementType read Get_SpecifiedLogisticsTransportMovement; default;
  end;

  IXMLUtilizedLogisticsTransportEquipmentListEnumerator = interface
    ['{ADC9E032-8E45-44A7-B55A-3BC4A6C72589}']
    function GetCurrent: IXMLLogisticsTransportEquipmentType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsTransportEquipmentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Used Transport Equipment
  /// </summary>
  IXMLUtilizedLogisticsTransportEquipmentList = interface(IXMLNodeCollection)
    ['{16E978F3-3305-44F7-A630-0B77C1844EC5}']
    function GetEnumerator: IXMLUtilizedLogisticsTransportEquipmentListEnumerator;

    function Get_UtilizedLogisticsTransportEquipment(Index: Integer): IXMLLogisticsTransportEquipmentType;
    function Add: IXMLLogisticsTransportEquipmentType;
    function Insert(Index: Integer): IXMLLogisticsTransportEquipmentType;

    property UtilizedLogisticsTransportEquipment[Index: Integer]: IXMLLogisticsTransportEquipmentType read Get_UtilizedLogisticsTransportEquipment; default;
  end;

  IXMLIncludedSupplyChainConsignmentItemListEnumerator = interface
    ['{A1A0AB9D-4024-4D35-84AA-C3608E76F352}']
    function GetCurrent: IXMLSupplyChainConsignmentItemType;
    function MoveNext: Boolean;
    property Current: IXMLSupplyChainConsignmentItemType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Consignment Item
  /// </summary>
  IXMLIncludedSupplyChainConsignmentItemList = interface(IXMLNodeCollection)
    ['{9351A873-A14F-41C5-AE2C-2A13F9BBCE5E}']
    function GetEnumerator: IXMLIncludedSupplyChainConsignmentItemListEnumerator;

    function Get_IncludedSupplyChainConsignmentItem(Index: Integer): IXMLSupplyChainConsignmentItemType;
    function Add: IXMLSupplyChainConsignmentItemType;
    function Insert(Index: Integer): IXMLSupplyChainConsignmentItemType;

    property IncludedSupplyChainConsignmentItem[Index: Integer]: IXMLSupplyChainConsignmentItemType read Get_IncludedSupplyChainConsignmentItem; default;
  end;

  IXMLTransitLogisticsLocationListEnumerator = interface
    ['{0CA76ED5-21B3-47A3-8966-509C90B1C421}']
    function GetCurrent: IXMLLogisticsLocationType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsLocationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Transit Location
  /// </summary>
  IXMLTransitLogisticsLocationList = interface(IXMLNodeCollection)
    ['{CCC4FF5C-58A5-48A2-AFEB-90BDC150B71C}']
    function GetEnumerator: IXMLTransitLogisticsLocationListEnumerator;

    function Get_TransitLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
    function Add: IXMLLogisticsLocationType;
    function Insert(Index: Integer): IXMLLogisticsLocationType;

    property TransitLogisticsLocation[Index: Integer]: IXMLLogisticsLocationType read Get_TransitLogisticsLocation; default;
  end;

  IXMLGroupingCentreTradePartyListEnumerator = interface
    ['{04D40066-4D25-4D55-AFBA-3FBB2408A186}']
    function GetCurrent: IXMLTradePartyType;
    function MoveNext: Boolean;
    property Current: IXMLTradePartyType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Grouping Centre
  /// </summary>
  IXMLGroupingCentreTradePartyList = interface(IXMLNodeCollection)
    ['{289D6DB4-61C8-4091-9E0E-5A85E7E523DA}']
    function GetEnumerator: IXMLGroupingCentreTradePartyListEnumerator;

    function Get_GroupingCentreTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;

    property GroupingCentreTradeParty[Index: Integer]: IXMLTradePartyType read Get_GroupingCentreTradeParty; default;
  end;

  IXMLNetVolumeMeasureListEnumerator = interface
    ['{1D71E1E7-9AC1-4E06-8668-456A801DF9E8}']
    function GetCurrent: IXMLVolumeUnitMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLVolumeUnitMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Volume Measure
  /// </summary>
  IXMLNetVolumeMeasureList = interface(IXMLNodeCollection)
    ['{B491A865-F562-485C-B181-7485E55E59CB}']
    function GetEnumerator: IXMLNetVolumeMeasureListEnumerator;

    function Get_NetVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
    function Add: IXMLVolumeUnitMeasureType;
    function Insert(Index: Integer): IXMLVolumeUnitMeasureType;

    property NetVolumeMeasure[Index: Integer]: IXMLVolumeUnitMeasureType read Get_NetVolumeMeasure; default;
  end;

  IXMLAssociatedInvoiceAmountListEnumerator = interface
    ['{607B64E4-6641-4EAB-B1A3-DEA8AE75BDE8}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Associated Invoice Amount
  /// </summary>
  IXMLAssociatedInvoiceAmountList = interface(IXMLNodeCollection)
    ['{645523EC-BB2F-461B-BAE0-5477EDF1C56E}']
    function GetEnumerator: IXMLAssociatedInvoiceAmountListEnumerator;

    function Get_AssociatedInvoiceAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property AssociatedInvoiceAmount[Index: Integer]: IXMLAmountType read Get_AssociatedInvoiceAmount; default;
  end;

  IXMLGrossVolumeMeasureListEnumerator = interface
    ['{2A22BFF5-C1FF-46BE-B430-C4E5C7574333}']
    function GetCurrent: IXMLVolumeUnitMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLVolumeUnitMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Gross Volume
  /// </summary>
  IXMLGrossVolumeMeasureList = interface(IXMLNodeCollection)
    ['{E22A0E6E-AF8B-4FC4-8A0D-2B3EC95977DD}']
    function GetEnumerator: IXMLGrossVolumeMeasureListEnumerator;

    function Get_GrossVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
    function Add: IXMLVolumeUnitMeasureType;
    function Insert(Index: Integer): IXMLVolumeUnitMeasureType;

    property GrossVolumeMeasure[Index: Integer]: IXMLVolumeUnitMeasureType read Get_GrossVolumeMeasure; default;
  end;

  IXMLNetWeightMeasureListEnumerator = interface
    ['{C4B80C4E-8D8D-4C05-924E-F5738CC9BCB3}']
    function GetCurrent: IXMLWeightUnitMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLWeightUnitMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Weight
  /// </summary>
  IXMLNetWeightMeasureList = interface(IXMLNodeCollection)
    ['{53EE2D44-A7FB-46BF-BA9E-E2D3A4932541}']
    function GetEnumerator: IXMLNetWeightMeasureListEnumerator;

    function Get_NetWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
    function Add: IXMLWeightUnitMeasureType;
    function Insert(Index: Integer): IXMLWeightUnitMeasureType;

    property NetWeightMeasure[Index: Integer]: IXMLWeightUnitMeasureType read Get_NetWeightMeasure; default;
  end;

  IXMLGrossWeightMeasureListEnumerator = interface
    ['{CADF387E-7061-42C2-9B4E-11B9EC01232D}']
    function GetCurrent: IXMLWeightUnitMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLWeightUnitMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Gross Weight
  /// </summary>
  IXMLGrossWeightMeasureList = interface(IXMLNodeCollection)
    ['{3698759B-FCA5-482B-83F2-8EF1F86AFFB8}']
    function GetEnumerator: IXMLGrossWeightMeasureListEnumerator;

    function Get_GrossWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
    function Add: IXMLWeightUnitMeasureType;
    function Insert(Index: Integer): IXMLWeightUnitMeasureType;

    property GrossWeightMeasure[Index: Integer]: IXMLWeightUnitMeasureType read Get_GrossWeightMeasure; default;
  end;

  /// <summary>
  ///    (BN/BN) Supply Chain Event
  /// </summary>
  IXMLSupplyChainEventType = interface(IXMLNode)
    ['{2A6428CF-E4FB-422C-B22B-8B3768B8772A}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasOccurrenceDateTime: Boolean;
    function GetOccurrenceDateTime: IXMLDateTimeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetDescriptionBinaryObject: IXMLDescriptionBinaryObjectList;
    function GetHasUnitQuantity: Boolean;
    function GetUnitQuantity: IXMLQuantityType;
    function GetHasLatestOccurrenceDateTime: Boolean;
    function GetLatestOccurrenceDateTime: IXMLDateTimeType;
    function GetHasEarliestOccurrenceDateTime: Boolean;
    function GetEarliestOccurrenceDateTime: IXMLDateTimeType;
    function GetHasTimeOccurrenceDateTime: Boolean;
    function GetTimeOccurrenceDateTime: IXMLTimeOnlyFormattedDateTimeType;
    function GetHasOccurrenceSpecifiedPeriod: Boolean;
    function GetOccurrenceSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasOccurrenceLogisticsLocation: Boolean;
    function GetOccurrenceLogisticsLocation: IXMLLogisticsLocationType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasOccurrenceDateTime: Boolean read GetHasOccurrenceDateTime;
    property OccurrenceDateTime: IXMLDateTimeType read GetOccurrenceDateTime;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property Description: IXMLDescriptionList read GetDescription;
    property DescriptionBinaryObject: IXMLDescriptionBinaryObjectList read GetDescriptionBinaryObject;
    property HasUnitQuantity: Boolean read GetHasUnitQuantity;
    property UnitQuantity: IXMLQuantityType read GetUnitQuantity;
    property HasLatestOccurrenceDateTime: Boolean read GetHasLatestOccurrenceDateTime;
    property LatestOccurrenceDateTime: IXMLDateTimeType read GetLatestOccurrenceDateTime;
    property HasEarliestOccurrenceDateTime: Boolean read GetHasEarliestOccurrenceDateTime;
    property EarliestOccurrenceDateTime: IXMLDateTimeType read GetEarliestOccurrenceDateTime;
    property HasTimeOccurrenceDateTime: Boolean read GetHasTimeOccurrenceDateTime;
    property TimeOccurrenceDateTime: IXMLTimeOnlyFormattedDateTimeType read GetTimeOccurrenceDateTime;
    property HasOccurrenceSpecifiedPeriod: Boolean read GetHasOccurrenceSpecifiedPeriod;
    property OccurrenceSpecifiedPeriod: IXMLSpecifiedPeriodType read GetOccurrenceSpecifiedPeriod;
    property HasOccurrenceLogisticsLocation: Boolean read GetHasOccurrenceLogisticsLocation;
    property OccurrenceLogisticsLocation: IXMLLogisticsLocationType read GetOccurrenceLogisticsLocation;
  end;

  IXMLDescriptionBinaryObjectListEnumerator = interface
    ['{03D82FAD-5459-473E-A1CA-40813317E027}']
    function GetCurrent: IXMLBinaryObjectType;
    function MoveNext: Boolean;
    property Current: IXMLBinaryObjectType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Description Binary Object
  /// </summary>
  IXMLDescriptionBinaryObjectList = interface(IXMLNodeCollection)
    ['{8A12BF1E-AE9A-475F-9AF0-6611F54BAD77}']
    function GetEnumerator: IXMLDescriptionBinaryObjectListEnumerator;

    function Get_DescriptionBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;

    property DescriptionBinaryObject[Index: Integer]: IXMLBinaryObjectType read Get_DescriptionBinaryObject; default;
  end;

  /// <summary>
  ///    (BN/BN) Supply Chain Packaging
  /// </summary>
  IXMLSupplyChainPackagingType = interface(IXMLNode)
    ['{CA30A96E-92CB-463D-9340-48CCE0DAFDF1}']
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPackageTypeCodeType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetHasConditionCode: Boolean;
    function GetConditionCode: IXMLCodeType;
    function GetDisposalMethodCode: IXMLDisposalMethodCodeList;
    function GetWeightMeasure: IXMLWeightMeasureList;
    function GetHasMaximumStackabilityQuantity: Boolean;
    function GetMaximumStackabilityQuantity: IXMLQuantityType;
    function GetHasMaximumStackabilityWeightMeasure: Boolean;
    function GetMaximumStackabilityWeightMeasure: IXMLMeasureType;
    function GetHasCustomerFacingTotalUnitQuantity: Boolean;
    function GetCustomerFacingTotalUnitQuantity: IXMLQuantityType;
    function GetHasLayerTotalUnitQuantity: Boolean;
    function GetLayerTotalUnitQuantity: IXMLQuantityType;
    function GetHasContentLayerQuantity: Boolean;
    function GetContentLayerQuantity: IXMLQuantityType;
    function GetAdditionalInstructionCode: IXMLAdditionalInstructionCodeList;
    function GetHasAdditionalInstructionIndicator: Boolean;
    function GetAdditionalInstructionIndicator: IXMLIndicatorType;
    function GetHasLinearSpatialDimension: Boolean;
    function GetLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMinimumLinearSpatialDimension: Boolean;
    function GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMaximumLinearSpatialDimension: Boolean;
    function GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetSpecifiedPackagingMarking: IXMLSpecifiedPackagingMarkingList;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetApplicableDisposalInstructions: IXMLApplicableDisposalInstructionsList;
    function GetApplicableReturnableAssetInstructions: IXMLApplicableReturnableAssetInstructionsList;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLPackageTypeCodeType read GetTypeCode;
    property Has_Type: Boolean read GetHas_Type;
    property _Type: IXMLTextType read Get_Type;
    property Description: IXMLDescriptionList read GetDescription;
    property HasConditionCode: Boolean read GetHasConditionCode;
    property ConditionCode: IXMLCodeType read GetConditionCode;
    property DisposalMethodCode: IXMLDisposalMethodCodeList read GetDisposalMethodCode;
    property WeightMeasure: IXMLWeightMeasureList read GetWeightMeasure;
    property HasMaximumStackabilityQuantity: Boolean read GetHasMaximumStackabilityQuantity;
    property MaximumStackabilityQuantity: IXMLQuantityType read GetMaximumStackabilityQuantity;
    property HasMaximumStackabilityWeightMeasure: Boolean read GetHasMaximumStackabilityWeightMeasure;
    property MaximumStackabilityWeightMeasure: IXMLMeasureType read GetMaximumStackabilityWeightMeasure;
    property HasCustomerFacingTotalUnitQuantity: Boolean read GetHasCustomerFacingTotalUnitQuantity;
    property CustomerFacingTotalUnitQuantity: IXMLQuantityType read GetCustomerFacingTotalUnitQuantity;
    property HasLayerTotalUnitQuantity: Boolean read GetHasLayerTotalUnitQuantity;
    property LayerTotalUnitQuantity: IXMLQuantityType read GetLayerTotalUnitQuantity;
    property HasContentLayerQuantity: Boolean read GetHasContentLayerQuantity;
    property ContentLayerQuantity: IXMLQuantityType read GetContentLayerQuantity;
    property AdditionalInstructionCode: IXMLAdditionalInstructionCodeList read GetAdditionalInstructionCode;
    property HasAdditionalInstructionIndicator: Boolean read GetHasAdditionalInstructionIndicator;
    property AdditionalInstructionIndicator: IXMLIndicatorType read GetAdditionalInstructionIndicator;
    property HasLinearSpatialDimension: Boolean read GetHasLinearSpatialDimension;
    property LinearSpatialDimension: IXMLSpatialDimensionType read GetLinearSpatialDimension;
    property HasMinimumLinearSpatialDimension: Boolean read GetHasMinimumLinearSpatialDimension;
    property MinimumLinearSpatialDimension: IXMLSpatialDimensionType read GetMinimumLinearSpatialDimension;
    property HasMaximumLinearSpatialDimension: Boolean read GetHasMaximumLinearSpatialDimension;
    property MaximumLinearSpatialDimension: IXMLSpatialDimensionType read GetMaximumLinearSpatialDimension;
    property SpecifiedPackagingMarking: IXMLSpecifiedPackagingMarkingList read GetSpecifiedPackagingMarking;
    property ApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList read GetApplicableMaterialGoodsCharacteristic;
    property ApplicableDisposalInstructions: IXMLApplicableDisposalInstructionsList read GetApplicableDisposalInstructions;
    property ApplicableReturnableAssetInstructions: IXMLApplicableReturnableAssetInstructionsList read GetApplicableReturnableAssetInstructions;
  end;

  IXMLApplicableReturnableAssetInstructionsListEnumerator = interface
    ['{EA718855-4E8C-4E65-A4BF-BE58E769F906}']
    function GetCurrent: IXMLReturnableAssetInstructionsType;
    function MoveNext: Boolean;
    property Current: IXMLReturnableAssetInstructionsType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Returnable Asset Instructions
  /// </summary>
  IXMLApplicableReturnableAssetInstructionsList = interface(IXMLNodeCollection)
    ['{581C5FB3-85BF-4049-8C41-F1912DA1AAE3}']
    function GetEnumerator: IXMLApplicableReturnableAssetInstructionsListEnumerator;

    function Get_ApplicableReturnableAssetInstructions(Index: Integer): IXMLReturnableAssetInstructionsType;
    function Add: IXMLReturnableAssetInstructionsType;
    function Insert(Index: Integer): IXMLReturnableAssetInstructionsType;

    property ApplicableReturnableAssetInstructions[Index: Integer]: IXMLReturnableAssetInstructionsType read Get_ApplicableReturnableAssetInstructions; default;
  end;

  IXMLApplicableDisposalInstructionsListEnumerator = interface
    ['{1FB71065-FAA9-4A55-8BA5-A498D9E227D4}']
    function GetCurrent: IXMLDisposalInstructionsType;
    function MoveNext: Boolean;
    property Current: IXMLDisposalInstructionsType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Disposal Instructions
  /// </summary>
  IXMLApplicableDisposalInstructionsList = interface(IXMLNodeCollection)
    ['{C577D4AD-B767-4FA3-818C-9EC8162FEB39}']
    function GetEnumerator: IXMLApplicableDisposalInstructionsListEnumerator;

    function Get_ApplicableDisposalInstructions(Index: Integer): IXMLDisposalInstructionsType;
    function Add: IXMLDisposalInstructionsType;
    function Insert(Index: Integer): IXMLDisposalInstructionsType;

    property ApplicableDisposalInstructions[Index: Integer]: IXMLDisposalInstructionsType read Get_ApplicableDisposalInstructions; default;
  end;

  IXMLSpecifiedPackagingMarkingListEnumerator = interface
    ['{B85BF636-E0AE-46DC-AFFD-ECED8B4C1928}']
    function GetCurrent: IXMLPackagingMarkingType;
    function MoveNext: Boolean;
    property Current: IXMLPackagingMarkingType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Marking
  /// </summary>
  IXMLSpecifiedPackagingMarkingList = interface(IXMLNodeCollection)
    ['{C4B86D4B-3129-42A7-A959-1A31E49A6612}']
    function GetEnumerator: IXMLSpecifiedPackagingMarkingListEnumerator;

    function Get_SpecifiedPackagingMarking(Index: Integer): IXMLPackagingMarkingType;
    function Add: IXMLPackagingMarkingType;
    function Insert(Index: Integer): IXMLPackagingMarkingType;

    property SpecifiedPackagingMarking[Index: Integer]: IXMLPackagingMarkingType read Get_SpecifiedPackagingMarking; default;
  end;

  IXMLAdditionalInstructionCodeListEnumerator = interface
    ['{D7A2A686-BE10-4234-8AE5-4F9F57B8BFD1}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Additional Instruction Code
  /// </summary>
  IXMLAdditionalInstructionCodeList = interface(IXMLNodeCollection)
    ['{A7DC2892-07F5-401C-A68C-6F7DB21AEBE5}']
    function GetEnumerator: IXMLAdditionalInstructionCodeListEnumerator;

    function Get_AdditionalInstructionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property AdditionalInstructionCode[Index: Integer]: IXMLCodeType read Get_AdditionalInstructionCode; default;
  end;

  IXMLWeightMeasureListEnumerator = interface
    ['{AA16481D-CA3E-40DD-A1E4-EAEF69ACF695}']
    function GetCurrent: IXMLMeasureType;
    function MoveNext: Boolean;
    property Current: IXMLMeasureType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Weight
  /// </summary>
  IXMLWeightMeasureList = interface(IXMLNodeCollection)
    ['{073082C0-E3B4-46C2-85F0-68B0E79A89C9}']
    function GetEnumerator: IXMLWeightMeasureListEnumerator;

    function Get_WeightMeasure(Index: Integer): IXMLMeasureType;
    function Add: IXMLMeasureType;
    function Insert(Index: Integer): IXMLMeasureType;

    property WeightMeasure[Index: Integer]: IXMLMeasureType read Get_WeightMeasure; default;
  end;

  IXMLDisposalMethodCodeListEnumerator = interface
    ['{349A7282-D550-4C1B-9E64-CFBB409DFC0E}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Disposal Method Code
  /// </summary>
  IXMLDisposalMethodCodeList = interface(IXMLNodeCollection)
    ['{A4775764-D615-4FB5-B1EC-4CEE5E633056}']
    function GetEnumerator: IXMLDisposalMethodCodeListEnumerator;

    function Get_DisposalMethodCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property DisposalMethodCode[Index: Integer]: IXMLCodeType read Get_DisposalMethodCode; default;
  end;

  /// <summary>
  ///    (BN/BN) Supply Chain Trade Line Item
  /// </summary>
  IXMLSupplyChainTradeLineItemType = interface(IXMLNode)
    ['{8ECB306B-DD5C-4D0F-80DC-D8E53297AFA9}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasDescriptionCode: Boolean;
    function GetDescriptionCode: IXMLCodeType;
    function GetHasAssociatedDocumentLineDocument: Boolean;
    function GetAssociatedDocumentLineDocument: IXMLDocumentLineDocumentType;
    function GetHasSpecifiedTradeProduct: Boolean;
    function GetSpecifiedTradeProduct: IXMLTradeProductType;
    function GetAdditionalInformationNote: IXMLAdditionalInformationNoteList;
    function GetHasSpecifiedLineTradeAgreement: Boolean;
    function GetSpecifiedLineTradeAgreement: IXMLLineTradeAgreementType;
    function GetHasSpecifiedLineTradeDelivery: Boolean;
    function GetSpecifiedLineTradeDelivery: IXMLLineTradeDeliveryType;
    function GetSpecifiedLineTradeSettlement: IXMLLineTradeSettlementType;
    function GetIncludedSubordinateTradeLineItem: IXMLIncludedSubordinateTradeLineItemList;

    property HasDescriptionCode: Boolean read GetHasDescriptionCode;
    property DescriptionCode: IXMLCodeType read GetDescriptionCode;
    property HasAssociatedDocumentLineDocument: Boolean read GetHasAssociatedDocumentLineDocument;
    property AssociatedDocumentLineDocument: IXMLDocumentLineDocumentType read GetAssociatedDocumentLineDocument;
    property HasSpecifiedTradeProduct: Boolean read GetHasSpecifiedTradeProduct;
    property SpecifiedTradeProduct: IXMLTradeProductType read GetSpecifiedTradeProduct;
    property AdditionalInformationNote: IXMLAdditionalInformationNoteList read GetAdditionalInformationNote;
    property HasSpecifiedLineTradeAgreement: Boolean read GetHasSpecifiedLineTradeAgreement;
    property SpecifiedLineTradeAgreement: IXMLLineTradeAgreementType read GetSpecifiedLineTradeAgreement;
    property HasSpecifiedLineTradeDelivery: Boolean read GetHasSpecifiedLineTradeDelivery;
    property SpecifiedLineTradeDelivery: IXMLLineTradeDeliveryType read GetSpecifiedLineTradeDelivery;
    property SpecifiedLineTradeSettlement: IXMLLineTradeSettlementType read GetSpecifiedLineTradeSettlement;
    property IncludedSubordinateTradeLineItem: IXMLIncludedSubordinateTradeLineItemList read GetIncludedSubordinateTradeLineItem;
  end;

  IXMLIncludedSubordinateTradeLineItemListEnumerator = interface
    ['{515FEA49-A651-442C-803C-65BEB32F8A45}']
    function GetCurrent: IXMLSubordinateTradeLineItemType;
    function MoveNext: Boolean;
    property Current: IXMLSubordinateTradeLineItemType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Subordinate Trade Line Item
  /// </summary>
  IXMLIncludedSubordinateTradeLineItemList = interface(IXMLNodeCollection)
    ['{55846517-AB23-4058-A2FA-CD6468689A2A}']
    function GetEnumerator: IXMLIncludedSubordinateTradeLineItemListEnumerator;

    function Get_IncludedSubordinateTradeLineItem(Index: Integer): IXMLSubordinateTradeLineItemType;
    function Add: IXMLSubordinateTradeLineItemType;
    function Insert(Index: Integer): IXMLSubordinateTradeLineItemType;

    property IncludedSubordinateTradeLineItem[Index: Integer]: IXMLSubordinateTradeLineItemType read Get_IncludedSubordinateTradeLineItem; default;
  end;

  IXMLAdditionalInformationNoteListEnumerator = interface
    ['{977F962E-CC97-4967-8C6D-88700A4E0731}']
    function GetCurrent: IXMLNoteType;
    function MoveNext: Boolean;
    property Current: IXMLNoteType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Additional Information Note
  /// </summary>
  IXMLAdditionalInformationNoteList = interface(IXMLNodeCollection)
    ['{4686955A-C6F9-4846-B437-9ADBFDAAD317}']
    function GetEnumerator: IXMLAdditionalInformationNoteListEnumerator;

    function Get_AdditionalInformationNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;

    property AdditionalInformationNote[Index: Integer]: IXMLNoteType read Get_AdditionalInformationNote; default;
  end;

  IXMLSupplyChainTradeTransactionTypeEnumerator = interface
    ['{657D1880-B136-426D-ADE2-DD53EABC2FE6}']
    function GetCurrent: IXMLSupplyChainTradeLineItemType;
    function MoveNext: Boolean;
    property Current: IXMLSupplyChainTradeLineItemType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Supply Chain Trade Transaction
  /// </summary>
  IXMLSupplyChainTradeTransactionType = interface(IXMLNodeCollection)
    ['{F6F34630-24D8-4E31-8D1D-BAC0638C53C8}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLSupplyChainTradeTransactionTypeEnumerator;

    function Get_IncludedSupplyChainTradeLineItem(Index: Integer): IXMLSupplyChainTradeLineItemType;
    function Add: IXMLSupplyChainTradeLineItemType;
    function Insert(Index: Integer): IXMLSupplyChainTradeLineItemType;

    property IncludedSupplyChainTradeLineItem[Index: Integer]: IXMLSupplyChainTradeLineItemType read Get_IncludedSupplyChainTradeLineItem; default;

    function GetApplicableHeaderTradeAgreement: IXMLHeaderTradeAgreementType;
    function GetApplicableHeaderTradeDelivery: IXMLHeaderTradeDeliveryType;
    function GetApplicableHeaderTradeSettlement: IXMLHeaderTradeSettlementType;

    property ApplicableHeaderTradeAgreement: IXMLHeaderTradeAgreementType read GetApplicableHeaderTradeAgreement;
    property ApplicableHeaderTradeDelivery: IXMLHeaderTradeDeliveryType read GetApplicableHeaderTradeDelivery;
    property ApplicableHeaderTradeSettlement: IXMLHeaderTradeSettlementType read GetApplicableHeaderTradeSettlement;
  end;

  /// <summary>
  ///    (BN/BN) Tax Registration
  /// </summary>
  IXMLTaxRegistrationType = interface(IXMLNode)
    ['{7F469692-5A0F-44C5-8D5A-E564E16F7EFE}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasIOSSID: Boolean;
    function GetIOSSID: IXMLIDType;
    function GetHasAssociatedRegisteredTax: Boolean;
    function GetAssociatedRegisteredTax: IXMLRegisteredTaxType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasIOSSID: Boolean read GetHasIOSSID;
    property IOSSID: IXMLIDType read GetIOSSID;
    property HasAssociatedRegisteredTax: Boolean read GetHasAssociatedRegisteredTax;
    property AssociatedRegisteredTax: IXMLRegisteredTaxType read GetAssociatedRegisteredTax;
  end;

  /// <summary>
  ///    (BN/BN) Trade Accounting Account
  /// </summary>
  IXMLTradeAccountingAccountType = interface(IXMLNode)
    ['{632325AF-C5A4-4E38-BD6D-E5F8B4A0B62F}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasSetTriggerCode: Boolean;
    function GetSetTriggerCode: IXMLAccountingDocumentCodeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLAccountingAccountTypeCodeType;
    function GetHasAmountTypeCode: Boolean;
    function GetAmountTypeCode: IXMLAccountingAmountTypeCodeType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasCostReferenceDimensionPattern: Boolean;
    function GetCostReferenceDimensionPattern: IXMLTextType;

    property ID: IXMLIDType read GetID;
    property HasSetTriggerCode: Boolean read GetHasSetTriggerCode;
    property SetTriggerCode: IXMLAccountingDocumentCodeType read GetSetTriggerCode;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLAccountingAccountTypeCodeType read GetTypeCode;
    property HasAmountTypeCode: Boolean read GetHasAmountTypeCode;
    property AmountTypeCode: IXMLAccountingAmountTypeCodeType read GetAmountTypeCode;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property HasCostReferenceDimensionPattern: Boolean read GetHasCostReferenceDimensionPattern;
    property CostReferenceDimensionPattern: IXMLTextType read GetCostReferenceDimensionPattern;
  end;

  /// <summary>
  ///    (BN/BN) Trade Address
  /// </summary>
  IXMLTradeAddressType = interface(IXMLNode)
    ['{B0EB351C-6F1E-4251-A56C-6640913C5DF1}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasPostcodeCode: Boolean;
    function GetPostcodeCode: IXMLCodeType;
    function GetHasPostOfficeBox: Boolean;
    function GetPostOfficeBox: IXMLTextType;
    function GetHasBuildingName: Boolean;
    function GetBuildingName: IXMLTextType;
    function GetHasLineOne: Boolean;
    function GetLineOne: IXMLTextType;
    function GetHasLineTwo: Boolean;
    function GetLineTwo: IXMLTextType;
    function GetHasLineThree: Boolean;
    function GetLineThree: IXMLTextType;
    function GetHasLineFour: Boolean;
    function GetLineFour: IXMLTextType;
    function GetHasLineFive: Boolean;
    function GetLineFive: IXMLTextType;
    function GetHasStreetName: Boolean;
    function GetStreetName: IXMLTextType;
    function GetHasCityName: Boolean;
    function GetCityName: IXMLTextType;
    function GetHasCitySubDivisionName: Boolean;
    function GetCitySubDivisionName: IXMLTextType;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetCountryName: IXMLCountryNameList;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetCountrySubDivisionName: IXMLCountrySubDivisionNameList;
    function GetHasAttentionOf: Boolean;
    function GetAttentionOf: IXMLTextType;
    function GetHasCareOf: Boolean;
    function GetCareOf: IXMLTextType;
    function GetHasBuildingNumber: Boolean;
    function GetBuildingNumber: IXMLTextType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasAdditionalStreetName: Boolean;
    function GetAdditionalStreetName: IXMLTextType;
    function GetHasCityID: Boolean;
    function GetCityID: IXMLIDType;
    function GetTypeCode: IXMLTypeCodeList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasPostcodeCode: Boolean read GetHasPostcodeCode;
    property PostcodeCode: IXMLCodeType read GetPostcodeCode;
    property HasPostOfficeBox: Boolean read GetHasPostOfficeBox;
    property PostOfficeBox: IXMLTextType read GetPostOfficeBox;
    property HasBuildingName: Boolean read GetHasBuildingName;
    property BuildingName: IXMLTextType read GetBuildingName;
    property HasLineOne: Boolean read GetHasLineOne;
    property LineOne: IXMLTextType read GetLineOne;
    property HasLineTwo: Boolean read GetHasLineTwo;
    property LineTwo: IXMLTextType read GetLineTwo;
    property HasLineThree: Boolean read GetHasLineThree;
    property LineThree: IXMLTextType read GetLineThree;
    property HasLineFour: Boolean read GetHasLineFour;
    property LineFour: IXMLTextType read GetLineFour;
    property HasLineFive: Boolean read GetHasLineFive;
    property LineFive: IXMLTextType read GetLineFive;
    property HasStreetName: Boolean read GetHasStreetName;
    property StreetName: IXMLTextType read GetStreetName;
    property HasCityName: Boolean read GetHasCityName;
    property CityName: IXMLTextType read GetCityName;
    property HasCitySubDivisionName: Boolean read GetHasCitySubDivisionName;
    property CitySubDivisionName: IXMLTextType read GetCitySubDivisionName;
    property HasCountryID: Boolean read GetHasCountryID;
    property CountryID: IXMLCountryIDType read GetCountryID;
    property CountryName: IXMLCountryNameList read GetCountryName;
    property HasCountrySubDivisionID: Boolean read GetHasCountrySubDivisionID;
    property CountrySubDivisionID: IXMLIDType read GetCountrySubDivisionID;
    property CountrySubDivisionName: IXMLCountrySubDivisionNameList read GetCountrySubDivisionName;
    property HasAttentionOf: Boolean read GetHasAttentionOf;
    property AttentionOf: IXMLTextType read GetAttentionOf;
    property HasCareOf: Boolean read GetHasCareOf;
    property CareOf: IXMLTextType read GetCareOf;
    property HasBuildingNumber: Boolean read GetHasBuildingNumber;
    property BuildingNumber: IXMLTextType read GetBuildingNumber;
    property HasDepartmentName: Boolean read GetHasDepartmentName;
    property DepartmentName: IXMLTextType read GetDepartmentName;
    property HasAdditionalStreetName: Boolean read GetHasAdditionalStreetName;
    property AdditionalStreetName: IXMLTextType read GetAdditionalStreetName;
    property HasCityID: Boolean read GetHasCityID;
    property CityID: IXMLIDType read GetCityID;
    property TypeCode: IXMLTypeCodeList read GetTypeCode;
  end;

  IXMLCountrySubDivisionNameListEnumerator = interface
    ['{82F11193-AFED-4EEE-9110-EDE816E249E3}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Country Sub-Division Name
  /// </summary>
  IXMLCountrySubDivisionNameList = interface(IXMLNodeCollection)
    ['{5E91D7EE-F74D-4A37-9D9B-931C8A943D1E}']
    function GetEnumerator: IXMLCountrySubDivisionNameListEnumerator;

    function Get_CountrySubDivisionName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property CountrySubDivisionName[Index: Integer]: IXMLTextType read Get_CountrySubDivisionName; default;
  end;

  IXMLCountryNameListEnumerator = interface
    ['{B5F117C1-A152-4F9F-97A0-ADA2D80D5716}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Country Name
  /// </summary>
  IXMLCountryNameList = interface(IXMLNodeCollection)
    ['{BDA14637-0FC4-4C3B-BD3A-EAD0B086A8F1}']
    function GetEnumerator: IXMLCountryNameListEnumerator;

    function Get_CountryName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property CountryName[Index: Integer]: IXMLTextType read Get_CountryName; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Allowance/Charge
  /// </summary>
  IXMLTradeAllowanceChargeType = interface(IXMLNode)
    ['{DF33A7E6-B99E-4084-9A55-2A6E115077DA}']
    function GetHasChargeIndicator: Boolean;
    function GetChargeIndicator: IXMLIndicatorType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasSequenceNumeric: Boolean;
    function GetSequenceNumeric: IXMLNumericType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetHasPrepaidIndicator: Boolean;
    function GetPrepaidIndicator: IXMLIndicatorType;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasUnitBasisAmount: Boolean;
    function GetUnitBasisAmount: IXMLAmountType;
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLAllowanceChargeReasonCodeType;
    function GetHasReason: Boolean;
    function GetReason: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLAllowanceChargeIdentificationCodeType;
    function GetCategoryTradeTax: IXMLCategoryTradeTaxList;
    function GetHasActualTradeCurrencyExchange: Boolean;
    function GetActualTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;

    property HasChargeIndicator: Boolean read GetHasChargeIndicator;
    property ChargeIndicator: IXMLIndicatorType read GetChargeIndicator;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasSequenceNumeric: Boolean read GetHasSequenceNumeric;
    property SequenceNumeric: IXMLNumericType read GetSequenceNumeric;
    property HasCalculationPercent: Boolean read GetHasCalculationPercent;
    property CalculationPercent: IXMLPercentType read GetCalculationPercent;
    property HasBasisAmount: Boolean read GetHasBasisAmount;
    property BasisAmount: IXMLAmountType read GetBasisAmount;
    property HasBasisQuantity: Boolean read GetHasBasisQuantity;
    property BasisQuantity: IXMLQuantityType read GetBasisQuantity;
    property HasPrepaidIndicator: Boolean read GetHasPrepaidIndicator;
    property PrepaidIndicator: IXMLIndicatorType read GetPrepaidIndicator;
    property ActualAmount: IXMLActualAmountList read GetActualAmount;
    property HasUnitBasisAmount: Boolean read GetHasUnitBasisAmount;
    property UnitBasisAmount: IXMLAmountType read GetUnitBasisAmount;
    property HasReasonCode: Boolean read GetHasReasonCode;
    property ReasonCode: IXMLAllowanceChargeReasonCodeType read GetReasonCode;
    property HasReason: Boolean read GetHasReason;
    property Reason: IXMLTextType read GetReason;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLAllowanceChargeIdentificationCodeType read GetTypeCode;
    property CategoryTradeTax: IXMLCategoryTradeTaxList read GetCategoryTradeTax;
    property HasActualTradeCurrencyExchange: Boolean read GetHasActualTradeCurrencyExchange;
    property ActualTradeCurrencyExchange: IXMLTradeCurrencyExchangeType read GetActualTradeCurrencyExchange;
  end;

  IXMLCategoryTradeTaxListEnumerator = interface
    ['{B8D3D7A9-8DEE-415B-8381-64FBB833CDF7}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Tax Category
  /// </summary>
  IXMLCategoryTradeTaxList = interface(IXMLNodeCollection)
    ['{21F89550-90B2-4691-82CA-F35F83A83F45}']
    function GetEnumerator: IXMLCategoryTradeTaxListEnumerator;

    function Get_CategoryTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property CategoryTradeTax[Index: Integer]: IXMLTradeTaxType read Get_CategoryTradeTax; default;
  end;

  IXMLActualAmountListEnumerator = interface
    ['{A58D3ED9-67DB-47E5-B4AC-8D0158901B83}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Actual Amount
  /// </summary>
  IXMLActualAmountList = interface(IXMLNodeCollection)
    ['{368AD3A3-1FAA-423F-8DE6-8E422B54D793}']
    function GetEnumerator: IXMLActualAmountListEnumerator;

    function Get_ActualAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ActualAmount[Index: Integer]: IXMLAmountType read Get_ActualAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Contact
  /// </summary>
  IXMLTradeContactType = interface(IXMLNode)
    ['{5CBB7253-86B9-4DF7-B3DB-F8565F39382D}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasPersonName: Boolean;
    function GetPersonName: IXMLTextType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLContactTypeCodeType;
    function GetHasJobTitle: Boolean;
    function GetJobTitle: IXMLTextType;
    function GetHasResponsibility: Boolean;
    function GetResponsibility: IXMLTextType;
    function GetPersonID: IXMLPersonIDList;
    function GetHasTelephoneUniversalCommunication: Boolean;
    function GetTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasDirectTelephoneUniversalCommunication: Boolean;
    function GetDirectTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasMobileTelephoneUniversalCommunication: Boolean;
    function GetMobileTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasFaxUniversalCommunication: Boolean;
    function GetFaxUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasEmailURIUniversalCommunication: Boolean;
    function GetEmailURIUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasTelexUniversalCommunication: Boolean;
    function GetTelexUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasVOIPUniversalCommunication: Boolean;
    function GetVOIPUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasInstantMessagingUniversalCommunication: Boolean;
    function GetInstantMessagingUniversalCommunication: IXMLUniversalCommunicationType;
    function GetSpecifiedNote: IXMLSpecifiedNoteList;
    function GetHasSpecifiedContactPerson: Boolean;
    function GetSpecifiedContactPerson: IXMLContactPersonType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasPersonName: Boolean read GetHasPersonName;
    property PersonName: IXMLTextType read GetPersonName;
    property HasDepartmentName: Boolean read GetHasDepartmentName;
    property DepartmentName: IXMLTextType read GetDepartmentName;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLContactTypeCodeType read GetTypeCode;
    property HasJobTitle: Boolean read GetHasJobTitle;
    property JobTitle: IXMLTextType read GetJobTitle;
    property HasResponsibility: Boolean read GetHasResponsibility;
    property Responsibility: IXMLTextType read GetResponsibility;
    property PersonID: IXMLPersonIDList read GetPersonID;
    property HasTelephoneUniversalCommunication: Boolean read GetHasTelephoneUniversalCommunication;
    property TelephoneUniversalCommunication: IXMLUniversalCommunicationType read GetTelephoneUniversalCommunication;
    property HasDirectTelephoneUniversalCommunication: Boolean read GetHasDirectTelephoneUniversalCommunication;
    property DirectTelephoneUniversalCommunication: IXMLUniversalCommunicationType read GetDirectTelephoneUniversalCommunication;
    property HasMobileTelephoneUniversalCommunication: Boolean read GetHasMobileTelephoneUniversalCommunication;
    property MobileTelephoneUniversalCommunication: IXMLUniversalCommunicationType read GetMobileTelephoneUniversalCommunication;
    property HasFaxUniversalCommunication: Boolean read GetHasFaxUniversalCommunication;
    property FaxUniversalCommunication: IXMLUniversalCommunicationType read GetFaxUniversalCommunication;
    property HasEmailURIUniversalCommunication: Boolean read GetHasEmailURIUniversalCommunication;
    property EmailURIUniversalCommunication: IXMLUniversalCommunicationType read GetEmailURIUniversalCommunication;
    property HasTelexUniversalCommunication: Boolean read GetHasTelexUniversalCommunication;
    property TelexUniversalCommunication: IXMLUniversalCommunicationType read GetTelexUniversalCommunication;
    property HasVOIPUniversalCommunication: Boolean read GetHasVOIPUniversalCommunication;
    property VOIPUniversalCommunication: IXMLUniversalCommunicationType read GetVOIPUniversalCommunication;
    property HasInstantMessagingUniversalCommunication: Boolean read GetHasInstantMessagingUniversalCommunication;
    property InstantMessagingUniversalCommunication: IXMLUniversalCommunicationType read GetInstantMessagingUniversalCommunication;
    property SpecifiedNote: IXMLSpecifiedNoteList read GetSpecifiedNote;
    property HasSpecifiedContactPerson: Boolean read GetHasSpecifiedContactPerson;
    property SpecifiedContactPerson: IXMLContactPersonType read GetSpecifiedContactPerson;
  end;

  IXMLSpecifiedNoteListEnumerator = interface
    ['{FEC74EA3-8ADF-4F0F-ADB8-B05238A8789F}']
    function GetCurrent: IXMLNoteType;
    function MoveNext: Boolean;
    property Current: IXMLNoteType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Note
  /// </summary>
  IXMLSpecifiedNoteList = interface(IXMLNodeCollection)
    ['{42C37987-7A2A-4281-9971-008143CA10B4}']
    function GetEnumerator: IXMLSpecifiedNoteListEnumerator;

    function Get_SpecifiedNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;

    property SpecifiedNote[Index: Integer]: IXMLNoteType read Get_SpecifiedNote; default;
  end;

  IXMLPersonIDListEnumerator = interface
    ['{00BA698C-7767-47F0-BCA3-13363CC80A99}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Person ID
  /// </summary>
  IXMLPersonIDList = interface(IXMLNodeCollection)
    ['{DBCF6B83-0E89-49D4-BCF9-ECBDCDA75C00}']
    function GetEnumerator: IXMLPersonIDListEnumerator;

    function Get_PersonID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property PersonID[Index: Integer]: IXMLIDType read Get_PersonID; default;
  end;

  IXMLTradeCountrySubDivisionTypeEnumerator = interface
    ['{16B5F536-5FD3-420A-B4D0-4C18AC03AE84}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Country Sub-Division
  /// </summary>
  IXMLTradeCountrySubDivisionType = interface(IXMLNodeCollection)
    ['{56110819-EB65-4659-997A-7BDE73915798}']
    function GetEnumerator: IXMLTradeCountrySubDivisionTypeEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Name[Index: Integer]: IXMLTextType read Get_Name; default;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
  end;

  /// <summary>
  ///    (BN/BN) Trade Country
  /// </summary>
  IXMLTradeCountryType = interface(IXMLNode)
    ['{4E0037FD-52E6-463B-ACB7-E7E6745A44D7}']
    function GetHasID: Boolean;
    function GetID: IXMLCountryIDType;
    function GetName: IXMLNameList;
    function GetSubordinateTradeCountrySubDivision: IXMLSubordinateTradeCountrySubDivisionList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLCountryIDType read GetID;
    property Name: IXMLNameList read GetName;
    property SubordinateTradeCountrySubDivision: IXMLSubordinateTradeCountrySubDivisionList read GetSubordinateTradeCountrySubDivision;
  end;

  IXMLSubordinateTradeCountrySubDivisionListEnumerator = interface
    ['{0667DEEB-529E-4A57-BFA5-8D1B67A9F32F}']
    function GetCurrent: IXMLTradeCountrySubDivisionType;
    function MoveNext: Boolean;
    property Current: IXMLTradeCountrySubDivisionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Sub-Division
  /// </summary>
  IXMLSubordinateTradeCountrySubDivisionList = interface(IXMLNodeCollection)
    ['{5B17B83E-AC95-4CE0-86CC-3BFF8434730F}']
    function GetEnumerator: IXMLSubordinateTradeCountrySubDivisionListEnumerator;

    function Get_SubordinateTradeCountrySubDivision(Index: Integer): IXMLTradeCountrySubDivisionType;
    function Add: IXMLTradeCountrySubDivisionType;
    function Insert(Index: Integer): IXMLTradeCountrySubDivisionType;

    property SubordinateTradeCountrySubDivision[Index: Integer]: IXMLTradeCountrySubDivisionType read Get_SubordinateTradeCountrySubDivision; default;
  end;

  IXMLTradeCurrencyExchangeTypeEnumerator = interface
    ['{C3D0ABFC-21C0-449C-A049-32B5777F3FB1}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Currency Exchange
  /// </summary>
  IXMLTradeCurrencyExchangeType = interface(IXMLNodeCollection)
    ['{5C637E3B-04E4-43E2-A3D9-3D65AD571CBD}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLTradeCurrencyExchangeTypeEnumerator;

    function Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property AssociatedReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_AssociatedReferencedDocument; default;

    function GetSourceCurrencyCode: IXMLCurrencyCodeType;
    function GetHasSourceUnitBasisNumeric: Boolean;
    function GetSourceUnitBasisNumeric: IXMLNumericType;
    function GetTargetCurrencyCode: IXMLCurrencyCodeType;
    function GetHasTargetUnitBaseNumeric: Boolean;
    function GetTargetUnitBaseNumeric: IXMLNumericType;
    function GetHasMarketID: Boolean;
    function GetMarketID: IXMLIDType;
    function GetConversionRate: IXMLRateType;
    function GetHasConversionRateDateTime: Boolean;
    function GetConversionRateDateTime: IXMLDateTimeType;

    property SourceCurrencyCode: IXMLCurrencyCodeType read GetSourceCurrencyCode;
    property HasSourceUnitBasisNumeric: Boolean read GetHasSourceUnitBasisNumeric;
    property SourceUnitBasisNumeric: IXMLNumericType read GetSourceUnitBasisNumeric;
    property TargetCurrencyCode: IXMLCurrencyCodeType read GetTargetCurrencyCode;
    property HasTargetUnitBaseNumeric: Boolean read GetHasTargetUnitBaseNumeric;
    property TargetUnitBaseNumeric: IXMLNumericType read GetTargetUnitBaseNumeric;
    property HasMarketID: Boolean read GetHasMarketID;
    property MarketID: IXMLIDType read GetMarketID;
    property ConversionRate: IXMLRateType read GetConversionRate;
    property HasConversionRateDateTime: Boolean read GetHasConversionRateDateTime;
    property ConversionRateDateTime: IXMLDateTimeType read GetConversionRateDateTime;
  end;

  IXMLTradeDeliveryTermsTypeEnumerator = interface
    ['{2BC4E06C-A601-43A9-89D3-2390152D3C7D}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Delivery Terms
  /// </summary>
  IXMLTradeDeliveryTermsType = interface(IXMLNodeCollection)
    ['{E0F5A1B7-A7A3-4E4E-904A-DDB536FA8CFF}']
    function GetEnumerator: IXMLTradeDeliveryTermsTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Description[Index: Integer]: IXMLTextType read Get_Description; default;

    function GetHasDeliveryTypeCode: Boolean;
    function GetDeliveryTypeCode: IXMLDeliveryTermsCodeType;
    function GetHasFunctionCode: Boolean;
    function GetFunctionCode: IXMLDeliveryTermsFunctionCodeType;
    function GetHasDeliveryDiscontinuationCode: Boolean;
    function GetDeliveryDiscontinuationCode: IXMLCodeType;
    function GetHasPartialDeliveryAllowedIndicator: Boolean;
    function GetPartialDeliveryAllowedIndicator: IXMLIndicatorType;
    function GetHasRelevantTradeLocation: Boolean;
    function GetRelevantTradeLocation: IXMLTradeLocationType;

    property HasDeliveryTypeCode: Boolean read GetHasDeliveryTypeCode;
    property DeliveryTypeCode: IXMLDeliveryTermsCodeType read GetDeliveryTypeCode;
    property HasFunctionCode: Boolean read GetHasFunctionCode;
    property FunctionCode: IXMLDeliveryTermsFunctionCodeType read GetFunctionCode;
    property HasDeliveryDiscontinuationCode: Boolean read GetHasDeliveryDiscontinuationCode;
    property DeliveryDiscontinuationCode: IXMLCodeType read GetDeliveryDiscontinuationCode;
    property HasPartialDeliveryAllowedIndicator: Boolean read GetHasPartialDeliveryAllowedIndicator;
    property PartialDeliveryAllowedIndicator: IXMLIndicatorType read GetPartialDeliveryAllowedIndicator;
    property HasRelevantTradeLocation: Boolean read GetHasRelevantTradeLocation;
    property RelevantTradeLocation: IXMLTradeLocationType read GetRelevantTradeLocation;
  end;

  /// <summary>
  ///    (BN/BN) Trade Location
  /// </summary>
  IXMLTradeLocationType = interface(IXMLNode)
    ['{3FBE8024-7F50-425F-980B-B33B57AFB5B8}']
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetHasCountryName: Boolean;
    function GetCountryName: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;

    property HasCountryID: Boolean read GetHasCountryID;
    property CountryID: IXMLCountryIDType read GetCountryID;
    property HasCountryName: Boolean read GetHasCountryName;
    property CountryName: IXMLTextType read GetCountryName;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
  end;

  /// <summary>
  ///    (BN/BN) Trade Party
  /// </summary>
  IXMLTradePartyType = interface(IXMLNode)
    ['{7FEE102B-4B2E-40A5-8F25-D1E1AAC0B0E7}']
    function GetID: IXMLIDList;
    function GetGlobalID: IXMLGlobalIDList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetRoleCode: IXMLRoleCodeList;
    function GetDescription: IXMLDescriptionList;
    function GetRegisteredID: IXMLRegisteredIDList;
    function GetRole: IXMLRoleList;
    function GetHasSpecifiedLegalOrganization: Boolean;
    function GetSpecifiedLegalOrganization: IXMLLegalOrganizationType;
    function GetDefinedTradeContact: IXMLDefinedTradeContactList;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;
    function GetURIUniversalCommunication: IXMLURIUniversalCommunicationList;
    function GetSpecifiedLogisticsLocation: IXMLSpecifiedLogisticsLocationList;
    function GetSpecifiedTaxRegistration: IXMLSpecifiedTaxRegistrationList;
    function GetHasEndPointURIUniversalCommunication: Boolean;
    function GetEndPointURIUniversalCommunication: IXMLUniversalCommunicationType;
    function GetLogoAssociatedSpecifiedBinaryFile: IXMLLogoAssociatedSpecifiedBinaryFileList;

    property ID: IXMLIDList read GetID;
    property GlobalID: IXMLGlobalIDList read GetGlobalID;
    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property HasName: Boolean read GetHasName;
    property Name: IXMLTextType read GetName;
    property RoleCode: IXMLRoleCodeList read GetRoleCode;
    property Description: IXMLDescriptionList read GetDescription;
    property RegisteredID: IXMLRegisteredIDList read GetRegisteredID;
    property Role: IXMLRoleList read GetRole;
    property HasSpecifiedLegalOrganization: Boolean read GetHasSpecifiedLegalOrganization;
    property SpecifiedLegalOrganization: IXMLLegalOrganizationType read GetSpecifiedLegalOrganization;
    property DefinedTradeContact: IXMLDefinedTradeContactList read GetDefinedTradeContact;
    property HasPostalTradeAddress: Boolean read GetHasPostalTradeAddress;
    property PostalTradeAddress: IXMLTradeAddressType read GetPostalTradeAddress;
    property URIUniversalCommunication: IXMLURIUniversalCommunicationList read GetURIUniversalCommunication;
    property SpecifiedLogisticsLocation: IXMLSpecifiedLogisticsLocationList read GetSpecifiedLogisticsLocation;
    property SpecifiedTaxRegistration: IXMLSpecifiedTaxRegistrationList read GetSpecifiedTaxRegistration;
    property HasEndPointURIUniversalCommunication: Boolean read GetHasEndPointURIUniversalCommunication;
    property EndPointURIUniversalCommunication: IXMLUniversalCommunicationType read GetEndPointURIUniversalCommunication;
    property LogoAssociatedSpecifiedBinaryFile: IXMLLogoAssociatedSpecifiedBinaryFileList read GetLogoAssociatedSpecifiedBinaryFile;
  end;

  IXMLLogoAssociatedSpecifiedBinaryFileListEnumerator = interface
    ['{C1D27B77-EC23-4D04-86CA-278AC398C96D}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Logo Binary File
  /// </summary>
  IXMLLogoAssociatedSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{B85698B1-7196-43BD-A7EC-E5B005F64A9B}']
    function GetEnumerator: IXMLLogoAssociatedSpecifiedBinaryFileListEnumerator;

    function Get_LogoAssociatedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property LogoAssociatedSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_LogoAssociatedSpecifiedBinaryFile; default;
  end;

  IXMLSpecifiedTaxRegistrationListEnumerator = interface
    ['{EFA73687-4CA3-499B-9BB0-BDC587288752}']
    function GetCurrent: IXMLTaxRegistrationType;
    function MoveNext: Boolean;
    property Current: IXMLTaxRegistrationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Tax Registration
  /// </summary>
  IXMLSpecifiedTaxRegistrationList = interface(IXMLNodeCollection)
    ['{4E9D32EF-4506-4707-B233-63DDC3302913}']
    function GetEnumerator: IXMLSpecifiedTaxRegistrationListEnumerator;

    function Get_SpecifiedTaxRegistration(Index: Integer): IXMLTaxRegistrationType;
    function Add: IXMLTaxRegistrationType;
    function Insert(Index: Integer): IXMLTaxRegistrationType;

    property SpecifiedTaxRegistration[Index: Integer]: IXMLTaxRegistrationType read Get_SpecifiedTaxRegistration; default;
  end;

  IXMLSpecifiedLogisticsLocationListEnumerator = interface
    ['{C1128A0B-719A-43D1-A77B-A0665C7E39C2}']
    function GetCurrent: IXMLLogisticsLocationType;
    function MoveNext: Boolean;
    property Current: IXMLLogisticsLocationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Logistics Location
  /// </summary>
  IXMLSpecifiedLogisticsLocationList = interface(IXMLNodeCollection)
    ['{5E5AF11D-2EB3-467F-B993-17FE9279E6DA}']
    function GetEnumerator: IXMLSpecifiedLogisticsLocationListEnumerator;

    function Get_SpecifiedLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
    function Add: IXMLLogisticsLocationType;
    function Insert(Index: Integer): IXMLLogisticsLocationType;

    property SpecifiedLogisticsLocation[Index: Integer]: IXMLLogisticsLocationType read Get_SpecifiedLogisticsLocation; default;
  end;

  IXMLURIUniversalCommunicationListEnumerator = interface
    ['{184DA398-C410-4DD3-9B98-96A209493E19}']
    function GetCurrent: IXMLUniversalCommunicationType;
    function MoveNext: Boolean;
    property Current: IXMLUniversalCommunicationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) URI
  /// </summary>
  IXMLURIUniversalCommunicationList = interface(IXMLNodeCollection)
    ['{AF57C1A0-1651-4993-A283-CE5DE10AD25D}']
    function GetEnumerator: IXMLURIUniversalCommunicationListEnumerator;

    function Get_URIUniversalCommunication(Index: Integer): IXMLUniversalCommunicationType;
    function Add: IXMLUniversalCommunicationType;
    function Insert(Index: Integer): IXMLUniversalCommunicationType;

    property URIUniversalCommunication[Index: Integer]: IXMLUniversalCommunicationType read Get_URIUniversalCommunication; default;
  end;

  IXMLDefinedTradeContactListEnumerator = interface
    ['{F1C367CF-9841-4B1C-89E6-9F61467B1767}']
    function GetCurrent: IXMLTradeContactType;
    function MoveNext: Boolean;
    property Current: IXMLTradeContactType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Defined Contact Details
  /// </summary>
  IXMLDefinedTradeContactList = interface(IXMLNodeCollection)
    ['{19C28873-6DAB-4895-B4CD-3C861C8728AD}']
    function GetEnumerator: IXMLDefinedTradeContactListEnumerator;

    function Get_DefinedTradeContact(Index: Integer): IXMLTradeContactType;
    function Add: IXMLTradeContactType;
    function Insert(Index: Integer): IXMLTradeContactType;

    property DefinedTradeContact[Index: Integer]: IXMLTradeContactType read Get_DefinedTradeContact; default;
  end;

  IXMLRoleListEnumerator = interface
    ['{6E7E5BF4-D257-4EC0-8366-3F04254A4D41}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Role Text
  /// </summary>
  IXMLRoleList = interface(IXMLNodeCollection)
    ['{A6736BDF-048E-4DD7-ADBE-80611649D207}']
    function GetEnumerator: IXMLRoleListEnumerator;

    function Get_Role(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Role[Index: Integer]: IXMLTextType read Get_Role; default;
  end;

  IXMLRegisteredIDListEnumerator = interface
    ['{E5553D50-3B61-42D5-9721-BC6CD5E91BB4}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Registered ID
  /// </summary>
  IXMLRegisteredIDList = interface(IXMLNodeCollection)
    ['{D50240F2-27AC-42EA-9396-90FB3B3B440C}']
    function GetEnumerator: IXMLRegisteredIDListEnumerator;

    function Get_RegisteredID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property RegisteredID[Index: Integer]: IXMLIDType read Get_RegisteredID; default;
  end;

  IXMLRoleCodeListEnumerator = interface
    ['{8E6402B8-9E30-4EE1-908C-89A55B2D5D10}']
    function GetCurrent: IXMLPartyRoleCodeType;
    function MoveNext: Boolean;
    property Current: IXMLPartyRoleCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Role Code
  /// </summary>
  IXMLRoleCodeList = interface(IXMLNodeCollection)
    ['{B84635A6-D68B-48A8-9F68-C35DF55DC05B}']
    function GetEnumerator: IXMLRoleCodeListEnumerator;

    function Get_RoleCode(Index: Integer): IXMLPartyRoleCodeType;
    function Add: IXMLPartyRoleCodeType;
    function Insert(Index: Integer): IXMLPartyRoleCodeType;

    property RoleCode[Index: Integer]: IXMLPartyRoleCodeType read Get_RoleCode; default;
  end;

  IXMLGlobalIDListEnumerator = interface
    ['{72DD7386-F7C7-428B-A0AE-1BCAD7308B3A}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Global ID
  /// </summary>
  IXMLGlobalIDList = interface(IXMLNodeCollection)
    ['{63E9C9EB-F30F-4047-847F-DB2EFEF79B5C}']
    function GetEnumerator: IXMLGlobalIDListEnumerator;

    function Get_GlobalID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property GlobalID[Index: Integer]: IXMLIDType read Get_GlobalID; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Payment Discount Terms
  /// </summary>
  IXMLTradePaymentDiscountTermsType = interface(IXMLNode)
    ['{CD187A86-0279-4812-8AFB-17CFB3867EE8}']
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetHasBasisPeriodMeasure: Boolean;
    function GetBasisPeriodMeasure: IXMLMeasureType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasActualDiscountAmount: Boolean;
    function GetActualDiscountAmount: IXMLAmountType;

    property HasBasisDateTime: Boolean read GetHasBasisDateTime;
    property BasisDateTime: IXMLDateTimeType read GetBasisDateTime;
    property HasBasisPeriodMeasure: Boolean read GetHasBasisPeriodMeasure;
    property BasisPeriodMeasure: IXMLMeasureType read GetBasisPeriodMeasure;
    property HasBasisAmount: Boolean read GetHasBasisAmount;
    property BasisAmount: IXMLAmountType read GetBasisAmount;
    property HasCalculationPercent: Boolean read GetHasCalculationPercent;
    property CalculationPercent: IXMLPercentType read GetCalculationPercent;
    property HasActualDiscountAmount: Boolean read GetHasActualDiscountAmount;
    property ActualDiscountAmount: IXMLAmountType read GetActualDiscountAmount;
  end;

  /// <summary>
  ///    (BN/BN) Trade Payment Penalty Terms
  /// </summary>
  IXMLTradePaymentPenaltyTermsType = interface(IXMLNode)
    ['{FA677F17-D26D-40E4-AA5C-B58EB56751D6}']
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetHasBasisPeriodMeasure: Boolean;
    function GetBasisPeriodMeasure: IXMLMeasureType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasActualPenaltyAmount: Boolean;
    function GetActualPenaltyAmount: IXMLAmountType;

    property HasBasisDateTime: Boolean read GetHasBasisDateTime;
    property BasisDateTime: IXMLDateTimeType read GetBasisDateTime;
    property HasBasisPeriodMeasure: Boolean read GetHasBasisPeriodMeasure;
    property BasisPeriodMeasure: IXMLMeasureType read GetBasisPeriodMeasure;
    property HasBasisAmount: Boolean read GetHasBasisAmount;
    property BasisAmount: IXMLAmountType read GetBasisAmount;
    property HasCalculationPercent: Boolean read GetHasCalculationPercent;
    property CalculationPercent: IXMLPercentType read GetCalculationPercent;
    property HasActualPenaltyAmount: Boolean read GetHasActualPenaltyAmount;
    property ActualPenaltyAmount: IXMLAmountType read GetActualPenaltyAmount;
  end;

  /// <summary>
  ///    (BN/BN) Trade Payment Terms
  /// </summary>
  IXMLTradePaymentTermsType = interface(IXMLNode)
    ['{0F3B1645-B0CD-43E6-BABD-9EB175B8167A}']
    function GetHasID: Boolean;
    function GetID: IXMLPaymentTermsIDType;
    function GetHasFromEventCode: Boolean;
    function GetFromEventCode: IXMLPaymentTermsEventTimeReferenceCodeType;
    function GetHasSettlementPeriodMeasure: Boolean;
    function GetSettlementPeriodMeasure: IXMLMeasureType;
    function GetDescription: IXMLDescriptionList;
    function GetHasDueDateDateTime: Boolean;
    function GetDueDateDateTime: IXMLDateTimeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPaymentTermsTypeCodeType;
    function GetHasInstructionTypeCode: Boolean;
    function GetInstructionTypeCode: IXMLCodeType;
    function GetDirectDebitMandateID: IXMLDirectDebitMandateIDList;
    function GetHasPartialPaymentPercent: Boolean;
    function GetPartialPaymentPercent: IXMLPercentType;
    function GetPaymentMeansID: IXMLPaymentMeansIDList;
    function GetPartialPaymentAmount: IXMLPartialPaymentAmountList;
    function GetHasDueDateTime: Boolean;
    function GetDueDateTime: IXMLFormattedDateTimeType;
    function GetHasBillStartDateTime: Boolean;
    function GetBillStartDateTime: IXMLDateTimeType;
    function GetHasApplicableTradePaymentPenaltyTerms: Boolean;
    function GetApplicableTradePaymentPenaltyTerms: IXMLTradePaymentPenaltyTermsType;
    function GetHasApplicableTradePaymentDiscountTerms: Boolean;
    function GetApplicableTradePaymentDiscountTerms: IXMLTradePaymentDiscountTermsType;
    function GetPayeeTradeParty: IXMLPayeeTradePartyList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLPaymentTermsIDType read GetID;
    property HasFromEventCode: Boolean read GetHasFromEventCode;
    property FromEventCode: IXMLPaymentTermsEventTimeReferenceCodeType read GetFromEventCode;
    property HasSettlementPeriodMeasure: Boolean read GetHasSettlementPeriodMeasure;
    property SettlementPeriodMeasure: IXMLMeasureType read GetSettlementPeriodMeasure;
    property Description: IXMLDescriptionList read GetDescription;
    property HasDueDateDateTime: Boolean read GetHasDueDateDateTime;
    property DueDateDateTime: IXMLDateTimeType read GetDueDateDateTime;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLPaymentTermsTypeCodeType read GetTypeCode;
    property HasInstructionTypeCode: Boolean read GetHasInstructionTypeCode;
    property InstructionTypeCode: IXMLCodeType read GetInstructionTypeCode;
    property DirectDebitMandateID: IXMLDirectDebitMandateIDList read GetDirectDebitMandateID;
    property HasPartialPaymentPercent: Boolean read GetHasPartialPaymentPercent;
    property PartialPaymentPercent: IXMLPercentType read GetPartialPaymentPercent;
    property PaymentMeansID: IXMLPaymentMeansIDList read GetPaymentMeansID;
    property PartialPaymentAmount: IXMLPartialPaymentAmountList read GetPartialPaymentAmount;
    property HasDueDateTime: Boolean read GetHasDueDateTime;
    property DueDateTime: IXMLFormattedDateTimeType read GetDueDateTime;
    property HasBillStartDateTime: Boolean read GetHasBillStartDateTime;
    property BillStartDateTime: IXMLDateTimeType read GetBillStartDateTime;
    property HasApplicableTradePaymentPenaltyTerms: Boolean read GetHasApplicableTradePaymentPenaltyTerms;
    property ApplicableTradePaymentPenaltyTerms: IXMLTradePaymentPenaltyTermsType read GetApplicableTradePaymentPenaltyTerms;
    property HasApplicableTradePaymentDiscountTerms: Boolean read GetHasApplicableTradePaymentDiscountTerms;
    property ApplicableTradePaymentDiscountTerms: IXMLTradePaymentDiscountTermsType read GetApplicableTradePaymentDiscountTerms;
    property PayeeTradeParty: IXMLPayeeTradePartyList read GetPayeeTradeParty;
  end;

  IXMLPayeeTradePartyListEnumerator = interface
    ['{3B074626-D73C-4B42-9452-5445804B3D9E}']
    function GetCurrent: IXMLTradePartyType;
    function MoveNext: Boolean;
    property Current: IXMLTradePartyType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payee
  /// </summary>
  IXMLPayeeTradePartyList = interface(IXMLNodeCollection)
    ['{5AB7B41B-49E7-4839-B950-819A2AD90CF5}']
    function GetEnumerator: IXMLPayeeTradePartyListEnumerator;

    function Get_PayeeTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;

    property PayeeTradeParty[Index: Integer]: IXMLTradePartyType read Get_PayeeTradeParty; default;
  end;

  IXMLPartialPaymentAmountListEnumerator = interface
    ['{9B147FAA-99B3-4AC3-B015-AB6FE3FB9B5C}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Partial Payment Amount
  /// </summary>
  IXMLPartialPaymentAmountList = interface(IXMLNodeCollection)
    ['{C0FE8E52-105F-47AA-8618-C7FE40BE382C}']
    function GetEnumerator: IXMLPartialPaymentAmountListEnumerator;

    function Get_PartialPaymentAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property PartialPaymentAmount[Index: Integer]: IXMLAmountType read Get_PartialPaymentAmount; default;
  end;

  IXMLPaymentMeansIDListEnumerator = interface
    ['{EBF874B1-52A0-433C-85E9-19C1EECA5988}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payment Means ID
  /// </summary>
  IXMLPaymentMeansIDList = interface(IXMLNodeCollection)
    ['{8E888FF3-7567-4EEA-85C8-7A6A4AD565FA}']
    function GetEnumerator: IXMLPaymentMeansIDListEnumerator;

    function Get_PaymentMeansID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property PaymentMeansID[Index: Integer]: IXMLIDType read Get_PaymentMeansID; default;
  end;

  IXMLDirectDebitMandateIDListEnumerator = interface
    ['{44E60181-C139-4AAF-B3EA-38819785A816}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Direct Debit Mandate ID
  /// </summary>
  IXMLDirectDebitMandateIDList = interface(IXMLNodeCollection)
    ['{6E247FA8-DCFA-4605-8656-0B15E24CA63F}']
    function GetEnumerator: IXMLDirectDebitMandateIDListEnumerator;

    function Get_DirectDebitMandateID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property DirectDebitMandateID[Index: Integer]: IXMLIDType read Get_DirectDebitMandateID; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Price
  /// </summary>
  IXMLTradePriceType = interface(IXMLNode)
    ['{025702D4-1208-4EDF-80F3-CFDFDF939E55}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPriceTypeCodeType;
    function GetChargeAmount: IXMLChargeAmountList;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetHasMinimumQuantity: Boolean;
    function GetMinimumQuantity: IXMLQuantityType;
    function GetHasMaximumQuantity: Boolean;
    function GetMaximumQuantity: IXMLQuantityType;
    function GetChangeReason: IXMLChangeReasonList;
    function GetHasOrderUnitConversionFactorNumeric: Boolean;
    function GetOrderUnitConversionFactorNumeric: IXMLNumericType;
    function Get_Type: IXML_TypeList;
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetAppliedTradeAllowanceCharge: IXMLAppliedTradeAllowanceChargeList;
    function GetHasValiditySpecifiedPeriod: Boolean;
    function GetValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetIncludedTradeTax: IXMLIncludedTradeTaxList;
    function GetDeliveryTradeLocation: IXMLDeliveryTradeLocationList;
    function GetTradeComparisonReferencePrice: IXMLTradeComparisonReferencePriceList;
    function GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLPriceTypeCodeType read GetTypeCode;
    property ChargeAmount: IXMLChargeAmountList read GetChargeAmount;
    property HasBasisQuantity: Boolean read GetHasBasisQuantity;
    property BasisQuantity: IXMLQuantityType read GetBasisQuantity;
    property HasMinimumQuantity: Boolean read GetHasMinimumQuantity;
    property MinimumQuantity: IXMLQuantityType read GetMinimumQuantity;
    property HasMaximumQuantity: Boolean read GetHasMaximumQuantity;
    property MaximumQuantity: IXMLQuantityType read GetMaximumQuantity;
    property ChangeReason: IXMLChangeReasonList read GetChangeReason;
    property HasOrderUnitConversionFactorNumeric: Boolean read GetHasOrderUnitConversionFactorNumeric;
    property OrderUnitConversionFactorNumeric: IXMLNumericType read GetOrderUnitConversionFactorNumeric;
    property _Type: IXML_TypeList read Get_Type;
    property HasBasisDateTime: Boolean read GetHasBasisDateTime;
    property BasisDateTime: IXMLDateTimeType read GetBasisDateTime;
    property AppliedTradeAllowanceCharge: IXMLAppliedTradeAllowanceChargeList read GetAppliedTradeAllowanceCharge;
    property HasValiditySpecifiedPeriod: Boolean read GetHasValiditySpecifiedPeriod;
    property ValiditySpecifiedPeriod: IXMLSpecifiedPeriodType read GetValiditySpecifiedPeriod;
    property IncludedTradeTax: IXMLIncludedTradeTaxList read GetIncludedTradeTax;
    property DeliveryTradeLocation: IXMLDeliveryTradeLocationList read GetDeliveryTradeLocation;
    property TradeComparisonReferencePrice: IXMLTradeComparisonReferencePriceList read GetTradeComparisonReferencePrice;
    property AssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList read GetAssociatedReferencedDocument;
  end;

  IXMLAssociatedReferencedDocumentListEnumerator = interface
    ['{88ECCF1E-13DD-426F-90AC-B47784194F2E}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Associated Document
  /// </summary>
  IXMLAssociatedReferencedDocumentList = interface(IXMLNodeCollection)
    ['{FD465AD6-2E50-4422-8C0C-CDF0D73673A8}']
    function GetEnumerator: IXMLAssociatedReferencedDocumentListEnumerator;

    function Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property AssociatedReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_AssociatedReferencedDocument; default;
  end;

  IXMLTradeComparisonReferencePriceListEnumerator = interface
    ['{B8E99D62-6AAA-432F-BC0D-7C4F1533EC4E}']
    function GetCurrent: IXMLReferencePriceType;
    function MoveNext: Boolean;
    property Current: IXMLReferencePriceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Comparison Price
  /// </summary>
  IXMLTradeComparisonReferencePriceList = interface(IXMLNodeCollection)
    ['{FBCE3558-37C8-461E-A2AC-1E4424F73855}']
    function GetEnumerator: IXMLTradeComparisonReferencePriceListEnumerator;

    function Get_TradeComparisonReferencePrice(Index: Integer): IXMLReferencePriceType;
    function Add: IXMLReferencePriceType;
    function Insert(Index: Integer): IXMLReferencePriceType;

    property TradeComparisonReferencePrice[Index: Integer]: IXMLReferencePriceType read Get_TradeComparisonReferencePrice; default;
  end;

  IXMLDeliveryTradeLocationListEnumerator = interface
    ['{2E06A95F-201D-4C72-854B-69228067953D}']
    function GetCurrent: IXMLTradeLocationType;
    function MoveNext: Boolean;
    property Current: IXMLTradeLocationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Delivery Location
  /// </summary>
  IXMLDeliveryTradeLocationList = interface(IXMLNodeCollection)
    ['{CC3D438D-D828-4490-8625-53DAD78A0E6B}']
    function GetEnumerator: IXMLDeliveryTradeLocationListEnumerator;

    function Get_DeliveryTradeLocation(Index: Integer): IXMLTradeLocationType;
    function Add: IXMLTradeLocationType;
    function Insert(Index: Integer): IXMLTradeLocationType;

    property DeliveryTradeLocation[Index: Integer]: IXMLTradeLocationType read Get_DeliveryTradeLocation; default;
  end;

  IXMLIncludedTradeTaxListEnumerator = interface
    ['{2E188D0C-D98D-463F-BD5B-7E5844BC4A6D}']
    function GetCurrent: IXMLTradeTaxType;
    function MoveNext: Boolean;
    property Current: IXMLTradeTaxType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Tax
  /// </summary>
  IXMLIncludedTradeTaxList = interface(IXMLNodeCollection)
    ['{21D5ED07-B762-4765-8567-061D118D84FC}']
    function GetEnumerator: IXMLIncludedTradeTaxListEnumerator;

    function Get_IncludedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;

    property IncludedTradeTax[Index: Integer]: IXMLTradeTaxType read Get_IncludedTradeTax; default;
  end;

  IXMLAppliedTradeAllowanceChargeListEnumerator = interface
    ['{4C3DD6A8-4AEA-453D-BBE4-0BFAE936A7A1}']
    function GetCurrent: IXMLTradeAllowanceChargeType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAllowanceChargeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applied Allowance/Charge
  /// </summary>
  IXMLAppliedTradeAllowanceChargeList = interface(IXMLNodeCollection)
    ['{1FA0BF95-1316-4116-A5A5-A395F96EFB5E}']
    function GetEnumerator: IXMLAppliedTradeAllowanceChargeListEnumerator;

    function Get_AppliedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
    function Add: IXMLTradeAllowanceChargeType;
    function Insert(Index: Integer): IXMLTradeAllowanceChargeType;

    property AppliedTradeAllowanceCharge[Index: Integer]: IXMLTradeAllowanceChargeType read Get_AppliedTradeAllowanceCharge; default;
  end;

  IXML_TypeListEnumerator = interface
    ['{FC38E0FC-DF68-4EAD-AA84-9661F889F458}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Type Text
  /// </summary>
  IXML_TypeList = interface(IXMLNodeCollection)
    ['{E677F915-5F53-4D7D-AD17-DD025269CC8F}']
    function GetEnumerator: IXML_TypeListEnumerator;

    function Get__Type(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property _Type[Index: Integer]: IXMLTextType read Get__Type; default;
  end;

  IXMLChangeReasonListEnumerator = interface
    ['{0AE07988-9E13-494D-B960-F485A926BC90}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Change Reason Text
  /// </summary>
  IXMLChangeReasonList = interface(IXMLNodeCollection)
    ['{392D91CF-FBBC-449F-B2F0-0097819F076D}']
    function GetEnumerator: IXMLChangeReasonListEnumerator;

    function Get_ChangeReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property ChangeReason[Index: Integer]: IXMLTextType read Get_ChangeReason; default;
  end;

  IXMLChargeAmountListEnumerator = interface
    ['{48E65C8F-8ACA-4B65-9396-836519B753CC}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Charge Amount
  /// </summary>
  IXMLChargeAmountList = interface(IXMLNodeCollection)
    ['{41677FEF-3ADE-4560-8034-955C66E34E8D}']
    function GetEnumerator: IXMLChargeAmountListEnumerator;

    function Get_ChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ChargeAmount[Index: Integer]: IXMLAmountType read Get_ChargeAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Product Instance
  /// </summary>
  IXMLTradeProductInstanceType = interface(IXMLNode)
    ['{BDE8E2D3-9347-429C-BD44-910999AD4DF3}']
    function GetHasGlobalSerialID: Boolean;
    function GetGlobalSerialID: IXMLIDType;
    function GetHasBatchID: Boolean;
    function GetBatchID: IXMLIDType;
    function GetHasKanbanID: Boolean;
    function GetKanbanID: IXMLIDType;
    function GetHasSupplierAssignedSerialID: Boolean;
    function GetSupplierAssignedSerialID: IXMLIDType;
    function GetHasBestBeforeDateTime: Boolean;
    function GetBestBeforeDateTime: IXMLDateTimeType;
    function GetHasExpiryDateTime: Boolean;
    function GetExpiryDateTime: IXMLDateTimeType;
    function GetHasSellByDateTime: Boolean;
    function GetSellByDateTime: IXMLDateTimeType;
    function GetSerialID: IXMLSerialIDList;
    function GetRegistrationID: IXMLRegistrationIDList;
    function GetHasProductionSupplyChainEvent: Boolean;
    function GetProductionSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasPackagingSupplyChainEvent: Boolean;
    function GetPackagingSupplyChainEvent: IXMLSupplyChainEventType;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;

    property HasGlobalSerialID: Boolean read GetHasGlobalSerialID;
    property GlobalSerialID: IXMLIDType read GetGlobalSerialID;
    property HasBatchID: Boolean read GetHasBatchID;
    property BatchID: IXMLIDType read GetBatchID;
    property HasKanbanID: Boolean read GetHasKanbanID;
    property KanbanID: IXMLIDType read GetKanbanID;
    property HasSupplierAssignedSerialID: Boolean read GetHasSupplierAssignedSerialID;
    property SupplierAssignedSerialID: IXMLIDType read GetSupplierAssignedSerialID;
    property HasBestBeforeDateTime: Boolean read GetHasBestBeforeDateTime;
    property BestBeforeDateTime: IXMLDateTimeType read GetBestBeforeDateTime;
    property HasExpiryDateTime: Boolean read GetHasExpiryDateTime;
    property ExpiryDateTime: IXMLDateTimeType read GetExpiryDateTime;
    property HasSellByDateTime: Boolean read GetHasSellByDateTime;
    property SellByDateTime: IXMLDateTimeType read GetSellByDateTime;
    property SerialID: IXMLSerialIDList read GetSerialID;
    property RegistrationID: IXMLRegistrationIDList read GetRegistrationID;
    property HasProductionSupplyChainEvent: Boolean read GetHasProductionSupplyChainEvent;
    property ProductionSupplyChainEvent: IXMLSupplyChainEventType read GetProductionSupplyChainEvent;
    property HasPackagingSupplyChainEvent: Boolean read GetHasPackagingSupplyChainEvent;
    property PackagingSupplyChainEvent: IXMLSupplyChainEventType read GetPackagingSupplyChainEvent;
    property ApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList read GetApplicableMaterialGoodsCharacteristic;
    property ApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList read GetApplicableProductCharacteristic;
  end;

  IXMLRegistrationIDListEnumerator = interface
    ['{20317573-760A-494F-B739-39089AB90BF3}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Registration ID
  /// </summary>
  IXMLRegistrationIDList = interface(IXMLNodeCollection)
    ['{3C3C1D43-EE26-44B6-AEC1-9283D9EBC029}']
    function GetEnumerator: IXMLRegistrationIDListEnumerator;

    function Get_RegistrationID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property RegistrationID[Index: Integer]: IXMLIDType read Get_RegistrationID; default;
  end;

  IXMLSerialIDListEnumerator = interface
    ['{753A6462-4426-4BD8-AFEC-DA8AF143DEF6}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Serial ID
  /// </summary>
  IXMLSerialIDList = interface(IXMLNodeCollection)
    ['{E506D653-35B7-4EA5-80A1-27B2EDD85E90}']
    function GetEnumerator: IXMLSerialIDListEnumerator;

    function Get_SerialID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property SerialID[Index: Integer]: IXMLIDType read Get_SerialID; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Product
  /// </summary>
  IXMLTradeProductType = interface(IXMLNode)
    ['{374BB30C-80EB-4852-9A31-34A37B473999}']
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasSellerAssignedID: Boolean;
    function GetSellerAssignedID: IXMLIDType;
    function GetHasBuyerAssignedID: Boolean;
    function GetBuyerAssignedID: IXMLIDType;
    function GetHasManufacturerAssignedID: Boolean;
    function GetManufacturerAssignedID: IXMLIDType;
    function GetHasIndustryAssignedID: Boolean;
    function GetIndustryAssignedID: IXMLIDType;
    function GetHasModelID: Boolean;
    function GetModelID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTradeName: Boolean;
    function GetTradeName: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLMeasureType;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLMeasureType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLCodeType;
    function GetProductGroupID: IXMLProductGroupIDList;
    function GetHasNetVolumeMeasure: Boolean;
    function GetNetVolumeMeasure: IXMLMeasureType;
    function GetHasGrossVolumeMeasure: Boolean;
    function GetGrossVolumeMeasure: IXMLMeasureType;
    function GetEndItemTypeCode: IXMLEndItemTypeCodeList;
    function GetEndItemName: IXMLEndItemNameList;
    function GetCustomerAssignedID: IXMLCustomerAssignedIDList;
    function GetBatchID: IXMLBatchIDList;
    function GetHasAreaDensityMeasure: Boolean;
    function GetAreaDensityMeasure: IXMLMeasureType;
    function GetUseDescription: IXMLUseDescriptionList;
    function GetConciseDescription: IXMLConciseDescriptionList;
    function GetAdditionalDescription: IXMLAdditionalDescriptionList;
    function GetHasBrandName: Boolean;
    function GetBrandName: IXMLTextType;
    function GetHasSubBrandName: Boolean;
    function GetSubBrandName: IXMLTextType;
    function GetHasDrainedNetWeightMeasure: Boolean;
    function GetDrainedNetWeightMeasure: IXMLMeasureType;
    function GetHasVariableMeasureIndicator: Boolean;
    function GetVariableMeasureIndicator: IXMLIndicatorType;
    function GetHasConfigurableIndicator: Boolean;
    function GetConfigurableIndicator: IXMLIndicatorType;
    function GetHasColourCode: Boolean;
    function GetColourCode: IXMLCodeType;
    function GetColourDescription: IXMLColourDescriptionList;
    function GetHasRecyclingTypeCode: Boolean;
    function GetRecyclingTypeCode: IXMLCodeType;
    function GetUnitTypeCode: IXMLUnitTypeCodeList;
    function GetHasContentUnitQuantity: Boolean;
    function GetContentUnitQuantity: IXMLQuantityType;
    function GetHasCommonName: Boolean;
    function GetCommonName: IXMLTextType;
    function GetHasModelName: Boolean;
    function GetModelName: IXMLTextType;
    function GetDesignation: IXMLDesignationList;
    function GetHasFormattedCancellationAnnouncedLaunchDateTime: Boolean;
    function GetFormattedCancellationAnnouncedLaunchDateTime: IXMLFormattedDateTimeType;
    function GetHasFormattedLatestProductDataChangeDateTime: Boolean;
    function GetFormattedLatestProductDataChangeDateTime: IXMLFormattedDateTimeType;
    function GetHasExportIndicator: Boolean;
    function GetExportIndicator: IXMLIndicatorType;
    function GetUltimateCustomerAssignedExtensionID: IXMLUltimateCustomerAssignedExtensionIDList;
    function GetHasSizeCode: Boolean;
    function GetSizeCode: IXMLCodeType;
    function GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetDesignatedProductClassification: IXMLDesignatedProductClassificationList;
    function GetIndividualTradeProductInstance: IXMLIndividualTradeProductInstanceList;
    function GetCertificationEvidenceReferenceReferencedDocument: IXMLCertificationEvidenceReferenceReferencedDocumentList;
    function GetInspectionReferenceReferencedDocument: IXMLInspectionReferenceReferencedDocumentList;
    function GetHasOriginTradeCountry: Boolean;
    function GetOriginTradeCountry: IXMLTradeCountryType;
    function GetLinearSpatialDimension: IXMLLinearSpatialDimensionList;
    function GetHasMinimumLinearSpatialDimension: Boolean;
    function GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMaximumLinearSpatialDimension: Boolean;
    function GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasManufacturerTradeParty: Boolean;
    function GetManufacturerTradeParty: IXMLTradePartyType;
    function GetPresentationSpecifiedBinaryFile: IXMLPresentationSpecifiedBinaryFileList;
    function GetHasMSDSReferenceReferencedDocument: Boolean;
    function GetMSDSReferenceReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferenceReferencedDocument: IXMLAdditionalReferenceReferencedDocumentList;
    function GetHasLegalRightsOwnerTradeParty: Boolean;
    function GetLegalRightsOwnerTradeParty: IXMLTradePartyType;
    function GetHasBrandOwnerTradeParty: Boolean;
    function GetBrandOwnerTradeParty: IXMLTradePartyType;
    function GetIncludedReferencedProduct: IXMLIncludedReferencedProductList;
    function GetInformationNote: IXMLInformationNoteList;
    function GetBuyerSuppliedPartsReferenceReferencedDocument: IXMLBuyerSuppliedPartsReferenceReferencedDocumentList;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasGlobalID: Boolean read GetHasGlobalID;
    property GlobalID: IXMLIDType read GetGlobalID;
    property HasSellerAssignedID: Boolean read GetHasSellerAssignedID;
    property SellerAssignedID: IXMLIDType read GetSellerAssignedID;
    property HasBuyerAssignedID: Boolean read GetHasBuyerAssignedID;
    property BuyerAssignedID: IXMLIDType read GetBuyerAssignedID;
    property HasManufacturerAssignedID: Boolean read GetHasManufacturerAssignedID;
    property ManufacturerAssignedID: IXMLIDType read GetManufacturerAssignedID;
    property HasIndustryAssignedID: Boolean read GetHasIndustryAssignedID;
    property IndustryAssignedID: IXMLIDType read GetIndustryAssignedID;
    property HasModelID: Boolean read GetHasModelID;
    property ModelID: IXMLIDType read GetModelID;
    property Name: IXMLNameList read GetName;
    property HasTradeName: Boolean read GetHasTradeName;
    property TradeName: IXMLTextType read GetTradeName;
    property Description: IXMLDescriptionList read GetDescription;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasNetWeightMeasure: Boolean read GetHasNetWeightMeasure;
    property NetWeightMeasure: IXMLMeasureType read GetNetWeightMeasure;
    property HasGrossWeightMeasure: Boolean read GetHasGrossWeightMeasure;
    property GrossWeightMeasure: IXMLMeasureType read GetGrossWeightMeasure;
    property HasStatusCode: Boolean read GetHasStatusCode;
    property StatusCode: IXMLCodeType read GetStatusCode;
    property ProductGroupID: IXMLProductGroupIDList read GetProductGroupID;
    property HasNetVolumeMeasure: Boolean read GetHasNetVolumeMeasure;
    property NetVolumeMeasure: IXMLMeasureType read GetNetVolumeMeasure;
    property HasGrossVolumeMeasure: Boolean read GetHasGrossVolumeMeasure;
    property GrossVolumeMeasure: IXMLMeasureType read GetGrossVolumeMeasure;
    property EndItemTypeCode: IXMLEndItemTypeCodeList read GetEndItemTypeCode;
    property EndItemName: IXMLEndItemNameList read GetEndItemName;
    property CustomerAssignedID: IXMLCustomerAssignedIDList read GetCustomerAssignedID;
    property BatchID: IXMLBatchIDList read GetBatchID;
    property HasAreaDensityMeasure: Boolean read GetHasAreaDensityMeasure;
    property AreaDensityMeasure: IXMLMeasureType read GetAreaDensityMeasure;
    property UseDescription: IXMLUseDescriptionList read GetUseDescription;
    property ConciseDescription: IXMLConciseDescriptionList read GetConciseDescription;
    property AdditionalDescription: IXMLAdditionalDescriptionList read GetAdditionalDescription;
    property HasBrandName: Boolean read GetHasBrandName;
    property BrandName: IXMLTextType read GetBrandName;
    property HasSubBrandName: Boolean read GetHasSubBrandName;
    property SubBrandName: IXMLTextType read GetSubBrandName;
    property HasDrainedNetWeightMeasure: Boolean read GetHasDrainedNetWeightMeasure;
    property DrainedNetWeightMeasure: IXMLMeasureType read GetDrainedNetWeightMeasure;
    property HasVariableMeasureIndicator: Boolean read GetHasVariableMeasureIndicator;
    property VariableMeasureIndicator: IXMLIndicatorType read GetVariableMeasureIndicator;
    property HasConfigurableIndicator: Boolean read GetHasConfigurableIndicator;
    property ConfigurableIndicator: IXMLIndicatorType read GetConfigurableIndicator;
    property HasColourCode: Boolean read GetHasColourCode;
    property ColourCode: IXMLCodeType read GetColourCode;
    property ColourDescription: IXMLColourDescriptionList read GetColourDescription;
    property HasRecyclingTypeCode: Boolean read GetHasRecyclingTypeCode;
    property RecyclingTypeCode: IXMLCodeType read GetRecyclingTypeCode;
    property UnitTypeCode: IXMLUnitTypeCodeList read GetUnitTypeCode;
    property HasContentUnitQuantity: Boolean read GetHasContentUnitQuantity;
    property ContentUnitQuantity: IXMLQuantityType read GetContentUnitQuantity;
    property HasCommonName: Boolean read GetHasCommonName;
    property CommonName: IXMLTextType read GetCommonName;
    property HasModelName: Boolean read GetHasModelName;
    property ModelName: IXMLTextType read GetModelName;
    property Designation: IXMLDesignationList read GetDesignation;
    property HasFormattedCancellationAnnouncedLaunchDateTime: Boolean read GetHasFormattedCancellationAnnouncedLaunchDateTime;
    property FormattedCancellationAnnouncedLaunchDateTime: IXMLFormattedDateTimeType read GetFormattedCancellationAnnouncedLaunchDateTime;
    property HasFormattedLatestProductDataChangeDateTime: Boolean read GetHasFormattedLatestProductDataChangeDateTime;
    property FormattedLatestProductDataChangeDateTime: IXMLFormattedDateTimeType read GetFormattedLatestProductDataChangeDateTime;
    property HasExportIndicator: Boolean read GetHasExportIndicator;
    property ExportIndicator: IXMLIndicatorType read GetExportIndicator;
    property UltimateCustomerAssignedExtensionID: IXMLUltimateCustomerAssignedExtensionIDList read GetUltimateCustomerAssignedExtensionID;
    property HasSizeCode: Boolean read GetHasSizeCode;
    property SizeCode: IXMLCodeType read GetSizeCode;
    property ApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList read GetApplicableProductCharacteristic;
    property ApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList read GetApplicableMaterialGoodsCharacteristic;
    property DesignatedProductClassification: IXMLDesignatedProductClassificationList read GetDesignatedProductClassification;
    property IndividualTradeProductInstance: IXMLIndividualTradeProductInstanceList read GetIndividualTradeProductInstance;
    property CertificationEvidenceReferenceReferencedDocument: IXMLCertificationEvidenceReferenceReferencedDocumentList read GetCertificationEvidenceReferenceReferencedDocument;
    property InspectionReferenceReferencedDocument: IXMLInspectionReferenceReferencedDocumentList read GetInspectionReferenceReferencedDocument;
    property HasOriginTradeCountry: Boolean read GetHasOriginTradeCountry;
    property OriginTradeCountry: IXMLTradeCountryType read GetOriginTradeCountry;
    property LinearSpatialDimension: IXMLLinearSpatialDimensionList read GetLinearSpatialDimension;
    property HasMinimumLinearSpatialDimension: Boolean read GetHasMinimumLinearSpatialDimension;
    property MinimumLinearSpatialDimension: IXMLSpatialDimensionType read GetMinimumLinearSpatialDimension;
    property HasMaximumLinearSpatialDimension: Boolean read GetHasMaximumLinearSpatialDimension;
    property MaximumLinearSpatialDimension: IXMLSpatialDimensionType read GetMaximumLinearSpatialDimension;
    property HasManufacturerTradeParty: Boolean read GetHasManufacturerTradeParty;
    property ManufacturerTradeParty: IXMLTradePartyType read GetManufacturerTradeParty;
    property PresentationSpecifiedBinaryFile: IXMLPresentationSpecifiedBinaryFileList read GetPresentationSpecifiedBinaryFile;
    property HasMSDSReferenceReferencedDocument: Boolean read GetHasMSDSReferenceReferencedDocument;
    property MSDSReferenceReferencedDocument: IXMLReferencedDocumentType read GetMSDSReferenceReferencedDocument;
    property AdditionalReferenceReferencedDocument: IXMLAdditionalReferenceReferencedDocumentList read GetAdditionalReferenceReferencedDocument;
    property HasLegalRightsOwnerTradeParty: Boolean read GetHasLegalRightsOwnerTradeParty;
    property LegalRightsOwnerTradeParty: IXMLTradePartyType read GetLegalRightsOwnerTradeParty;
    property HasBrandOwnerTradeParty: Boolean read GetHasBrandOwnerTradeParty;
    property BrandOwnerTradeParty: IXMLTradePartyType read GetBrandOwnerTradeParty;
    property IncludedReferencedProduct: IXMLIncludedReferencedProductList read GetIncludedReferencedProduct;
    property InformationNote: IXMLInformationNoteList read GetInformationNote;
    property BuyerSuppliedPartsReferenceReferencedDocument: IXMLBuyerSuppliedPartsReferenceReferencedDocumentList read GetBuyerSuppliedPartsReferenceReferencedDocument;
  end;

  IXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator = interface
    ['{EFE9CA29-0953-4DBC-9217-44DACA749711}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Buyer Supplied Parts Reference Document
  /// </summary>
  IXMLBuyerSuppliedPartsReferenceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{11898408-3FD4-420E-95D2-265DBD4F03C4}']
    function GetEnumerator: IXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator;

    function Get_BuyerSuppliedPartsReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property BuyerSuppliedPartsReferenceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_BuyerSuppliedPartsReferenceReferencedDocument; default;
  end;

  IXMLInformationNoteListEnumerator = interface
    ['{00B00A00-3B4C-4AA5-8DAF-71B32911A382}']
    function GetCurrent: IXMLNoteType;
    function MoveNext: Boolean;
    property Current: IXMLNoteType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Information Note
  /// </summary>
  IXMLInformationNoteList = interface(IXMLNodeCollection)
    ['{B827C2C2-8A75-48A2-83FC-8BF11ADD9F1D}']
    function GetEnumerator: IXMLInformationNoteListEnumerator;

    function Get_InformationNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;

    property InformationNote[Index: Integer]: IXMLNoteType read Get_InformationNote; default;
  end;

  IXMLIncludedReferencedProductListEnumerator = interface
    ['{DD791BD5-F5CC-4407-A754-7555C422ACC4}']
    function GetCurrent: IXMLReferencedProductType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedProductType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Included Product
  /// </summary>
  IXMLIncludedReferencedProductList = interface(IXMLNodeCollection)
    ['{65598471-9A0B-4513-9EE0-42189B23B44E}']
    function GetEnumerator: IXMLIncludedReferencedProductListEnumerator;

    function Get_IncludedReferencedProduct(Index: Integer): IXMLReferencedProductType;
    function Add: IXMLReferencedProductType;
    function Insert(Index: Integer): IXMLReferencedProductType;

    property IncludedReferencedProduct[Index: Integer]: IXMLReferencedProductType read Get_IncludedReferencedProduct; default;
  end;

  IXMLAdditionalReferenceReferencedDocumentListEnumerator = interface
    ['{3EBB0E06-BDBA-445C-B7EF-076AC1157772}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Additional Document
  /// </summary>
  IXMLAdditionalReferenceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{B637B5DB-1250-458D-90D0-6C05EC94A690}']
    function GetEnumerator: IXMLAdditionalReferenceReferencedDocumentListEnumerator;

    function Get_AdditionalReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property AdditionalReferenceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_AdditionalReferenceReferencedDocument; default;
  end;

  IXMLPresentationSpecifiedBinaryFileListEnumerator = interface
    ['{F85678EC-2B87-4931-A494-75C6971A75FA}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Presentation Binary File
  /// </summary>
  IXMLPresentationSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{56A6D2D9-22E4-4313-8779-51361B9745A7}']
    function GetEnumerator: IXMLPresentationSpecifiedBinaryFileListEnumerator;

    function Get_PresentationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property PresentationSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_PresentationSpecifiedBinaryFile; default;
  end;

  IXMLLinearSpatialDimensionListEnumerator = interface
    ['{ACA30DB6-1691-4B83-9EC5-03C95A0B75E1}']
    function GetCurrent: IXMLSpatialDimensionType;
    function MoveNext: Boolean;
    property Current: IXMLSpatialDimensionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Dimensions
  /// </summary>
  IXMLLinearSpatialDimensionList = interface(IXMLNodeCollection)
    ['{0F8ACBA6-2881-47A7-B588-EA8752CE0B3B}']
    function GetEnumerator: IXMLLinearSpatialDimensionListEnumerator;

    function Get_LinearSpatialDimension(Index: Integer): IXMLSpatialDimensionType;
    function Add: IXMLSpatialDimensionType;
    function Insert(Index: Integer): IXMLSpatialDimensionType;

    property LinearSpatialDimension[Index: Integer]: IXMLSpatialDimensionType read Get_LinearSpatialDimension; default;
  end;

  IXMLInspectionReferenceReferencedDocumentListEnumerator = interface
    ['{450D5B8B-FAE0-4B3F-BCDC-A2CF7A61DC07}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Inspection Document
  /// </summary>
  IXMLInspectionReferenceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{D21622FE-7472-46BE-AD07-27E2F3B80943}']
    function GetEnumerator: IXMLInspectionReferenceReferencedDocumentListEnumerator;

    function Get_InspectionReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property InspectionReferenceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_InspectionReferenceReferencedDocument; default;
  end;

  IXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator = interface
    ['{23D076CA-62E3-47C8-81B4-61D81E316741}']
    function GetCurrent: IXMLReferencedDocumentType;
    function MoveNext: Boolean;
    property Current: IXMLReferencedDocumentType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Certification Evidence Document
  /// </summary>
  IXMLCertificationEvidenceReferenceReferencedDocumentList = interface(IXMLNodeCollection)
    ['{35B4960C-929D-4694-A736-A950D8051651}']
    function GetEnumerator: IXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator;

    function Get_CertificationEvidenceReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    property CertificationEvidenceReferenceReferencedDocument[Index: Integer]: IXMLReferencedDocumentType read Get_CertificationEvidenceReferenceReferencedDocument; default;
  end;

  IXMLIndividualTradeProductInstanceListEnumerator = interface
    ['{B4585773-A217-4056-8870-BCBED1512F87}']
    function GetCurrent: IXMLTradeProductInstanceType;
    function MoveNext: Boolean;
    property Current: IXMLTradeProductInstanceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Individual Product Instance
  /// </summary>
  IXMLIndividualTradeProductInstanceList = interface(IXMLNodeCollection)
    ['{667F01B2-60BD-476C-ADEC-02B8D0D79E78}']
    function GetEnumerator: IXMLIndividualTradeProductInstanceListEnumerator;

    function Get_IndividualTradeProductInstance(Index: Integer): IXMLTradeProductInstanceType;
    function Add: IXMLTradeProductInstanceType;
    function Insert(Index: Integer): IXMLTradeProductInstanceType;

    property IndividualTradeProductInstance[Index: Integer]: IXMLTradeProductInstanceType read Get_IndividualTradeProductInstance; default;
  end;

  IXMLDesignatedProductClassificationListEnumerator = interface
    ['{E8136B06-8D29-4BA5-87D6-5770C5E254C6}']
    function GetCurrent: IXMLProductClassificationType;
    function MoveNext: Boolean;
    property Current: IXMLProductClassificationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Classification
  /// </summary>
  IXMLDesignatedProductClassificationList = interface(IXMLNodeCollection)
    ['{EA682019-B00A-4B6A-915A-86D640604407}']
    function GetEnumerator: IXMLDesignatedProductClassificationListEnumerator;

    function Get_DesignatedProductClassification(Index: Integer): IXMLProductClassificationType;
    function Add: IXMLProductClassificationType;
    function Insert(Index: Integer): IXMLProductClassificationType;

    property DesignatedProductClassification[Index: Integer]: IXMLProductClassificationType read Get_DesignatedProductClassification; default;
  end;

  IXMLApplicableMaterialGoodsCharacteristicListEnumerator = interface
    ['{F82B5114-45E9-4C9D-84F1-FA2C0BC87B42}']
    function GetCurrent: IXMLMaterialGoodsCharacteristicType;
    function MoveNext: Boolean;
    property Current: IXMLMaterialGoodsCharacteristicType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Material Goods Characteristic
  /// </summary>
  IXMLApplicableMaterialGoodsCharacteristicList = interface(IXMLNodeCollection)
    ['{95F72CED-D1C2-462B-9282-9F379D78B243}']
    function GetEnumerator: IXMLApplicableMaterialGoodsCharacteristicListEnumerator;

    function Get_ApplicableMaterialGoodsCharacteristic(Index: Integer): IXMLMaterialGoodsCharacteristicType;
    function Add: IXMLMaterialGoodsCharacteristicType;
    function Insert(Index: Integer): IXMLMaterialGoodsCharacteristicType;

    property ApplicableMaterialGoodsCharacteristic[Index: Integer]: IXMLMaterialGoodsCharacteristicType read Get_ApplicableMaterialGoodsCharacteristic; default;
  end;

  IXMLApplicableProductCharacteristicListEnumerator = interface
    ['{6D208AA2-4724-4070-9F45-9BE69396E1E5}']
    function GetCurrent: IXMLProductCharacteristicType;
    function MoveNext: Boolean;
    property Current: IXMLProductCharacteristicType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Characteristic
  /// </summary>
  IXMLApplicableProductCharacteristicList = interface(IXMLNodeCollection)
    ['{C079404B-4A7E-43C4-900B-093429F3CACA}']
    function GetEnumerator: IXMLApplicableProductCharacteristicListEnumerator;

    function Get_ApplicableProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
    function Add: IXMLProductCharacteristicType;
    function Insert(Index: Integer): IXMLProductCharacteristicType;

    property ApplicableProductCharacteristic[Index: Integer]: IXMLProductCharacteristicType read Get_ApplicableProductCharacteristic; default;
  end;

  IXMLUltimateCustomerAssignedExtensionIDListEnumerator = interface
    ['{C4864698-84A0-40CF-9FD7-CCEC6A67D5EE}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Ultimate Customer Assigned Extension ID
  /// </summary>
  IXMLUltimateCustomerAssignedExtensionIDList = interface(IXMLNodeCollection)
    ['{ADFD1EDB-B0E8-4776-AADC-55BB6B9D6CC0}']
    function GetEnumerator: IXMLUltimateCustomerAssignedExtensionIDListEnumerator;

    function Get_UltimateCustomerAssignedExtensionID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property UltimateCustomerAssignedExtensionID[Index: Integer]: IXMLIDType read Get_UltimateCustomerAssignedExtensionID; default;
  end;

  IXMLDesignationListEnumerator = interface
    ['{1C6BF64F-5B1B-4749-90E4-96FC988121CB}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Designation Text
  /// </summary>
  IXMLDesignationList = interface(IXMLNodeCollection)
    ['{F99F1A09-E195-4543-99AE-3B1860FE824B}']
    function GetEnumerator: IXMLDesignationListEnumerator;

    function Get_Designation(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Designation[Index: Integer]: IXMLTextType read Get_Designation; default;
  end;

  IXMLUnitTypeCodeListEnumerator = interface
    ['{FAA50AE4-D994-4767-B73F-24E6E3DB4D2A}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Unit Type Code
  /// </summary>
  IXMLUnitTypeCodeList = interface(IXMLNodeCollection)
    ['{080D98D9-F656-4B3C-9D47-6CCFCD9FFCE4}']
    function GetEnumerator: IXMLUnitTypeCodeListEnumerator;

    function Get_UnitTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property UnitTypeCode[Index: Integer]: IXMLCodeType read Get_UnitTypeCode; default;
  end;

  IXMLColourDescriptionListEnumerator = interface
    ['{B5B9B174-2CB9-4C25-A33B-0A9A5D2B5A35}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Colour Description
  /// </summary>
  IXMLColourDescriptionList = interface(IXMLNodeCollection)
    ['{52A0B054-7128-4045-A092-EDF6F6A46CD8}']
    function GetEnumerator: IXMLColourDescriptionListEnumerator;

    function Get_ColourDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property ColourDescription[Index: Integer]: IXMLTextType read Get_ColourDescription; default;
  end;

  IXMLAdditionalDescriptionListEnumerator = interface
    ['{DC6245A1-D694-4352-886D-B621EC056D19}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Additional Description
  /// </summary>
  IXMLAdditionalDescriptionList = interface(IXMLNodeCollection)
    ['{62FC349D-E525-454D-937A-2FCFB653C5E0}']
    function GetEnumerator: IXMLAdditionalDescriptionListEnumerator;

    function Get_AdditionalDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property AdditionalDescription[Index: Integer]: IXMLTextType read Get_AdditionalDescription; default;
  end;

  IXMLConciseDescriptionListEnumerator = interface
    ['{B1952AD0-D95B-4D08-ADB1-3BD87AF3FC41}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Concise Description
  /// </summary>
  IXMLConciseDescriptionList = interface(IXMLNodeCollection)
    ['{9ADBA266-7246-4C75-A6ED-25803EC2C826}']
    function GetEnumerator: IXMLConciseDescriptionListEnumerator;

    function Get_ConciseDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property ConciseDescription[Index: Integer]: IXMLTextType read Get_ConciseDescription; default;
  end;

  IXMLUseDescriptionListEnumerator = interface
    ['{C0E61EA0-FA50-4A1C-99AD-627FFA113F72}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Use Description
  /// </summary>
  IXMLUseDescriptionList = interface(IXMLNodeCollection)
    ['{129327BE-058B-445A-A81D-D25A2776445F}']
    function GetEnumerator: IXMLUseDescriptionListEnumerator;

    function Get_UseDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property UseDescription[Index: Integer]: IXMLTextType read Get_UseDescription; default;
  end;

  IXMLBatchIDListEnumerator = interface
    ['{3E10461F-825B-40A2-933C-78F4B7DDF96C}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Batch ID
  /// </summary>
  IXMLBatchIDList = interface(IXMLNodeCollection)
    ['{D5580950-B2F9-4EBF-BA4F-29E992B8615E}']
    function GetEnumerator: IXMLBatchIDListEnumerator;

    function Get_BatchID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property BatchID[Index: Integer]: IXMLIDType read Get_BatchID; default;
  end;

  IXMLCustomerAssignedIDListEnumerator = interface
    ['{8A2CBE96-CBC6-41B6-8843-2D8C43E772F9}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Customer Assigned ID
  /// </summary>
  IXMLCustomerAssignedIDList = interface(IXMLNodeCollection)
    ['{43F017E9-892A-4431-862E-0AD70193DF2E}']
    function GetEnumerator: IXMLCustomerAssignedIDListEnumerator;

    function Get_CustomerAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property CustomerAssignedID[Index: Integer]: IXMLIDType read Get_CustomerAssignedID; default;
  end;

  IXMLEndItemNameListEnumerator = interface
    ['{69585D10-5702-4B52-A6C7-E12CB3F90C0F}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) End Item Name
  /// </summary>
  IXMLEndItemNameList = interface(IXMLNodeCollection)
    ['{1AC00366-CE21-45D0-86E4-918B24EC6261}']
    function GetEnumerator: IXMLEndItemNameListEnumerator;

    function Get_EndItemName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property EndItemName[Index: Integer]: IXMLTextType read Get_EndItemName; default;
  end;

  IXMLEndItemTypeCodeListEnumerator = interface
    ['{8ECD080D-044D-420D-B1A3-6FAA98E9C3D5}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) End Item Type Code
  /// </summary>
  IXMLEndItemTypeCodeList = interface(IXMLNodeCollection)
    ['{A6CB3B04-8819-42DC-ACAD-14ADA347335A}']
    function GetEnumerator: IXMLEndItemTypeCodeListEnumerator;

    function Get_EndItemTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property EndItemTypeCode[Index: Integer]: IXMLCodeType read Get_EndItemTypeCode; default;
  end;

  IXMLProductGroupIDListEnumerator = interface
    ['{6E2A960D-C0F4-418B-8BA8-DF67D6B083F2}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Product Group ID
  /// </summary>
  IXMLProductGroupIDList = interface(IXMLNodeCollection)
    ['{26CEBB5A-3B89-4FE8-829B-FE4D5BF9E0EA}']
    function GetEnumerator: IXMLProductGroupIDListEnumerator;

    function Get_ProductGroupID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property ProductGroupID[Index: Integer]: IXMLIDType read Get_ProductGroupID; default;
  end;

  IXMLNameListEnumerator = interface
    ['{6A4F5524-D498-4B7A-B73F-3B32F47426A6}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Name
  /// </summary>
  IXMLNameList = interface(IXMLNodeCollection)
    ['{7548D242-B5C4-4328-A97F-93C250E6CF28}']
    function GetEnumerator: IXMLNameListEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Name[Index: Integer]: IXMLTextType read Get_Name; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Settlement Financial Card
  /// </summary>
  IXMLTradeSettlementFinancialCardType = interface(IXMLNode)
    ['{82F410CF-E81B-4C6F-A35A-2883F162AB85}']
    function GetHasMicrochipIndicator: Boolean;
    function GetMicrochipIndicator: IXMLIndicatorType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasCardholderName: Boolean;
    function GetCardholderName: IXMLTextType;
    function GetHasExpiryDate: Boolean;
    function GetExpiryDate: IXMLDateType;
    function GetHasVerificationNumeric: Boolean;
    function GetVerificationNumeric: IXMLNumericType;
    function GetHasValidFromDateTime: Boolean;
    function GetValidFromDateTime: IXMLDateOnlyFormattedDateTimeType;
    function GetCreditLimitAmount: IXMLCreditLimitAmountList;
    function GetCreditAvailableAmount: IXMLCreditAvailableAmountList;
    function GetHasInterestRatePercent: Boolean;
    function GetInterestRatePercent: IXMLPercentType;
    function GetHasIssuingCompanyName: Boolean;
    function GetIssuingCompanyName: IXMLTextType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;

    property HasMicrochipIndicator: Boolean read GetHasMicrochipIndicator;
    property MicrochipIndicator: IXMLIndicatorType read GetMicrochipIndicator;
    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasCardholderName: Boolean read GetHasCardholderName;
    property CardholderName: IXMLTextType read GetCardholderName;
    property HasExpiryDate: Boolean read GetHasExpiryDate;
    property ExpiryDate: IXMLDateType read GetExpiryDate;
    property HasVerificationNumeric: Boolean read GetHasVerificationNumeric;
    property VerificationNumeric: IXMLNumericType read GetVerificationNumeric;
    property HasValidFromDateTime: Boolean read GetHasValidFromDateTime;
    property ValidFromDateTime: IXMLDateOnlyFormattedDateTimeType read GetValidFromDateTime;
    property CreditLimitAmount: IXMLCreditLimitAmountList read GetCreditLimitAmount;
    property CreditAvailableAmount: IXMLCreditAvailableAmountList read GetCreditAvailableAmount;
    property HasInterestRatePercent: Boolean read GetHasInterestRatePercent;
    property InterestRatePercent: IXMLPercentType read GetInterestRatePercent;
    property HasIssuingCompanyName: Boolean read GetHasIssuingCompanyName;
    property IssuingCompanyName: IXMLTextType read GetIssuingCompanyName;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
  end;

  IXMLCreditAvailableAmountListEnumerator = interface
    ['{40DC30A2-33EA-465C-8B39-6FE30301D5E6}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Credit Available Amount
  /// </summary>
  IXMLCreditAvailableAmountList = interface(IXMLNodeCollection)
    ['{EA375571-1794-4233-9AF3-0F6F0020A978}']
    function GetEnumerator: IXMLCreditAvailableAmountListEnumerator;

    function Get_CreditAvailableAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property CreditAvailableAmount[Index: Integer]: IXMLAmountType read Get_CreditAvailableAmount; default;
  end;

  IXMLCreditLimitAmountListEnumerator = interface
    ['{4E232F64-3B0C-462C-829F-0D09D4815D58}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Credit Limit Amount
  /// </summary>
  IXMLCreditLimitAmountList = interface(IXMLNodeCollection)
    ['{49B5F27C-B6F7-4B96-A5CB-E4F4D3B818DD}']
    function GetEnumerator: IXMLCreditLimitAmountListEnumerator;

    function Get_CreditLimitAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property CreditLimitAmount[Index: Integer]: IXMLAmountType read Get_CreditLimitAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Settlement Header Monetary Summation
  /// </summary>
  IXMLTradeSettlementHeaderMonetarySummationType = interface(IXMLNode)
    ['{A15E019C-F59E-4BC2-BDE0-B058B7408381}']
    function GetLineTotalAmount: IXMLLineTotalAmountList;
    function GetChargeTotalAmount: IXMLChargeTotalAmountList;
    function GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    function GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    function GetTaxTotalAmount: IXMLTaxTotalAmountList;
    function GetRoundingAmount: IXMLRoundingAmountList;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetTotalPrepaidAmount: IXMLTotalPrepaidAmountList;
    function GetTotalDiscountAmount: IXMLTotalDiscountAmountList;
    function GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    function GetDuePayableAmount: IXMLDuePayableAmountList;
    function GetRetailValueExcludingTaxInformationAmount: IXMLRetailValueExcludingTaxInformationAmountList;
    function GetTotalDepositFeeInformationAmount: IXMLTotalDepositFeeInformationAmountList;
    function GetProductValueExcludingTobaccoTaxInformationAmount: IXMLProductValueExcludingTobaccoTaxInformationAmountList;
    function GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    function GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    function GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
    function GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    function GetInsuranceChargeTotalAmount: IXMLInsuranceChargeTotalAmountList;
    function GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;

    property LineTotalAmount: IXMLLineTotalAmountList read GetLineTotalAmount;
    property ChargeTotalAmount: IXMLChargeTotalAmountList read GetChargeTotalAmount;
    property AllowanceTotalAmount: IXMLAllowanceTotalAmountList read GetAllowanceTotalAmount;
    property TaxBasisTotalAmount: IXMLTaxBasisTotalAmountList read GetTaxBasisTotalAmount;
    property TaxTotalAmount: IXMLTaxTotalAmountList read GetTaxTotalAmount;
    property RoundingAmount: IXMLRoundingAmountList read GetRoundingAmount;
    property GrandTotalAmount: IXMLGrandTotalAmountList read GetGrandTotalAmount;
    property InformationAmount: IXMLInformationAmountList read GetInformationAmount;
    property TotalPrepaidAmount: IXMLTotalPrepaidAmountList read GetTotalPrepaidAmount;
    property TotalDiscountAmount: IXMLTotalDiscountAmountList read GetTotalDiscountAmount;
    property TotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList read GetTotalAllowanceChargeAmount;
    property DuePayableAmount: IXMLDuePayableAmountList read GetDuePayableAmount;
    property RetailValueExcludingTaxInformationAmount: IXMLRetailValueExcludingTaxInformationAmountList read GetRetailValueExcludingTaxInformationAmount;
    property TotalDepositFeeInformationAmount: IXMLTotalDepositFeeInformationAmountList read GetTotalDepositFeeInformationAmount;
    property ProductValueExcludingTobaccoTaxInformationAmount: IXMLProductValueExcludingTobaccoTaxInformationAmountList read GetProductValueExcludingTobaccoTaxInformationAmount;
    property TotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList read GetTotalRetailValueInformationAmount;
    property GrossLineTotalAmount: IXMLGrossLineTotalAmountList read GetGrossLineTotalAmount;
    property NetLineTotalAmount: IXMLNetLineTotalAmountList read GetNetLineTotalAmount;
    property NetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList read GetNetIncludingTaxesLineTotalAmount;
    property InsuranceChargeTotalAmount: IXMLInsuranceChargeTotalAmountList read GetInsuranceChargeTotalAmount;
    property IncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList read GetIncludingTaxesLineTotalAmount;
  end;

  IXMLInsuranceChargeTotalAmountListEnumerator = interface
    ['{8C470DE4-5ABF-4F5D-A0AE-FF7282998406}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Insurance Charge Total Amount
  /// </summary>
  IXMLInsuranceChargeTotalAmountList = interface(IXMLNodeCollection)
    ['{513C9781-41D5-4607-B0B3-31C7CA14FEBE}']
    function GetEnumerator: IXMLInsuranceChargeTotalAmountListEnumerator;

    function Get_InsuranceChargeTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property InsuranceChargeTotalAmount[Index: Integer]: IXMLAmountType read Get_InsuranceChargeTotalAmount; default;
  end;

  IXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator = interface
    ['{25B703E9-847E-4C92-8C7F-F0135C59FE50}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Product Value Excluding Tobacco Tax Information Amount
  /// </summary>
  IXMLProductValueExcludingTobaccoTaxInformationAmountList = interface(IXMLNodeCollection)
    ['{EF1C33FF-D02A-431C-941D-A63D57369C95}']
    function GetEnumerator: IXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator;

    function Get_ProductValueExcludingTobaccoTaxInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ProductValueExcludingTobaccoTaxInformationAmount[Index: Integer]: IXMLAmountType read Get_ProductValueExcludingTobaccoTaxInformationAmount; default;
  end;

  IXMLTotalDepositFeeInformationAmountListEnumerator = interface
    ['{4D768CD1-774E-42A7-967F-B9C636DCF303}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Deposit Fee Information Amount
  /// </summary>
  IXMLTotalDepositFeeInformationAmountList = interface(IXMLNodeCollection)
    ['{4CA2FEF1-A56F-4E11-9170-B14F01F985A1}']
    function GetEnumerator: IXMLTotalDepositFeeInformationAmountListEnumerator;

    function Get_TotalDepositFeeInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TotalDepositFeeInformationAmount[Index: Integer]: IXMLAmountType read Get_TotalDepositFeeInformationAmount; default;
  end;

  IXMLRetailValueExcludingTaxInformationAmountListEnumerator = interface
    ['{6C68A12C-970A-419D-8DA5-92806F0F6523}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Retail Value Excluding Tax Information Amount
  /// </summary>
  IXMLRetailValueExcludingTaxInformationAmountList = interface(IXMLNodeCollection)
    ['{30C4F71A-01BC-4601-A6E1-85DCB02A2668}']
    function GetEnumerator: IXMLRetailValueExcludingTaxInformationAmountListEnumerator;

    function Get_RetailValueExcludingTaxInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property RetailValueExcludingTaxInformationAmount[Index: Integer]: IXMLAmountType read Get_RetailValueExcludingTaxInformationAmount; default;
  end;

  IXMLDuePayableAmountListEnumerator = interface
    ['{7ACF682F-9DBA-4523-83F9-B6BF6038416F}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Due Payable Amount
  /// </summary>
  IXMLDuePayableAmountList = interface(IXMLNodeCollection)
    ['{FD80F6F3-C84A-49E9-90D3-08C96AC2A567}']
    function GetEnumerator: IXMLDuePayableAmountListEnumerator;

    function Get_DuePayableAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property DuePayableAmount[Index: Integer]: IXMLAmountType read Get_DuePayableAmount; default;
  end;

  IXMLTotalDiscountAmountListEnumerator = interface
    ['{22CCECDF-C325-43EB-95C3-34592F940FEA}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Discount Amount
  /// </summary>
  IXMLTotalDiscountAmountList = interface(IXMLNodeCollection)
    ['{3FE80B98-CF10-4BED-AC21-00CD87C12DB5}']
    function GetEnumerator: IXMLTotalDiscountAmountListEnumerator;

    function Get_TotalDiscountAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TotalDiscountAmount[Index: Integer]: IXMLAmountType read Get_TotalDiscountAmount; default;
  end;

  IXMLTotalPrepaidAmountListEnumerator = interface
    ['{E85771F9-C2F9-47BE-8302-461D5734474E}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Prepaid Amount
  /// </summary>
  IXMLTotalPrepaidAmountList = interface(IXMLNodeCollection)
    ['{A9B82E2B-FDBC-4D27-9DAC-F322308E805F}']
    function GetEnumerator: IXMLTotalPrepaidAmountListEnumerator;

    function Get_TotalPrepaidAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TotalPrepaidAmount[Index: Integer]: IXMLAmountType read Get_TotalPrepaidAmount; default;
  end;

  IXMLRoundingAmountListEnumerator = interface
    ['{6E57566E-4C07-436B-8A1A-E132396D7AD1}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Rounding Amount
  /// </summary>
  IXMLRoundingAmountList = interface(IXMLNodeCollection)
    ['{5C902847-E13F-4817-9663-825FD9DC0100}']
    function GetEnumerator: IXMLRoundingAmountListEnumerator;

    function Get_RoundingAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property RoundingAmount[Index: Integer]: IXMLAmountType read Get_RoundingAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Settlement Line Monetary Summation
  /// </summary>
  IXMLTradeSettlementLineMonetarySummationType = interface(IXMLNode)
    ['{A03900B1-E038-48CD-995B-F108087AB5D6}']
    function GetLineTotalAmount: IXMLLineTotalAmountList;
    function GetChargeTotalAmount: IXMLChargeTotalAmountList;
    function GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    function GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    function GetTaxTotalAmount: IXMLTaxTotalAmountList;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    function GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    function GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    function GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
    function GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    function GetProductWeightLossInformationAmount: IXMLProductWeightLossInformationAmountList;
    function GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;

    property LineTotalAmount: IXMLLineTotalAmountList read GetLineTotalAmount;
    property ChargeTotalAmount: IXMLChargeTotalAmountList read GetChargeTotalAmount;
    property AllowanceTotalAmount: IXMLAllowanceTotalAmountList read GetAllowanceTotalAmount;
    property TaxBasisTotalAmount: IXMLTaxBasisTotalAmountList read GetTaxBasisTotalAmount;
    property TaxTotalAmount: IXMLTaxTotalAmountList read GetTaxTotalAmount;
    property GrandTotalAmount: IXMLGrandTotalAmountList read GetGrandTotalAmount;
    property InformationAmount: IXMLInformationAmountList read GetInformationAmount;
    property TotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList read GetTotalAllowanceChargeAmount;
    property TotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList read GetTotalRetailValueInformationAmount;
    property GrossLineTotalAmount: IXMLGrossLineTotalAmountList read GetGrossLineTotalAmount;
    property NetLineTotalAmount: IXMLNetLineTotalAmountList read GetNetLineTotalAmount;
    property NetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList read GetNetIncludingTaxesLineTotalAmount;
    property ProductWeightLossInformationAmount: IXMLProductWeightLossInformationAmountList read GetProductWeightLossInformationAmount;
    property IncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList read GetIncludingTaxesLineTotalAmount;
  end;

  IXMLIncludingTaxesLineTotalAmountListEnumerator = interface
    ['{A170908A-B14D-413F-BF04-F43B1C306502}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Line Total Amount Including Taxes
  /// </summary>
  IXMLIncludingTaxesLineTotalAmountList = interface(IXMLNodeCollection)
    ['{DD4FE96A-C666-407B-84E2-EF691106240F}']
    function GetEnumerator: IXMLIncludingTaxesLineTotalAmountListEnumerator;

    function Get_IncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property IncludingTaxesLineTotalAmount[Index: Integer]: IXMLAmountType read Get_IncludingTaxesLineTotalAmount; default;
  end;

  IXMLProductWeightLossInformationAmountListEnumerator = interface
    ['{B6F9773E-AF51-4158-BB59-2D29281D061E}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Product Weight Loss Information Amount
  /// </summary>
  IXMLProductWeightLossInformationAmountList = interface(IXMLNodeCollection)
    ['{3E9492FD-8FE5-4736-9F38-21C84EA320A7}']
    function GetEnumerator: IXMLProductWeightLossInformationAmountListEnumerator;

    function Get_ProductWeightLossInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ProductWeightLossInformationAmount[Index: Integer]: IXMLAmountType read Get_ProductWeightLossInformationAmount; default;
  end;

  IXMLNetIncludingTaxesLineTotalAmountListEnumerator = interface
    ['{8D7D7937-9529-4270-80A6-6B98E96B5523}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Including Taxes Line Total Amount
  /// </summary>
  IXMLNetIncludingTaxesLineTotalAmountList = interface(IXMLNodeCollection)
    ['{A65A4CC4-F31E-4767-9D8C-93BF40FCE0D3}']
    function GetEnumerator: IXMLNetIncludingTaxesLineTotalAmountListEnumerator;

    function Get_NetIncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property NetIncludingTaxesLineTotalAmount[Index: Integer]: IXMLAmountType read Get_NetIncludingTaxesLineTotalAmount; default;
  end;

  IXMLNetLineTotalAmountListEnumerator = interface
    ['{D9E4DF6B-5161-4977-BD45-32105C4F3D32}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Net Line Total Amount
  /// </summary>
  IXMLNetLineTotalAmountList = interface(IXMLNodeCollection)
    ['{903CE174-F53C-4766-A001-E5C581B8CFAF}']
    function GetEnumerator: IXMLNetLineTotalAmountListEnumerator;

    function Get_NetLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property NetLineTotalAmount[Index: Integer]: IXMLAmountType read Get_NetLineTotalAmount; default;
  end;

  IXMLGrossLineTotalAmountListEnumerator = interface
    ['{4F959769-0112-42B0-9054-0A2D19C730E2}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Gross Line Total Amount
  /// </summary>
  IXMLGrossLineTotalAmountList = interface(IXMLNodeCollection)
    ['{27125579-8CED-48C0-88CA-AD72272239AE}']
    function GetEnumerator: IXMLGrossLineTotalAmountListEnumerator;

    function Get_GrossLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property GrossLineTotalAmount[Index: Integer]: IXMLAmountType read Get_GrossLineTotalAmount; default;
  end;

  IXMLTotalRetailValueInformationAmountListEnumerator = interface
    ['{39B23227-5112-4CB0-9DED-09508857DBEF}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Retail Value Information Amount
  /// </summary>
  IXMLTotalRetailValueInformationAmountList = interface(IXMLNodeCollection)
    ['{B5C8E3E1-AF3F-44C6-BDF3-BC54D6F8CECB}']
    function GetEnumerator: IXMLTotalRetailValueInformationAmountListEnumerator;

    function Get_TotalRetailValueInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TotalRetailValueInformationAmount[Index: Integer]: IXMLAmountType read Get_TotalRetailValueInformationAmount; default;
  end;

  IXMLTotalAllowanceChargeAmountListEnumerator = interface
    ['{AB96D731-131C-47A3-B428-F1130415FF5A}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Allowance/Charge Amount
  /// </summary>
  IXMLTotalAllowanceChargeAmountList = interface(IXMLNodeCollection)
    ['{75E3581F-C487-492B-B0B9-C18968003908}']
    function GetEnumerator: IXMLTotalAllowanceChargeAmountListEnumerator;

    function Get_TotalAllowanceChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TotalAllowanceChargeAmount[Index: Integer]: IXMLAmountType read Get_TotalAllowanceChargeAmount; default;
  end;

  IXMLTaxTotalAmountListEnumerator = interface
    ['{0CEAFA14-E040-43FC-B788-AA44ED09A907}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Tax Total Amount
  /// </summary>
  IXMLTaxTotalAmountList = interface(IXMLNodeCollection)
    ['{8463AB3C-48C8-4832-A169-C7D10E00111F}']
    function GetEnumerator: IXMLTaxTotalAmountListEnumerator;

    function Get_TaxTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TaxTotalAmount[Index: Integer]: IXMLAmountType read Get_TaxTotalAmount; default;
  end;

  IXMLTaxBasisTotalAmountListEnumerator = interface
    ['{DA66F64E-B761-4F7D-9C2E-12D3C043AF6C}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Tax Basis Total Amount
  /// </summary>
  IXMLTaxBasisTotalAmountList = interface(IXMLNodeCollection)
    ['{5D790C6D-442E-4ACD-B6DC-12B330A6B68A}']
    function GetEnumerator: IXMLTaxBasisTotalAmountListEnumerator;

    function Get_TaxBasisTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property TaxBasisTotalAmount[Index: Integer]: IXMLAmountType read Get_TaxBasisTotalAmount; default;
  end;

  IXMLAllowanceTotalAmountListEnumerator = interface
    ['{C30C6351-0112-48C1-9FBC-97C14B6B9BCF}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Allowance Total Amount
  /// </summary>
  IXMLAllowanceTotalAmountList = interface(IXMLNodeCollection)
    ['{09B5B3A9-83E9-462F-8563-2D346875CD60}']
    function GetEnumerator: IXMLAllowanceTotalAmountListEnumerator;

    function Get_AllowanceTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property AllowanceTotalAmount[Index: Integer]: IXMLAmountType read Get_AllowanceTotalAmount; default;
  end;

  IXMLChargeTotalAmountListEnumerator = interface
    ['{79C0B42E-A812-4BCA-909F-E6FCF1936B6A}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Charge Total Amount
  /// </summary>
  IXMLChargeTotalAmountList = interface(IXMLNodeCollection)
    ['{F4DCF503-C82C-4418-BE87-6260F82DFE61}']
    function GetEnumerator: IXMLChargeTotalAmountListEnumerator;

    function Get_ChargeTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property ChargeTotalAmount[Index: Integer]: IXMLAmountType read Get_ChargeTotalAmount; default;
  end;

  IXMLLineTotalAmountListEnumerator = interface
    ['{BD413F5A-B780-497B-AD77-89DABD880A02}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Line Total Amount
  /// </summary>
  IXMLLineTotalAmountList = interface(IXMLNodeCollection)
    ['{F87A1D45-3BB4-440C-A977-B0AE3E50BB0D}']
    function GetEnumerator: IXMLLineTotalAmountListEnumerator;

    function Get_LineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property LineTotalAmount[Index: Integer]: IXMLAmountType read Get_LineTotalAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Settlement Payment Means
  /// </summary>
  IXMLTradeSettlementPaymentMeansType = interface(IXMLNode)
    ['{8023EB1D-D036-49F6-A838-41F35268C510}']
    function GetHasPaymentChannelCode: Boolean;
    function GetPaymentChannelCode: IXMLPaymentMeansChannelCodeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPaymentMeansCodeType;
    function GetHasGuaranteeMethodCode: Boolean;
    function GetGuaranteeMethodCode: IXMLPaymentGuaranteeMeansCodeType;
    function GetHasPaymentMethodCode: Boolean;
    function GetPaymentMethodCode: IXMLCodeType;
    function GetInformation: IXMLInformationList;
    function GetID: IXMLIDList;
    function GetHasApplicableTradeSettlementFinancialCard: Boolean;
    function GetApplicableTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;
    function GetHasPayerPartyDebtorFinancialAccount: Boolean;
    function GetPayerPartyDebtorFinancialAccount: IXMLDebtorFinancialAccountType;
    function GetPayeePartyCreditorFinancialAccount: IXMLPayeePartyCreditorFinancialAccountList;
    function GetHasPayerSpecifiedDebtorFinancialInstitution: Boolean;
    function GetPayerSpecifiedDebtorFinancialInstitution: IXMLDebtorFinancialInstitutionType;
    function GetHasPayeeSpecifiedCreditorFinancialInstitution: Boolean;
    function GetPayeeSpecifiedCreditorFinancialInstitution: IXMLCreditorFinancialInstitutionType;

    property HasPaymentChannelCode: Boolean read GetHasPaymentChannelCode;
    property PaymentChannelCode: IXMLPaymentMeansChannelCodeType read GetPaymentChannelCode;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLPaymentMeansCodeType read GetTypeCode;
    property HasGuaranteeMethodCode: Boolean read GetHasGuaranteeMethodCode;
    property GuaranteeMethodCode: IXMLPaymentGuaranteeMeansCodeType read GetGuaranteeMethodCode;
    property HasPaymentMethodCode: Boolean read GetHasPaymentMethodCode;
    property PaymentMethodCode: IXMLCodeType read GetPaymentMethodCode;
    property Information: IXMLInformationList read GetInformation;
    property ID: IXMLIDList read GetID;
    property HasApplicableTradeSettlementFinancialCard: Boolean read GetHasApplicableTradeSettlementFinancialCard;
    property ApplicableTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType read GetApplicableTradeSettlementFinancialCard;
    property HasPayerPartyDebtorFinancialAccount: Boolean read GetHasPayerPartyDebtorFinancialAccount;
    property PayerPartyDebtorFinancialAccount: IXMLDebtorFinancialAccountType read GetPayerPartyDebtorFinancialAccount;
    property PayeePartyCreditorFinancialAccount: IXMLPayeePartyCreditorFinancialAccountList read GetPayeePartyCreditorFinancialAccount;
    property HasPayerSpecifiedDebtorFinancialInstitution: Boolean read GetHasPayerSpecifiedDebtorFinancialInstitution;
    property PayerSpecifiedDebtorFinancialInstitution: IXMLDebtorFinancialInstitutionType read GetPayerSpecifiedDebtorFinancialInstitution;
    property HasPayeeSpecifiedCreditorFinancialInstitution: Boolean read GetHasPayeeSpecifiedCreditorFinancialInstitution;
    property PayeeSpecifiedCreditorFinancialInstitution: IXMLCreditorFinancialInstitutionType read GetPayeeSpecifiedCreditorFinancialInstitution;
  end;

  IXMLPayeePartyCreditorFinancialAccountListEnumerator = interface
    ['{FA82BA4C-05B4-4B88-AA95-475EA5D12FE3}']
    function GetCurrent: IXMLCreditorFinancialAccountType;
    function MoveNext: Boolean;
    property Current: IXMLCreditorFinancialAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Payee Creditor Financial Account
  /// </summary>
  IXMLPayeePartyCreditorFinancialAccountList = interface(IXMLNodeCollection)
    ['{27897B65-1EA3-43CF-B31D-4045DAF1B1DD}']
    function GetEnumerator: IXMLPayeePartyCreditorFinancialAccountListEnumerator;

    function Get_PayeePartyCreditorFinancialAccount(Index: Integer): IXMLCreditorFinancialAccountType;
    function Add: IXMLCreditorFinancialAccountType;
    function Insert(Index: Integer): IXMLCreditorFinancialAccountType;

    property PayeePartyCreditorFinancialAccount[Index: Integer]: IXMLCreditorFinancialAccountType read Get_PayeePartyCreditorFinancialAccount; default;
  end;

  IXMLIDListEnumerator = interface
    ['{EC631F35-4608-4892-89A7-C28E97F072C4}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) ID
  /// </summary>
  IXMLIDList = interface(IXMLNodeCollection)
    ['{25E70C62-D6A2-4717-93C3-41E6049B3A8B}']
    function GetEnumerator: IXMLIDListEnumerator;

    function Get_ID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property ID[Index: Integer]: IXMLIDType read Get_ID; default;
  end;

  IXMLInformationListEnumerator = interface
    ['{5D9F4FD7-8C9F-4E97-A67E-DD1D687839E0}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Information
  /// </summary>
  IXMLInformationList = interface(IXMLNodeCollection)
    ['{EFA65C36-2F4A-45EF-B7B2-80268ED19BAA}']
    function GetEnumerator: IXMLInformationListEnumerator;

    function Get_Information(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Information[Index: Integer]: IXMLTextType read Get_Information; default;
  end;

  /// <summary>
  ///    (BN/BN) Trade Tax
  /// </summary>
  IXMLTradeTaxType = interface(IXMLNode)
    ['{12A8F15E-FF04-44F9-9DCD-7629F76F012F}']
    function GetCalculatedAmount: IXMLCalculatedAmountList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLTaxTypeCodeType;
    function GetHasExemptionReason: Boolean;
    function GetExemptionReason: IXMLTextType;
    function GetHasCalculatedRate: Boolean;
    function GetCalculatedRate: IXMLRateType;
    function GetHasCalculationSequenceNumeric: Boolean;
    function GetCalculationSequenceNumeric: IXMLNumericType;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetBasisAmount: IXMLBasisAmountList;
    function GetUnitBasisAmount: IXMLUnitBasisAmountList;
    function GetLineTotalBasisAmount: IXMLLineTotalBasisAmountList;
    function GetAllowanceChargeBasisAmount: IXMLAllowanceChargeBasisAmountList;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLTaxCategoryCodeType;
    function GetHasCurrencyCode: Boolean;
    function GetCurrencyCode: IXMLCurrencyCodeType;
    function GetJurisdiction: IXMLJurisdictionList;
    function GetHasCustomsDutyIndicator: Boolean;
    function GetCustomsDutyIndicator: IXMLIndicatorType;
    function GetHasExemptionReasonCode: Boolean;
    function GetExemptionReasonCode: IXMLCodeType;
    function GetHasTaxBasisAllowanceRate: Boolean;
    function GetTaxBasisAllowanceRate: IXMLRateType;
    function GetHasTaxPointDate: Boolean;
    function GetTaxPointDate: IXMLDateType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetCategoryName: IXMLCategoryNameList;
    function GetHasDueDateTypeCode: Boolean;
    function GetDueDateTypeCode: IXMLTimeReferenceCodeType;
    function GetHasRateApplicablePercent: Boolean;
    function GetRateApplicablePercent: IXMLPercentType;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetHasCalculationMethodCode: Boolean;
    function GetCalculationMethodCode: IXMLCodeType;
    function GetSpecifiedTradeAccountingAccount: IXMLSpecifiedTradeAccountingAccountList;
    function GetHasServiceSupplyTradeCountry: Boolean;
    function GetServiceSupplyTradeCountry: IXMLTradeCountryType;
    function GetHasBuyerRepayableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerRepayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasSellerPayableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetSellerPayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasSellerRefundableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetSellerRefundableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasBuyerDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetPlaceApplicableTradeLocation: IXMLPlaceApplicableTradeLocationList;

    property CalculatedAmount: IXMLCalculatedAmountList read GetCalculatedAmount;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLTaxTypeCodeType read GetTypeCode;
    property HasExemptionReason: Boolean read GetHasExemptionReason;
    property ExemptionReason: IXMLTextType read GetExemptionReason;
    property HasCalculatedRate: Boolean read GetHasCalculatedRate;
    property CalculatedRate: IXMLRateType read GetCalculatedRate;
    property HasCalculationSequenceNumeric: Boolean read GetHasCalculationSequenceNumeric;
    property CalculationSequenceNumeric: IXMLNumericType read GetCalculationSequenceNumeric;
    property HasBasisQuantity: Boolean read GetHasBasisQuantity;
    property BasisQuantity: IXMLQuantityType read GetBasisQuantity;
    property BasisAmount: IXMLBasisAmountList read GetBasisAmount;
    property UnitBasisAmount: IXMLUnitBasisAmountList read GetUnitBasisAmount;
    property LineTotalBasisAmount: IXMLLineTotalBasisAmountList read GetLineTotalBasisAmount;
    property AllowanceChargeBasisAmount: IXMLAllowanceChargeBasisAmountList read GetAllowanceChargeBasisAmount;
    property HasCategoryCode: Boolean read GetHasCategoryCode;
    property CategoryCode: IXMLTaxCategoryCodeType read GetCategoryCode;
    property HasCurrencyCode: Boolean read GetHasCurrencyCode;
    property CurrencyCode: IXMLCurrencyCodeType read GetCurrencyCode;
    property Jurisdiction: IXMLJurisdictionList read GetJurisdiction;
    property HasCustomsDutyIndicator: Boolean read GetHasCustomsDutyIndicator;
    property CustomsDutyIndicator: IXMLIndicatorType read GetCustomsDutyIndicator;
    property HasExemptionReasonCode: Boolean read GetHasExemptionReasonCode;
    property ExemptionReasonCode: IXMLCodeType read GetExemptionReasonCode;
    property HasTaxBasisAllowanceRate: Boolean read GetHasTaxBasisAllowanceRate;
    property TaxBasisAllowanceRate: IXMLRateType read GetTaxBasisAllowanceRate;
    property HasTaxPointDate: Boolean read GetHasTaxPointDate;
    property TaxPointDate: IXMLDateType read GetTaxPointDate;
    property Has_Type: Boolean read GetHas_Type;
    property _Type: IXMLTextType read Get_Type;
    property InformationAmount: IXMLInformationAmountList read GetInformationAmount;
    property CategoryName: IXMLCategoryNameList read GetCategoryName;
    property HasDueDateTypeCode: Boolean read GetHasDueDateTypeCode;
    property DueDateTypeCode: IXMLTimeReferenceCodeType read GetDueDateTypeCode;
    property HasRateApplicablePercent: Boolean read GetHasRateApplicablePercent;
    property RateApplicablePercent: IXMLPercentType read GetRateApplicablePercent;
    property GrandTotalAmount: IXMLGrandTotalAmountList read GetGrandTotalAmount;
    property HasCalculationMethodCode: Boolean read GetHasCalculationMethodCode;
    property CalculationMethodCode: IXMLCodeType read GetCalculationMethodCode;
    property SpecifiedTradeAccountingAccount: IXMLSpecifiedTradeAccountingAccountList read GetSpecifiedTradeAccountingAccount;
    property HasServiceSupplyTradeCountry: Boolean read GetHasServiceSupplyTradeCountry;
    property ServiceSupplyTradeCountry: IXMLTradeCountryType read GetServiceSupplyTradeCountry;
    property HasBuyerRepayableTaxSpecifiedTradeAccountingAccount: Boolean read GetHasBuyerRepayableTaxSpecifiedTradeAccountingAccount;
    property BuyerRepayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType read GetBuyerRepayableTaxSpecifiedTradeAccountingAccount;
    property HasSellerPayableTaxSpecifiedTradeAccountingAccount: Boolean read GetHasSellerPayableTaxSpecifiedTradeAccountingAccount;
    property SellerPayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType read GetSellerPayableTaxSpecifiedTradeAccountingAccount;
    property HasSellerRefundableTaxSpecifiedTradeAccountingAccount: Boolean read GetHasSellerRefundableTaxSpecifiedTradeAccountingAccount;
    property SellerRefundableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType read GetSellerRefundableTaxSpecifiedTradeAccountingAccount;
    property HasBuyerDeductibleTaxSpecifiedTradeAccountingAccount: Boolean read GetHasBuyerDeductibleTaxSpecifiedTradeAccountingAccount;
    property BuyerDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType read GetBuyerDeductibleTaxSpecifiedTradeAccountingAccount;
    property HasBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: Boolean read GetHasBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount;
    property BuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType read GetBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount;
    property PlaceApplicableTradeLocation: IXMLPlaceApplicableTradeLocationList read GetPlaceApplicableTradeLocation;
  end;

  IXMLPlaceApplicableTradeLocationListEnumerator = interface
    ['{6EC02D3A-8A5A-4D0C-B427-857B929BE454}']
    function GetCurrent: IXMLTradeLocationType;
    function MoveNext: Boolean;
    property Current: IXMLTradeLocationType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Applicable Location
  /// </summary>
  IXMLPlaceApplicableTradeLocationList = interface(IXMLNodeCollection)
    ['{59C559BB-8DC6-4DBD-A68E-FEB68DA0A8D7}']
    function GetEnumerator: IXMLPlaceApplicableTradeLocationListEnumerator;

    function Get_PlaceApplicableTradeLocation(Index: Integer): IXMLTradeLocationType;
    function Add: IXMLTradeLocationType;
    function Insert(Index: Integer): IXMLTradeLocationType;

    property PlaceApplicableTradeLocation[Index: Integer]: IXMLTradeLocationType read Get_PlaceApplicableTradeLocation; default;
  end;

  IXMLSpecifiedTradeAccountingAccountListEnumerator = interface
    ['{601785BB-D9CB-432B-AD61-410ED0E09738}']
    function GetCurrent: IXMLTradeAccountingAccountType;
    function MoveNext: Boolean;
    property Current: IXMLTradeAccountingAccountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Trade Accounting Account
  /// </summary>
  IXMLSpecifiedTradeAccountingAccountList = interface(IXMLNodeCollection)
    ['{27BDA625-A508-45DA-8401-545AF83C8153}']
    function GetEnumerator: IXMLSpecifiedTradeAccountingAccountListEnumerator;

    function Get_SpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;

    property SpecifiedTradeAccountingAccount[Index: Integer]: IXMLTradeAccountingAccountType read Get_SpecifiedTradeAccountingAccount; default;
  end;

  IXMLGrandTotalAmountListEnumerator = interface
    ['{41F878EC-E74B-4C38-8B01-F43600175166}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Grand Total Amount
  /// </summary>
  IXMLGrandTotalAmountList = interface(IXMLNodeCollection)
    ['{AC958784-AB35-4970-8734-DA77C0D7503A}']
    function GetEnumerator: IXMLGrandTotalAmountListEnumerator;

    function Get_GrandTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property GrandTotalAmount[Index: Integer]: IXMLAmountType read Get_GrandTotalAmount; default;
  end;

  IXMLCategoryNameListEnumerator = interface
    ['{B2059458-CCCD-4E79-9504-B1C25D92062E}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Category Name
  /// </summary>
  IXMLCategoryNameList = interface(IXMLNodeCollection)
    ['{0E78755C-826E-4659-A966-59CB80D90DE5}']
    function GetEnumerator: IXMLCategoryNameListEnumerator;

    function Get_CategoryName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property CategoryName[Index: Integer]: IXMLTextType read Get_CategoryName; default;
  end;

  IXMLInformationAmountListEnumerator = interface
    ['{6FE0EB2C-7DC9-4E19-A590-4BA49C1C8351}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Information Amount
  /// </summary>
  IXMLInformationAmountList = interface(IXMLNodeCollection)
    ['{FF5CA55F-1565-4E76-8A31-79DE9CEBBFB7}']
    function GetEnumerator: IXMLInformationAmountListEnumerator;

    function Get_InformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property InformationAmount[Index: Integer]: IXMLAmountType read Get_InformationAmount; default;
  end;

  IXMLJurisdictionListEnumerator = interface
    ['{4E9D5C13-2038-4FDF-AA93-6130CF100333}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Jurisdiction Text
  /// </summary>
  IXMLJurisdictionList = interface(IXMLNodeCollection)
    ['{5EB20BD8-E23E-4B2E-8B45-CE7C41335511}']
    function GetEnumerator: IXMLJurisdictionListEnumerator;

    function Get_Jurisdiction(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Jurisdiction[Index: Integer]: IXMLTextType read Get_Jurisdiction; default;
  end;

  IXMLAllowanceChargeBasisAmountListEnumerator = interface
    ['{420F4972-AD95-400F-BCAD-071D68C7C311}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Allowance/Charge Basis Amount
  /// </summary>
  IXMLAllowanceChargeBasisAmountList = interface(IXMLNodeCollection)
    ['{E92F954A-3EBF-47BE-84B8-E9460B88A874}']
    function GetEnumerator: IXMLAllowanceChargeBasisAmountListEnumerator;

    function Get_AllowanceChargeBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property AllowanceChargeBasisAmount[Index: Integer]: IXMLAmountType read Get_AllowanceChargeBasisAmount; default;
  end;

  IXMLLineTotalBasisAmountListEnumerator = interface
    ['{1D505CE3-7276-4CE1-A8D2-2EC2B70B11A8}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Line Total Basis Amount
  /// </summary>
  IXMLLineTotalBasisAmountList = interface(IXMLNodeCollection)
    ['{2DFCD69D-1119-4BDC-98EA-239483E093D8}']
    function GetEnumerator: IXMLLineTotalBasisAmountListEnumerator;

    function Get_LineTotalBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property LineTotalBasisAmount[Index: Integer]: IXMLAmountType read Get_LineTotalBasisAmount; default;
  end;

  IXMLUnitBasisAmountListEnumerator = interface
    ['{673293E4-D261-4080-9769-B8A33A3AE839}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Unit Basis Amount
  /// </summary>
  IXMLUnitBasisAmountList = interface(IXMLNodeCollection)
    ['{F74F818E-7214-4AC1-99D5-44E5A62B8F3F}']
    function GetEnumerator: IXMLUnitBasisAmountListEnumerator;

    function Get_UnitBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property UnitBasisAmount[Index: Integer]: IXMLAmountType read Get_UnitBasisAmount; default;
  end;

  IXMLBasisAmountListEnumerator = interface
    ['{E4ABAD94-A5F6-416F-98BB-3370DAF10A8C}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Basis Amount
  /// </summary>
  IXMLBasisAmountList = interface(IXMLNodeCollection)
    ['{5C7CB5B0-1222-44F6-98BA-CC1460356EB3}']
    function GetEnumerator: IXMLBasisAmountListEnumerator;

    function Get_BasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property BasisAmount[Index: Integer]: IXMLAmountType read Get_BasisAmount; default;
  end;

  IXMLCalculatedAmountListEnumerator = interface
    ['{236F1A27-6C44-412B-A933-72B4E311D962}']
    function GetCurrent: IXMLAmountType;
    function MoveNext: Boolean;
    property Current: IXMLAmountType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Calculated Amount
  /// </summary>
  IXMLCalculatedAmountList = interface(IXMLNodeCollection)
    ['{530700FD-2D2C-416B-8929-62E2139180AF}']
    function GetEnumerator: IXMLCalculatedAmountListEnumerator;

    function Get_CalculatedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;

    property CalculatedAmount[Index: Integer]: IXMLAmountType read Get_CalculatedAmount; default;
  end;

  /// <summary>
  ///    (BN/BN) Transport Cargo Insurance
  /// </summary>
  IXMLTransportCargoInsuranceType = interface(IXMLNode)
    ['{B6754FD5-6C1C-4910-97F7-D1E7F20DBAAD}']
    function GetHasCoverageCode: Boolean;
    function GetCoverageCode: IXMLCodeType;
    function GetHasCoverageDescription: Boolean;
    function GetCoverageDescription: IXMLTextType;
    function GetHasContractGeneralConditions: Boolean;
    function GetContractGeneralConditions: IXMLTextType;
    function GetHasCoverageTradeParty: Boolean;
    function GetCoverageTradeParty: IXMLTradePartyType;

    property HasCoverageCode: Boolean read GetHasCoverageCode;
    property CoverageCode: IXMLCodeType read GetCoverageCode;
    property HasCoverageDescription: Boolean read GetHasCoverageDescription;
    property CoverageDescription: IXMLTextType read GetCoverageDescription;
    property HasContractGeneralConditions: Boolean read GetHasContractGeneralConditions;
    property ContractGeneralConditions: IXMLTextType read GetContractGeneralConditions;
    property HasCoverageTradeParty: Boolean read GetHasCoverageTradeParty;
    property CoverageTradeParty: IXMLTradePartyType read GetCoverageTradeParty;
  end;

  IXMLTransportCargoTypeEnumerator = interface
    ['{C7B3D9E0-EC12-437B-9A44-302FC5C0C56B}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Transport Cargo
  /// </summary>
  IXMLTransportCargoType = interface(IXMLNodeCollection)
    ['{1D787EB1-0975-4891-8EFB-96D6B80C85EE}']
    function GetEnumerator: IXMLTransportCargoTypeEnumerator;

    function Get_Identification(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Identification[Index: Integer]: IXMLTextType read Get_Identification; default;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCargoCategoryCodeType;
    function GetHasOperationalCategoryCode: Boolean;
    function GetOperationalCategoryCode: IXMLCargoOperationalCategoryCodeType;
    function GetHasStatisticalClassificationCode: Boolean;
    function GetStatisticalClassificationCode: IXMLCargoCommodityCategoryCodeType;

    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCargoCategoryCodeType read GetTypeCode;
    property HasOperationalCategoryCode: Boolean read GetHasOperationalCategoryCode;
    property OperationalCategoryCode: IXMLCargoOperationalCategoryCodeType read GetOperationalCategoryCode;
    property HasStatisticalClassificationCode: Boolean read GetHasStatisticalClassificationCode;
    property StatisticalClassificationCode: IXMLCargoCommodityCategoryCodeType read GetStatisticalClassificationCode;
  end;

  /// <summary>
  ///    (BN/BN) Transport Dangerous Goods
  /// </summary>
  IXMLTransportDangerousGoodsType = interface(IXMLNode)
    ['{424DAC24-4C19-4D26-A2A4-A97F97B2357F}']
    function GetHasUNDGIdentificationCode: Boolean;
    function GetUNDGIdentificationCode: IXMLCodeType;
    function GetHasRegulationCode: Boolean;
    function GetRegulationCode: IXMLDangerousGoodsRegulationCodeType;
    function GetRegulationName: IXMLRegulationNameList;
    function GetTechnicalName: IXMLTechnicalNameList;
    function GetHasEMSID: Boolean;
    function GetEMSID: IXMLIDType;
    function GetHasPackagingDangerLevelCode: Boolean;
    function GetPackagingDangerLevelCode: IXMLDangerousGoodsPackagingLevelCodeType;
    function GetHasHazardClassificationID: Boolean;
    function GetHazardClassificationID: IXMLIDType;
    function GetHasAdditionalHazardClassificationID: Boolean;
    function GetAdditionalHazardClassificationID: IXMLIDType;
    function GetHasProperShippingName: Boolean;
    function GetProperShippingName: IXMLTextType;

    property HasUNDGIdentificationCode: Boolean read GetHasUNDGIdentificationCode;
    property UNDGIdentificationCode: IXMLCodeType read GetUNDGIdentificationCode;
    property HasRegulationCode: Boolean read GetHasRegulationCode;
    property RegulationCode: IXMLDangerousGoodsRegulationCodeType read GetRegulationCode;
    property RegulationName: IXMLRegulationNameList read GetRegulationName;
    property TechnicalName: IXMLTechnicalNameList read GetTechnicalName;
    property HasEMSID: Boolean read GetHasEMSID;
    property EMSID: IXMLIDType read GetEMSID;
    property HasPackagingDangerLevelCode: Boolean read GetHasPackagingDangerLevelCode;
    property PackagingDangerLevelCode: IXMLDangerousGoodsPackagingLevelCodeType read GetPackagingDangerLevelCode;
    property HasHazardClassificationID: Boolean read GetHasHazardClassificationID;
    property HazardClassificationID: IXMLIDType read GetHazardClassificationID;
    property HasAdditionalHazardClassificationID: Boolean read GetHasAdditionalHazardClassificationID;
    property AdditionalHazardClassificationID: IXMLIDType read GetAdditionalHazardClassificationID;
    property HasProperShippingName: Boolean read GetHasProperShippingName;
    property ProperShippingName: IXMLTextType read GetProperShippingName;
  end;

  IXMLTechnicalNameListEnumerator = interface
    ['{1421C180-8B55-4830-B9E2-04EAA50BF636}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Technical Name
  /// </summary>
  IXMLTechnicalNameList = interface(IXMLNodeCollection)
    ['{B66E11A2-BDEF-4B51-A723-87EC1FD5FC0D}']
    function GetEnumerator: IXMLTechnicalNameListEnumerator;

    function Get_TechnicalName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property TechnicalName[Index: Integer]: IXMLTextType read Get_TechnicalName; default;
  end;

  IXMLRegulationNameListEnumerator = interface
    ['{16361DC5-730D-4B69-8134-757A9A0C46EC}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Regulation Name
  /// </summary>
  IXMLRegulationNameList = interface(IXMLNodeCollection)
    ['{A2FA47F3-60BE-41FA-8E1C-2CC97EBF878A}']
    function GetEnumerator: IXMLRegulationNameListEnumerator;

    function Get_RegulationName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property RegulationName[Index: Integer]: IXMLTextType read Get_RegulationName; default;
  end;

  /// <summary>
  ///    (BN/BN) Communication
  /// </summary>
  IXMLUniversalCommunicationType = interface(IXMLNode)
    ['{29EFF19D-3622-4A16-BE67-81313E62BB30}']
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasChannelCode: Boolean;
    function GetChannelCode: IXMLCommunicationChannelCodeType;
    function GetHasCompleteNumber: Boolean;
    function GetCompleteNumber: IXMLTextType;

    property HasURIID: Boolean read GetHasURIID;
    property URIID: IXMLIDType read GetURIID;
    property HasChannelCode: Boolean read GetHasChannelCode;
    property ChannelCode: IXMLCommunicationChannelCodeType read GetChannelCode;
    property HasCompleteNumber: Boolean read GetHasCompleteNumber;
    property CompleteNumber: IXMLTextType read GetCompleteNumber;
  end;

  /// <summary>
  ///    (BN/BN) Valuation Breakdown Statement
  /// </summary>
  IXMLValuationBreakdownStatementType = interface(IXMLNode)
    ['{C915017D-DBEB-46D2-B6A5-DB60D803BE32}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetName: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetMeasurementMethodID: IXMLMeasurementMethodIDList;
    function GetCreationDateTime: IXMLDateTimeType;
    function GetDefaultCurrencyCode: IXMLCurrencyCodeType;
    function GetDefaultLanguageCode: IXMLCodeType;
    function GetComment: IXMLCommentList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListID: Boolean;
    function GetPriceListID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetCreationSpecifiedBinaryFile: IXMLCreationSpecifiedBinaryFileList;
    function GetReaderSpecifiedBinaryFile: IXMLReaderSpecifiedBinaryFileList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;

    property ID: IXMLIDType read GetID;
    property Name: IXMLTextType read GetName;
    property Description: IXMLDescriptionList read GetDescription;
    property MeasurementMethodID: IXMLMeasurementMethodIDList read GetMeasurementMethodID;
    property CreationDateTime: IXMLDateTimeType read GetCreationDateTime;
    property DefaultCurrencyCode: IXMLCurrencyCodeType read GetDefaultCurrencyCode;
    property DefaultLanguageCode: IXMLCodeType read GetDefaultLanguageCode;
    property Comment: IXMLCommentList read GetComment;
    property TypeCode: IXMLTypeCodeList read GetTypeCode;
    property RequestedActionCode: IXMLRequestedActionCodeList read GetRequestedActionCode;
    property HasPriceListID: Boolean read GetHasPriceListID;
    property PriceListID: IXMLIDType read GetPriceListID;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
    property ItemGroupedWorkItem: IXMLItemGroupedWorkItemList read GetItemGroupedWorkItem;
    property ItemBasicWorkItem: IXMLItemBasicWorkItemList read GetItemBasicWorkItem;
    property TotalCalculatedPrice: IXMLTotalCalculatedPriceList read GetTotalCalculatedPrice;
    property ChangedRecordedStatus: IXMLChangedRecordedStatusList read GetChangedRecordedStatus;
    property CreationSpecifiedBinaryFile: IXMLCreationSpecifiedBinaryFileList read GetCreationSpecifiedBinaryFile;
    property ReaderSpecifiedBinaryFile: IXMLReaderSpecifiedBinaryFileList read GetReaderSpecifiedBinaryFile;
    property ReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList read GetReferencedSpecifiedBinaryFile;
  end;

  IXMLReferencedSpecifiedBinaryFileListEnumerator = interface
    ['{2F14F171-E798-4BF4-8088-F7CF64C838CF}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Referenced Binary File
  /// </summary>
  IXMLReferencedSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{A3979313-BBC0-4E5C-8FC6-3DE56EDCB227}']
    function GetEnumerator: IXMLReferencedSpecifiedBinaryFileListEnumerator;

    function Get_ReferencedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property ReferencedSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_ReferencedSpecifiedBinaryFile; default;
  end;

  IXMLReaderSpecifiedBinaryFileListEnumerator = interface
    ['{17B2CBA9-7954-4A37-98A1-4B5FEFA0A0AA}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Reader Binary File
  /// </summary>
  IXMLReaderSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{853C6B1F-543D-4933-AAF7-468DC7701740}']
    function GetEnumerator: IXMLReaderSpecifiedBinaryFileListEnumerator;

    function Get_ReaderSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property ReaderSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_ReaderSpecifiedBinaryFile; default;
  end;

  IXMLCreationSpecifiedBinaryFileListEnumerator = interface
    ['{549E4C88-0251-4282-B1D5-221882542837}']
    function GetCurrent: IXMLSpecifiedBinaryFileType;
    function MoveNext: Boolean;
    property Current: IXMLSpecifiedBinaryFileType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Creation Binary File
  /// </summary>
  IXMLCreationSpecifiedBinaryFileList = interface(IXMLNodeCollection)
    ['{F77700CD-0336-4664-9070-0DB9F8D509BC}']
    function GetEnumerator: IXMLCreationSpecifiedBinaryFileListEnumerator;

    function Get_CreationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;

    property CreationSpecifiedBinaryFile[Index: Integer]: IXMLSpecifiedBinaryFileType read Get_CreationSpecifiedBinaryFile; default;
  end;

  IXMLTotalCalculatedPriceListEnumerator = interface
    ['{D4E30B1D-3EC4-4B77-83DE-3DB79DB7215B}']
    function GetCurrent: IXMLCalculatedPriceType;
    function MoveNext: Boolean;
    property Current: IXMLCalculatedPriceType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Total Calculated Price
  /// </summary>
  IXMLTotalCalculatedPriceList = interface(IXMLNodeCollection)
    ['{62029E3E-40E5-4212-B18A-C20D19DD6B3F}']
    function GetEnumerator: IXMLTotalCalculatedPriceListEnumerator;

    function Get_TotalCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
    function Add: IXMLCalculatedPriceType;
    function Insert(Index: Integer): IXMLCalculatedPriceType;

    property TotalCalculatedPrice[Index: Integer]: IXMLCalculatedPriceType read Get_TotalCalculatedPrice; default;
  end;

  IXMLItemBasicWorkItemListEnumerator = interface
    ['{D69149D2-E713-4238-B5FF-F58B3ED9C7CF}']
    function GetCurrent: IXMLBasicWorkItemType;
    function MoveNext: Boolean;
    property Current: IXMLBasicWorkItemType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Basic Work Item
  /// </summary>
  IXMLItemBasicWorkItemList = interface(IXMLNodeCollection)
    ['{98FF9D62-17C1-43CC-B56E-A11156E387CF}']
    function GetEnumerator: IXMLItemBasicWorkItemListEnumerator;

    function Get_ItemBasicWorkItem(Index: Integer): IXMLBasicWorkItemType;
    function Add: IXMLBasicWorkItemType;
    function Insert(Index: Integer): IXMLBasicWorkItemType;

    property ItemBasicWorkItem[Index: Integer]: IXMLBasicWorkItemType read Get_ItemBasicWorkItem; default;
  end;

  IXMLItemGroupedWorkItemListEnumerator = interface
    ['{A672DB69-FEC0-472D-A38F-7141E45CFB08}']
    function GetCurrent: IXMLGroupedWorkItemType;
    function MoveNext: Boolean;
    property Current: IXMLGroupedWorkItemType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Grouped Work Item
  /// </summary>
  IXMLItemGroupedWorkItemList = interface(IXMLNodeCollection)
    ['{9E3EFB7F-89E2-49A8-B90C-23D3993D7932}']
    function GetEnumerator: IXMLItemGroupedWorkItemListEnumerator;

    function Get_ItemGroupedWorkItem(Index: Integer): IXMLGroupedWorkItemType;
    function Add: IXMLGroupedWorkItemType;
    function Insert(Index: Integer): IXMLGroupedWorkItemType;

    property ItemGroupedWorkItem[Index: Integer]: IXMLGroupedWorkItemType read Get_ItemGroupedWorkItem; default;
  end;

  IXMLRequestedActionCodeListEnumerator = interface
    ['{48535A9F-22B3-4C4D-AD9C-0EA9A654735A}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Requested Action Code
  /// </summary>
  IXMLRequestedActionCodeList = interface(IXMLNodeCollection)
    ['{465FFC45-2424-404F-B1D1-1EABE131ACDC}']
    function GetEnumerator: IXMLRequestedActionCodeListEnumerator;

    function Get_RequestedActionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property RequestedActionCode[Index: Integer]: IXMLCodeType read Get_RequestedActionCode; default;
  end;

  IXMLTypeCodeListEnumerator = interface
    ['{FB6B9D73-62D1-4077-9DF0-AD135A0203C8}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Type Code
  /// </summary>
  IXMLTypeCodeList = interface(IXMLNodeCollection)
    ['{B419ECC4-F8DA-40BB-AD09-1481D613CB1F}']
    function GetEnumerator: IXMLTypeCodeListEnumerator;

    function Get_TypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property TypeCode[Index: Integer]: IXMLCodeType read Get_TypeCode; default;
  end;

  IXMLCommentListEnumerator = interface
    ['{C059777F-0598-4B10-8239-BE2EF1CBD0E6}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Comment
  /// </summary>
  IXMLCommentList = interface(IXMLNodeCollection)
    ['{CB0D7721-D3A9-42FD-9CDF-44328B985187}']
    function GetEnumerator: IXMLCommentListEnumerator;

    function Get_Comment(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Comment[Index: Integer]: IXMLTextType read Get_Comment; default;
  end;

  IXMLMeasurementMethodIDListEnumerator = interface
    ['{A4DBF0F9-AFA2-43F0-B0DB-867CF6AA1EBF}']
    function GetCurrent: IXMLIDType;
    function MoveNext: Boolean;
    property Current: IXMLIDType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Measurement Method ID
  /// </summary>
  IXMLMeasurementMethodIDList = interface(IXMLNodeCollection)
    ['{895EDD6A-1B1A-4A3A-9BAA-2C620DF53711}']
    function GetEnumerator: IXMLMeasurementMethodIDListEnumerator;

    function Get_MeasurementMethodID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;

    property MeasurementMethodID[Index: Integer]: IXMLIDType read Get_MeasurementMethodID; default;
  end;

  IXMLDescriptionListEnumerator = interface
    ['{D2F62D3F-E0A5-4F3C-A6E5-38A74771C5D7}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Description
  /// </summary>
  IXMLDescriptionList = interface(IXMLNodeCollection)
    ['{B9501081-CF1D-4CCA-A8E8-DE932B421D16}']
    function GetEnumerator: IXMLDescriptionListEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Description[Index: Integer]: IXMLTextType read Get_Description; default;
  end;

  /// <summary>
  ///    (BN/BN) Work Item Complex Description
  /// </summary>
  IXMLWorkItemComplexDescriptionType = interface(IXMLNode)
    ['{749654F0-EB95-4022-BCC7-DE6B092BD51D}']
    function Get_Abstract: IXML_AbstractList;
    function GetContent: IXMLContentList;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetRequestingSpecificationQuery: IXMLRequestingSpecificationQueryList;
    function GetRespondingSpecificationResponse: IXMLRespondingSpecificationResponseList;
    function GetHasSubsetWorkItemComplexDescription: Boolean;
    function GetSubsetWorkItemComplexDescription: IXMLWorkItemComplexDescriptionType;

    property _Abstract: IXML_AbstractList read Get_Abstract;
    property Content: IXMLContentList read GetContent;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
    property RequestingSpecificationQuery: IXMLRequestingSpecificationQueryList read GetRequestingSpecificationQuery;
    property RespondingSpecificationResponse: IXMLRespondingSpecificationResponseList read GetRespondingSpecificationResponse;
    property HasSubsetWorkItemComplexDescription: Boolean read GetHasSubsetWorkItemComplexDescription;
    property SubsetWorkItemComplexDescription: IXMLWorkItemComplexDescriptionType read GetSubsetWorkItemComplexDescription;
  end;

  IXMLRespondingSpecificationResponseListEnumerator = interface
    ['{72346692-16FF-43D6-BD71-BADEAE8898CB}']
    function GetCurrent: IXMLSpecificationResponseType;
    function MoveNext: Boolean;
    property Current: IXMLSpecificationResponseType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Responding Specification Answer
  /// </summary>
  IXMLRespondingSpecificationResponseList = interface(IXMLNodeCollection)
    ['{0D72741F-8F7E-4F7B-9002-A0C565803C9A}']
    function GetEnumerator: IXMLRespondingSpecificationResponseListEnumerator;

    function Get_RespondingSpecificationResponse(Index: Integer): IXMLSpecificationResponseType;
    function Add: IXMLSpecificationResponseType;
    function Insert(Index: Integer): IXMLSpecificationResponseType;

    property RespondingSpecificationResponse[Index: Integer]: IXMLSpecificationResponseType read Get_RespondingSpecificationResponse; default;
  end;

  IXMLRequestingSpecificationQueryListEnumerator = interface
    ['{85881554-9476-478F-8901-1681DBA41B7D}']
    function GetCurrent: IXMLSpecificationQueryType;
    function MoveNext: Boolean;
    property Current: IXMLSpecificationQueryType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Requesting Specification Query
  /// </summary>
  IXMLRequestingSpecificationQueryList = interface(IXMLNodeCollection)
    ['{04E8ECC1-BD11-4E4B-8BA3-ABDDCC2DF5DD}']
    function GetEnumerator: IXMLRequestingSpecificationQueryListEnumerator;

    function Get_RequestingSpecificationQuery(Index: Integer): IXMLSpecificationQueryType;
    function Add: IXMLSpecificationQueryType;
    function Insert(Index: Integer): IXMLSpecificationQueryType;

    property RequestingSpecificationQuery[Index: Integer]: IXMLSpecificationQueryType read Get_RequestingSpecificationQuery; default;
  end;

  IXMLContentListEnumerator = interface
    ['{2F7BF64F-919B-45CC-962F-EEEEDFA5BBE7}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Content Text
  /// </summary>
  IXMLContentList = interface(IXMLNodeCollection)
    ['{1465F56A-8D5E-4D2F-B875-3A69D731D9B3}']
    function GetEnumerator: IXMLContentListEnumerator;

    function Get_Content(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property Content[Index: Integer]: IXMLTextType read Get_Content; default;
  end;

  IXML_AbstractListEnumerator = interface
    ['{980E3EA6-72EA-4257-9E05-2685E39C6FF1}']
    function GetCurrent: IXMLTextType;
    function MoveNext: Boolean;
    property Current: IXMLTextType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Abstract
  /// </summary>
  IXML_AbstractList = interface(IXMLNodeCollection)
    ['{C0350473-D3AF-44B0-BF59-561768E9D8DD}']
    function GetEnumerator: IXML_AbstractListEnumerator;

    function Get__Abstract(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    property _Abstract[Index: Integer]: IXMLTextType read Get__Abstract; default;
  end;

  IXMLWorkItemDimensionTypeEnumerator = interface
    ['{4C6CAF00-3C16-407E-AC65-294B2664662E}']
    function GetCurrent: IXMLWorkItemDimensionType;
    function MoveNext: Boolean;
    property Current: IXMLWorkItemDimensionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Work Item Dimension
  /// </summary>
  IXMLWorkItemDimensionType = interface(IXMLNodeCollection)
    ['{50699715-D00A-4665-AF92-6281FECB966B}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLWorkItemDimensionTypeEnumerator;

    function Get_ComponentWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
    function Add: IXMLWorkItemDimensionType;
    function Insert(Index: Integer): IXMLWorkItemDimensionType;

    property ComponentWorkItemDimension[Index: Integer]: IXMLWorkItemDimensionType read Get_ComponentWorkItemDimension; default;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetTypeCode: IXMLCodeType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;

    property HasID: Boolean read GetHasID;
    property ID: IXMLIDType read GetID;
    property ValueMeasure: IXMLMeasureType read GetValueMeasure;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
  end;

  /// <summary>
  ///    (BN/BN) Work Item Quantity Analysis
  /// </summary>
  IXMLWorkItemQuantityAnalysisType = interface(IXMLNode)
    ['{D8D60654-9060-4C60-8854-327AB7B7828A}']
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetHasActualQuantityPercent: Boolean;
    function GetActualQuantityPercent: IXMLPercentType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetActualQuantityWorkItemDimension: IXMLActualQuantityWorkItemDimensionList;
    function GetBreakdownWorkItemQuantityAnalysis: IXMLBreakdownWorkItemQuantityAnalysisList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;

    property ID: IXMLIDType read GetID;
    property HasActualQuantity: Boolean read GetHasActualQuantity;
    property ActualQuantity: IXMLQuantityType read GetActualQuantity;
    property HasDescription: Boolean read GetHasDescription;
    property Description: IXMLTextType read GetDescription;
    property HasActualQuantityPercent: Boolean read GetHasActualQuantityPercent;
    property ActualQuantityPercent: IXMLPercentType read GetActualQuantityPercent;
    property HasTypeCode: Boolean read GetHasTypeCode;
    property TypeCode: IXMLCodeType read GetTypeCode;
    property PrimaryClassificationCode: IXMLPrimaryClassificationCodeList read GetPrimaryClassificationCode;
    property AlternativeClassificationCode: IXMLAlternativeClassificationCodeList read GetAlternativeClassificationCode;
    property HasContractualLanguageCode: Boolean read GetHasContractualLanguageCode;
    property ContractualLanguageCode: IXMLCodeType read GetContractualLanguageCode;
    property ActualQuantityWorkItemDimension: IXMLActualQuantityWorkItemDimensionList read GetActualQuantityWorkItemDimension;
    property BreakdownWorkItemQuantityAnalysis: IXMLBreakdownWorkItemQuantityAnalysisList read GetBreakdownWorkItemQuantityAnalysis;
    property ChangedRecordedStatus: IXMLChangedRecordedStatusList read GetChangedRecordedStatus;
  end;

  IXMLChangedRecordedStatusListEnumerator = interface
    ['{3661839B-E880-40E7-AD30-229FDAF264D5}']
    function GetCurrent: IXMLRecordedStatusType;
    function MoveNext: Boolean;
    property Current: IXMLRecordedStatusType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Changed Recorded Status
  /// </summary>
  IXMLChangedRecordedStatusList = interface(IXMLNodeCollection)
    ['{43BF6C86-FB14-41A9-99D4-4A6BA728BE2A}']
    function GetEnumerator: IXMLChangedRecordedStatusListEnumerator;

    function Get_ChangedRecordedStatus(Index: Integer): IXMLRecordedStatusType;
    function Add: IXMLRecordedStatusType;
    function Insert(Index: Integer): IXMLRecordedStatusType;

    property ChangedRecordedStatus[Index: Integer]: IXMLRecordedStatusType read Get_ChangedRecordedStatus; default;
  end;

  IXMLBreakdownWorkItemQuantityAnalysisListEnumerator = interface
    ['{B864377E-13AE-4AC3-90EE-61D8C0702BBF}']
    function GetCurrent: IXMLWorkItemQuantityAnalysisType;
    function MoveNext: Boolean;
    property Current: IXMLWorkItemQuantityAnalysisType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Quantity Breakdown Analysis
  /// </summary>
  IXMLBreakdownWorkItemQuantityAnalysisList = interface(IXMLNodeCollection)
    ['{2B85FC0A-3064-48B7-AB84-3EF491681191}']
    function GetEnumerator: IXMLBreakdownWorkItemQuantityAnalysisListEnumerator;

    function Get_BreakdownWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
    function Add: IXMLWorkItemQuantityAnalysisType;
    function Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;

    property BreakdownWorkItemQuantityAnalysis[Index: Integer]: IXMLWorkItemQuantityAnalysisType read Get_BreakdownWorkItemQuantityAnalysis; default;
  end;

  IXMLActualQuantityWorkItemDimensionListEnumerator = interface
    ['{B3A98198-7BF0-4715-9C1A-272632C0C56F}']
    function GetCurrent: IXMLWorkItemDimensionType;
    function MoveNext: Boolean;
    property Current: IXMLWorkItemDimensionType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Actual Quantity Dimension
  /// </summary>
  IXMLActualQuantityWorkItemDimensionList = interface(IXMLNodeCollection)
    ['{393EFCB0-F788-4575-8F62-0BE5067ECA2C}']
    function GetEnumerator: IXMLActualQuantityWorkItemDimensionListEnumerator;

    function Get_ActualQuantityWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
    function Add: IXMLWorkItemDimensionType;
    function Insert(Index: Integer): IXMLWorkItemDimensionType;

    property ActualQuantityWorkItemDimension[Index: Integer]: IXMLWorkItemDimensionType read Get_ActualQuantityWorkItemDimension; default;
  end;

  IXMLAlternativeClassificationCodeListEnumerator = interface
    ['{406527C4-A72D-48F7-800A-3EE1683E6CBD}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Alternative Classification Code
  /// </summary>
  IXMLAlternativeClassificationCodeList = interface(IXMLNodeCollection)
    ['{B7391917-3AE2-4A0E-9B82-D035E410751D}']
    function GetEnumerator: IXMLAlternativeClassificationCodeListEnumerator;

    function Get_AlternativeClassificationCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property AlternativeClassificationCode[Index: Integer]: IXMLCodeType read Get_AlternativeClassificationCode; default;
  end;

  IXMLPrimaryClassificationCodeListEnumerator = interface
    ['{6B3D351E-F18C-42AA-B6C9-36E9D32AC3B4}']
    function GetCurrent: IXMLCodeType;
    function MoveNext: Boolean;
    property Current: IXMLCodeType read GetCurrent;
  end;


  /// <summary>
  ///    (BN/BN) Primary Classification Code
  /// </summary>
  IXMLPrimaryClassificationCodeList = interface(IXMLNodeCollection)
    ['{FC03EB7A-890D-4707-9C1C-0D1CEF293C09}']
    function GetEnumerator: IXMLPrimaryClassificationCodeListEnumerator;

    function Get_PrimaryClassificationCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;

    property PrimaryClassificationCode[Index: Integer]: IXMLCodeType read Get_PrimaryClassificationCode; default;
  end;


  { Classes for CrossIndustryInvoice_100pD22B }
  TXMLCrossIndustryInvoiceType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLCrossIndustryInvoiceType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetExchangedDocumentContext: IXMLExchangedDocumentContextType;
    function GetExchangedDocument: IXMLExchangedDocumentType;
    function GetSupplyChainTradeTransaction: IXMLSupplyChainTradeTransactionType;
    function GetHasValuationBreakdownStatement: Boolean;
    function GetValuationBreakdownStatement: IXMLValuationBreakdownStatementType;
  end;

  TXMLCrossIndustryInvoice = class(TXMLCrossIndustryInvoiceType, IXMLCrossIndustryInvoice)
  protected
  end;


  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_QualifiedDataType_100 }
  TXMLAccountingAccountTypeCodeType = class(TX2XMLNode, IXMLAccountingAccountTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLAccountingAmountTypeCodeType = class(TX2XMLNode, IXMLAccountingAmountTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLAccountingDebitCreditStatusCodeType = class(TX2XMLNode, IXMLAccountingDebitCreditStatusCodeType)
  protected
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHaslistURI: Boolean;
    function listURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistURI: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType);
    procedure SetlistVersionID(const Value: WideString);
    procedure SetlistURI(const Value: WideString);
  end;

  TXMLAccountingDocumentCodeType = class(TX2XMLNode, IXMLAccountingDocumentCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAccountingDocumentCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAccountingDocumentCodeListAgencyIDContentType);
  end;

  TXMLAddressTypeCodeType = class(TX2XMLNode, IXMLAddressTypeCodeType)
  protected
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAddressTypeCodeListAgencyIDContentType;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHasname: Boolean;
    function nameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getname: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAddressTypeCodeListAgencyIDContentType);
    procedure SetlistVersionID(const Value: WideString);
    procedure Setname(const Value: WideString);
  end;

  TXMLAdjustmentReasonCodeType = class(TX2XMLNode, IXMLAdjustmentReasonCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAdjustmentReasonCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAdjustmentReasonCodeListAgencyIDContentType);
  end;

  TXMLAllowanceChargeIdentificationCodeType = class(TX2XMLNode, IXMLAllowanceChargeIdentificationCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLAllowanceChargeReasonCodeType = class(TX2XMLNode, IXMLAllowanceChargeReasonCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAllowanceChargeReasonCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAllowanceChargeReasonCodeListAgencyIDContentType);
  end;

  TXMLAutomaticDataCaptureMethodCodeType = class(TX2XMLNode, IXMLAutomaticDataCaptureMethodCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType);
  end;

  TXMLCargoCategoryCodeType = class(TX2XMLNode, IXMLCargoCategoryCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCargoCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCargoCategoryCodeListAgencyIDContentType);
  end;

  TXMLCargoCommodityCategoryCodeType = class(TX2XMLNode, IXMLCargoCommodityCategoryCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLCargoOperationalCategoryCodeType = class(TX2XMLNode, IXMLCargoOperationalCategoryCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCargoOperationalCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCargoOperationalCategoryCodeListAgencyIDContentType);
  end;

  TXMLChargePayingPartyRoleCodeType = class(TX2XMLNode, IXMLChargePayingPartyRoleCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLChargePayingPartyRoleCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLChargePayingPartyRoleCodeListAgencyIDContentType);
  end;

  TXMLCommunicationChannelCodeType = class(TX2XMLNode, IXMLCommunicationChannelCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCommunicationChannelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCommunicationChannelCodeListAgencyIDContentType);
  end;

  TXMLContactTypeCodeType = class(TX2XMLNode, IXMLContactTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLContactTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLContactTypeCodeListAgencyIDContentType);
  end;

  TXMLCountryIDType = class(TX2XMLNode, IXMLCountryIDType)
  protected
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLCountryIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLCountryIDSchemeAgencyIDContentType);
  end;

  TXMLCurrencyCodeType = class(TX2XMLNode, IXMLCurrencyCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLCurrencyCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLCurrencyCodeListAgencyIDContentType);
  end;

  TXMLDangerousGoodsPackagingLevelCodeType = class(TX2XMLNode, IXMLDangerousGoodsPackagingLevelCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType);
  end;

  TXMLDangerousGoodsRegulationCodeType = class(TX2XMLNode, IXMLDangerousGoodsRegulationCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType);
  end;

  TXMLDateOnlyFormattedDateTimeType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLDateOnlyFormattedDateTimeType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLDateOnlyFormattedDateTimeTypeDateTimeString;
  end;

  TXMLDateOnlyFormattedDateTimeTypeDateTimeString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLDateOnlyFormattedDateTimeTypeDateTimeString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLDateOnlyFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLDateOnlyFormatCodeContentType);
    procedure SetValue(const Value: WideString);
  end;

  TXMLDeliveryTermsCodeType = class(TX2XMLNode, IXMLDeliveryTermsCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDeliveryTermsCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDeliveryTermsCodeListAgencyIDContentType);
  end;

  TXMLDeliveryTermsFunctionCodeType = class(TX2XMLNode, IXMLDeliveryTermsFunctionCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType);
  end;

  TXMLDimensionTypeCodeType = class(TX2XMLNode, IXMLDimensionTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDimensionTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDimensionTypeCodeListAgencyIDContentType);
  end;

  TXMLDocumentCodeType = class(TX2XMLNode, IXMLDocumentCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDocumentCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDocumentCodeListAgencyIDContentType);
  end;

  TXMLDocumentStatusCodeType = class(TX2XMLNode, IXMLDocumentStatusCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLDocumentStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLDocumentStatusCodeListAgencyIDContentType);
  end;

  TXMLFormattedDateTimeType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLFormattedDateTimeType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLFormattedDateTimeTypeDateTimeString;
  end;

  TXMLFormattedDateTimeTypeDateTimeString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLFormattedDateTimeTypeDateTimeString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLTimePointFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLTimePointFormatCodeContentType);
    procedure SetValue(const Value: WideString);
  end;

  TXMLFreightChargeTariffClassCodeType = class(TX2XMLNode, IXMLFreightChargeTariffClassCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLFreightChargeTariffClassCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLFreightChargeTariffClassCodeListAgencyIDContentType);
  end;

  TXMLFreightChargeTypeIDType = class(TX2XMLNode, IXMLFreightChargeTypeIDType)
  protected
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLFreightChargeTypeIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLFreightChargeTypeIDSchemeAgencyIDContentType);
  end;

  TXMLGoodsTypeCodeType = class(TX2XMLNode, IXMLGoodsTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLGoodsTypeExtensionCodeType = class(TX2XMLNode, IXMLGoodsTypeExtensionCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLLinearUnitMeasureType = class(TX2XMLNode, IXMLLinearUnitMeasureType)
  protected
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeLinearContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeLinearContentType);
  end;

  TXMLLineStatusCodeType = class(TX2XMLNode, IXMLLineStatusCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLLineStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLLineStatusCodeListAgencyIDContentType);
  end;

  TXMLLocationFunctionCodeType = class(TX2XMLNode, IXMLLocationFunctionCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLLocationFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLLocationFunctionCodeListAgencyIDContentType);
  end;

  TXMLLogisticsChargeCalculationBasisCodeType = class(TX2XMLNode, IXMLLogisticsChargeCalculationBasisCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLMessageFunctionCodeType = class(TX2XMLNode, IXMLMessageFunctionCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLMessageFunctionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLMessageFunctionCodeListAgencyIDContentType);
  end;

  TXMLPackageTypeCodeType = class(TX2XMLNode, IXMLPackageTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;

    procedure SetlistAgencyID(const Value: WideString);
  end;

  TXMLPackagingMarkingCodeType = class(TX2XMLNode, IXMLPackagingMarkingCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPackagingMarkingCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPackagingMarkingCodeListAgencyIDContentType);
  end;

  TXMLPartyRoleCodeType = class(TX2XMLNode, IXMLPartyRoleCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPartyRoleCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPartyRoleCodeListAgencyIDContentType);
  end;

  TXMLPaymentGuaranteeMeansCodeType = class(TX2XMLNode, IXMLPaymentGuaranteeMeansCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType);
  end;

  TXMLPaymentMeansChannelCodeType = class(TX2XMLNode, IXMLPaymentMeansChannelCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentMeansChannelCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentMeansChannelCodeListAgencyIDContentType);
  end;

  TXMLPaymentMeansCodeType = class(TX2XMLNode, IXMLPaymentMeansCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentMeansCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentMeansCodeListAgencyIDContentType);
  end;

  TXMLPaymentTermsEventTimeReferenceCodeType = class(TX2XMLNode, IXMLPaymentTermsEventTimeReferenceCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType);
  end;

  TXMLPaymentTermsIDType = class(TX2XMLNode, IXMLPaymentTermsIDType)
  protected
    function GetHasschemeAgencyID: Boolean;
    function GetschemeAgencyIDText: WideString;
    function GetschemeAgencyID: TXMLPaymentTermsIDSchemeAgencyIDContentType;

    procedure SetschemeAgencyIDText(const Value: WideString);
    procedure SetschemeAgencyID(const Value: TXMLPaymentTermsIDSchemeAgencyIDContentType);
  end;

  TXMLPaymentTermsTypeCodeType = class(TX2XMLNode, IXMLPaymentTermsTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPaymentTermsTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPaymentTermsTypeCodeListAgencyIDContentType);
  end;

  TXMLPriceTypeCodeType = class(TX2XMLNode, IXMLPriceTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLPriceTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLPriceTypeCodeListAgencyIDContentType);
  end;

  TXMLReferenceCodeType = class(TX2XMLNode, IXMLReferenceCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLReferenceCodeListAgencyIDContentType);
  end;

  TXMLSealConditionCodeType = class(TX2XMLNode, IXMLSealConditionCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLSealConditionCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLSealConditionCodeListAgencyIDContentType);
  end;

  TXMLSealingPartyRoleCodeType = class(TX2XMLNode, IXMLSealingPartyRoleCodeType)
  protected
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLSealingPartyRoleCodeListAgencyIDContentType;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLSealingPartyRoleCodeListAgencyIDContentType);
  end;

  TXMLStatusCodeType = class(TX2XMLNode, IXMLStatusCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLStatusCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLStatusCodeListAgencyIDContentType);
  end;

  TXMLTaxCategoryCodeType = class(TX2XMLNode, IXMLTaxCategoryCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTaxCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTaxCategoryCodeListAgencyIDContentType);
  end;

  TXMLTaxTypeCodeType = class(TX2XMLNode, IXMLTaxTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTaxTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTaxTypeCodeListAgencyIDContentType);
  end;

  TXMLTimeOnlyFormattedDateTimeType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLTimeOnlyFormattedDateTimeType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetDateTimeString: IXMLTimeOnlyFormattedDateTimeTypeDateTimeString;
  end;

  TXMLTimeOnlyFormattedDateTimeTypeDateTimeString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLTimeOnlyFormattedDateTimeTypeDateTimeString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function GetformatText: WideString;
    function Getformat: TXMLTimeOnlyFormatCodeContentType;
    function GetValue: WideString;

    procedure SetformatText(const Value: WideString);
    procedure Setformat(const Value: TXMLTimeOnlyFormatCodeContentType);
    procedure SetValue(const Value: WideString);
  end;

  TXMLTimeReferenceCodeType = class(TX2XMLNode, IXMLTimeReferenceCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTimeReferenceCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTimeReferenceCodeListAgencyIDContentType);
  end;

  TXMLTransportEquipmentCategoryCodeType = class(TX2XMLNode, IXMLTransportEquipmentCategoryCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType);
  end;

  TXMLTransportEquipmentFullnessCodeType = class(TX2XMLNode, IXMLTransportEquipmentFullnessCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType);
  end;

  TXMLTransportMeansTypeCodeType = class(TX2XMLNode, IXMLTransportMeansTypeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportMeansTypeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportMeansTypeCodeListAgencyIDContentType);
  end;

  TXMLTransportModeCodeType = class(TX2XMLNode, IXMLTransportModeCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportModeCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportModeCodeListAgencyIDContentType);
  end;

  TXMLTransportMovementStageCodeType = class(TX2XMLNode, IXMLTransportMovementStageCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportMovementStageCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportMovementStageCodeListAgencyIDContentType);
  end;

  TXMLTransportServicePaymentArrangementCodeType = class(TX2XMLNode, IXMLTransportServicePaymentArrangementCodeType)
  protected
    function GetHaslistAgencyID: Boolean;
    function GetlistAgencyIDText: WideString;
    function GetlistAgencyID: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;

    procedure SetlistAgencyIDText(const Value: WideString);
    procedure SetlistAgencyID(const Value: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType);
  end;

  TXMLVolumeUnitMeasureType = class(TX2XMLNode, IXMLVolumeUnitMeasureType)
  protected
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeVolumeContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeVolumeContentType);
  end;

  TXMLWeightUnitMeasureType = class(TX2XMLNode, IXMLWeightUnitMeasureType)
  protected
    function GetHasunitCode: Boolean;
    function GetunitCodeText: WideString;
    function GetunitCode: TXMLMeasurementUnitCommonCodeWeightContentType;

    procedure SetunitCodeText(const Value: WideString);
    procedure SetunitCode(const Value: TXMLMeasurementUnitCommonCodeWeightContentType);
  end;


  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAccountType_D11A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAmountType_D11A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_ISO_ISO3AlphaCurrencyCode_2012-08-31 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ActionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AddressType_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AdjustmentReasonDescriptionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeIdentificationCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeReasonCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AutomaticDataCaptureMethodCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoOperationalCategoryCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoTypeCode_1996Rev2Final }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommodityIdentificationCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommunicationMeansTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ContactFunctionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsPackingCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsRegulationCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DateOnlyFormatCode_D21B }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsCode_2020 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsFunctionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DimensionTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_Accounting_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentStatusCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyTaxFeeTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyorTaxorFeeCategoryCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCodePaymentTermsEvent_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeQuantityUnitBasisCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeTariffCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeExtensionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_LocationFunctionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeLinear_4 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeVolume_4 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeWeight_4 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MessageFunctionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackageTypeCode_2006 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackagingMarkingCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_ChargePaying_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentGuaranteeMeansCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansChannelCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentTermsTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PriceTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ReferenceTypeCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealConditionCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealingPartyRoleCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusDescriptionCode_AccountingDebitCredit_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimeOnlyFormatCode_D21B }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimePointFormatCode_D21B }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentCategoryCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentFullnessCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMeansTypeCode_2007 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportModeCode_2 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMovementStageCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportPaymentArrangementCode_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_UnqualifiedDataType_100 }
  TXMLAmountType = class(TX2XMLNode, IXMLAmountType)
  protected
    function GetHascurrencyID: Boolean;
    function currencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcurrencyID: WideString;
    function GetHascurrencyCodeListVersionID: Boolean;
    function currencyCodeListVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcurrencyCodeListVersionID: WideString;

    procedure SetcurrencyID(const Value: WideString);
    procedure SetcurrencyCodeListVersionID(const Value: WideString);
  end;

  TXMLBinaryObjectType = class(TX2XMLNode, IXMLBinaryObjectType)
  protected
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetHasmimeCode: Boolean;
    function mimeCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetmimeCode: WideString;
    function GetHasencodingCode: Boolean;
    function encodingCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetencodingCode: WideString;
    function GetHascharacterSetCode: Boolean;
    function characterSetCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetcharacterSetCode: WideString;
    function GetHasuri: Boolean;
    function uriDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Geturi: WideString;
    function GetHasfilename: Boolean;
    function filenameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getfilename: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetmimeCode(const Value: WideString);
    procedure SetencodingCode(const Value: WideString);
    procedure SetcharacterSetCode(const Value: WideString);
    procedure Seturi(const Value: WideString);
    procedure Setfilename(const Value: WideString);
  end;

  TXMLCodeType = class(TX2XMLNode, IXMLCodeType)
  protected
    function GetHaslistID: Boolean;
    function listIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistID: WideString;
    function GetHaslistAgencyID: Boolean;
    function listAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyID: WideString;
    function GetHaslistAgencyName: Boolean;
    function listAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistAgencyName: WideString;
    function GetHaslistName: Boolean;
    function listNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistName: WideString;
    function GetHaslistVersionID: Boolean;
    function listVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistVersionID: WideString;
    function GetHasname: Boolean;
    function nameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getname: WideString;
    function GetHaslanguageID: Boolean;
    function languageIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageID: WideString;
    function GetHaslistURI: Boolean;
    function listURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistURI: WideString;
    function GetHaslistSchemeURI: Boolean;
    function listSchemeURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlistSchemeURI: WideString;

    procedure SetlistID(const Value: WideString);
    procedure SetlistAgencyID(const Value: WideString);
    procedure SetlistAgencyName(const Value: WideString);
    procedure SetlistName(const Value: WideString);
    procedure SetlistVersionID(const Value: WideString);
    procedure Setname(const Value: WideString);
    procedure SetlanguageID(const Value: WideString);
    procedure SetlistURI(const Value: WideString);
    procedure SetlistSchemeURI(const Value: WideString);
  end;

  TXMLDateTimeType = class(TX2XMLNode, IXMLDateTimeType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasDateTimeString: Boolean;
    function GetDateTimeString: IXMLDateTimeTypeDateTimeString;
    function GetHasDateTime: Boolean;
    function DateTimeDef(const ADefaultValue: TDateTime = Default(TDateTime)): TDateTime;
    function GetDateTime: TDateTime;

    procedure SetDateTime(const Value: TDateTime);
  end;

  TXMLDateTimeTypeDateTimeString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLDateTimeTypeDateTimeString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);
  end;

  TXMLDateType = class(TX2XMLNode, IXMLDateType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasDateString: Boolean;
    function GetDateString: IXMLDateString;
    function GetHasDate: Boolean;
    function DateDef(const ADefaultValue: TDateTime = Default(TDateTime)): TDateTime;
    function GetDate: TDateTime;

    procedure SetDate(const Value: TDateTime);
  end;

  TXMLDateString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLDateString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);
  end;

  TXMLIDType = class(TX2XMLNode, IXMLIDType)
  protected
    function GetHasschemeID: Boolean;
    function schemeIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeID: WideString;
    function GetHasschemeName: Boolean;
    function schemeNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeName: WideString;
    function GetHasschemeAgencyID: Boolean;
    function schemeAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeAgencyID: WideString;
    function GetHasschemeAgencyName: Boolean;
    function schemeAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeAgencyName: WideString;
    function GetHasschemeVersionID: Boolean;
    function schemeVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeVersionID: WideString;
    function GetHasschemeDataURI: Boolean;
    function schemeDataURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeDataURI: WideString;
    function GetHasschemeURI: Boolean;
    function schemeURIDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetschemeURI: WideString;

    procedure SetschemeID(const Value: WideString);
    procedure SetschemeName(const Value: WideString);
    procedure SetschemeAgencyID(const Value: WideString);
    procedure SetschemeAgencyName(const Value: WideString);
    procedure SetschemeVersionID(const Value: WideString);
    procedure SetschemeDataURI(const Value: WideString);
    procedure SetschemeURI(const Value: WideString);
  end;

  TXMLIndicatorType = class(TX2XMLNode, IXMLIndicatorType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasIndicatorString: Boolean;
    function GetIndicatorString: IXMLIndicatorString;
    function GetHasIndicator: Boolean;
    function IndicatorDef(const ADefaultValue: Boolean = Default(Boolean)): Boolean;
    function GetIndicator: Boolean;

    procedure SetIndicator(const Value: Boolean);
  end;

  TXMLIndicatorString = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLIndicatorString)
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;
    function GetValue: WideString;

    procedure Setformat(const Value: WideString);
    procedure SetValue(const Value: WideString);
  end;

  TXMLMeasureType = class(TX2XMLNode, IXMLMeasureType)
  protected
    function GetHasunitCode: Boolean;
    function unitCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCode: WideString;
    function GetHasunitCodeListVersionID: Boolean;
    function unitCodeListVersionIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListVersionID: WideString;

    procedure SetunitCode(const Value: WideString);
    procedure SetunitCodeListVersionID(const Value: WideString);
  end;

  TXMLNumericType = class(TX2XMLNode, IXMLNumericType)
  protected
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);
  end;

  TXMLPercentType = class(TX2XMLNode, IXMLPercentType)
  protected
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);
  end;

  TXMLQuantityType = class(TX2XMLNode, IXMLQuantityType)
  protected
    function GetHasunitCode: Boolean;
    function unitCodeDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCode: WideString;
    function GetHasunitCodeListID: Boolean;
    function unitCodeListIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListID: WideString;
    function GetHasunitCodeListAgencyID: Boolean;
    function unitCodeListAgencyIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListAgencyID: WideString;
    function GetHasunitCodeListAgencyName: Boolean;
    function unitCodeListAgencyNameDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetunitCodeListAgencyName: WideString;

    procedure SetunitCode(const Value: WideString);
    procedure SetunitCodeListID(const Value: WideString);
    procedure SetunitCodeListAgencyID(const Value: WideString);
    procedure SetunitCodeListAgencyName(const Value: WideString);
  end;

  TXMLRateType = class(TX2XMLNode, IXMLRateType)
  protected
    function GetHasformat: Boolean;
    function formatDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function Getformat: WideString;

    procedure Setformat(const Value: WideString);
  end;

  TXMLTextType = class(TX2XMLNode, IXMLTextType)
  protected
    function GetHaslanguageID: Boolean;
    function languageIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageID: WideString;
    function GetHaslanguageLocaleID: Boolean;
    function languageLocaleIDDef(const ADefaultValue: WideString = Default(WideString)): WideString;
    function GetlanguageLocaleID: WideString;

    procedure SetlanguageID(const Value: WideString);
    procedure SetlanguageLocaleID(const Value: WideString);
  end;


  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_ISO_ISOTwo-letterCountryCode_SecondEdition2006 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_FreightCostCode_4 }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_PaymentTermsDescriptionIdentifier_D22A }

  { Classes for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_ReusableAggregateBusinessInformationEntity_100 }
  TXMLAdvancePaymentType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLAdvancePaymentType)
  private
    FIncludedTradeTax: IXMLIncludedTradeTaxList;
    FInvoiceSpecifiedReferencedDocument: IXMLInvoiceSpecifiedReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetPaidAmount: IXMLAmountType;
    function GetHasFormattedReceivedDateTime: Boolean;
    function GetFormattedReceivedDateTime: IXMLFormattedDateTimeType;
    function GetIncludedTradeTax: IXMLIncludedTradeTaxList;
    function GetInvoiceSpecifiedReferencedDocument: IXMLInvoiceSpecifiedReferencedDocumentList;
  end;

  TXMLInvoiceSpecifiedReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInvoiceSpecifiedReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLInvoiceSpecifiedReferencedDocumentList = class(TX2XMLNodeCollection, IXMLInvoiceSpecifiedReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInvoiceSpecifiedReferencedDocumentListEnumerator;

    function Get_InvoiceSpecifiedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLAppliedAllowanceChargeType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLAppliedAllowanceChargeType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasActualAmount: Boolean;
    function GetActualAmount: IXMLAmountType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLCodeType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetChargeIndicator: IXMLIndicatorType;
    function GetHasCategoryAppliedTax: Boolean;
    function GetCategoryAppliedTax: IXMLAppliedTaxType;
  end;

  TXMLAppliedTaxType = class(TX2XMLNode, IXMLAppliedTaxType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasCalculatedAmount: Boolean;
    function GetCalculatedAmount: IXMLAmountType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasCalculatedRate: Boolean;
    function GetCalculatedRate: IXMLRateType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasTaxPointDate: Boolean;
    function GetTaxPointDate: IXMLDateType;
  end;

  TXMLAvailablePeriodType = class(TX2XMLNode, IXMLAvailablePeriodType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasStartDateTime: Boolean;
    function GetStartDateTime: IXMLDateTimeType;
    function GetHasEndDateTime: Boolean;
    function GetEndDateTime: IXMLDateTimeType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
  end;

  TXMLBasicWorkItemType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLBasicWorkItemType)
  private
    FPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    FAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    FTypeCode: IXMLTypeCodeList;
    FComment: IXMLCommentList;
    FRequestedActionCode: IXMLRequestedActionCodeList;
    FActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    FTotalQuantityWorkItemQuantityAnalysis: IXMLTotalQuantityWorkItemQuantityAnalysisList;
    FUnitCalculatedPrice: IXMLUnitCalculatedPriceList;
    FTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    FChangedRecordedStatus: IXMLChangedRecordedStatusList;
    FItemBasicWorkItem: IXMLItemBasicWorkItemList;
    FReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasReferenceID: Boolean;
    function GetReferenceID: IXMLIDType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetComment: IXMLCommentList;
    function GetHasTotalQuantity: Boolean;
    function GetTotalQuantity: IXMLQuantityType;
    function GetHasTotalQuantityClassificationCode: Boolean;
    function GetTotalQuantityClassificationCode: IXMLCodeType;
    function GetHas_Index: Boolean;
    function Get_Index: IXMLTextType;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListItemID: Boolean;
    function GetPriceListItemID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    function GetTotalQuantityWorkItemQuantityAnalysis: IXMLTotalQuantityWorkItemQuantityAnalysisList;
    function GetUnitCalculatedPrice: IXMLUnitCalculatedPriceList;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  end;

  TXMLUnitCalculatedPriceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUnitCalculatedPriceListEnumerator)
  protected
    function GetCurrent: IXMLCalculatedPriceType;
  end;


  TXMLUnitCalculatedPriceList = class(TX2XMLNodeCollection, IXMLUnitCalculatedPriceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUnitCalculatedPriceListEnumerator;

    function Get_UnitCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
    function Add: IXMLCalculatedPriceType;
    function Insert(Index: Integer): IXMLCalculatedPriceType;
  end;

  TXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator)
  protected
    function GetCurrent: IXMLWorkItemQuantityAnalysisType;
  end;


  TXMLTotalQuantityWorkItemQuantityAnalysisList = class(TX2XMLNodeCollection, IXMLTotalQuantityWorkItemQuantityAnalysisList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator;

    function Get_TotalQuantityWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
    function Add: IXMLWorkItemQuantityAnalysisType;
    function Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;
  end;

  TXMLBranchFinancialInstitutionType = class(TX2XMLNode, IXMLBranchFinancialInstitutionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
  end;

  TXMLCalculatedPriceType = class(TX2XMLNode, IXMLCalculatedPriceType)
  private
    FTypeCode: IXMLTypeCodeList;
    FChargeAmount: IXMLChargeAmountList;
    FRelatedAppliedAllowanceCharge: IXMLRelatedAppliedAllowanceChargeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetTypeCode: IXMLTypeCodeList;
    function GetChargeAmount: IXMLChargeAmountList;
    function GetRelatedAppliedAllowanceCharge: IXMLRelatedAppliedAllowanceChargeList;
  end;

  TXMLRelatedAppliedAllowanceChargeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRelatedAppliedAllowanceChargeListEnumerator)
  protected
    function GetCurrent: IXMLAppliedAllowanceChargeType;
  end;


  TXMLRelatedAppliedAllowanceChargeList = class(TX2XMLNodeCollection, IXMLRelatedAppliedAllowanceChargeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRelatedAppliedAllowanceChargeListEnumerator;

    function Get_RelatedAppliedAllowanceCharge(Index: Integer): IXMLAppliedAllowanceChargeType;
    function Add: IXMLAppliedAllowanceChargeType;
    function Insert(Index: Integer): IXMLAppliedAllowanceChargeType;
  end;

  TXMLContactPersonType = class(TX2XMLNode, IXMLContactPersonType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasGivenName: Boolean;
    function GetGivenName: IXMLTextType;
    function GetHasMiddleName: Boolean;
    function GetMiddleName: IXMLTextType;
    function GetHasFamilyName: Boolean;
    function GetFamilyName: IXMLTextType;
  end;

  TXMLCreditorFinancialAccountType = class(TX2XMLNode, IXMLCreditorFinancialAccountType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasIBANID: Boolean;
    function GetIBANID: IXMLIDType;
    function GetHasAccountName: Boolean;
    function GetAccountName: IXMLTextType;
    function GetHasProprietaryID: Boolean;
    function GetProprietaryID: IXMLIDType;
  end;

  TXMLCreditorFinancialInstitutionType = class(TX2XMLNode, IXMLCreditorFinancialInstitutionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasBICID: Boolean;
    function GetBICID: IXMLIDType;
    function GetHasCHIPSUniversalID: Boolean;
    function GetCHIPSUniversalID: IXMLIDType;
    function GetHasNewZealandNCCID: Boolean;
    function GetNewZealandNCCID: IXMLIDType;
    function GetHasIrishNSCID: Boolean;
    function GetIrishNSCID: IXMLIDType;
    function GetHasUKSortCodeID: Boolean;
    function GetUKSortCodeID: IXMLIDType;
    function GetHasCHIPSParticipantID: Boolean;
    function GetCHIPSParticipantID: IXMLIDType;
    function GetHasSwissBCID: Boolean;
    function GetSwissBCID: IXMLIDType;
    function GetHasFedwireRoutingNumberID: Boolean;
    function GetFedwireRoutingNumberID: IXMLIDType;
    function GetHasPortugueseNCCID: Boolean;
    function GetPortugueseNCCID: IXMLIDType;
    function GetHasRussianCentralBankID: Boolean;
    function GetRussianCentralBankID: IXMLIDType;
    function GetHasItalianDomesticID: Boolean;
    function GetItalianDomesticID: IXMLIDType;
    function GetHasAustrianBankleitzahlID: Boolean;
    function GetAustrianBankleitzahlID: IXMLIDType;
    function GetHasCanadianPaymentsAssociationID: Boolean;
    function GetCanadianPaymentsAssociationID: IXMLIDType;
    function GetHasSICID: Boolean;
    function GetSICID: IXMLIDType;
    function GetHasGermanBankleitzahlID: Boolean;
    function GetGermanBankleitzahlID: IXMLIDType;
    function GetHasSpanishDomesticInterbankingID: Boolean;
    function GetSpanishDomesticInterbankingID: IXMLIDType;
    function GetHasSouthAfricanNCCID: Boolean;
    function GetSouthAfricanNCCID: IXMLIDType;
    function GetHasHongKongBankID: Boolean;
    function GetHongKongBankID: IXMLIDType;
    function GetHasAustralianBSBID: Boolean;
    function GetAustralianBSBID: IXMLIDType;
    function GetHasIndianFinancialSystemID: Boolean;
    function GetIndianFinancialSystemID: IXMLIDType;
    function GetHasHellenicBankID: Boolean;
    function GetHellenicBankID: IXMLIDType;
    function GetHasPolishNationalClearingID: Boolean;
    function GetPolishNationalClearingID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasClearingSystemName: Boolean;
    function GetClearingSystemName: IXMLTextType;
    function GetHasJapanFinancialInstitutionCommonID: Boolean;
    function GetJapanFinancialInstitutionCommonID: IXMLIDType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
    function GetHasSubDivisionBranchFinancialInstitution: Boolean;
    function GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;
  end;

  TXMLCrossBorderCustomsValuationType = class(TX2XMLNode, IXMLCrossBorderCustomsValuationType)
  private
    FOtherChargeAmount: IXMLOtherChargeAmountList;
    FSaleRestriction: IXMLSaleRestrictionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasAddedAdjustmentAmount: Boolean;
    function GetAddedAdjustmentAmount: IXMLAmountType;
    function GetHasDeductedAdjustmentAmount: Boolean;
    function GetDeductedAdjustmentAmount: IXMLAmountType;
    function GetHasAddedAdjustmentPercent: Boolean;
    function GetAddedAdjustmentPercent: IXMLPercentType;
    function GetHasDeductedAdjustmentPercent: Boolean;
    function GetDeductedAdjustmentPercent: IXMLPercentType;
    function GetHasMethodCode: Boolean;
    function GetMethodCode: IXMLCodeType;
    function GetHasWTOAdditionCode: Boolean;
    function GetWTOAdditionCode: IXMLCodeType;
    function GetHasChargeApportionMethodCode: Boolean;
    function GetChargeApportionMethodCode: IXMLCodeType;
    function GetOtherChargeAmount: IXMLOtherChargeAmountList;
    function GetHasBuyerSellerRelationshipIndicator: Boolean;
    function GetBuyerSellerRelationshipIndicator: IXMLIndicatorType;
    function GetHasBuyerSellerRelationshipPriceInfluenceIndicator: Boolean;
    function GetBuyerSellerRelationshipPriceInfluenceIndicator: IXMLIndicatorType;
    function GetHasSaleRestrictionIndicator: Boolean;
    function GetSaleRestrictionIndicator: IXMLIndicatorType;
    function GetHasSalePriceConditionIndicator: Boolean;
    function GetSalePriceConditionIndicator: IXMLIndicatorType;
    function GetHasRoyaltyLicenseFeeIndicator: Boolean;
    function GetRoyaltyLicenseFeeIndicator: IXMLIndicatorType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetSaleRestriction: IXMLSaleRestrictionList;
    function GetHasApplicableTradeCurrencyExchange: Boolean;
    function GetApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
  end;

  TXMLSaleRestrictionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSaleRestrictionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLSaleRestrictionList = class(TX2XMLNodeCollection, IXMLSaleRestrictionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSaleRestrictionListEnumerator;

    function Get_SaleRestriction(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLOtherChargeAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLOtherChargeAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLOtherChargeAmountList = class(TX2XMLNodeCollection, IXMLOtherChargeAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLOtherChargeAmountListEnumerator;

    function Get_OtherChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLCrossBorderRegulatoryProcedureType = class(TX2XMLNode, IXMLCrossBorderRegulatoryProcedureType)
  private
    FTypeCode: IXMLTypeCodeList;
    FRemark: IXMLRemarkList;
    FApplicableTradeTax: IXMLApplicableTradeTaxList;
  public
    procedure AfterConstruction; override;
  protected
    function GetTypeCode: IXMLTypeCodeList;
    function GetHasTransactionNatureCode: Boolean;
    function GetTransactionNatureCode: IXMLCodeType;
    function GetHasTariffAmount: Boolean;
    function GetTariffAmount: IXMLAmountType;
    function GetHasNonTariffChargeAmount: Boolean;
    function GetNonTariffChargeAmount: IXMLAmountType;
    function GetHasTotalChargeAmount: Boolean;
    function GetTotalChargeAmount: IXMLAmountType;
    function GetRemark: IXMLRemarkList;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;
  end;

  TXMLRemarkListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRemarkListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLRemarkList = class(TX2XMLNodeCollection, IXMLRemarkList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRemarkListEnumerator;

    function Get_Remark(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLDebtorFinancialAccountType = class(TX2XMLNode, IXMLDebtorFinancialAccountType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasIBANID: Boolean;
    function GetIBANID: IXMLIDType;
    function GetHasAccountName: Boolean;
    function GetAccountName: IXMLTextType;
    function GetHasProprietaryID: Boolean;
    function GetProprietaryID: IXMLIDType;
  end;

  TXMLDebtorFinancialInstitutionType = class(TX2XMLNode, IXMLDebtorFinancialInstitutionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasBICID: Boolean;
    function GetBICID: IXMLIDType;
    function GetHasClearingSystemName: Boolean;
    function GetClearingSystemName: IXMLTextType;
    function GetHasCHIPSUniversalID: Boolean;
    function GetCHIPSUniversalID: IXMLIDType;
    function GetHasNewZealandNCCID: Boolean;
    function GetNewZealandNCCID: IXMLIDType;
    function GetHasIrishNSCID: Boolean;
    function GetIrishNSCID: IXMLIDType;
    function GetHasUKSortCodeID: Boolean;
    function GetUKSortCodeID: IXMLIDType;
    function GetHasCHIPSParticipantID: Boolean;
    function GetCHIPSParticipantID: IXMLIDType;
    function GetHasSwissBCID: Boolean;
    function GetSwissBCID: IXMLIDType;
    function GetHasFedwireRoutingNumberID: Boolean;
    function GetFedwireRoutingNumberID: IXMLIDType;
    function GetHasPortugueseNCCID: Boolean;
    function GetPortugueseNCCID: IXMLIDType;
    function GetHasRussianCentralBankID: Boolean;
    function GetRussianCentralBankID: IXMLIDType;
    function GetHasItalianDomesticID: Boolean;
    function GetItalianDomesticID: IXMLIDType;
    function GetHasAustrianBankleitzahlID: Boolean;
    function GetAustrianBankleitzahlID: IXMLIDType;
    function GetHasCanadianPaymentsAssociationID: Boolean;
    function GetCanadianPaymentsAssociationID: IXMLIDType;
    function GetHasSICID: Boolean;
    function GetSICID: IXMLIDType;
    function GetHasGermanBankleitzahlID: Boolean;
    function GetGermanBankleitzahlID: IXMLIDType;
    function GetHasSpanishDomesticInterbankingID: Boolean;
    function GetSpanishDomesticInterbankingID: IXMLIDType;
    function GetHasSouthAfricanNCCID: Boolean;
    function GetSouthAfricanNCCID: IXMLIDType;
    function GetHasHongKongBankID: Boolean;
    function GetHongKongBankID: IXMLIDType;
    function GetHasAustralianBSBID: Boolean;
    function GetAustralianBSBID: IXMLIDType;
    function GetHasIndianFinancialSystemID: Boolean;
    function GetIndianFinancialSystemID: IXMLIDType;
    function GetHasHellenicBankID: Boolean;
    function GetHellenicBankID: IXMLIDType;
    function GetHasPolishNationalClearingID: Boolean;
    function GetPolishNationalClearingID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasJapanFinancialInstitutionCommonID: Boolean;
    function GetJapanFinancialInstitutionCommonID: IXMLIDType;
    function GetHasLocationFinancialInstitutionAddress: Boolean;
    function GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
    function GetHasSubDivisionBranchFinancialInstitution: Boolean;
    function GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;
  end;

  TXMLDeliveryAdjustmentType = class(TX2XMLNode, IXMLDeliveryAdjustmentType)
  private
    FReason: IXMLReasonList;
    FActualAmount: IXMLActualAmountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLAdjustmentReasonCodeType;
    function GetReason: IXMLReasonList;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;
  end;

  TXMLDisposalInstructionsType = class(TX2XMLNode, IXMLDisposalInstructionsType)
  private
    FRecyclingDescriptionCode: IXMLRecyclingDescriptionCodeList;
    FDescription: IXMLDescriptionList;
    FRecyclingProcedure: IXMLRecyclingProcedureList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasMaterialID: Boolean;
    function GetMaterialID: IXMLIDType;
    function GetRecyclingDescriptionCode: IXMLRecyclingDescriptionCodeList;
    function GetDescription: IXMLDescriptionList;
    function GetRecyclingProcedure: IXMLRecyclingProcedureList;
  end;

  TXMLRecyclingProcedureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRecyclingProcedureListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLRecyclingProcedureList = class(TX2XMLNodeCollection, IXMLRecyclingProcedureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRecyclingProcedureListEnumerator;

    function Get_RecyclingProcedure(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLRecyclingDescriptionCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRecyclingDescriptionCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLRecyclingDescriptionCodeList = class(TX2XMLNodeCollection, IXMLRecyclingDescriptionCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRecyclingDescriptionCodeListEnumerator;

    function Get_RecyclingDescriptionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLDocumentAuthenticationType = class(TX2XMLNode, IXMLDocumentAuthenticationType)
  private
    FInformation: IXMLInformationList;
    FCategoryCode: IXMLCategoryCodeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetInformation: IXMLInformationList;
    function GetHasSignatory: Boolean;
    function GetSignatory: IXMLTextType;
    function GetHasSignatoryImageBinaryObject: Boolean;
    function GetSignatoryImageBinaryObject: IXMLBinaryObjectType;
    function GetCategoryCode: IXMLCategoryCodeList;
  end;

  TXMLCategoryCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCategoryCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLCategoryCodeList = class(TX2XMLNodeCollection, IXMLCategoryCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCategoryCodeListEnumerator;

    function Get_CategoryCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLDocumentContextParameterType = class(TX2XMLNode, IXMLDocumentContextParameterType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasValue: Boolean;
    function GetValue: IXMLTextType;
    function GetHasSpecifiedDocumentVersion: Boolean;
    function GetSpecifiedDocumentVersion: IXMLDocumentVersionType;
  end;

  TXMLDocumentLineDocumentType = class(TX2XMLNode, IXMLDocumentLineDocumentType)
  private
    FIncludedNote: IXMLIncludedNoteList;
    FReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasLineID: Boolean;
    function GetLineID: IXMLIDType;
    function GetHasParentLineID: Boolean;
    function GetParentLineID: IXMLIDType;
    function GetHasLineStatusCode: Boolean;
    function GetLineStatusCode: IXMLLineStatusCodeType;
    function GetHasLineStatusReasonCode: Boolean;
    function GetLineStatusReasonCode: IXMLCodeType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasResponseReasonCode: Boolean;
    function GetResponseReasonCode: IXMLCodeType;
    function GetIncludedNote: IXMLIncludedNoteList;
    function GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
  end;

  TXMLDocumentVersionType = class(TX2XMLNode, IXMLDocumentVersionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasIssueDateTime: Boolean;
    function GetIssueDateTime: IXMLDateTimeType;
  end;

  TXMLExchangedDocumentContextType = class(TX2XMLNode, IXMLExchangedDocumentContextType)
  private
    FBusinessProcessSpecifiedDocumentContextParameter: IXMLBusinessProcessSpecifiedDocumentContextParameterList;
    FBIMSpecifiedDocumentContextParameter: IXMLBIMSpecifiedDocumentContextParameterList;
    FScenarioSpecifiedDocumentContextParameter: IXMLScenarioSpecifiedDocumentContextParameterList;
    FApplicationSpecifiedDocumentContextParameter: IXMLApplicationSpecifiedDocumentContextParameterList;
    FGuidelineSpecifiedDocumentContextParameter: IXMLGuidelineSpecifiedDocumentContextParameterList;
    FSubsetSpecifiedDocumentContextParameter: IXMLSubsetSpecifiedDocumentContextParameterList;
    FUserSpecifiedDocumentContextParameter: IXMLUserSpecifiedDocumentContextParameterList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasSpecifiedTransactionID: Boolean;
    function GetSpecifiedTransactionID: IXMLIDType;
    function GetHasTestIndicator: Boolean;
    function GetTestIndicator: IXMLIndicatorType;
    function GetBusinessProcessSpecifiedDocumentContextParameter: IXMLBusinessProcessSpecifiedDocumentContextParameterList;
    function GetBIMSpecifiedDocumentContextParameter: IXMLBIMSpecifiedDocumentContextParameterList;
    function GetScenarioSpecifiedDocumentContextParameter: IXMLScenarioSpecifiedDocumentContextParameterList;
    function GetApplicationSpecifiedDocumentContextParameter: IXMLApplicationSpecifiedDocumentContextParameterList;
    function GetGuidelineSpecifiedDocumentContextParameter: IXMLGuidelineSpecifiedDocumentContextParameterList;
    function GetSubsetSpecifiedDocumentContextParameter: IXMLSubsetSpecifiedDocumentContextParameterList;
    function GetHasMessageStandardSpecifiedDocumentContextParameter: Boolean;
    function GetMessageStandardSpecifiedDocumentContextParameter: IXMLDocumentContextParameterType;
    function GetUserSpecifiedDocumentContextParameter: IXMLUserSpecifiedDocumentContextParameterList;
  end;

  TXMLUserSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUserSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLUserSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLUserSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUserSpecifiedDocumentContextParameterListEnumerator;

    function Get_UserSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLSubsetSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSubsetSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLSubsetSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLSubsetSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSubsetSpecifiedDocumentContextParameterListEnumerator;

    function Get_SubsetSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLGuidelineSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGuidelineSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLGuidelineSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLGuidelineSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGuidelineSpecifiedDocumentContextParameterListEnumerator;

    function Get_GuidelineSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLApplicationSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicationSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLApplicationSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLApplicationSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicationSpecifiedDocumentContextParameterListEnumerator;

    function Get_ApplicationSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLScenarioSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLScenarioSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLScenarioSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLScenarioSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLScenarioSpecifiedDocumentContextParameterListEnumerator;

    function Get_ScenarioSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLBIMSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBIMSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLBIMSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLBIMSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBIMSpecifiedDocumentContextParameterListEnumerator;

    function Get_BIMSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator)
  protected
    function GetCurrent: IXMLDocumentContextParameterType;
  end;


  TXMLBusinessProcessSpecifiedDocumentContextParameterList = class(TX2XMLNodeCollection, IXMLBusinessProcessSpecifiedDocumentContextParameterList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator;

    function Get_BusinessProcessSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
    function Add: IXMLDocumentContextParameterType;
    function Insert(Index: Integer): IXMLDocumentContextParameterType;
  end;

  TXMLExchangedDocumentType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLExchangedDocumentType)
  private
    FName: IXMLNameList;
    FLanguageID: IXMLLanguageIDList;
    FRequestedResponseTypeCode: IXMLRequestedResponseTypeCodeList;
    FIncludedNote: IXMLIncludedNoteList;
    FReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
    FAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDocumentCodeType;
    function GetIssueDateTime: IXMLDateTimeType;
    function GetHasCopyIndicator: Boolean;
    function GetCopyIndicator: IXMLIndicatorType;
    function GetHasPurpose: Boolean;
    function GetPurpose: IXMLTextType;
    function GetHasControlRequirementIndicator: Boolean;
    function GetControlRequirementIndicator: IXMLIndicatorType;
    function GetLanguageID: IXMLLanguageIDList;
    function GetHasPurposeCode: Boolean;
    function GetPurposeCode: IXMLMessageFunctionCodeType;
    function GetHasRevisionDateTime: Boolean;
    function GetRevisionDateTime: IXMLDateTimeType;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasRevisionID: Boolean;
    function GetRevisionID: IXMLIDType;
    function GetHasPreviousRevisionID: Boolean;
    function GetPreviousRevisionID: IXMLIDType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetRequestedResponseTypeCode: IXMLRequestedResponseTypeCodeList;
    function GetHasCreationDateTime: Boolean;
    function GetCreationDateTime: IXMLFormattedDateTimeType;
    function GetHasFirstVersionIssueDateTime: Boolean;
    function GetFirstVersionIssueDateTime: IXMLDateTimeType;
    function GetHasSubtypeCode: Boolean;
    function GetSubtypeCode: IXMLCodeType;
    function GetIncludedNote: IXMLIncludedNoteList;
    function GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
    function GetHasSignatoryDocumentAuthentication: Boolean;
    function GetSignatoryDocumentAuthentication: IXMLDocumentAuthenticationType;
    function GetHasEffectiveSpecifiedPeriod: Boolean;
    function GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasIssuerTradeParty: Boolean;
    function GetIssuerTradeParty: IXMLTradePartyType;
    function GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
  end;

  TXMLReferenceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReferenceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLReferenceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLReferenceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReferenceReferencedDocumentListEnumerator;

    function Get_ReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLRequestedResponseTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRequestedResponseTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLRequestedResponseTypeCodeList = class(TX2XMLNodeCollection, IXMLRequestedResponseTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRequestedResponseTypeCodeListEnumerator;

    function Get_RequestedResponseTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLLanguageIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLanguageIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLLanguageIDList = class(TX2XMLNodeCollection, IXMLLanguageIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLanguageIDListEnumerator;

    function Get_LanguageID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLFinancialAdjustmentType = class(TX2XMLNode, IXMLFinancialAdjustmentType)
  private
    FReason: IXMLReasonList;
    FActualAmount: IXMLActualAmountList;
    FRelatedTradeTax: IXMLRelatedTradeTaxList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLCodeType;
    function GetReason: IXMLReasonList;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasActualDateTime: Boolean;
    function GetActualDateTime: IXMLDateTimeType;
    function GetHasDirectionCode: Boolean;
    function GetDirectionCode: IXMLAccountingDebitCreditStatusCodeType;
    function GetHasClaimRelatedTradeParty: Boolean;
    function GetClaimRelatedTradeParty: IXMLTradePartyType;
    function GetHasInvoiceReferenceReferencedDocument: Boolean;
    function GetInvoiceReferenceReferencedDocument: IXMLReferencedDocumentType;
    function GetRelatedTradeTax: IXMLRelatedTradeTaxList;
  end;

  TXMLRelatedTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRelatedTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLRelatedTradeTaxList = class(TX2XMLNodeCollection, IXMLRelatedTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRelatedTradeTaxListEnumerator;

    function Get_RelatedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLReasonListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReasonListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLReasonList = class(TX2XMLNodeCollection, IXMLReasonList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReasonListEnumerator;

    function Get_Reason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLFinancialInstitutionAddressType = class(TX2XMLNode, IXMLFinancialInstitutionAddressType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasPostcodeCode: Boolean;
    function GetPostcodeCode: IXMLCodeType;
    function GetHasBuildingNumber: Boolean;
    function GetBuildingNumber: IXMLTextType;
    function GetHasLineOne: Boolean;
    function GetLineOne: IXMLTextType;
    function GetHasLineTwo: Boolean;
    function GetLineTwo: IXMLTextType;
    function GetHasLineThree: Boolean;
    function GetLineThree: IXMLTextType;
    function GetHasLineFour: Boolean;
    function GetLineFour: IXMLTextType;
    function GetHasLineFive: Boolean;
    function GetLineFive: IXMLTextType;
    function GetHasStreetName: Boolean;
    function GetStreetName: IXMLTextType;
    function GetHasCityName: Boolean;
    function GetCityName: IXMLTextType;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasPostOfficeBox: Boolean;
    function GetPostOfficeBox: IXMLTextType;
    function GetHasCityID: Boolean;
    function GetCityID: IXMLIDType;
    function GetHasCountrySubDivisionName: Boolean;
    function GetCountrySubDivisionName: IXMLTextType;
    function GetHasCountryName: Boolean;
    function GetCountryName: IXMLTextType;
  end;

  TXMLGeographicalCoordinateType = class(TX2XMLNode, IXMLGeographicalCoordinateType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasAltitudeMeasure: Boolean;
    function GetAltitudeMeasure: IXMLMeasureType;
    function GetHasLatitudeMeasure: Boolean;
    function GetLatitudeMeasure: IXMLMeasureType;
    function GetHasLongitudeMeasure: Boolean;
    function GetLongitudeMeasure: IXMLMeasureType;
    function GetHasSystemID: Boolean;
    function GetSystemID: IXMLIDType;
  end;

  TXMLGroupedWorkItemType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLGroupedWorkItemType)
  private
    FPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    FAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    FTypeCode: IXMLTypeCodeList;
    FComment: IXMLCommentList;
    FRequestedActionCode: IXMLRequestedActionCodeList;
    FTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    FItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    FItemBasicWorkItem: IXMLItemBasicWorkItemList;
    FChangedRecordedStatus: IXMLChangedRecordedStatusList;
    FActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    FReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetComment: IXMLCommentList;
    function GetHasTotalQuantity: Boolean;
    function GetTotalQuantity: IXMLQuantityType;
    function GetHas_Index: Boolean;
    function Get_Index: IXMLTextType;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListItemID: Boolean;
    function GetPriceListItemID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  end;

  TXMLActualWorkItemComplexDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLActualWorkItemComplexDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLWorkItemComplexDescriptionType;
  end;


  TXMLActualWorkItemComplexDescriptionList = class(TX2XMLNodeCollection, IXMLActualWorkItemComplexDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLActualWorkItemComplexDescriptionListEnumerator;

    function Get_ActualWorkItemComplexDescription(Index: Integer): IXMLWorkItemComplexDescriptionType;
    function Add: IXMLWorkItemComplexDescriptionType;
    function Insert(Index: Integer): IXMLWorkItemComplexDescriptionType;
  end;

  TXMLHeaderTradeAgreementType = class(TX2XMLNode, IXMLHeaderTradeAgreementType)
  private
    FReference: IXMLReferenceList;
    FBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    FRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    FPurchaseConditionsReferencedDocument: IXMLPurchaseConditionsReferencedDocumentList;
    FUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetReference: IXMLReferenceList;
    function GetHasBuyerReference: Boolean;
    function GetBuyerReference: IXMLTextType;
    function GetHasSellerTradeParty: Boolean;
    function GetSellerTradeParty: IXMLTradePartyType;
    function GetHasBuyerTradeParty: Boolean;
    function GetBuyerTradeParty: IXMLTradePartyType;
    function GetHasSalesAgentTradeParty: Boolean;
    function GetSalesAgentTradeParty: IXMLTradePartyType;
    function GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    function GetHasBuyerAssignedAccountantTradeParty: Boolean;
    function GetBuyerAssignedAccountantTradeParty: IXMLTradePartyType;
    function GetHasSellerAssignedAccountantTradeParty: Boolean;
    function GetSellerAssignedAccountantTradeParty: IXMLTradePartyType;
    function GetHasBuyerTaxRepresentativeTradeParty: Boolean;
    function GetBuyerTaxRepresentativeTradeParty: IXMLTradePartyType;
    function GetHasSellerTaxRepresentativeTradeParty: Boolean;
    function GetSellerTaxRepresentativeTradeParty: IXMLTradePartyType;
    function GetHasProductEndUserTradeParty: Boolean;
    function GetProductEndUserTradeParty: IXMLTradePartyType;
    function GetHasApplicableTradeDeliveryTerms: Boolean;
    function GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasQuotationReferencedDocument: Boolean;
    function GetQuotationReferencedDocument: IXMLReferencedDocumentType;
    function GetHasOrderResponseReferencedDocument: Boolean;
    function GetOrderResponseReferencedDocument: IXMLReferencedDocumentType;
    function GetHasContractReferencedDocument: Boolean;
    function GetContractReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDemandForecastReferencedDocument: Boolean;
    function GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
    function GetHasSupplyInstructionReferencedDocument: Boolean;
    function GetSupplyInstructionReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPromotionalDealReferencedDocument: Boolean;
    function GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPriceListReferencedDocument: Boolean;
    function GetPriceListReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    function GetHasBuyerAgentTradeParty: Boolean;
    function GetBuyerAgentTradeParty: IXMLTradePartyType;
    function GetPurchaseConditionsReferencedDocument: IXMLPurchaseConditionsReferencedDocumentList;
    function GetHasSpecifiedProcuringProject: Boolean;
    function GetSpecifiedProcuringProject: IXMLProcuringProjectType;
    function GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
    function GetHasPricingBaseApplicableLogisticsLocation: Boolean;
    function GetPricingBaseApplicableLogisticsLocation: IXMLLogisticsLocationType;
  end;

  TXMLPurchaseConditionsReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPurchaseConditionsReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLPurchaseConditionsReferencedDocumentList = class(TX2XMLNodeCollection, IXMLPurchaseConditionsReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPurchaseConditionsReferencedDocumentListEnumerator;

    function Get_PurchaseConditionsReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLReferenceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReferenceListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLReferenceList = class(TX2XMLNodeCollection, IXMLReferenceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReferenceListEnumerator;

    function Get_Reference(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLHeaderTradeDeliveryType = class(TX2XMLNode, IXMLHeaderTradeDeliveryType)
  private
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    FPreviousDeliverySupplyChainEvent: IXMLPreviousDeliverySupplyChainEventList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasRelatedSupplyChainConsignment: Boolean;
    function GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
    function GetHasShipToTradeParty: Boolean;
    function GetShipToTradeParty: IXMLTradePartyType;
    function GetHasUltimateShipToTradeParty: Boolean;
    function GetUltimateShipToTradeParty: IXMLTradePartyType;
    function GetHasShipFromTradeParty: Boolean;
    function GetShipFromTradeParty: IXMLTradePartyType;
    function GetHasActualDespatchSupplyChainEvent: Boolean;
    function GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualPickUpSupplyChainEvent: Boolean;
    function GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualDeliverySupplyChainEvent: Boolean;
    function GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualReceiptSupplyChainEvent: Boolean;
    function GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasDespatchAdviceReferencedDocument: Boolean;
    function GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasReceivingAdviceReferencedDocument: Boolean;
    function GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDeliveryNoteReferencedDocument: Boolean;
    function GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
    function GetHasConsumptionReportReferencedDocument: Boolean;
    function GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
    function GetPreviousDeliverySupplyChainEvent: IXMLPreviousDeliverySupplyChainEventList;
    function GetHasPackingListReferencedDocument: Boolean;
    function GetPackingListReferencedDocument: IXMLReferencedDocumentType;
  end;

  TXMLPreviousDeliverySupplyChainEventListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPreviousDeliverySupplyChainEventListEnumerator)
  protected
    function GetCurrent: IXMLSupplyChainEventType;
  end;


  TXMLPreviousDeliverySupplyChainEventList = class(TX2XMLNodeCollection, IXMLPreviousDeliverySupplyChainEventList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPreviousDeliverySupplyChainEventListEnumerator;

    function Get_PreviousDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
    function Add: IXMLSupplyChainEventType;
    function Insert(Index: Integer): IXMLSupplyChainEventType;
  end;

  TXMLHeaderTradeSettlementType = class(TX2XMLNode, IXMLHeaderTradeSettlementType)
  private
    FDuePayableAmount: IXMLDuePayableAmountList;
    FCreditorReferenceTypeCode: IXMLCreditorReferenceTypeCodeList;
    FCreditorReferenceType: IXMLCreditorReferenceTypeList;
    FCreditorReferenceIssuerID: IXMLCreditorReferenceIssuerIDList;
    FPaymentReference: IXMLPaymentReferenceList;
    FNextInvoiceDateTime: IXMLNextInvoiceDateTimeList;
    FCreditReason: IXMLCreditReasonList;
    FSpecifiedTradeSettlementPaymentMeans: IXMLSpecifiedTradeSettlementPaymentMeansList;
    FApplicableTradeTax: IXMLApplicableTradeTaxList;
    FSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    FSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    FSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    FSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    FSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    FInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    FFactoringAgreementReferencedDocument: IXMLFactoringAgreementReferencedDocumentList;
    FFactoringListReferencedDocument: IXMLFactoringListReferencedDocumentList;
    FPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    FReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    FPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    FSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
    FSpecifiedTradeSettlementFinancialCard: IXMLSpecifiedTradeSettlementFinancialCardList;
    FSpecifiedAdvancePayment: IXMLSpecifiedAdvancePaymentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetDuePayableAmount: IXMLDuePayableAmountList;
    function GetCreditorReferenceTypeCode: IXMLCreditorReferenceTypeCodeList;
    function GetCreditorReferenceType: IXMLCreditorReferenceTypeList;
    function GetCreditorReferenceIssuerID: IXMLCreditorReferenceIssuerIDList;
    function GetHasCreditorReferenceID: Boolean;
    function GetCreditorReferenceID: IXMLIDType;
    function GetPaymentReference: IXMLPaymentReferenceList;
    function GetHasTaxCurrencyCode: Boolean;
    function GetTaxCurrencyCode: IXMLCurrencyCodeType;
    function GetHasInvoiceCurrencyCode: Boolean;
    function GetInvoiceCurrencyCode: IXMLCurrencyCodeType;
    function GetHasPaymentCurrencyCode: Boolean;
    function GetPaymentCurrencyCode: IXMLCurrencyCodeType;
    function GetHasInvoiceIssuerReference: Boolean;
    function GetInvoiceIssuerReference: IXMLTextType;
    function GetHasInvoiceDateTime: Boolean;
    function GetInvoiceDateTime: IXMLDateTimeType;
    function GetNextInvoiceDateTime: IXMLNextInvoiceDateTimeList;
    function GetHasCreditReasonCode: Boolean;
    function GetCreditReasonCode: IXMLCodeType;
    function GetCreditReason: IXMLCreditReasonList;
    function GetHasInvoicerTradeParty: Boolean;
    function GetInvoicerTradeParty: IXMLTradePartyType;
    function GetHasInvoiceeTradeParty: Boolean;
    function GetInvoiceeTradeParty: IXMLTradePartyType;
    function GetHasPayeeTradeParty: Boolean;
    function GetPayeeTradeParty: IXMLTradePartyType;
    function GetHasPayerTradeParty: Boolean;
    function GetPayerTradeParty: IXMLTradePartyType;
    function GetHasTaxApplicableTradeCurrencyExchange: Boolean;
    function GetTaxApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetHasInvoiceApplicableTradeCurrencyExchange: Boolean;
    function GetInvoiceApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetHasPaymentApplicableTradeCurrencyExchange: Boolean;
    function GetPaymentApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
    function GetSpecifiedTradeSettlementPaymentMeans: IXMLSpecifiedTradeSettlementPaymentMeansList;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;
    function GetHasBillingSpecifiedPeriod: Boolean;
    function GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    function GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    function GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    function GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    function GetHasSpecifiedTradeSettlementHeaderMonetarySummation: Boolean;
    function GetSpecifiedTradeSettlementHeaderMonetarySummation: IXMLTradeSettlementHeaderMonetarySummationType;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetHasProFormaInvoiceReferencedDocument: Boolean;
    function GetProFormaInvoiceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasLetterOfCreditReferencedDocument: Boolean;
    function GetLetterOfCreditReferencedDocument: IXMLReferencedDocumentType;
    function GetFactoringAgreementReferencedDocument: IXMLFactoringAgreementReferencedDocumentList;
    function GetFactoringListReferencedDocument: IXMLFactoringListReferencedDocumentList;
    function GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    function GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    function GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    function GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
    function GetSpecifiedTradeSettlementFinancialCard: IXMLSpecifiedTradeSettlementFinancialCardList;
    function GetSpecifiedAdvancePayment: IXMLSpecifiedAdvancePaymentList;
    function GetHasUltimatePayeeTradeParty: Boolean;
    function GetUltimatePayeeTradeParty: IXMLTradePartyType;
  end;

  TXMLSpecifiedAdvancePaymentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedAdvancePaymentListEnumerator)
  protected
    function GetCurrent: IXMLAdvancePaymentType;
  end;


  TXMLSpecifiedAdvancePaymentList = class(TX2XMLNodeCollection, IXMLSpecifiedAdvancePaymentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedAdvancePaymentListEnumerator;

    function Get_SpecifiedAdvancePayment(Index: Integer): IXMLAdvancePaymentType;
    function Add: IXMLAdvancePaymentType;
    function Insert(Index: Integer): IXMLAdvancePaymentType;
  end;

  TXMLSpecifiedTradeSettlementFinancialCardListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTradeSettlementFinancialCardListEnumerator)
  protected
    function GetCurrent: IXMLTradeSettlementFinancialCardType;
  end;


  TXMLSpecifiedTradeSettlementFinancialCardList = class(TX2XMLNodeCollection, IXMLSpecifiedTradeSettlementFinancialCardList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTradeSettlementFinancialCardListEnumerator;

    function Get_SpecifiedTradeSettlementFinancialCard(Index: Integer): IXMLTradeSettlementFinancialCardType;
    function Add: IXMLTradeSettlementFinancialCardType;
    function Insert(Index: Integer): IXMLTradeSettlementFinancialCardType;
  end;

  TXMLFactoringListReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLFactoringListReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLFactoringListReferencedDocumentList = class(TX2XMLNodeCollection, IXMLFactoringListReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLFactoringListReferencedDocumentListEnumerator;

    function Get_FactoringListReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLFactoringAgreementReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLFactoringAgreementReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLFactoringAgreementReferencedDocumentList = class(TX2XMLNodeCollection, IXMLFactoringAgreementReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLFactoringAgreementReferencedDocumentListEnumerator;

    function Get_FactoringAgreementReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLSpecifiedTradeSettlementPaymentMeansListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTradeSettlementPaymentMeansListEnumerator)
  protected
    function GetCurrent: IXMLTradeSettlementPaymentMeansType;
  end;


  TXMLSpecifiedTradeSettlementPaymentMeansList = class(TX2XMLNodeCollection, IXMLSpecifiedTradeSettlementPaymentMeansList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTradeSettlementPaymentMeansListEnumerator;

    function Get_SpecifiedTradeSettlementPaymentMeans(Index: Integer): IXMLTradeSettlementPaymentMeansType;
    function Add: IXMLTradeSettlementPaymentMeansType;
    function Insert(Index: Integer): IXMLTradeSettlementPaymentMeansType;
  end;

  TXMLCreditReasonListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditReasonListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCreditReasonList = class(TX2XMLNodeCollection, IXMLCreditReasonList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditReasonListEnumerator;

    function Get_CreditReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLNextInvoiceDateTimeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNextInvoiceDateTimeListEnumerator)
  protected
    function GetCurrent: IXMLDateTimeType;
  end;


  TXMLNextInvoiceDateTimeList = class(TX2XMLNodeCollection, IXMLNextInvoiceDateTimeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNextInvoiceDateTimeListEnumerator;

    function Get_NextInvoiceDateTime(Index: Integer): IXMLDateTimeType;
    function Add: IXMLDateTimeType;
    function Insert(Index: Integer): IXMLDateTimeType;
  end;

  TXMLCreditorReferenceIssuerIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditorReferenceIssuerIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLCreditorReferenceIssuerIDList = class(TX2XMLNodeCollection, IXMLCreditorReferenceIssuerIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditorReferenceIssuerIDListEnumerator;

    function Get_CreditorReferenceIssuerID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLCreditorReferenceTypeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditorReferenceTypeListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCreditorReferenceTypeList = class(TX2XMLNodeCollection, IXMLCreditorReferenceTypeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditorReferenceTypeListEnumerator;

    function Get_CreditorReferenceType(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLCreditorReferenceTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditorReferenceTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLCreditorReferenceTypeCodeList = class(TX2XMLNodeCollection, IXMLCreditorReferenceTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditorReferenceTypeCodeListEnumerator;

    function Get_CreditorReferenceTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLLegalOrganizationTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLegalOrganizationTypeEnumerator)
  protected
    function GetCurrent: IXMLLegalRegistrationType;
  end;


  TXMLLegalOrganizationType = class(TX2XMLNodeCollection, IXMLLegalOrganizationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLegalOrganizationTypeEnumerator;

    function Get_AuthorizedLegalRegistration(Index: Integer): IXMLLegalRegistrationType;
    function Add: IXMLLegalRegistrationType;
    function Insert(Index: Integer): IXMLLegalRegistrationType;

    function GetHasLegalClassificationCode: Boolean;
    function GetLegalClassificationCode: IXMLCodeType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasTradingBusinessName: Boolean;
    function GetTradingBusinessName: IXMLTextType;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;
  end;

  TXMLLegalRegistrationType = class(TX2XMLNode, IXMLLegalRegistrationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
  end;

  TXMLLineTradeAgreementType = class(TX2XMLNode, IXMLLineTradeAgreementType)
  private
    FBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    FRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    FUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasBuyerReference: Boolean;
    function GetBuyerReference: IXMLTextType;
    function GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
    function GetHasApplicableTradeDeliveryTerms: Boolean;
    function GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasQuotationReferencedDocument: Boolean;
    function GetQuotationReferencedDocument: IXMLReferencedDocumentType;
    function GetHasContractReferencedDocument: Boolean;
    function GetContractReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDemandForecastReferencedDocument: Boolean;
    function GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPromotionalDealReferencedDocument: Boolean;
    function GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasGrossPriceProductTradePrice: Boolean;
    function GetGrossPriceProductTradePrice: IXMLTradePriceType;
    function GetHasNetPriceProductTradePrice: Boolean;
    function GetNetPriceProductTradePrice: IXMLTradePriceType;
    function GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
    function GetHasItemSellerTradeParty: Boolean;
    function GetItemSellerTradeParty: IXMLTradePartyType;
    function GetHasItemBuyerTradeParty: Boolean;
    function GetItemBuyerTradeParty: IXMLTradePartyType;
    function GetHasIncludedSpecifiedMarketplace: Boolean;
    function GetIncludedSpecifiedMarketplace: IXMLSpecifiedMarketplaceType;
    function GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
  end;

  TXMLUltimateCustomerOrderReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUltimateCustomerOrderReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLUltimateCustomerOrderReferencedDocumentList = class(TX2XMLNodeCollection, IXMLUltimateCustomerOrderReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUltimateCustomerOrderReferencedDocumentListEnumerator;

    function Get_UltimateCustomerOrderReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLRequisitionerReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRequisitionerReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLRequisitionerReferencedDocumentList = class(TX2XMLNodeCollection, IXMLRequisitionerReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRequisitionerReferencedDocumentListEnumerator;

    function Get_RequisitionerReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLBuyerRequisitionerTradePartyListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBuyerRequisitionerTradePartyListEnumerator)
  protected
    function GetCurrent: IXMLTradePartyType;
  end;


  TXMLBuyerRequisitionerTradePartyList = class(TX2XMLNodeCollection, IXMLBuyerRequisitionerTradePartyList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBuyerRequisitionerTradePartyListEnumerator;

    function Get_BuyerRequisitionerTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;
  end;

  TXMLLineTradeDeliveryType = class(TX2XMLNode, IXMLLineTradeDeliveryType)
  private
    FSpecifiedDeliveryAdjustment: IXMLSpecifiedDeliveryAdjustmentList;
    FIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasRequestedQuantity: Boolean;
    function GetRequestedQuantity: IXMLQuantityType;
    function GetHasReceivedQuantity: Boolean;
    function GetReceivedQuantity: IXMLQuantityType;
    function GetHasBilledQuantity: Boolean;
    function GetBilledQuantity: IXMLQuantityType;
    function GetHasChargeFreeQuantity: Boolean;
    function GetChargeFreeQuantity: IXMLQuantityType;
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetHasProductUnitQuantity: Boolean;
    function GetProductUnitQuantity: IXMLQuantityType;
    function GetHasPerPackageUnitQuantity: Boolean;
    function GetPerPackageUnitQuantity: IXMLQuantityType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasTheoreticalWeightMeasure: Boolean;
    function GetTheoreticalWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasDespatchedQuantity: Boolean;
    function GetDespatchedQuantity: IXMLQuantityType;
    function GetSpecifiedDeliveryAdjustment: IXMLSpecifiedDeliveryAdjustmentList;
    function GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    function GetHasRelatedSupplyChainConsignment: Boolean;
    function GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
    function GetHasShipToTradeParty: Boolean;
    function GetShipToTradeParty: IXMLTradePartyType;
    function GetHasUltimateShipToTradeParty: Boolean;
    function GetUltimateShipToTradeParty: IXMLTradePartyType;
    function GetHasShipFromTradeParty: Boolean;
    function GetShipFromTradeParty: IXMLTradePartyType;
    function GetHasActualDespatchSupplyChainEvent: Boolean;
    function GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualPickUpSupplyChainEvent: Boolean;
    function GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasRequestedDeliverySupplyChainEvent: Boolean;
    function GetRequestedDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualDeliverySupplyChainEvent: Boolean;
    function GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasActualReceiptSupplyChainEvent: Boolean;
    function GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetHasDespatchAdviceReferencedDocument: Boolean;
    function GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasReceivingAdviceReferencedDocument: Boolean;
    function GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
    function GetHasDeliveryNoteReferencedDocument: Boolean;
    function GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
    function GetHasConsumptionReportReferencedDocument: Boolean;
    function GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
    function GetHasPackingListReferencedDocument: Boolean;
    function GetPackingListReferencedDocument: IXMLReferencedDocumentType;
  end;

  TXMLSpecifiedDeliveryAdjustmentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedDeliveryAdjustmentListEnumerator)
  protected
    function GetCurrent: IXMLDeliveryAdjustmentType;
  end;


  TXMLSpecifiedDeliveryAdjustmentList = class(TX2XMLNodeCollection, IXMLSpecifiedDeliveryAdjustmentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedDeliveryAdjustmentListEnumerator;

    function Get_SpecifiedDeliveryAdjustment(Index: Integer): IXMLDeliveryAdjustmentType;
    function Add: IXMLDeliveryAdjustmentType;
    function Insert(Index: Integer): IXMLDeliveryAdjustmentType;
  end;

  TXMLLineTradeSettlementType = class(TX2XMLNode, IXMLLineTradeSettlementType)
  private
    FPaymentReference: IXMLPaymentReferenceList;
    FApplicableTradeTax: IXMLApplicableTradeTaxList;
    FSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    FSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    FSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    FSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    FSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    FInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    FPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    FReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    FPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    FSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetPaymentReference: IXMLPaymentReferenceList;
    function GetHasInvoiceIssuerReference: Boolean;
    function GetInvoiceIssuerReference: IXMLTextType;
    function GetHasTotalAdjustmentAmount: Boolean;
    function GetTotalAdjustmentAmount: IXMLAmountType;
    function GetHasDiscountIndicator: Boolean;
    function GetDiscountIndicator: IXMLIndicatorType;
    function GetHasInvoiceDateTime: Boolean;
    function GetInvoiceDateTime: IXMLDateTimeType;
    function GetApplicableTradeTax: IXMLApplicableTradeTaxList;
    function GetHasBillingSpecifiedPeriod: Boolean;
    function GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
    function GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
    function GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
    function GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
    function GetHasSpecifiedTradeSettlementLineMonetarySummation: Boolean;
    function GetSpecifiedTradeSettlementLineMonetarySummation: IXMLTradeSettlementLineMonetarySummationType;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
    function GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
    function GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
    function GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
    function GetHasSpecifiedTradeSettlementFinancialCard: Boolean;
    function GetSpecifiedTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;
  end;

  TXMLSalesSpecifiedTradeAccountingAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSalesSpecifiedTradeAccountingAccountListEnumerator)
  protected
    function GetCurrent: IXMLTradeAccountingAccountType;
  end;


  TXMLSalesSpecifiedTradeAccountingAccountList = class(TX2XMLNodeCollection, IXMLSalesSpecifiedTradeAccountingAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSalesSpecifiedTradeAccountingAccountListEnumerator;

    function Get_SalesSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;
  end;

  TXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator)
  protected
    function GetCurrent: IXMLTradeAccountingAccountType;
  end;


  TXMLPurchaseSpecifiedTradeAccountingAccountList = class(TX2XMLNodeCollection, IXMLPurchaseSpecifiedTradeAccountingAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator;

    function Get_PurchaseSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;
  end;

  TXMLReceivableSpecifiedTradeAccountingAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReceivableSpecifiedTradeAccountingAccountListEnumerator)
  protected
    function GetCurrent: IXMLTradeAccountingAccountType;
  end;


  TXMLReceivableSpecifiedTradeAccountingAccountList = class(TX2XMLNodeCollection, IXMLReceivableSpecifiedTradeAccountingAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReceivableSpecifiedTradeAccountingAccountListEnumerator;

    function Get_ReceivableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;
  end;

  TXMLPayableSpecifiedTradeAccountingAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPayableSpecifiedTradeAccountingAccountListEnumerator)
  protected
    function GetCurrent: IXMLTradeAccountingAccountType;
  end;


  TXMLPayableSpecifiedTradeAccountingAccountList = class(TX2XMLNodeCollection, IXMLPayableSpecifiedTradeAccountingAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPayableSpecifiedTradeAccountingAccountListEnumerator;

    function Get_PayableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;
  end;

  TXMLSpecifiedTradePaymentTermsListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTradePaymentTermsListEnumerator)
  protected
    function GetCurrent: IXMLTradePaymentTermsType;
  end;


  TXMLSpecifiedTradePaymentTermsList = class(TX2XMLNodeCollection, IXMLSpecifiedTradePaymentTermsList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTradePaymentTermsListEnumerator;

    function Get_SpecifiedTradePaymentTerms(Index: Integer): IXMLTradePaymentTermsType;
    function Add: IXMLTradePaymentTermsType;
    function Insert(Index: Integer): IXMLTradePaymentTermsType;
  end;

  TXMLSpecifiedLogisticsServiceChargeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedLogisticsServiceChargeListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsServiceChargeType;
  end;


  TXMLSpecifiedLogisticsServiceChargeList = class(TX2XMLNodeCollection, IXMLSpecifiedLogisticsServiceChargeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedLogisticsServiceChargeListEnumerator;

    function Get_SpecifiedLogisticsServiceCharge(Index: Integer): IXMLLogisticsServiceChargeType;
    function Add: IXMLLogisticsServiceChargeType;
    function Insert(Index: Integer): IXMLLogisticsServiceChargeType;
  end;

  TXMLSubtotalCalculatedTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSubtotalCalculatedTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLSubtotalCalculatedTradeTaxList = class(TX2XMLNodeCollection, IXMLSubtotalCalculatedTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSubtotalCalculatedTradeTaxListEnumerator;

    function Get_SubtotalCalculatedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLApplicableTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLApplicableTradeTaxList = class(TX2XMLNodeCollection, IXMLApplicableTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableTradeTaxListEnumerator;

    function Get_ApplicableTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLPaymentReferenceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPaymentReferenceListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLPaymentReferenceList = class(TX2XMLNodeCollection, IXMLPaymentReferenceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPaymentReferenceListEnumerator;

    function Get_PaymentReference(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLLogisticsLocationType = class(TX2XMLNode, IXMLLogisticsLocationType)
  private
    FName: IXMLNameList;
    FDescription: IXMLDescriptionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLLocationFunctionCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetHasPhysicalGeographicalCoordinate: Boolean;
    function GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;
    function GetHasSubordinateLocation: Boolean;
    function GetSubordinateLocation: IXMLSubordinateLocationType;
  end;

  TXMLLogisticsSealTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLogisticsSealTypeEnumerator)
  protected
    function GetCurrent: IXMLSealConditionCodeType;
  end;


  TXMLLogisticsSealType = class(TX2XMLNodeCollection, IXMLLogisticsSealType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLogisticsSealTypeEnumerator;

    function Get_ConditionCode(Index: Integer): IXMLSealConditionCodeType;
    function Add: IXMLSealConditionCodeType;
    function Insert(Index: Integer): IXMLSealConditionCodeType;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasMaximumID: Boolean;
    function GetMaximumID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasSealingPartyRoleCode: Boolean;
    function GetSealingPartyRoleCode: IXMLSealingPartyRoleCodeType;
    function GetHasIssuingTradeParty: Boolean;
    function GetIssuingTradeParty: IXMLTradePartyType;
  end;

  TXMLLogisticsServiceChargeType = class(TX2XMLNode, IXMLLogisticsServiceChargeType)
  private
    FDescription: IXMLDescriptionList;
    FDisbursementAmount: IXMLDisbursementAmountList;
    FAppliedAmount: IXMLAppliedAmountList;
    FAppliedTradeTax: IXMLAppliedTradeTaxList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLFreightChargeTypeIDType;
    function GetDescription: IXMLDescriptionList;
    function GetHasPaymentArrangementCode: Boolean;
    function GetPaymentArrangementCode: IXMLTransportServicePaymentArrangementCodeType;
    function GetHasTariffClassCode: Boolean;
    function GetTariffClassCode: IXMLFreightChargeTariffClassCodeType;
    function GetHasChargeCategoryCode: Boolean;
    function GetChargeCategoryCode: IXMLCodeType;
    function GetHasServiceCategoryCode: Boolean;
    function GetServiceCategoryCode: IXMLCodeType;
    function GetDisbursementAmount: IXMLDisbursementAmountList;
    function GetAppliedAmount: IXMLAppliedAmountList;
    function GetHasAllowanceCharge: Boolean;
    function GetAllowanceCharge: IXMLTextType;
    function GetHasPayingPartyRoleCode: Boolean;
    function GetPayingPartyRoleCode: IXMLChargePayingPartyRoleCodeType;
    function GetHasCalculationBasisCode: Boolean;
    function GetCalculationBasisCode: IXMLLogisticsChargeCalculationBasisCodeType;
    function GetHasCalculationBasis: Boolean;
    function GetCalculationBasis: IXMLTextType;
    function GetHasTransportPaymentMethodCode: Boolean;
    function GetTransportPaymentMethodCode: IXMLCodeType;
    function GetHasPaymentPlaceLogisticsLocation: Boolean;
    function GetPaymentPlaceLogisticsLocation: IXMLLogisticsLocationType;
    function GetHasAppliedFromLogisticsLocation: Boolean;
    function GetAppliedFromLogisticsLocation: IXMLLogisticsLocationType;
    function GetHasAppliedToLogisticsLocation: Boolean;
    function GetAppliedToLogisticsLocation: IXMLLogisticsLocationType;
    function GetAppliedTradeTax: IXMLAppliedTradeTaxList;
  end;

  TXMLAppliedTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAppliedTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLAppliedTradeTaxList = class(TX2XMLNodeCollection, IXMLAppliedTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAppliedTradeTaxListEnumerator;

    function Get_AppliedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLAppliedAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAppliedAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLAppliedAmountList = class(TX2XMLNodeCollection, IXMLAppliedAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAppliedAmountListEnumerator;

    function Get_AppliedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLDisbursementAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDisbursementAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLDisbursementAmountList = class(TX2XMLNodeCollection, IXMLDisbursementAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDisbursementAmountListEnumerator;

    function Get_DisbursementAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLLogisticsTransportEquipmentType = class(TX2XMLNode, IXMLLogisticsTransportEquipmentType)
  private
    FCarrierAssignedBookingID: IXMLCarrierAssignedBookingIDList;
    FAffixedLogisticsSeal: IXMLAffixedLogisticsSealList;
    FApplicableNote: IXMLApplicableNoteList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasLoadingLengthMeasure: Boolean;
    function GetLoadingLengthMeasure: IXMLLinearUnitMeasureType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLTransportEquipmentCategoryCodeType;
    function GetHasCharacteristicCode: Boolean;
    function GetCharacteristicCode: IXMLCodeType;
    function GetHasCharacteristic: Boolean;
    function GetCharacteristic: IXMLTextType;
    function GetHasUsedCapacityCode: Boolean;
    function GetUsedCapacityCode: IXMLTransportEquipmentFullnessCodeType;
    function GetCarrierAssignedBookingID: IXMLCarrierAssignedBookingIDList;
    function GetHasSealedIndicator: Boolean;
    function GetSealedIndicator: IXMLIndicatorType;
    function GetHasReturnableIndicator: Boolean;
    function GetReturnableIndicator: IXMLIndicatorType;
    function GetAffixedLogisticsSeal: IXMLAffixedLogisticsSealList;
    function GetHasLinearSpatialDimension: Boolean;
    function GetLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetApplicableNote: IXMLApplicableNoteList;
  end;

  TXMLAffixedLogisticsSealListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAffixedLogisticsSealListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsSealType;
  end;


  TXMLAffixedLogisticsSealList = class(TX2XMLNodeCollection, IXMLAffixedLogisticsSealList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAffixedLogisticsSealListEnumerator;

    function Get_AffixedLogisticsSeal(Index: Integer): IXMLLogisticsSealType;
    function Add: IXMLLogisticsSealType;
    function Insert(Index: Integer): IXMLLogisticsSealType;
  end;

  TXMLCarrierAssignedBookingIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCarrierAssignedBookingIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLCarrierAssignedBookingIDList = class(TX2XMLNodeCollection, IXMLCarrierAssignedBookingIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCarrierAssignedBookingIDListEnumerator;

    function Get_CarrierAssignedBookingID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLLogisticsTransportMeansType = class(TX2XMLNode, IXMLLogisticsTransportMeansType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLTransportMeansTypeCodeType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasOwnerTradeParty: Boolean;
    function GetOwnerTradeParty: IXMLTradePartyType;
  end;

  TXMLLogisticsTransportMovementType = class(TX2XMLNode, IXMLLogisticsTransportMovementType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasStageCode: Boolean;
    function GetStageCode: IXMLTransportMovementStageCodeType;
    function GetHasModeCode: Boolean;
    function GetModeCode: IXMLTransportModeCodeType;
    function GetHasMode: Boolean;
    function GetMode: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLStatusCodeType;
    function GetHasServiceCode: Boolean;
    function GetServiceCode: IXMLCodeType;
    function GetHasService: Boolean;
    function GetService: IXMLTextType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetHasCycle: Boolean;
    function GetCycle: IXMLTextType;
    function GetHasUsedLogisticsTransportMeans: Boolean;
    function GetUsedLogisticsTransportMeans: IXMLLogisticsTransportMeansType;
  end;

  TXMLMaterialGoodsCharacteristicTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLMaterialGoodsCharacteristicTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLMaterialGoodsCharacteristicType = class(TX2XMLNodeCollection, IXMLMaterialGoodsCharacteristicType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLMaterialGoodsCharacteristicTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasProportionalConstituentPercent: Boolean;
    function GetProportionalConstituentPercent: IXMLPercentType;
    function GetHasAbsolutePresenceWeightMeasure: Boolean;
    function GetAbsolutePresenceWeightMeasure: IXMLMeasureType;
    function GetHasAbsolutePresenceVolumeMeasure: Boolean;
    function GetAbsolutePresenceVolumeMeasure: IXMLMeasureType;
  end;

  TXMLNoteType = class(TX2XMLNode, IXMLNoteType)
  private
    FContent: IXMLContentList;
    FSubjectCode: IXMLSubjectCodeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasSubject: Boolean;
    function GetSubject: IXMLTextType;
    function GetHasContentCode: Boolean;
    function GetContentCode: IXMLCodeType;
    function GetContent: IXMLContentList;
    function GetSubjectCode: IXMLSubjectCodeList;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
  end;

  TXMLSubjectCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSubjectCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLSubjectCodeList = class(TX2XMLNodeCollection, IXMLSubjectCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSubjectCodeListEnumerator;

    function Get_SubjectCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLPackagingMarkingType = class(TX2XMLNode, IXMLPackagingMarkingType)
  private
    FTypeCode: IXMLTypeCodeList;
    FContent: IXMLContentList;
    FContentAmount: IXMLContentAmountList;
    FBarcodeTypeCode: IXMLBarcodeTypeCodeList;
    FContentCode: IXMLContentCodeList;
    FAutomaticDataCaptureMethodTypeCode: IXMLAutomaticDataCaptureMethodTypeCodeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetTypeCode: IXMLTypeCodeList;
    function GetContent: IXMLContentList;
    function GetHasContentDateTime: Boolean;
    function GetContentDateTime: IXMLDateTimeType;
    function GetContentAmount: IXMLContentAmountList;
    function GetBarcodeTypeCode: IXMLBarcodeTypeCodeList;
    function GetContentCode: IXMLContentCodeList;
    function GetAutomaticDataCaptureMethodTypeCode: IXMLAutomaticDataCaptureMethodTypeCodeList;
  end;

  TXMLAutomaticDataCaptureMethodTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAutomaticDataCaptureMethodTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLAutomaticDataCaptureMethodCodeType;
  end;


  TXMLAutomaticDataCaptureMethodTypeCodeList = class(TX2XMLNodeCollection, IXMLAutomaticDataCaptureMethodTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAutomaticDataCaptureMethodTypeCodeListEnumerator;

    function Get_AutomaticDataCaptureMethodTypeCode(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;
    function Add: IXMLAutomaticDataCaptureMethodCodeType;
    function Insert(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;
  end;

  TXMLContentCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLContentCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLContentCodeList = class(TX2XMLNodeCollection, IXMLContentCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLContentCodeListEnumerator;

    function Get_ContentCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLBarcodeTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBarcodeTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLBarcodeTypeCodeList = class(TX2XMLNodeCollection, IXMLBarcodeTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBarcodeTypeCodeListEnumerator;

    function Get_BarcodeTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLContentAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLContentAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLContentAmountList = class(TX2XMLNodeCollection, IXMLContentAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLContentAmountListEnumerator;

    function Get_ContentAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLProcuringProjectType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLProcuringProjectType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetName: IXMLTextType;
  end;

  TXMLProductCharacteristicConditionTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLProductCharacteristicConditionTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLProductCharacteristicConditionType = class(TX2XMLNodeCollection, IXMLProductCharacteristicConditionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLProductCharacteristicConditionTypeEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;
  end;

  TXMLProductCharacteristicType = class(TX2XMLNode, IXMLProductCharacteristicType)
  private
    FID: IXMLIDList;
    FDescription: IXMLDescriptionList;
    FValue: IXMLValueList;
    FApplicableProductCharacteristicCondition: IXMLApplicableProductCharacteristicConditionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetID: IXMLIDList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasMeasurementMethodCode: Boolean;
    function GetMeasurementMethodCode: IXMLCodeType;
    function GetValue: IXMLValueList;
    function GetHasValueCode: Boolean;
    function GetValueCode: IXMLCodeType;
    function GetHasValueDateTime: Boolean;
    function GetValueDateTime: IXMLDateTimeType;
    function GetHasValueIndicator: Boolean;
    function GetValueIndicator: IXMLIndicatorType;
    function GetHasContentTypeCode: Boolean;
    function GetContentTypeCode: IXMLCodeType;
    function GetHasValueSpecifiedBinaryFile: Boolean;
    function GetValueSpecifiedBinaryFile: IXMLSpecifiedBinaryFileType;
    function GetApplicableProductCharacteristicCondition: IXMLApplicableProductCharacteristicConditionList;
    function GetHasApplicableReferencedStandard: Boolean;
    function GetApplicableReferencedStandard: IXMLReferencedStandardType;
  end;

  TXMLApplicableProductCharacteristicConditionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableProductCharacteristicConditionListEnumerator)
  protected
    function GetCurrent: IXMLProductCharacteristicConditionType;
  end;


  TXMLApplicableProductCharacteristicConditionList = class(TX2XMLNodeCollection, IXMLApplicableProductCharacteristicConditionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableProductCharacteristicConditionListEnumerator;

    function Get_ApplicableProductCharacteristicCondition(Index: Integer): IXMLProductCharacteristicConditionType;
    function Add: IXMLProductCharacteristicConditionType;
    function Insert(Index: Integer): IXMLProductCharacteristicConditionType;
  end;

  TXMLValueListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLValueListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLValueList = class(TX2XMLNodeCollection, IXMLValueList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLValueListEnumerator;

    function Get_Value(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLProductClassificationType = class(TX2XMLNode, IXMLProductClassificationType)
  private
    FSystemName: IXMLSystemNameList;
    FClassName: IXMLClassNameList;
    FClassProductCharacteristic: IXMLClassProductCharacteristicList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasSystemID: Boolean;
    function GetSystemID: IXMLIDType;
    function GetSystemName: IXMLSystemNameList;
    function GetHasClassCode: Boolean;
    function GetClassCode: IXMLCodeType;
    function GetClassName: IXMLClassNameList;
    function GetHasSubClassCode: Boolean;
    function GetSubClassCode: IXMLCodeType;
    function GetClassProductCharacteristic: IXMLClassProductCharacteristicList;
    function GetHasApplicableReferencedStandard: Boolean;
    function GetApplicableReferencedStandard: IXMLReferencedStandardType;
  end;

  TXMLClassProductCharacteristicListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLClassProductCharacteristicListEnumerator)
  protected
    function GetCurrent: IXMLProductCharacteristicType;
  end;


  TXMLClassProductCharacteristicList = class(TX2XMLNodeCollection, IXMLClassProductCharacteristicList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLClassProductCharacteristicListEnumerator;

    function Get_ClassProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
    function Add: IXMLProductCharacteristicType;
    function Insert(Index: Integer): IXMLProductCharacteristicType;
  end;

  TXMLClassNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLClassNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLClassNameList = class(TX2XMLNodeCollection, IXMLClassNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLClassNameListEnumerator;

    function Get_ClassName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLSystemNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSystemNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLSystemNameList = class(TX2XMLNodeCollection, IXMLSystemNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSystemNameListEnumerator;

    function Get_SystemName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLRecordedStatusType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLRecordedStatusType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetConditionCode: IXMLCodeType;
    function GetHasChangerName: Boolean;
    function GetChangerName: IXMLTextType;
    function GetChangedDateTime: IXMLDateTimeType;
  end;

  TXMLReferencedDocumentType = class(TX2XMLNode, IXMLReferencedDocumentType)
  private
    FName: IXMLNameList;
    FAttachmentBinaryObject: IXMLAttachmentBinaryObjectList;
    FInformation: IXMLInformationList;
    FSectionName: IXMLSectionNameList;
    FPreviousRevisionID: IXMLPreviousRevisionIDList;
    FSubtypeCode: IXMLSubtypeCodeList;
    FAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
    FIncludedNote: IXMLIncludedNoteList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasIssuerAssignedID: Boolean;
    function GetIssuerAssignedID: IXMLIDType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLDocumentStatusCodeType;
    function GetHasCopyIndicator: Boolean;
    function GetCopyIndicator: IXMLIndicatorType;
    function GetHasLineID: Boolean;
    function GetLineID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDocumentCodeType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasRevisionID: Boolean;
    function GetRevisionID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasReceiptDateTime: Boolean;
    function GetReceiptDateTime: IXMLDateTimeType;
    function GetAttachmentBinaryObject: IXMLAttachmentBinaryObjectList;
    function GetInformation: IXMLInformationList;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasReferenceTypeCode: Boolean;
    function GetReferenceTypeCode: IXMLReferenceCodeType;
    function GetSectionName: IXMLSectionNameList;
    function GetPreviousRevisionID: IXMLPreviousRevisionIDList;
    function GetHasFormattedIssueDateTime: Boolean;
    function GetFormattedIssueDateTime: IXMLFormattedDateTimeType;
    function GetHasPageID: Boolean;
    function GetPageID: IXMLIDType;
    function GetHasSubordinateLineID: Boolean;
    function GetSubordinateLineID: IXMLIDType;
    function GetSubtypeCode: IXMLSubtypeCodeList;
    function GetHasEffectiveSpecifiedPeriod: Boolean;
    function GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasIssuerTradeParty: Boolean;
    function GetIssuerTradeParty: IXMLTradePartyType;
    function GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
    function GetIncludedNote: IXMLIncludedNoteList;
  end;

  TXMLIncludedNoteListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedNoteListEnumerator)
  protected
    function GetCurrent: IXMLNoteType;
  end;


  TXMLIncludedNoteList = class(TX2XMLNodeCollection, IXMLIncludedNoteList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedNoteListEnumerator;

    function Get_IncludedNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;
  end;

  TXMLAttachedSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAttachedSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLAttachedSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLAttachedSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAttachedSpecifiedBinaryFileListEnumerator;

    function Get_AttachedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLSubtypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSubtypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLSubtypeCodeList = class(TX2XMLNodeCollection, IXMLSubtypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSubtypeCodeListEnumerator;

    function Get_SubtypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLPreviousRevisionIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPreviousRevisionIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLPreviousRevisionIDList = class(TX2XMLNodeCollection, IXMLPreviousRevisionIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPreviousRevisionIDListEnumerator;

    function Get_PreviousRevisionID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLSectionNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSectionNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLSectionNameList = class(TX2XMLNodeCollection, IXMLSectionNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSectionNameListEnumerator;

    function Get_SectionName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLAttachmentBinaryObjectListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAttachmentBinaryObjectListEnumerator)
  protected
    function GetCurrent: IXMLBinaryObjectType;
  end;


  TXMLAttachmentBinaryObjectList = class(TX2XMLNodeCollection, IXMLAttachmentBinaryObjectList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAttachmentBinaryObjectListEnumerator;

    function Get_AttachmentBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;
  end;

  TXMLReferencedProductType = class(TX2XMLNode, IXMLReferencedProductType)
  private
    FID: IXMLIDList;
    FGlobalID: IXMLGlobalIDList;
    FManufacturerAssignedID: IXMLManufacturerAssignedIDList;
    FIndustryAssignedID: IXMLIndustryAssignedIDList;
    FName: IXMLNameList;
    FDescription: IXMLDescriptionList;
    FRelationshipTypeCode: IXMLRelationshipTypeCodeList;
    FUnitQuantity: IXMLUnitQuantityList;
  public
    procedure AfterConstruction; override;
  protected
    function GetID: IXMLIDList;
    function GetGlobalID: IXMLGlobalIDList;
    function GetHasSellerAssignedID: Boolean;
    function GetSellerAssignedID: IXMLIDType;
    function GetHasBuyerAssignedID: Boolean;
    function GetBuyerAssignedID: IXMLIDType;
    function GetManufacturerAssignedID: IXMLManufacturerAssignedIDList;
    function GetIndustryAssignedID: IXMLIndustryAssignedIDList;
    function GetName: IXMLNameList;
    function GetDescription: IXMLDescriptionList;
    function GetRelationshipTypeCode: IXMLRelationshipTypeCodeList;
    function GetUnitQuantity: IXMLUnitQuantityList;
  end;

  TXMLUnitQuantityListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUnitQuantityListEnumerator)
  protected
    function GetCurrent: IXMLQuantityType;
  end;


  TXMLUnitQuantityList = class(TX2XMLNodeCollection, IXMLUnitQuantityList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUnitQuantityListEnumerator;

    function Get_UnitQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;
  end;

  TXMLRelationshipTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRelationshipTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLRelationshipTypeCodeList = class(TX2XMLNodeCollection, IXMLRelationshipTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRelationshipTypeCodeListEnumerator;

    function Get_RelationshipTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLIndustryAssignedIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIndustryAssignedIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLIndustryAssignedIDList = class(TX2XMLNodeCollection, IXMLIndustryAssignedIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIndustryAssignedIDListEnumerator;

    function Get_IndustryAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLManufacturerAssignedIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLManufacturerAssignedIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLManufacturerAssignedIDList = class(TX2XMLNodeCollection, IXMLManufacturerAssignedIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLManufacturerAssignedIDListEnumerator;

    function Get_ManufacturerAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLReferencedStandardType = class(TX2XMLNode, IXMLReferencedStandardType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasElementVersionID: Boolean;
    function GetElementVersionID: IXMLIDType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasPartID: Boolean;
    function GetPartID: IXMLIDType;
    function GetHasAgencyID: Boolean;
    function GetAgencyID: IXMLIDType;
  end;

  TXMLReferencePriceType = class(TX2XMLNode, IXMLReferencePriceType)
  private
    FBasisQuantity: IXMLBasisQuantityList;
    FNetPriceIndicator: IXMLNetPriceIndicatorList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasChargeAmount: Boolean;
    function GetChargeAmount: IXMLAmountType;
    function GetBasisQuantity: IXMLBasisQuantityList;
    function GetNetPriceIndicator: IXMLNetPriceIndicatorList;
    function GetHasComparisonMethodCode: Boolean;
    function GetComparisonMethodCode: IXMLCodeType;
  end;

  TXMLNetPriceIndicatorListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetPriceIndicatorListEnumerator)
  protected
    function GetCurrent: IXMLIndicatorType;
  end;


  TXMLNetPriceIndicatorList = class(TX2XMLNodeCollection, IXMLNetPriceIndicatorList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetPriceIndicatorListEnumerator;

    function Get_NetPriceIndicator(Index: Integer): IXMLIndicatorType;
    function Add: IXMLIndicatorType;
    function Insert(Index: Integer): IXMLIndicatorType;
  end;

  TXMLBasisQuantityListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBasisQuantityListEnumerator)
  protected
    function GetCurrent: IXMLQuantityType;
  end;


  TXMLBasisQuantityList = class(TX2XMLNodeCollection, IXMLBasisQuantityList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBasisQuantityListEnumerator;

    function Get_BasisQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;
  end;

  TXMLRegisteredTaxType = class(TX2XMLNode, IXMLRegisteredTaxType)
  private
    FExemptionReason: IXMLExemptionReasonList;
    FJurisdiction: IXMLJurisdictionList;
    FDescription: IXMLDescriptionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasExemptionReasonCode: Boolean;
    function GetExemptionReasonCode: IXMLCodeType;
    function GetExemptionReason: IXMLExemptionReasonList;
    function GetHasCurrencyCode: Boolean;
    function GetCurrencyCode: IXMLCodeType;
    function GetJurisdiction: IXMLJurisdictionList;
    function GetDescription: IXMLDescriptionList;
    function GetHasCustomsDutyIndicator: Boolean;
    function GetCustomsDutyIndicator: IXMLIndicatorType;
  end;

  TXMLExemptionReasonListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLExemptionReasonListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLExemptionReasonList = class(TX2XMLNodeCollection, IXMLExemptionReasonList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLExemptionReasonListEnumerator;

    function Get_ExemptionReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLReturnableAssetInstructionsType = class(TX2XMLNode, IXMLReturnableAssetInstructionsType)
  private
    FMaterialID: IXMLMaterialIDList;
    FTermsAndConditionsDescription: IXMLTermsAndConditionsDescriptionList;
    FDepositValueSpecifiedAmount: IXMLDepositValueSpecifiedAmountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetMaterialID: IXMLMaterialIDList;
    function GetTermsAndConditionsDescription: IXMLTermsAndConditionsDescriptionList;
    function GetHasTermsAndConditionsDescriptionCode: Boolean;
    function GetTermsAndConditionsDescriptionCode: IXMLCodeType;
    function GetDepositValueSpecifiedAmount: IXMLDepositValueSpecifiedAmountList;
    function GetHasDepositValueValiditySpecifiedPeriod: Boolean;
    function GetDepositValueValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;
  end;

  TXMLDepositValueSpecifiedAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDepositValueSpecifiedAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLDepositValueSpecifiedAmountList = class(TX2XMLNodeCollection, IXMLDepositValueSpecifiedAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDepositValueSpecifiedAmountListEnumerator;

    function Get_DepositValueSpecifiedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTermsAndConditionsDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTermsAndConditionsDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTermsAndConditionsDescriptionList = class(TX2XMLNodeCollection, IXMLTermsAndConditionsDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTermsAndConditionsDescriptionListEnumerator;

    function Get_TermsAndConditionsDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLMaterialIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLMaterialIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLMaterialIDList = class(TX2XMLNodeCollection, IXMLMaterialIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLMaterialIDListEnumerator;

    function Get_MaterialID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLSpatialDimensionTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpatialDimensionTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLSpatialDimensionType = class(TX2XMLNodeCollection, IXMLSpatialDimensionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpatialDimensionTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasValueMeasure: Boolean;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLDimensionTypeCodeType;
    function GetHasWidthMeasure: Boolean;
    function GetWidthMeasure: IXMLMeasureType;
    function GetHasLengthMeasure: Boolean;
    function GetLengthMeasure: IXMLMeasureType;
    function GetHasHeightMeasure: Boolean;
    function GetHeightMeasure: IXMLMeasureType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasDiameterMeasure: Boolean;
    function GetDiameterMeasure: IXMLLinearUnitMeasureType;
  end;

  TXMLSpecificationQueryType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLSpecificationQueryType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetContent: IXMLTextType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
  end;

  TXMLSpecificationResponseType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLSpecificationResponseType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasQueryID: Boolean;
    function GetQueryID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetContent: IXMLTextType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
  end;

  TXMLSpecifiedBinaryFileType = class(TX2XMLNode, IXMLSpecifiedBinaryFileType)
  private
    FID: IXMLIDList;
    FTitle: IXMLTitleList;
    FAuthorName: IXMLAuthorNameList;
    FIncludedBinaryObject: IXMLIncludedBinaryObjectList;
    FAccess: IXMLAccessList;
    FDescription: IXMLDescriptionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetID: IXMLIDList;
    function GetTitle: IXMLTitleList;
    function GetAuthorName: IXMLAuthorNameList;
    function GetHasVersionID: Boolean;
    function GetVersionID: IXMLIDType;
    function GetHasFileName: Boolean;
    function GetFileName: IXMLTextType;
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasMIMECode: Boolean;
    function GetMIMECode: IXMLCodeType;
    function GetHasEncodingCode: Boolean;
    function GetEncodingCode: IXMLCodeType;
    function GetHasCharacterSetCode: Boolean;
    function GetCharacterSetCode: IXMLCodeType;
    function GetIncludedBinaryObject: IXMLIncludedBinaryObjectList;
    function GetAccess: IXMLAccessList;
    function GetDescription: IXMLDescriptionList;
    function GetHasSizeMeasure: Boolean;
    function GetSizeMeasure: IXMLMeasureType;
    function GetHasAccessAvailabilitySpecifiedPeriod: Boolean;
    function GetAccessAvailabilitySpecifiedPeriod: IXMLSpecifiedPeriodType;
  end;

  TXMLAccessListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAccessListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLAccessList = class(TX2XMLNodeCollection, IXMLAccessList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAccessListEnumerator;

    function Get_Access(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLIncludedBinaryObjectListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedBinaryObjectListEnumerator)
  protected
    function GetCurrent: IXMLBinaryObjectType;
  end;


  TXMLIncludedBinaryObjectList = class(TX2XMLNodeCollection, IXMLIncludedBinaryObjectList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedBinaryObjectListEnumerator;

    function Get_IncludedBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;
  end;

  TXMLAuthorNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAuthorNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLAuthorNameList = class(TX2XMLNodeCollection, IXMLAuthorNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAuthorNameListEnumerator;

    function Get_AuthorName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLTitleListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTitleListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTitleList = class(TX2XMLNodeCollection, IXMLTitleList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTitleListEnumerator;

    function Get_Title(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLSpecifiedMarketplaceType = class(TX2XMLNode, IXMLSpecifiedMarketplaceType)
  private
    FWebsiteURIID: IXMLWebsiteURIIDList;
    FOrderingAvailablePeriod: IXMLOrderingAvailablePeriodList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasVirtualIndicator: Boolean;
    function GetVirtualIndicator: IXMLIndicatorType;
    function GetWebsiteURIID: IXMLWebsiteURIIDList;
    function GetHasSalesMethodCode: Boolean;
    function GetSalesMethodCode: IXMLCodeType;
    function GetOrderingAvailablePeriod: IXMLOrderingAvailablePeriodList;
  end;

  TXMLOrderingAvailablePeriodListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLOrderingAvailablePeriodListEnumerator)
  protected
    function GetCurrent: IXMLAvailablePeriodType;
  end;


  TXMLOrderingAvailablePeriodList = class(TX2XMLNodeCollection, IXMLOrderingAvailablePeriodList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLOrderingAvailablePeriodListEnumerator;

    function Get_OrderingAvailablePeriod(Index: Integer): IXMLAvailablePeriodType;
    function Add: IXMLAvailablePeriodType;
    function Insert(Index: Integer): IXMLAvailablePeriodType;
  end;

  TXMLWebsiteURIIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLWebsiteURIIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLWebsiteURIIDList = class(TX2XMLNodeCollection, IXMLWebsiteURIIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLWebsiteURIIDListEnumerator;

    function Get_WebsiteURIID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLSpecifiedPeriodType = class(TX2XMLNode, IXMLSpecifiedPeriodType)
  private
    FDurationMeasure: IXMLDurationMeasureList;
    FDescription: IXMLDescriptionList;
    FName: IXMLNameList;
  public
    procedure AfterConstruction; override;
  protected
    function GetDurationMeasure: IXMLDurationMeasureList;
    function GetHasInclusiveIndicator: Boolean;
    function GetInclusiveIndicator: IXMLIndicatorType;
    function GetDescription: IXMLDescriptionList;
    function GetHasStartDateTime: Boolean;
    function GetStartDateTime: IXMLDateTimeType;
    function GetHasEndDateTime: Boolean;
    function GetEndDateTime: IXMLDateTimeType;
    function GetHasCompleteDateTime: Boolean;
    function GetCompleteDateTime: IXMLDateTimeType;
    function GetHasOpenIndicator: Boolean;
    function GetOpenIndicator: IXMLIndicatorType;
    function GetHasSeasonCode: Boolean;
    function GetSeasonCode: IXMLCodeType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasSequenceNumeric: Boolean;
    function GetSequenceNumeric: IXMLNumericType;
    function GetHasStartDateFlexibilityCode: Boolean;
    function GetStartDateFlexibilityCode: IXMLCodeType;
    function GetHasContinuousIndicator: Boolean;
    function GetContinuousIndicator: IXMLIndicatorType;
    function GetHasPurposeCode: Boolean;
    function GetPurposeCode: IXMLCodeType;
  end;

  TXMLDurationMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDurationMeasureListEnumerator)
  protected
    function GetCurrent: IXMLMeasureType;
  end;


  TXMLDurationMeasureList = class(TX2XMLNodeCollection, IXMLDurationMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDurationMeasureListEnumerator;

    function Get_DurationMeasure(Index: Integer): IXMLMeasureType;
    function Add: IXMLMeasureType;
    function Insert(Index: Integer): IXMLMeasureType;
  end;

  TXMLSubordinateLineTradeAgreementType = class(TX2XMLNode, IXMLSubordinateLineTradeAgreementType)
  private
    FAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    FGrossPriceProductTradePrice: IXMLGrossPriceProductTradePriceList;
    FNetPriceProductTradePrice: IXMLNetPriceProductTradePriceList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasSellerOrderReferencedDocument: Boolean;
    function GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetHasBuyerOrderReferencedDocument: Boolean;
    function GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
    function GetGrossPriceProductTradePrice: IXMLGrossPriceProductTradePriceList;
    function GetNetPriceProductTradePrice: IXMLNetPriceProductTradePriceList;
  end;

  TXMLNetPriceProductTradePriceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetPriceProductTradePriceListEnumerator)
  protected
    function GetCurrent: IXMLTradePriceType;
  end;


  TXMLNetPriceProductTradePriceList = class(TX2XMLNodeCollection, IXMLNetPriceProductTradePriceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetPriceProductTradePriceListEnumerator;

    function Get_NetPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
    function Add: IXMLTradePriceType;
    function Insert(Index: Integer): IXMLTradePriceType;
  end;

  TXMLGrossPriceProductTradePriceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGrossPriceProductTradePriceListEnumerator)
  protected
    function GetCurrent: IXMLTradePriceType;
  end;


  TXMLGrossPriceProductTradePriceList = class(TX2XMLNodeCollection, IXMLGrossPriceProductTradePriceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGrossPriceProductTradePriceListEnumerator;

    function Get_GrossPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
    function Add: IXMLTradePriceType;
    function Insert(Index: Integer): IXMLTradePriceType;
  end;

  TXMLAdditionalReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAdditionalReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLAdditionalReferencedDocumentList = class(TX2XMLNodeCollection, IXMLAdditionalReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAdditionalReferencedDocumentListEnumerator;

    function Get_AdditionalReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLSubordinateLineTradeDeliveryType = class(TX2XMLNode, IXMLSubordinateLineTradeDeliveryType)
  private
    FBilledQuantity: IXMLBilledQuantityList;
    FIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    FActualDeliverySupplyChainEvent: IXMLActualDeliverySupplyChainEventList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetHasProductUnitQuantity: Boolean;
    function GetProductUnitQuantity: IXMLQuantityType;
    function GetHasPerPackageUnitQuantity: Boolean;
    function GetPerPackageUnitQuantity: IXMLQuantityType;
    function GetBilledQuantity: IXMLBilledQuantityList;
    function GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
    function GetActualDeliverySupplyChainEvent: IXMLActualDeliverySupplyChainEventList;
  end;

  TXMLActualDeliverySupplyChainEventListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLActualDeliverySupplyChainEventListEnumerator)
  protected
    function GetCurrent: IXMLSupplyChainEventType;
  end;


  TXMLActualDeliverySupplyChainEventList = class(TX2XMLNodeCollection, IXMLActualDeliverySupplyChainEventList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLActualDeliverySupplyChainEventListEnumerator;

    function Get_ActualDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
    function Add: IXMLSupplyChainEventType;
    function Insert(Index: Integer): IXMLSupplyChainEventType;
  end;

  TXMLIncludedSupplyChainPackagingListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedSupplyChainPackagingListEnumerator)
  protected
    function GetCurrent: IXMLSupplyChainPackagingType;
  end;


  TXMLIncludedSupplyChainPackagingList = class(TX2XMLNodeCollection, IXMLIncludedSupplyChainPackagingList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedSupplyChainPackagingListEnumerator;

    function Get_IncludedSupplyChainPackaging(Index: Integer): IXMLSupplyChainPackagingType;
    function Add: IXMLSupplyChainPackagingType;
    function Insert(Index: Integer): IXMLSupplyChainPackagingType;
  end;

  TXMLBilledQuantityListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBilledQuantityListEnumerator)
  protected
    function GetCurrent: IXMLQuantityType;
  end;


  TXMLBilledQuantityList = class(TX2XMLNodeCollection, IXMLBilledQuantityList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBilledQuantityListEnumerator;

    function Get_BilledQuantity(Index: Integer): IXMLQuantityType;
    function Add: IXMLQuantityType;
    function Insert(Index: Integer): IXMLQuantityType;
  end;

  TXMLSubordinateLineTradeSettlementType = class(TX2XMLNode, IXMLSubordinateLineTradeSettlementType)
  private
    FInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    FSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    FSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasAmountDirectionCode: Boolean;
    function GetAmountDirectionCode: IXMLCodeType;
    function GetHasApplicableTradeTax: Boolean;
    function GetApplicableTradeTax: IXMLTradeTaxType;
    function GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
    function GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
    function GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
  end;

  TXMLSpecifiedTradeAllowanceChargeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTradeAllowanceChargeListEnumerator)
  protected
    function GetCurrent: IXMLTradeAllowanceChargeType;
  end;


  TXMLSpecifiedTradeAllowanceChargeList = class(TX2XMLNodeCollection, IXMLSpecifiedTradeAllowanceChargeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTradeAllowanceChargeListEnumerator;

    function Get_SpecifiedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
    function Add: IXMLTradeAllowanceChargeType;
    function Insert(Index: Integer): IXMLTradeAllowanceChargeType;
  end;

  TXMLSpecifiedFinancialAdjustmentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedFinancialAdjustmentListEnumerator)
  protected
    function GetCurrent: IXMLFinancialAdjustmentType;
  end;


  TXMLSpecifiedFinancialAdjustmentList = class(TX2XMLNodeCollection, IXMLSpecifiedFinancialAdjustmentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedFinancialAdjustmentListEnumerator;

    function Get_SpecifiedFinancialAdjustment(Index: Integer): IXMLFinancialAdjustmentType;
    function Add: IXMLFinancialAdjustmentType;
    function Insert(Index: Integer): IXMLFinancialAdjustmentType;
  end;

  TXMLInvoiceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInvoiceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLInvoiceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLInvoiceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInvoiceReferencedDocumentListEnumerator;

    function Get_InvoiceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLSubordinateLocationType = class(TX2XMLNode, IXMLSubordinateLocationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLLocationFunctionCodeType;
    function GetHasPhysicalGeographicalCoordinate: Boolean;
    function GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;
  end;

  TXMLSubordinateTradeLineItemType = class(TX2XMLNode, IXMLSubordinateTradeLineItemType)
  private
    FID: IXMLIDList;
    FApplicableTradeProduct: IXMLApplicableTradeProductList;
  public
    procedure AfterConstruction; override;
  protected
    function GetID: IXMLIDList;
    function GetHasResponseReasonCode: Boolean;
    function GetResponseReasonCode: IXMLCodeType;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLCodeType;
    function GetHasSpecifiedReferencedProduct: Boolean;
    function GetSpecifiedReferencedProduct: IXMLReferencedProductType;
    function GetApplicableTradeProduct: IXMLApplicableTradeProductList;
    function GetHasSpecifiedSubordinateLineTradeAgreement: Boolean;
    function GetSpecifiedSubordinateLineTradeAgreement: IXMLSubordinateLineTradeAgreementType;
    function GetHasSpecifiedSubordinateLineTradeDelivery: Boolean;
    function GetSpecifiedSubordinateLineTradeDelivery: IXMLSubordinateLineTradeDeliveryType;
    function GetHasSpecifiedSubordinateLineTradeSettlement: Boolean;
    function GetSpecifiedSubordinateLineTradeSettlement: IXMLSubordinateLineTradeSettlementType;
  end;

  TXMLApplicableTradeProductListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableTradeProductListEnumerator)
  protected
    function GetCurrent: IXMLTradeProductType;
  end;


  TXMLApplicableTradeProductList = class(TX2XMLNodeCollection, IXMLApplicableTradeProductList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableTradeProductListEnumerator;

    function Get_ApplicableTradeProduct(Index: Integer): IXMLTradeProductType;
    function Add: IXMLTradeProductType;
    function Insert(Index: Integer): IXMLTradeProductType;
  end;

  TXMLSupplyChainConsignmentItemType = class(TX2XMLNode, IXMLSupplyChainConsignmentItemType)
  private
    FInvoiceAmount: IXMLInvoiceAmountList;
    FGlobalID: IXMLGlobalIDList;
    FApplicableTransportDangerousGoods: IXMLApplicableTransportDangerousGoodsList;
    FPreviousAdministrativeReferencedDocument: IXMLPreviousAdministrativeReferencedDocumentList;
    FApplicableNote: IXMLApplicableNoteList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLGoodsTypeCodeType;
    function GetHasTypeExtensionCode: Boolean;
    function GetTypeExtensionCode: IXMLGoodsTypeExtensionCodeType;
    function GetHasDeclaredValueForCustomsAmount: Boolean;
    function GetDeclaredValueForCustomsAmount: IXMLAmountType;
    function GetHasDeclaredValueForStatisticsAmount: Boolean;
    function GetDeclaredValueForStatisticsAmount: IXMLAmountType;
    function GetInvoiceAmount: IXMLInvoiceAmountList;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasTariffQuantity: Boolean;
    function GetTariffQuantity: IXMLQuantityType;
    function GetGlobalID: IXMLGlobalIDList;
    function GetHasNatureIdentificationTransportCargo: Boolean;
    function GetNatureIdentificationTransportCargo: IXMLTransportCargoType;
    function GetApplicableTransportDangerousGoods: IXMLApplicableTransportDangerousGoodsList;
    function GetPreviousAdministrativeReferencedDocument: IXMLPreviousAdministrativeReferencedDocumentList;
    function GetApplicableNote: IXMLApplicableNoteList;
  end;

  TXMLApplicableNoteListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableNoteListEnumerator)
  protected
    function GetCurrent: IXMLNoteType;
  end;


  TXMLApplicableNoteList = class(TX2XMLNodeCollection, IXMLApplicableNoteList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableNoteListEnumerator;

    function Get_ApplicableNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;
  end;

  TXMLPreviousAdministrativeReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPreviousAdministrativeReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLPreviousAdministrativeReferencedDocumentList = class(TX2XMLNodeCollection, IXMLPreviousAdministrativeReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPreviousAdministrativeReferencedDocumentListEnumerator;

    function Get_PreviousAdministrativeReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLApplicableTransportDangerousGoodsListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableTransportDangerousGoodsListEnumerator)
  protected
    function GetCurrent: IXMLTransportDangerousGoodsType;
  end;


  TXMLApplicableTransportDangerousGoodsList = class(TX2XMLNodeCollection, IXMLApplicableTransportDangerousGoodsList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableTransportDangerousGoodsListEnumerator;

    function Get_ApplicableTransportDangerousGoods(Index: Integer): IXMLTransportDangerousGoodsType;
    function Add: IXMLTransportDangerousGoodsType;
    function Insert(Index: Integer): IXMLTransportDangerousGoodsType;
  end;

  TXMLInvoiceAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInvoiceAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLInvoiceAmountList = class(TX2XMLNodeCollection, IXMLInvoiceAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInvoiceAmountListEnumerator;

    function Get_InvoiceAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLSupplyChainConsignmentType = class(TX2XMLNode, IXMLSupplyChainConsignmentType)
  private
    FGrossWeightMeasure: IXMLGrossWeightMeasureList;
    FNetWeightMeasure: IXMLNetWeightMeasureList;
    FGrossVolumeMeasure: IXMLGrossVolumeMeasureList;
    FAssociatedInvoiceAmount: IXMLAssociatedInvoiceAmountList;
    FNetVolumeMeasure: IXMLNetVolumeMeasureList;
    FGroupingCentreTradeParty: IXMLGroupingCentreTradePartyList;
    FTransitLogisticsLocation: IXMLTransitLogisticsLocationList;
    FAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
    FIncludedSupplyChainConsignmentItem: IXMLIncludedSupplyChainConsignmentItemList;
    FUtilizedLogisticsTransportEquipment: IXMLUtilizedLogisticsTransportEquipmentList;
    FSpecifiedLogisticsTransportMovement: IXMLSpecifiedLogisticsTransportMovementList;
    FApplicableCrossBorderRegulatoryProcedure: IXMLApplicableCrossBorderRegulatoryProcedureList;
    FApplicableCrossBorderCustomsValuation: IXMLApplicableCrossBorderCustomsValuationList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetGrossWeightMeasure: IXMLGrossWeightMeasureList;
    function GetNetWeightMeasure: IXMLNetWeightMeasureList;
    function GetGrossVolumeMeasure: IXMLGrossVolumeMeasureList;
    function GetHasChargeableWeightMeasure: Boolean;
    function GetChargeableWeightMeasure: IXMLWeightUnitMeasureType;
    function GetHasInsurancePremiumAmount: Boolean;
    function GetInsurancePremiumAmount: IXMLAmountType;
    function GetAssociatedInvoiceAmount: IXMLAssociatedInvoiceAmountList;
    function GetHasTotalChargeAmount: Boolean;
    function GetTotalChargeAmount: IXMLAmountType;
    function GetHasDeclaredValueForCustomsAmount: Boolean;
    function GetDeclaredValueForCustomsAmount: IXMLAmountType;
    function GetHasPackageQuantity: Boolean;
    function GetPackageQuantity: IXMLQuantityType;
    function GetNetVolumeMeasure: IXMLNetVolumeMeasureList;
    function GetHasConsignorTradeParty: Boolean;
    function GetConsignorTradeParty: IXMLTradePartyType;
    function GetHasConsigneeTradeParty: Boolean;
    function GetConsigneeTradeParty: IXMLTradePartyType;
    function GetHasCarrierTradeParty: Boolean;
    function GetCarrierTradeParty: IXMLTradePartyType;
    function GetHasFreightForwarderTradeParty: Boolean;
    function GetFreightForwarderTradeParty: IXMLTradePartyType;
    function GetHasDeliveryTradeParty: Boolean;
    function GetDeliveryTradeParty: IXMLTradePartyType;
    function GetHasCustomsImportAgentTradeParty: Boolean;
    function GetCustomsImportAgentTradeParty: IXMLTradePartyType;
    function GetHasCustomsExportAgentTradeParty: Boolean;
    function GetCustomsExportAgentTradeParty: IXMLTradePartyType;
    function GetGroupingCentreTradeParty: IXMLGroupingCentreTradePartyList;
    function GetTransitLogisticsLocation: IXMLTransitLogisticsLocationList;
    function GetHasTransportContractReferencedDocument: Boolean;
    function GetTransportContractReferencedDocument: IXMLReferencedDocumentType;
    function GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
    function GetIncludedSupplyChainConsignmentItem: IXMLIncludedSupplyChainConsignmentItemList;
    function GetUtilizedLogisticsTransportEquipment: IXMLUtilizedLogisticsTransportEquipmentList;
    function GetSpecifiedLogisticsTransportMovement: IXMLSpecifiedLogisticsTransportMovementList;
    function GetHasApplicableTransportCargoInsurance: Boolean;
    function GetApplicableTransportCargoInsurance: IXMLTransportCargoInsuranceType;
    function GetApplicableCrossBorderRegulatoryProcedure: IXMLApplicableCrossBorderRegulatoryProcedureList;
    function GetApplicableCrossBorderCustomsValuation: IXMLApplicableCrossBorderCustomsValuationList;
  end;

  TXMLApplicableCrossBorderCustomsValuationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableCrossBorderCustomsValuationListEnumerator)
  protected
    function GetCurrent: IXMLCrossBorderCustomsValuationType;
  end;


  TXMLApplicableCrossBorderCustomsValuationList = class(TX2XMLNodeCollection, IXMLApplicableCrossBorderCustomsValuationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableCrossBorderCustomsValuationListEnumerator;

    function Get_ApplicableCrossBorderCustomsValuation(Index: Integer): IXMLCrossBorderCustomsValuationType;
    function Add: IXMLCrossBorderCustomsValuationType;
    function Insert(Index: Integer): IXMLCrossBorderCustomsValuationType;
  end;

  TXMLApplicableCrossBorderRegulatoryProcedureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableCrossBorderRegulatoryProcedureListEnumerator)
  protected
    function GetCurrent: IXMLCrossBorderRegulatoryProcedureType;
  end;


  TXMLApplicableCrossBorderRegulatoryProcedureList = class(TX2XMLNodeCollection, IXMLApplicableCrossBorderRegulatoryProcedureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableCrossBorderRegulatoryProcedureListEnumerator;

    function Get_ApplicableCrossBorderRegulatoryProcedure(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;
    function Add: IXMLCrossBorderRegulatoryProcedureType;
    function Insert(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;
  end;

  TXMLSpecifiedLogisticsTransportMovementListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedLogisticsTransportMovementListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsTransportMovementType;
  end;


  TXMLSpecifiedLogisticsTransportMovementList = class(TX2XMLNodeCollection, IXMLSpecifiedLogisticsTransportMovementList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedLogisticsTransportMovementListEnumerator;

    function Get_SpecifiedLogisticsTransportMovement(Index: Integer): IXMLLogisticsTransportMovementType;
    function Add: IXMLLogisticsTransportMovementType;
    function Insert(Index: Integer): IXMLLogisticsTransportMovementType;
  end;

  TXMLUtilizedLogisticsTransportEquipmentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUtilizedLogisticsTransportEquipmentListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsTransportEquipmentType;
  end;


  TXMLUtilizedLogisticsTransportEquipmentList = class(TX2XMLNodeCollection, IXMLUtilizedLogisticsTransportEquipmentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUtilizedLogisticsTransportEquipmentListEnumerator;

    function Get_UtilizedLogisticsTransportEquipment(Index: Integer): IXMLLogisticsTransportEquipmentType;
    function Add: IXMLLogisticsTransportEquipmentType;
    function Insert(Index: Integer): IXMLLogisticsTransportEquipmentType;
  end;

  TXMLIncludedSupplyChainConsignmentItemListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedSupplyChainConsignmentItemListEnumerator)
  protected
    function GetCurrent: IXMLSupplyChainConsignmentItemType;
  end;


  TXMLIncludedSupplyChainConsignmentItemList = class(TX2XMLNodeCollection, IXMLIncludedSupplyChainConsignmentItemList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedSupplyChainConsignmentItemListEnumerator;

    function Get_IncludedSupplyChainConsignmentItem(Index: Integer): IXMLSupplyChainConsignmentItemType;
    function Add: IXMLSupplyChainConsignmentItemType;
    function Insert(Index: Integer): IXMLSupplyChainConsignmentItemType;
  end;

  TXMLTransitLogisticsLocationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTransitLogisticsLocationListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsLocationType;
  end;


  TXMLTransitLogisticsLocationList = class(TX2XMLNodeCollection, IXMLTransitLogisticsLocationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTransitLogisticsLocationListEnumerator;

    function Get_TransitLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
    function Add: IXMLLogisticsLocationType;
    function Insert(Index: Integer): IXMLLogisticsLocationType;
  end;

  TXMLGroupingCentreTradePartyListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGroupingCentreTradePartyListEnumerator)
  protected
    function GetCurrent: IXMLTradePartyType;
  end;


  TXMLGroupingCentreTradePartyList = class(TX2XMLNodeCollection, IXMLGroupingCentreTradePartyList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGroupingCentreTradePartyListEnumerator;

    function Get_GroupingCentreTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;
  end;

  TXMLNetVolumeMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetVolumeMeasureListEnumerator)
  protected
    function GetCurrent: IXMLVolumeUnitMeasureType;
  end;


  TXMLNetVolumeMeasureList = class(TX2XMLNodeCollection, IXMLNetVolumeMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetVolumeMeasureListEnumerator;

    function Get_NetVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
    function Add: IXMLVolumeUnitMeasureType;
    function Insert(Index: Integer): IXMLVolumeUnitMeasureType;
  end;

  TXMLAssociatedInvoiceAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAssociatedInvoiceAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLAssociatedInvoiceAmountList = class(TX2XMLNodeCollection, IXMLAssociatedInvoiceAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAssociatedInvoiceAmountListEnumerator;

    function Get_AssociatedInvoiceAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLGrossVolumeMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGrossVolumeMeasureListEnumerator)
  protected
    function GetCurrent: IXMLVolumeUnitMeasureType;
  end;


  TXMLGrossVolumeMeasureList = class(TX2XMLNodeCollection, IXMLGrossVolumeMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGrossVolumeMeasureListEnumerator;

    function Get_GrossVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
    function Add: IXMLVolumeUnitMeasureType;
    function Insert(Index: Integer): IXMLVolumeUnitMeasureType;
  end;

  TXMLNetWeightMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetWeightMeasureListEnumerator)
  protected
    function GetCurrent: IXMLWeightUnitMeasureType;
  end;


  TXMLNetWeightMeasureList = class(TX2XMLNodeCollection, IXMLNetWeightMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetWeightMeasureListEnumerator;

    function Get_NetWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
    function Add: IXMLWeightUnitMeasureType;
    function Insert(Index: Integer): IXMLWeightUnitMeasureType;
  end;

  TXMLGrossWeightMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGrossWeightMeasureListEnumerator)
  protected
    function GetCurrent: IXMLWeightUnitMeasureType;
  end;


  TXMLGrossWeightMeasureList = class(TX2XMLNodeCollection, IXMLGrossWeightMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGrossWeightMeasureListEnumerator;

    function Get_GrossWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
    function Add: IXMLWeightUnitMeasureType;
    function Insert(Index: Integer): IXMLWeightUnitMeasureType;
  end;

  TXMLSupplyChainEventType = class(TX2XMLNode, IXMLSupplyChainEventType)
  private
    FDescription: IXMLDescriptionList;
    FDescriptionBinaryObject: IXMLDescriptionBinaryObjectList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasOccurrenceDateTime: Boolean;
    function GetOccurrenceDateTime: IXMLDateTimeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetDescription: IXMLDescriptionList;
    function GetDescriptionBinaryObject: IXMLDescriptionBinaryObjectList;
    function GetHasUnitQuantity: Boolean;
    function GetUnitQuantity: IXMLQuantityType;
    function GetHasLatestOccurrenceDateTime: Boolean;
    function GetLatestOccurrenceDateTime: IXMLDateTimeType;
    function GetHasEarliestOccurrenceDateTime: Boolean;
    function GetEarliestOccurrenceDateTime: IXMLDateTimeType;
    function GetHasTimeOccurrenceDateTime: Boolean;
    function GetTimeOccurrenceDateTime: IXMLTimeOnlyFormattedDateTimeType;
    function GetHasOccurrenceSpecifiedPeriod: Boolean;
    function GetOccurrenceSpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetHasOccurrenceLogisticsLocation: Boolean;
    function GetOccurrenceLogisticsLocation: IXMLLogisticsLocationType;
  end;

  TXMLDescriptionBinaryObjectListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDescriptionBinaryObjectListEnumerator)
  protected
    function GetCurrent: IXMLBinaryObjectType;
  end;


  TXMLDescriptionBinaryObjectList = class(TX2XMLNodeCollection, IXMLDescriptionBinaryObjectList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDescriptionBinaryObjectListEnumerator;

    function Get_DescriptionBinaryObject(Index: Integer): IXMLBinaryObjectType;
    function Add: IXMLBinaryObjectType;
    function Insert(Index: Integer): IXMLBinaryObjectType;
  end;

  TXMLSupplyChainPackagingType = class(TX2XMLNode, IXMLSupplyChainPackagingType)
  private
    FDescription: IXMLDescriptionList;
    FDisposalMethodCode: IXMLDisposalMethodCodeList;
    FWeightMeasure: IXMLWeightMeasureList;
    FAdditionalInstructionCode: IXMLAdditionalInstructionCodeList;
    FSpecifiedPackagingMarking: IXMLSpecifiedPackagingMarkingList;
    FApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    FApplicableDisposalInstructions: IXMLApplicableDisposalInstructionsList;
    FApplicableReturnableAssetInstructions: IXMLApplicableReturnableAssetInstructionsList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPackageTypeCodeType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetHasConditionCode: Boolean;
    function GetConditionCode: IXMLCodeType;
    function GetDisposalMethodCode: IXMLDisposalMethodCodeList;
    function GetWeightMeasure: IXMLWeightMeasureList;
    function GetHasMaximumStackabilityQuantity: Boolean;
    function GetMaximumStackabilityQuantity: IXMLQuantityType;
    function GetHasMaximumStackabilityWeightMeasure: Boolean;
    function GetMaximumStackabilityWeightMeasure: IXMLMeasureType;
    function GetHasCustomerFacingTotalUnitQuantity: Boolean;
    function GetCustomerFacingTotalUnitQuantity: IXMLQuantityType;
    function GetHasLayerTotalUnitQuantity: Boolean;
    function GetLayerTotalUnitQuantity: IXMLQuantityType;
    function GetHasContentLayerQuantity: Boolean;
    function GetContentLayerQuantity: IXMLQuantityType;
    function GetAdditionalInstructionCode: IXMLAdditionalInstructionCodeList;
    function GetHasAdditionalInstructionIndicator: Boolean;
    function GetAdditionalInstructionIndicator: IXMLIndicatorType;
    function GetHasLinearSpatialDimension: Boolean;
    function GetLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMinimumLinearSpatialDimension: Boolean;
    function GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMaximumLinearSpatialDimension: Boolean;
    function GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetSpecifiedPackagingMarking: IXMLSpecifiedPackagingMarkingList;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetApplicableDisposalInstructions: IXMLApplicableDisposalInstructionsList;
    function GetApplicableReturnableAssetInstructions: IXMLApplicableReturnableAssetInstructionsList;
  end;

  TXMLApplicableReturnableAssetInstructionsListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableReturnableAssetInstructionsListEnumerator)
  protected
    function GetCurrent: IXMLReturnableAssetInstructionsType;
  end;


  TXMLApplicableReturnableAssetInstructionsList = class(TX2XMLNodeCollection, IXMLApplicableReturnableAssetInstructionsList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableReturnableAssetInstructionsListEnumerator;

    function Get_ApplicableReturnableAssetInstructions(Index: Integer): IXMLReturnableAssetInstructionsType;
    function Add: IXMLReturnableAssetInstructionsType;
    function Insert(Index: Integer): IXMLReturnableAssetInstructionsType;
  end;

  TXMLApplicableDisposalInstructionsListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableDisposalInstructionsListEnumerator)
  protected
    function GetCurrent: IXMLDisposalInstructionsType;
  end;


  TXMLApplicableDisposalInstructionsList = class(TX2XMLNodeCollection, IXMLApplicableDisposalInstructionsList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableDisposalInstructionsListEnumerator;

    function Get_ApplicableDisposalInstructions(Index: Integer): IXMLDisposalInstructionsType;
    function Add: IXMLDisposalInstructionsType;
    function Insert(Index: Integer): IXMLDisposalInstructionsType;
  end;

  TXMLSpecifiedPackagingMarkingListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedPackagingMarkingListEnumerator)
  protected
    function GetCurrent: IXMLPackagingMarkingType;
  end;


  TXMLSpecifiedPackagingMarkingList = class(TX2XMLNodeCollection, IXMLSpecifiedPackagingMarkingList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedPackagingMarkingListEnumerator;

    function Get_SpecifiedPackagingMarking(Index: Integer): IXMLPackagingMarkingType;
    function Add: IXMLPackagingMarkingType;
    function Insert(Index: Integer): IXMLPackagingMarkingType;
  end;

  TXMLAdditionalInstructionCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAdditionalInstructionCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLAdditionalInstructionCodeList = class(TX2XMLNodeCollection, IXMLAdditionalInstructionCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAdditionalInstructionCodeListEnumerator;

    function Get_AdditionalInstructionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLWeightMeasureListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLWeightMeasureListEnumerator)
  protected
    function GetCurrent: IXMLMeasureType;
  end;


  TXMLWeightMeasureList = class(TX2XMLNodeCollection, IXMLWeightMeasureList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLWeightMeasureListEnumerator;

    function Get_WeightMeasure(Index: Integer): IXMLMeasureType;
    function Add: IXMLMeasureType;
    function Insert(Index: Integer): IXMLMeasureType;
  end;

  TXMLDisposalMethodCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDisposalMethodCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLDisposalMethodCodeList = class(TX2XMLNodeCollection, IXMLDisposalMethodCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDisposalMethodCodeListEnumerator;

    function Get_DisposalMethodCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLSupplyChainTradeLineItemType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLSupplyChainTradeLineItemType)
  private
    FAdditionalInformationNote: IXMLAdditionalInformationNoteList;
    FIncludedSubordinateTradeLineItem: IXMLIncludedSubordinateTradeLineItemList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasDescriptionCode: Boolean;
    function GetDescriptionCode: IXMLCodeType;
    function GetHasAssociatedDocumentLineDocument: Boolean;
    function GetAssociatedDocumentLineDocument: IXMLDocumentLineDocumentType;
    function GetHasSpecifiedTradeProduct: Boolean;
    function GetSpecifiedTradeProduct: IXMLTradeProductType;
    function GetAdditionalInformationNote: IXMLAdditionalInformationNoteList;
    function GetHasSpecifiedLineTradeAgreement: Boolean;
    function GetSpecifiedLineTradeAgreement: IXMLLineTradeAgreementType;
    function GetHasSpecifiedLineTradeDelivery: Boolean;
    function GetSpecifiedLineTradeDelivery: IXMLLineTradeDeliveryType;
    function GetSpecifiedLineTradeSettlement: IXMLLineTradeSettlementType;
    function GetIncludedSubordinateTradeLineItem: IXMLIncludedSubordinateTradeLineItemList;
  end;

  TXMLIncludedSubordinateTradeLineItemListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedSubordinateTradeLineItemListEnumerator)
  protected
    function GetCurrent: IXMLSubordinateTradeLineItemType;
  end;


  TXMLIncludedSubordinateTradeLineItemList = class(TX2XMLNodeCollection, IXMLIncludedSubordinateTradeLineItemList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedSubordinateTradeLineItemListEnumerator;

    function Get_IncludedSubordinateTradeLineItem(Index: Integer): IXMLSubordinateTradeLineItemType;
    function Add: IXMLSubordinateTradeLineItemType;
    function Insert(Index: Integer): IXMLSubordinateTradeLineItemType;
  end;

  TXMLAdditionalInformationNoteListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAdditionalInformationNoteListEnumerator)
  protected
    function GetCurrent: IXMLNoteType;
  end;


  TXMLAdditionalInformationNoteList = class(TX2XMLNodeCollection, IXMLAdditionalInformationNoteList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAdditionalInformationNoteListEnumerator;

    function Get_AdditionalInformationNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;
  end;

  TXMLSupplyChainTradeTransactionTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSupplyChainTradeTransactionTypeEnumerator)
  protected
    function GetCurrent: IXMLSupplyChainTradeLineItemType;
  end;


  TXMLSupplyChainTradeTransactionType = class(TX2XMLNodeCollection, IXSDValidate, IXSDValidateStrict, IXMLSupplyChainTradeTransactionType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLSupplyChainTradeTransactionTypeEnumerator;

    function Get_IncludedSupplyChainTradeLineItem(Index: Integer): IXMLSupplyChainTradeLineItemType;
    function Add: IXMLSupplyChainTradeLineItemType;
    function Insert(Index: Integer): IXMLSupplyChainTradeLineItemType;

    function GetApplicableHeaderTradeAgreement: IXMLHeaderTradeAgreementType;
    function GetApplicableHeaderTradeDelivery: IXMLHeaderTradeDeliveryType;
    function GetApplicableHeaderTradeSettlement: IXMLHeaderTradeSettlementType;
  end;

  TXMLTaxRegistrationType = class(TX2XMLNode, IXMLTaxRegistrationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasIOSSID: Boolean;
    function GetIOSSID: IXMLIDType;
    function GetHasAssociatedRegisteredTax: Boolean;
    function GetAssociatedRegisteredTax: IXMLRegisteredTaxType;
  end;

  TXMLTradeAccountingAccountType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLTradeAccountingAccountType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasSetTriggerCode: Boolean;
    function GetSetTriggerCode: IXMLAccountingDocumentCodeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLAccountingAccountTypeCodeType;
    function GetHasAmountTypeCode: Boolean;
    function GetAmountTypeCode: IXMLAccountingAmountTypeCodeType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetHasCostReferenceDimensionPattern: Boolean;
    function GetCostReferenceDimensionPattern: IXMLTextType;
  end;

  TXMLTradeAddressType = class(TX2XMLNode, IXMLTradeAddressType)
  private
    FCountryName: IXMLCountryNameList;
    FCountrySubDivisionName: IXMLCountrySubDivisionNameList;
    FTypeCode: IXMLTypeCodeList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasPostcodeCode: Boolean;
    function GetPostcodeCode: IXMLCodeType;
    function GetHasPostOfficeBox: Boolean;
    function GetPostOfficeBox: IXMLTextType;
    function GetHasBuildingName: Boolean;
    function GetBuildingName: IXMLTextType;
    function GetHasLineOne: Boolean;
    function GetLineOne: IXMLTextType;
    function GetHasLineTwo: Boolean;
    function GetLineTwo: IXMLTextType;
    function GetHasLineThree: Boolean;
    function GetLineThree: IXMLTextType;
    function GetHasLineFour: Boolean;
    function GetLineFour: IXMLTextType;
    function GetHasLineFive: Boolean;
    function GetLineFive: IXMLTextType;
    function GetHasStreetName: Boolean;
    function GetStreetName: IXMLTextType;
    function GetHasCityName: Boolean;
    function GetCityName: IXMLTextType;
    function GetHasCitySubDivisionName: Boolean;
    function GetCitySubDivisionName: IXMLTextType;
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetCountryName: IXMLCountryNameList;
    function GetHasCountrySubDivisionID: Boolean;
    function GetCountrySubDivisionID: IXMLIDType;
    function GetCountrySubDivisionName: IXMLCountrySubDivisionNameList;
    function GetHasAttentionOf: Boolean;
    function GetAttentionOf: IXMLTextType;
    function GetHasCareOf: Boolean;
    function GetCareOf: IXMLTextType;
    function GetHasBuildingNumber: Boolean;
    function GetBuildingNumber: IXMLTextType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasAdditionalStreetName: Boolean;
    function GetAdditionalStreetName: IXMLTextType;
    function GetHasCityID: Boolean;
    function GetCityID: IXMLIDType;
    function GetTypeCode: IXMLTypeCodeList;
  end;

  TXMLCountrySubDivisionNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCountrySubDivisionNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCountrySubDivisionNameList = class(TX2XMLNodeCollection, IXMLCountrySubDivisionNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCountrySubDivisionNameListEnumerator;

    function Get_CountrySubDivisionName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLCountryNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCountryNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCountryNameList = class(TX2XMLNodeCollection, IXMLCountryNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCountryNameListEnumerator;

    function Get_CountryName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLTradeAllowanceChargeType = class(TX2XMLNode, IXMLTradeAllowanceChargeType)
  private
    FActualAmount: IXMLActualAmountList;
    FCategoryTradeTax: IXMLCategoryTradeTaxList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasChargeIndicator: Boolean;
    function GetChargeIndicator: IXMLIndicatorType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasSequenceNumeric: Boolean;
    function GetSequenceNumeric: IXMLNumericType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetHasPrepaidIndicator: Boolean;
    function GetPrepaidIndicator: IXMLIndicatorType;
    function GetActualAmount: IXMLActualAmountList;
    function GetHasUnitBasisAmount: Boolean;
    function GetUnitBasisAmount: IXMLAmountType;
    function GetHasReasonCode: Boolean;
    function GetReasonCode: IXMLAllowanceChargeReasonCodeType;
    function GetHasReason: Boolean;
    function GetReason: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLAllowanceChargeIdentificationCodeType;
    function GetCategoryTradeTax: IXMLCategoryTradeTaxList;
    function GetHasActualTradeCurrencyExchange: Boolean;
    function GetActualTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
  end;

  TXMLCategoryTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCategoryTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLCategoryTradeTaxList = class(TX2XMLNodeCollection, IXMLCategoryTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCategoryTradeTaxListEnumerator;

    function Get_CategoryTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLActualAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLActualAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLActualAmountList = class(TX2XMLNodeCollection, IXMLActualAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLActualAmountListEnumerator;

    function Get_ActualAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTradeContactType = class(TX2XMLNode, IXMLTradeContactType)
  private
    FPersonID: IXMLPersonIDList;
    FSpecifiedNote: IXMLSpecifiedNoteList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasPersonName: Boolean;
    function GetPersonName: IXMLTextType;
    function GetHasDepartmentName: Boolean;
    function GetDepartmentName: IXMLTextType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLContactTypeCodeType;
    function GetHasJobTitle: Boolean;
    function GetJobTitle: IXMLTextType;
    function GetHasResponsibility: Boolean;
    function GetResponsibility: IXMLTextType;
    function GetPersonID: IXMLPersonIDList;
    function GetHasTelephoneUniversalCommunication: Boolean;
    function GetTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasDirectTelephoneUniversalCommunication: Boolean;
    function GetDirectTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasMobileTelephoneUniversalCommunication: Boolean;
    function GetMobileTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasFaxUniversalCommunication: Boolean;
    function GetFaxUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasEmailURIUniversalCommunication: Boolean;
    function GetEmailURIUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasTelexUniversalCommunication: Boolean;
    function GetTelexUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasVOIPUniversalCommunication: Boolean;
    function GetVOIPUniversalCommunication: IXMLUniversalCommunicationType;
    function GetHasInstantMessagingUniversalCommunication: Boolean;
    function GetInstantMessagingUniversalCommunication: IXMLUniversalCommunicationType;
    function GetSpecifiedNote: IXMLSpecifiedNoteList;
    function GetHasSpecifiedContactPerson: Boolean;
    function GetSpecifiedContactPerson: IXMLContactPersonType;
  end;

  TXMLSpecifiedNoteListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedNoteListEnumerator)
  protected
    function GetCurrent: IXMLNoteType;
  end;


  TXMLSpecifiedNoteList = class(TX2XMLNodeCollection, IXMLSpecifiedNoteList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedNoteListEnumerator;

    function Get_SpecifiedNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;
  end;

  TXMLPersonIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPersonIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLPersonIDList = class(TX2XMLNodeCollection, IXMLPersonIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPersonIDListEnumerator;

    function Get_PersonID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLTradeCountrySubDivisionTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTradeCountrySubDivisionTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTradeCountrySubDivisionType = class(TX2XMLNodeCollection, IXMLTradeCountrySubDivisionType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTradeCountrySubDivisionTypeEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
  end;

  TXMLTradeCountryType = class(TX2XMLNode, IXMLTradeCountryType)
  private
    FName: IXMLNameList;
    FSubordinateTradeCountrySubDivision: IXMLSubordinateTradeCountrySubDivisionList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLCountryIDType;
    function GetName: IXMLNameList;
    function GetSubordinateTradeCountrySubDivision: IXMLSubordinateTradeCountrySubDivisionList;
  end;

  TXMLSubordinateTradeCountrySubDivisionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSubordinateTradeCountrySubDivisionListEnumerator)
  protected
    function GetCurrent: IXMLTradeCountrySubDivisionType;
  end;


  TXMLSubordinateTradeCountrySubDivisionList = class(TX2XMLNodeCollection, IXMLSubordinateTradeCountrySubDivisionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSubordinateTradeCountrySubDivisionListEnumerator;

    function Get_SubordinateTradeCountrySubDivision(Index: Integer): IXMLTradeCountrySubDivisionType;
    function Add: IXMLTradeCountrySubDivisionType;
    function Insert(Index: Integer): IXMLTradeCountrySubDivisionType;
  end;

  TXMLTradeCurrencyExchangeTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTradeCurrencyExchangeTypeEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLTradeCurrencyExchangeType = class(TX2XMLNodeCollection, IXSDValidate, IXSDValidateStrict, IXMLTradeCurrencyExchangeType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLTradeCurrencyExchangeTypeEnumerator;

    function Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;

    function GetSourceCurrencyCode: IXMLCurrencyCodeType;
    function GetHasSourceUnitBasisNumeric: Boolean;
    function GetSourceUnitBasisNumeric: IXMLNumericType;
    function GetTargetCurrencyCode: IXMLCurrencyCodeType;
    function GetHasTargetUnitBaseNumeric: Boolean;
    function GetTargetUnitBaseNumeric: IXMLNumericType;
    function GetHasMarketID: Boolean;
    function GetMarketID: IXMLIDType;
    function GetConversionRate: IXMLRateType;
    function GetHasConversionRateDateTime: Boolean;
    function GetConversionRateDateTime: IXMLDateTimeType;
  end;

  TXMLTradeDeliveryTermsTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTradeDeliveryTermsTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTradeDeliveryTermsType = class(TX2XMLNodeCollection, IXMLTradeDeliveryTermsType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTradeDeliveryTermsTypeEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasDeliveryTypeCode: Boolean;
    function GetDeliveryTypeCode: IXMLDeliveryTermsCodeType;
    function GetHasFunctionCode: Boolean;
    function GetFunctionCode: IXMLDeliveryTermsFunctionCodeType;
    function GetHasDeliveryDiscontinuationCode: Boolean;
    function GetDeliveryDiscontinuationCode: IXMLCodeType;
    function GetHasPartialDeliveryAllowedIndicator: Boolean;
    function GetPartialDeliveryAllowedIndicator: IXMLIndicatorType;
    function GetHasRelevantTradeLocation: Boolean;
    function GetRelevantTradeLocation: IXMLTradeLocationType;
  end;

  TXMLTradeLocationType = class(TX2XMLNode, IXMLTradeLocationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasCountryID: Boolean;
    function GetCountryID: IXMLCountryIDType;
    function GetHasCountryName: Boolean;
    function GetCountryName: IXMLTextType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
  end;

  TXMLTradePartyType = class(TX2XMLNode, IXMLTradePartyType)
  private
    FID: IXMLIDList;
    FGlobalID: IXMLGlobalIDList;
    FTypeCode: IXMLTypeCodeList;
    FRoleCode: IXMLRoleCodeList;
    FDescription: IXMLDescriptionList;
    FRegisteredID: IXMLRegisteredIDList;
    FRole: IXMLRoleList;
    FDefinedTradeContact: IXMLDefinedTradeContactList;
    FURIUniversalCommunication: IXMLURIUniversalCommunicationList;
    FSpecifiedLogisticsLocation: IXMLSpecifiedLogisticsLocationList;
    FSpecifiedTaxRegistration: IXMLSpecifiedTaxRegistrationList;
    FLogoAssociatedSpecifiedBinaryFile: IXMLLogoAssociatedSpecifiedBinaryFileList;
  public
    procedure AfterConstruction; override;
  protected
    function GetID: IXMLIDList;
    function GetGlobalID: IXMLGlobalIDList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetHasName: Boolean;
    function GetName: IXMLTextType;
    function GetRoleCode: IXMLRoleCodeList;
    function GetDescription: IXMLDescriptionList;
    function GetRegisteredID: IXMLRegisteredIDList;
    function GetRole: IXMLRoleList;
    function GetHasSpecifiedLegalOrganization: Boolean;
    function GetSpecifiedLegalOrganization: IXMLLegalOrganizationType;
    function GetDefinedTradeContact: IXMLDefinedTradeContactList;
    function GetHasPostalTradeAddress: Boolean;
    function GetPostalTradeAddress: IXMLTradeAddressType;
    function GetURIUniversalCommunication: IXMLURIUniversalCommunicationList;
    function GetSpecifiedLogisticsLocation: IXMLSpecifiedLogisticsLocationList;
    function GetSpecifiedTaxRegistration: IXMLSpecifiedTaxRegistrationList;
    function GetHasEndPointURIUniversalCommunication: Boolean;
    function GetEndPointURIUniversalCommunication: IXMLUniversalCommunicationType;
    function GetLogoAssociatedSpecifiedBinaryFile: IXMLLogoAssociatedSpecifiedBinaryFileList;
  end;

  TXMLLogoAssociatedSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLogoAssociatedSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLLogoAssociatedSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLLogoAssociatedSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLogoAssociatedSpecifiedBinaryFileListEnumerator;

    function Get_LogoAssociatedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLSpecifiedTaxRegistrationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTaxRegistrationListEnumerator)
  protected
    function GetCurrent: IXMLTaxRegistrationType;
  end;


  TXMLSpecifiedTaxRegistrationList = class(TX2XMLNodeCollection, IXMLSpecifiedTaxRegistrationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTaxRegistrationListEnumerator;

    function Get_SpecifiedTaxRegistration(Index: Integer): IXMLTaxRegistrationType;
    function Add: IXMLTaxRegistrationType;
    function Insert(Index: Integer): IXMLTaxRegistrationType;
  end;

  TXMLSpecifiedLogisticsLocationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedLogisticsLocationListEnumerator)
  protected
    function GetCurrent: IXMLLogisticsLocationType;
  end;


  TXMLSpecifiedLogisticsLocationList = class(TX2XMLNodeCollection, IXMLSpecifiedLogisticsLocationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedLogisticsLocationListEnumerator;

    function Get_SpecifiedLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
    function Add: IXMLLogisticsLocationType;
    function Insert(Index: Integer): IXMLLogisticsLocationType;
  end;

  TXMLURIUniversalCommunicationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLURIUniversalCommunicationListEnumerator)
  protected
    function GetCurrent: IXMLUniversalCommunicationType;
  end;


  TXMLURIUniversalCommunicationList = class(TX2XMLNodeCollection, IXMLURIUniversalCommunicationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLURIUniversalCommunicationListEnumerator;

    function Get_URIUniversalCommunication(Index: Integer): IXMLUniversalCommunicationType;
    function Add: IXMLUniversalCommunicationType;
    function Insert(Index: Integer): IXMLUniversalCommunicationType;
  end;

  TXMLDefinedTradeContactListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDefinedTradeContactListEnumerator)
  protected
    function GetCurrent: IXMLTradeContactType;
  end;


  TXMLDefinedTradeContactList = class(TX2XMLNodeCollection, IXMLDefinedTradeContactList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDefinedTradeContactListEnumerator;

    function Get_DefinedTradeContact(Index: Integer): IXMLTradeContactType;
    function Add: IXMLTradeContactType;
    function Insert(Index: Integer): IXMLTradeContactType;
  end;

  TXMLRoleListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRoleListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLRoleList = class(TX2XMLNodeCollection, IXMLRoleList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRoleListEnumerator;

    function Get_Role(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLRegisteredIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRegisteredIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLRegisteredIDList = class(TX2XMLNodeCollection, IXMLRegisteredIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRegisteredIDListEnumerator;

    function Get_RegisteredID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLRoleCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRoleCodeListEnumerator)
  protected
    function GetCurrent: IXMLPartyRoleCodeType;
  end;


  TXMLRoleCodeList = class(TX2XMLNodeCollection, IXMLRoleCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRoleCodeListEnumerator;

    function Get_RoleCode(Index: Integer): IXMLPartyRoleCodeType;
    function Add: IXMLPartyRoleCodeType;
    function Insert(Index: Integer): IXMLPartyRoleCodeType;
  end;

  TXMLGlobalIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGlobalIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLGlobalIDList = class(TX2XMLNodeCollection, IXMLGlobalIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGlobalIDListEnumerator;

    function Get_GlobalID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLTradePaymentDiscountTermsType = class(TX2XMLNode, IXMLTradePaymentDiscountTermsType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetHasBasisPeriodMeasure: Boolean;
    function GetBasisPeriodMeasure: IXMLMeasureType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasActualDiscountAmount: Boolean;
    function GetActualDiscountAmount: IXMLAmountType;
  end;

  TXMLTradePaymentPenaltyTermsType = class(TX2XMLNode, IXMLTradePaymentPenaltyTermsType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetHasBasisPeriodMeasure: Boolean;
    function GetBasisPeriodMeasure: IXMLMeasureType;
    function GetHasBasisAmount: Boolean;
    function GetBasisAmount: IXMLAmountType;
    function GetHasCalculationPercent: Boolean;
    function GetCalculationPercent: IXMLPercentType;
    function GetHasActualPenaltyAmount: Boolean;
    function GetActualPenaltyAmount: IXMLAmountType;
  end;

  TXMLTradePaymentTermsType = class(TX2XMLNode, IXMLTradePaymentTermsType)
  private
    FDescription: IXMLDescriptionList;
    FDirectDebitMandateID: IXMLDirectDebitMandateIDList;
    FPaymentMeansID: IXMLPaymentMeansIDList;
    FPartialPaymentAmount: IXMLPartialPaymentAmountList;
    FPayeeTradeParty: IXMLPayeeTradePartyList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLPaymentTermsIDType;
    function GetHasFromEventCode: Boolean;
    function GetFromEventCode: IXMLPaymentTermsEventTimeReferenceCodeType;
    function GetHasSettlementPeriodMeasure: Boolean;
    function GetSettlementPeriodMeasure: IXMLMeasureType;
    function GetDescription: IXMLDescriptionList;
    function GetHasDueDateDateTime: Boolean;
    function GetDueDateDateTime: IXMLDateTimeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPaymentTermsTypeCodeType;
    function GetHasInstructionTypeCode: Boolean;
    function GetInstructionTypeCode: IXMLCodeType;
    function GetDirectDebitMandateID: IXMLDirectDebitMandateIDList;
    function GetHasPartialPaymentPercent: Boolean;
    function GetPartialPaymentPercent: IXMLPercentType;
    function GetPaymentMeansID: IXMLPaymentMeansIDList;
    function GetPartialPaymentAmount: IXMLPartialPaymentAmountList;
    function GetHasDueDateTime: Boolean;
    function GetDueDateTime: IXMLFormattedDateTimeType;
    function GetHasBillStartDateTime: Boolean;
    function GetBillStartDateTime: IXMLDateTimeType;
    function GetHasApplicableTradePaymentPenaltyTerms: Boolean;
    function GetApplicableTradePaymentPenaltyTerms: IXMLTradePaymentPenaltyTermsType;
    function GetHasApplicableTradePaymentDiscountTerms: Boolean;
    function GetApplicableTradePaymentDiscountTerms: IXMLTradePaymentDiscountTermsType;
    function GetPayeeTradeParty: IXMLPayeeTradePartyList;
  end;

  TXMLPayeeTradePartyListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPayeeTradePartyListEnumerator)
  protected
    function GetCurrent: IXMLTradePartyType;
  end;


  TXMLPayeeTradePartyList = class(TX2XMLNodeCollection, IXMLPayeeTradePartyList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPayeeTradePartyListEnumerator;

    function Get_PayeeTradeParty(Index: Integer): IXMLTradePartyType;
    function Add: IXMLTradePartyType;
    function Insert(Index: Integer): IXMLTradePartyType;
  end;

  TXMLPartialPaymentAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPartialPaymentAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLPartialPaymentAmountList = class(TX2XMLNodeCollection, IXMLPartialPaymentAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPartialPaymentAmountListEnumerator;

    function Get_PartialPaymentAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLPaymentMeansIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPaymentMeansIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLPaymentMeansIDList = class(TX2XMLNodeCollection, IXMLPaymentMeansIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPaymentMeansIDListEnumerator;

    function Get_PaymentMeansID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLDirectDebitMandateIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDirectDebitMandateIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLDirectDebitMandateIDList = class(TX2XMLNodeCollection, IXMLDirectDebitMandateIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDirectDebitMandateIDListEnumerator;

    function Get_DirectDebitMandateID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLTradePriceType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLTradePriceType)
  private
    FChargeAmount: IXMLChargeAmountList;
    FChangeReason: IXMLChangeReasonList;
    F_Type: IXML_TypeList;
    FAppliedTradeAllowanceCharge: IXMLAppliedTradeAllowanceChargeList;
    FIncludedTradeTax: IXMLIncludedTradeTaxList;
    FDeliveryTradeLocation: IXMLDeliveryTradeLocationList;
    FTradeComparisonReferencePrice: IXMLTradeComparisonReferencePriceList;
    FAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPriceTypeCodeType;
    function GetChargeAmount: IXMLChargeAmountList;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetHasMinimumQuantity: Boolean;
    function GetMinimumQuantity: IXMLQuantityType;
    function GetHasMaximumQuantity: Boolean;
    function GetMaximumQuantity: IXMLQuantityType;
    function GetChangeReason: IXMLChangeReasonList;
    function GetHasOrderUnitConversionFactorNumeric: Boolean;
    function GetOrderUnitConversionFactorNumeric: IXMLNumericType;
    function Get_Type: IXML_TypeList;
    function GetHasBasisDateTime: Boolean;
    function GetBasisDateTime: IXMLDateTimeType;
    function GetAppliedTradeAllowanceCharge: IXMLAppliedTradeAllowanceChargeList;
    function GetHasValiditySpecifiedPeriod: Boolean;
    function GetValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;
    function GetIncludedTradeTax: IXMLIncludedTradeTaxList;
    function GetDeliveryTradeLocation: IXMLDeliveryTradeLocationList;
    function GetTradeComparisonReferencePrice: IXMLTradeComparisonReferencePriceList;
    function GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
  end;

  TXMLAssociatedReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAssociatedReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLAssociatedReferencedDocumentList = class(TX2XMLNodeCollection, IXMLAssociatedReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAssociatedReferencedDocumentListEnumerator;

    function Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLTradeComparisonReferencePriceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTradeComparisonReferencePriceListEnumerator)
  protected
    function GetCurrent: IXMLReferencePriceType;
  end;


  TXMLTradeComparisonReferencePriceList = class(TX2XMLNodeCollection, IXMLTradeComparisonReferencePriceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTradeComparisonReferencePriceListEnumerator;

    function Get_TradeComparisonReferencePrice(Index: Integer): IXMLReferencePriceType;
    function Add: IXMLReferencePriceType;
    function Insert(Index: Integer): IXMLReferencePriceType;
  end;

  TXMLDeliveryTradeLocationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDeliveryTradeLocationListEnumerator)
  protected
    function GetCurrent: IXMLTradeLocationType;
  end;


  TXMLDeliveryTradeLocationList = class(TX2XMLNodeCollection, IXMLDeliveryTradeLocationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDeliveryTradeLocationListEnumerator;

    function Get_DeliveryTradeLocation(Index: Integer): IXMLTradeLocationType;
    function Add: IXMLTradeLocationType;
    function Insert(Index: Integer): IXMLTradeLocationType;
  end;

  TXMLIncludedTradeTaxListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedTradeTaxListEnumerator)
  protected
    function GetCurrent: IXMLTradeTaxType;
  end;


  TXMLIncludedTradeTaxList = class(TX2XMLNodeCollection, IXMLIncludedTradeTaxList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedTradeTaxListEnumerator;

    function Get_IncludedTradeTax(Index: Integer): IXMLTradeTaxType;
    function Add: IXMLTradeTaxType;
    function Insert(Index: Integer): IXMLTradeTaxType;
  end;

  TXMLAppliedTradeAllowanceChargeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAppliedTradeAllowanceChargeListEnumerator)
  protected
    function GetCurrent: IXMLTradeAllowanceChargeType;
  end;


  TXMLAppliedTradeAllowanceChargeList = class(TX2XMLNodeCollection, IXMLAppliedTradeAllowanceChargeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAppliedTradeAllowanceChargeListEnumerator;

    function Get_AppliedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
    function Add: IXMLTradeAllowanceChargeType;
    function Insert(Index: Integer): IXMLTradeAllowanceChargeType;
  end;

  TXML_TypeListEnumerator = class(TXMLNodeCollectionEnumerator, IXML_TypeListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXML_TypeList = class(TX2XMLNodeCollection, IXML_TypeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXML_TypeListEnumerator;

    function Get__Type(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLChangeReasonListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLChangeReasonListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLChangeReasonList = class(TX2XMLNodeCollection, IXMLChangeReasonList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLChangeReasonListEnumerator;

    function Get_ChangeReason(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLChargeAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLChargeAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLChargeAmountList = class(TX2XMLNodeCollection, IXMLChargeAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLChargeAmountListEnumerator;

    function Get_ChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTradeProductInstanceType = class(TX2XMLNode, IXMLTradeProductInstanceType)
  private
    FSerialID: IXMLSerialIDList;
    FRegistrationID: IXMLRegistrationIDList;
    FApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    FApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasGlobalSerialID: Boolean;
    function GetGlobalSerialID: IXMLIDType;
    function GetHasBatchID: Boolean;
    function GetBatchID: IXMLIDType;
    function GetHasKanbanID: Boolean;
    function GetKanbanID: IXMLIDType;
    function GetHasSupplierAssignedSerialID: Boolean;
    function GetSupplierAssignedSerialID: IXMLIDType;
    function GetHasBestBeforeDateTime: Boolean;
    function GetBestBeforeDateTime: IXMLDateTimeType;
    function GetHasExpiryDateTime: Boolean;
    function GetExpiryDateTime: IXMLDateTimeType;
    function GetHasSellByDateTime: Boolean;
    function GetSellByDateTime: IXMLDateTimeType;
    function GetSerialID: IXMLSerialIDList;
    function GetRegistrationID: IXMLRegistrationIDList;
    function GetHasProductionSupplyChainEvent: Boolean;
    function GetProductionSupplyChainEvent: IXMLSupplyChainEventType;
    function GetHasPackagingSupplyChainEvent: Boolean;
    function GetPackagingSupplyChainEvent: IXMLSupplyChainEventType;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
  end;

  TXMLRegistrationIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRegistrationIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLRegistrationIDList = class(TX2XMLNodeCollection, IXMLRegistrationIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRegistrationIDListEnumerator;

    function Get_RegistrationID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLSerialIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSerialIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLSerialIDList = class(TX2XMLNodeCollection, IXMLSerialIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSerialIDListEnumerator;

    function Get_SerialID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLTradeProductType = class(TX2XMLNode, IXMLTradeProductType)
  private
    FName: IXMLNameList;
    FDescription: IXMLDescriptionList;
    FProductGroupID: IXMLProductGroupIDList;
    FEndItemTypeCode: IXMLEndItemTypeCodeList;
    FEndItemName: IXMLEndItemNameList;
    FCustomerAssignedID: IXMLCustomerAssignedIDList;
    FBatchID: IXMLBatchIDList;
    FUseDescription: IXMLUseDescriptionList;
    FConciseDescription: IXMLConciseDescriptionList;
    FAdditionalDescription: IXMLAdditionalDescriptionList;
    FColourDescription: IXMLColourDescriptionList;
    FUnitTypeCode: IXMLUnitTypeCodeList;
    FDesignation: IXMLDesignationList;
    FUltimateCustomerAssignedExtensionID: IXMLUltimateCustomerAssignedExtensionIDList;
    FApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
    FApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    FDesignatedProductClassification: IXMLDesignatedProductClassificationList;
    FIndividualTradeProductInstance: IXMLIndividualTradeProductInstanceList;
    FCertificationEvidenceReferenceReferencedDocument: IXMLCertificationEvidenceReferenceReferencedDocumentList;
    FInspectionReferenceReferencedDocument: IXMLInspectionReferenceReferencedDocumentList;
    FLinearSpatialDimension: IXMLLinearSpatialDimensionList;
    FPresentationSpecifiedBinaryFile: IXMLPresentationSpecifiedBinaryFileList;
    FAdditionalReferenceReferencedDocument: IXMLAdditionalReferenceReferencedDocumentList;
    FIncludedReferencedProduct: IXMLIncludedReferencedProductList;
    FInformationNote: IXMLInformationNoteList;
    FBuyerSuppliedPartsReferenceReferencedDocument: IXMLBuyerSuppliedPartsReferenceReferencedDocumentList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasGlobalID: Boolean;
    function GetGlobalID: IXMLIDType;
    function GetHasSellerAssignedID: Boolean;
    function GetSellerAssignedID: IXMLIDType;
    function GetHasBuyerAssignedID: Boolean;
    function GetBuyerAssignedID: IXMLIDType;
    function GetHasManufacturerAssignedID: Boolean;
    function GetManufacturerAssignedID: IXMLIDType;
    function GetHasIndustryAssignedID: Boolean;
    function GetIndustryAssignedID: IXMLIDType;
    function GetHasModelID: Boolean;
    function GetModelID: IXMLIDType;
    function GetName: IXMLNameList;
    function GetHasTradeName: Boolean;
    function GetTradeName: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasNetWeightMeasure: Boolean;
    function GetNetWeightMeasure: IXMLMeasureType;
    function GetHasGrossWeightMeasure: Boolean;
    function GetGrossWeightMeasure: IXMLMeasureType;
    function GetHasStatusCode: Boolean;
    function GetStatusCode: IXMLCodeType;
    function GetProductGroupID: IXMLProductGroupIDList;
    function GetHasNetVolumeMeasure: Boolean;
    function GetNetVolumeMeasure: IXMLMeasureType;
    function GetHasGrossVolumeMeasure: Boolean;
    function GetGrossVolumeMeasure: IXMLMeasureType;
    function GetEndItemTypeCode: IXMLEndItemTypeCodeList;
    function GetEndItemName: IXMLEndItemNameList;
    function GetCustomerAssignedID: IXMLCustomerAssignedIDList;
    function GetBatchID: IXMLBatchIDList;
    function GetHasAreaDensityMeasure: Boolean;
    function GetAreaDensityMeasure: IXMLMeasureType;
    function GetUseDescription: IXMLUseDescriptionList;
    function GetConciseDescription: IXMLConciseDescriptionList;
    function GetAdditionalDescription: IXMLAdditionalDescriptionList;
    function GetHasBrandName: Boolean;
    function GetBrandName: IXMLTextType;
    function GetHasSubBrandName: Boolean;
    function GetSubBrandName: IXMLTextType;
    function GetHasDrainedNetWeightMeasure: Boolean;
    function GetDrainedNetWeightMeasure: IXMLMeasureType;
    function GetHasVariableMeasureIndicator: Boolean;
    function GetVariableMeasureIndicator: IXMLIndicatorType;
    function GetHasConfigurableIndicator: Boolean;
    function GetConfigurableIndicator: IXMLIndicatorType;
    function GetHasColourCode: Boolean;
    function GetColourCode: IXMLCodeType;
    function GetColourDescription: IXMLColourDescriptionList;
    function GetHasRecyclingTypeCode: Boolean;
    function GetRecyclingTypeCode: IXMLCodeType;
    function GetUnitTypeCode: IXMLUnitTypeCodeList;
    function GetHasContentUnitQuantity: Boolean;
    function GetContentUnitQuantity: IXMLQuantityType;
    function GetHasCommonName: Boolean;
    function GetCommonName: IXMLTextType;
    function GetHasModelName: Boolean;
    function GetModelName: IXMLTextType;
    function GetDesignation: IXMLDesignationList;
    function GetHasFormattedCancellationAnnouncedLaunchDateTime: Boolean;
    function GetFormattedCancellationAnnouncedLaunchDateTime: IXMLFormattedDateTimeType;
    function GetHasFormattedLatestProductDataChangeDateTime: Boolean;
    function GetFormattedLatestProductDataChangeDateTime: IXMLFormattedDateTimeType;
    function GetHasExportIndicator: Boolean;
    function GetExportIndicator: IXMLIndicatorType;
    function GetUltimateCustomerAssignedExtensionID: IXMLUltimateCustomerAssignedExtensionIDList;
    function GetHasSizeCode: Boolean;
    function GetSizeCode: IXMLCodeType;
    function GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
    function GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
    function GetDesignatedProductClassification: IXMLDesignatedProductClassificationList;
    function GetIndividualTradeProductInstance: IXMLIndividualTradeProductInstanceList;
    function GetCertificationEvidenceReferenceReferencedDocument: IXMLCertificationEvidenceReferenceReferencedDocumentList;
    function GetInspectionReferenceReferencedDocument: IXMLInspectionReferenceReferencedDocumentList;
    function GetHasOriginTradeCountry: Boolean;
    function GetOriginTradeCountry: IXMLTradeCountryType;
    function GetLinearSpatialDimension: IXMLLinearSpatialDimensionList;
    function GetHasMinimumLinearSpatialDimension: Boolean;
    function GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasMaximumLinearSpatialDimension: Boolean;
    function GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
    function GetHasManufacturerTradeParty: Boolean;
    function GetManufacturerTradeParty: IXMLTradePartyType;
    function GetPresentationSpecifiedBinaryFile: IXMLPresentationSpecifiedBinaryFileList;
    function GetHasMSDSReferenceReferencedDocument: Boolean;
    function GetMSDSReferenceReferencedDocument: IXMLReferencedDocumentType;
    function GetAdditionalReferenceReferencedDocument: IXMLAdditionalReferenceReferencedDocumentList;
    function GetHasLegalRightsOwnerTradeParty: Boolean;
    function GetLegalRightsOwnerTradeParty: IXMLTradePartyType;
    function GetHasBrandOwnerTradeParty: Boolean;
    function GetBrandOwnerTradeParty: IXMLTradePartyType;
    function GetIncludedReferencedProduct: IXMLIncludedReferencedProductList;
    function GetInformationNote: IXMLInformationNoteList;
    function GetBuyerSuppliedPartsReferenceReferencedDocument: IXMLBuyerSuppliedPartsReferenceReferencedDocumentList;
  end;

  TXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLBuyerSuppliedPartsReferenceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLBuyerSuppliedPartsReferenceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator;

    function Get_BuyerSuppliedPartsReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLInformationNoteListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInformationNoteListEnumerator)
  protected
    function GetCurrent: IXMLNoteType;
  end;


  TXMLInformationNoteList = class(TX2XMLNodeCollection, IXMLInformationNoteList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInformationNoteListEnumerator;

    function Get_InformationNote(Index: Integer): IXMLNoteType;
    function Add: IXMLNoteType;
    function Insert(Index: Integer): IXMLNoteType;
  end;

  TXMLIncludedReferencedProductListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludedReferencedProductListEnumerator)
  protected
    function GetCurrent: IXMLReferencedProductType;
  end;


  TXMLIncludedReferencedProductList = class(TX2XMLNodeCollection, IXMLIncludedReferencedProductList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludedReferencedProductListEnumerator;

    function Get_IncludedReferencedProduct(Index: Integer): IXMLReferencedProductType;
    function Add: IXMLReferencedProductType;
    function Insert(Index: Integer): IXMLReferencedProductType;
  end;

  TXMLAdditionalReferenceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAdditionalReferenceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLAdditionalReferenceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLAdditionalReferenceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAdditionalReferenceReferencedDocumentListEnumerator;

    function Get_AdditionalReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLPresentationSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPresentationSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLPresentationSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLPresentationSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPresentationSpecifiedBinaryFileListEnumerator;

    function Get_PresentationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLLinearSpatialDimensionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLinearSpatialDimensionListEnumerator)
  protected
    function GetCurrent: IXMLSpatialDimensionType;
  end;


  TXMLLinearSpatialDimensionList = class(TX2XMLNodeCollection, IXMLLinearSpatialDimensionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLinearSpatialDimensionListEnumerator;

    function Get_LinearSpatialDimension(Index: Integer): IXMLSpatialDimensionType;
    function Add: IXMLSpatialDimensionType;
    function Insert(Index: Integer): IXMLSpatialDimensionType;
  end;

  TXMLInspectionReferenceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInspectionReferenceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLInspectionReferenceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLInspectionReferenceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInspectionReferenceReferencedDocumentListEnumerator;

    function Get_InspectionReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator)
  protected
    function GetCurrent: IXMLReferencedDocumentType;
  end;


  TXMLCertificationEvidenceReferenceReferencedDocumentList = class(TX2XMLNodeCollection, IXMLCertificationEvidenceReferenceReferencedDocumentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator;

    function Get_CertificationEvidenceReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
    function Add: IXMLReferencedDocumentType;
    function Insert(Index: Integer): IXMLReferencedDocumentType;
  end;

  TXMLIndividualTradeProductInstanceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIndividualTradeProductInstanceListEnumerator)
  protected
    function GetCurrent: IXMLTradeProductInstanceType;
  end;


  TXMLIndividualTradeProductInstanceList = class(TX2XMLNodeCollection, IXMLIndividualTradeProductInstanceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIndividualTradeProductInstanceListEnumerator;

    function Get_IndividualTradeProductInstance(Index: Integer): IXMLTradeProductInstanceType;
    function Add: IXMLTradeProductInstanceType;
    function Insert(Index: Integer): IXMLTradeProductInstanceType;
  end;

  TXMLDesignatedProductClassificationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDesignatedProductClassificationListEnumerator)
  protected
    function GetCurrent: IXMLProductClassificationType;
  end;


  TXMLDesignatedProductClassificationList = class(TX2XMLNodeCollection, IXMLDesignatedProductClassificationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDesignatedProductClassificationListEnumerator;

    function Get_DesignatedProductClassification(Index: Integer): IXMLProductClassificationType;
    function Add: IXMLProductClassificationType;
    function Insert(Index: Integer): IXMLProductClassificationType;
  end;

  TXMLApplicableMaterialGoodsCharacteristicListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableMaterialGoodsCharacteristicListEnumerator)
  protected
    function GetCurrent: IXMLMaterialGoodsCharacteristicType;
  end;


  TXMLApplicableMaterialGoodsCharacteristicList = class(TX2XMLNodeCollection, IXMLApplicableMaterialGoodsCharacteristicList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableMaterialGoodsCharacteristicListEnumerator;

    function Get_ApplicableMaterialGoodsCharacteristic(Index: Integer): IXMLMaterialGoodsCharacteristicType;
    function Add: IXMLMaterialGoodsCharacteristicType;
    function Insert(Index: Integer): IXMLMaterialGoodsCharacteristicType;
  end;

  TXMLApplicableProductCharacteristicListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLApplicableProductCharacteristicListEnumerator)
  protected
    function GetCurrent: IXMLProductCharacteristicType;
  end;


  TXMLApplicableProductCharacteristicList = class(TX2XMLNodeCollection, IXMLApplicableProductCharacteristicList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLApplicableProductCharacteristicListEnumerator;

    function Get_ApplicableProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
    function Add: IXMLProductCharacteristicType;
    function Insert(Index: Integer): IXMLProductCharacteristicType;
  end;

  TXMLUltimateCustomerAssignedExtensionIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUltimateCustomerAssignedExtensionIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLUltimateCustomerAssignedExtensionIDList = class(TX2XMLNodeCollection, IXMLUltimateCustomerAssignedExtensionIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUltimateCustomerAssignedExtensionIDListEnumerator;

    function Get_UltimateCustomerAssignedExtensionID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLDesignationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDesignationListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLDesignationList = class(TX2XMLNodeCollection, IXMLDesignationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDesignationListEnumerator;

    function Get_Designation(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLUnitTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUnitTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLUnitTypeCodeList = class(TX2XMLNodeCollection, IXMLUnitTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUnitTypeCodeListEnumerator;

    function Get_UnitTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLColourDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLColourDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLColourDescriptionList = class(TX2XMLNodeCollection, IXMLColourDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLColourDescriptionListEnumerator;

    function Get_ColourDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLAdditionalDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAdditionalDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLAdditionalDescriptionList = class(TX2XMLNodeCollection, IXMLAdditionalDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAdditionalDescriptionListEnumerator;

    function Get_AdditionalDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLConciseDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLConciseDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLConciseDescriptionList = class(TX2XMLNodeCollection, IXMLConciseDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLConciseDescriptionListEnumerator;

    function Get_ConciseDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLUseDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUseDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLUseDescriptionList = class(TX2XMLNodeCollection, IXMLUseDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUseDescriptionListEnumerator;

    function Get_UseDescription(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLBatchIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBatchIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLBatchIDList = class(TX2XMLNodeCollection, IXMLBatchIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBatchIDListEnumerator;

    function Get_BatchID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLCustomerAssignedIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCustomerAssignedIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLCustomerAssignedIDList = class(TX2XMLNodeCollection, IXMLCustomerAssignedIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCustomerAssignedIDListEnumerator;

    function Get_CustomerAssignedID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLEndItemNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLEndItemNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLEndItemNameList = class(TX2XMLNodeCollection, IXMLEndItemNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLEndItemNameListEnumerator;

    function Get_EndItemName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLEndItemTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLEndItemTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLEndItemTypeCodeList = class(TX2XMLNodeCollection, IXMLEndItemTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLEndItemTypeCodeListEnumerator;

    function Get_EndItemTypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLProductGroupIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLProductGroupIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLProductGroupIDList = class(TX2XMLNodeCollection, IXMLProductGroupIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLProductGroupIDListEnumerator;

    function Get_ProductGroupID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLNameList = class(TX2XMLNodeCollection, IXMLNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNameListEnumerator;

    function Get_Name(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLTradeSettlementFinancialCardType = class(TX2XMLNode, IXMLTradeSettlementFinancialCardType)
  private
    FCreditLimitAmount: IXMLCreditLimitAmountList;
    FCreditAvailableAmount: IXMLCreditAvailableAmountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasMicrochipIndicator: Boolean;
    function GetMicrochipIndicator: IXMLIndicatorType;
    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetHasCardholderName: Boolean;
    function GetCardholderName: IXMLTextType;
    function GetHasExpiryDate: Boolean;
    function GetExpiryDate: IXMLDateType;
    function GetHasVerificationNumeric: Boolean;
    function GetVerificationNumeric: IXMLNumericType;
    function GetHasValidFromDateTime: Boolean;
    function GetValidFromDateTime: IXMLDateOnlyFormattedDateTimeType;
    function GetCreditLimitAmount: IXMLCreditLimitAmountList;
    function GetCreditAvailableAmount: IXMLCreditAvailableAmountList;
    function GetHasInterestRatePercent: Boolean;
    function GetInterestRatePercent: IXMLPercentType;
    function GetHasIssuingCompanyName: Boolean;
    function GetIssuingCompanyName: IXMLTextType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
  end;

  TXMLCreditAvailableAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditAvailableAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLCreditAvailableAmountList = class(TX2XMLNodeCollection, IXMLCreditAvailableAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditAvailableAmountListEnumerator;

    function Get_CreditAvailableAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLCreditLimitAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreditLimitAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLCreditLimitAmountList = class(TX2XMLNodeCollection, IXMLCreditLimitAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreditLimitAmountListEnumerator;

    function Get_CreditLimitAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTradeSettlementHeaderMonetarySummationType = class(TX2XMLNode, IXMLTradeSettlementHeaderMonetarySummationType)
  private
    FLineTotalAmount: IXMLLineTotalAmountList;
    FChargeTotalAmount: IXMLChargeTotalAmountList;
    FAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    FTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    FTaxTotalAmount: IXMLTaxTotalAmountList;
    FRoundingAmount: IXMLRoundingAmountList;
    FGrandTotalAmount: IXMLGrandTotalAmountList;
    FInformationAmount: IXMLInformationAmountList;
    FTotalPrepaidAmount: IXMLTotalPrepaidAmountList;
    FTotalDiscountAmount: IXMLTotalDiscountAmountList;
    FTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    FDuePayableAmount: IXMLDuePayableAmountList;
    FRetailValueExcludingTaxInformationAmount: IXMLRetailValueExcludingTaxInformationAmountList;
    FTotalDepositFeeInformationAmount: IXMLTotalDepositFeeInformationAmountList;
    FProductValueExcludingTobaccoTaxInformationAmount: IXMLProductValueExcludingTobaccoTaxInformationAmountList;
    FTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    FGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    FNetLineTotalAmount: IXMLNetLineTotalAmountList;
    FNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    FInsuranceChargeTotalAmount: IXMLInsuranceChargeTotalAmountList;
    FIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetLineTotalAmount: IXMLLineTotalAmountList;
    function GetChargeTotalAmount: IXMLChargeTotalAmountList;
    function GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    function GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    function GetTaxTotalAmount: IXMLTaxTotalAmountList;
    function GetRoundingAmount: IXMLRoundingAmountList;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetTotalPrepaidAmount: IXMLTotalPrepaidAmountList;
    function GetTotalDiscountAmount: IXMLTotalDiscountAmountList;
    function GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    function GetDuePayableAmount: IXMLDuePayableAmountList;
    function GetRetailValueExcludingTaxInformationAmount: IXMLRetailValueExcludingTaxInformationAmountList;
    function GetTotalDepositFeeInformationAmount: IXMLTotalDepositFeeInformationAmountList;
    function GetProductValueExcludingTobaccoTaxInformationAmount: IXMLProductValueExcludingTobaccoTaxInformationAmountList;
    function GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    function GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    function GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
    function GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    function GetInsuranceChargeTotalAmount: IXMLInsuranceChargeTotalAmountList;
    function GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
  end;

  TXMLInsuranceChargeTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInsuranceChargeTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLInsuranceChargeTotalAmountList = class(TX2XMLNodeCollection, IXMLInsuranceChargeTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInsuranceChargeTotalAmountListEnumerator;

    function Get_InsuranceChargeTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLProductValueExcludingTobaccoTaxInformationAmountList = class(TX2XMLNodeCollection, IXMLProductValueExcludingTobaccoTaxInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator;

    function Get_ProductValueExcludingTobaccoTaxInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTotalDepositFeeInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalDepositFeeInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTotalDepositFeeInformationAmountList = class(TX2XMLNodeCollection, IXMLTotalDepositFeeInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalDepositFeeInformationAmountListEnumerator;

    function Get_TotalDepositFeeInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLRetailValueExcludingTaxInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRetailValueExcludingTaxInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLRetailValueExcludingTaxInformationAmountList = class(TX2XMLNodeCollection, IXMLRetailValueExcludingTaxInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRetailValueExcludingTaxInformationAmountListEnumerator;

    function Get_RetailValueExcludingTaxInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLDuePayableAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDuePayableAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLDuePayableAmountList = class(TX2XMLNodeCollection, IXMLDuePayableAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDuePayableAmountListEnumerator;

    function Get_DuePayableAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTotalDiscountAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalDiscountAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTotalDiscountAmountList = class(TX2XMLNodeCollection, IXMLTotalDiscountAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalDiscountAmountListEnumerator;

    function Get_TotalDiscountAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTotalPrepaidAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalPrepaidAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTotalPrepaidAmountList = class(TX2XMLNodeCollection, IXMLTotalPrepaidAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalPrepaidAmountListEnumerator;

    function Get_TotalPrepaidAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLRoundingAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRoundingAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLRoundingAmountList = class(TX2XMLNodeCollection, IXMLRoundingAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRoundingAmountListEnumerator;

    function Get_RoundingAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTradeSettlementLineMonetarySummationType = class(TX2XMLNode, IXMLTradeSettlementLineMonetarySummationType)
  private
    FLineTotalAmount: IXMLLineTotalAmountList;
    FChargeTotalAmount: IXMLChargeTotalAmountList;
    FAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    FTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    FTaxTotalAmount: IXMLTaxTotalAmountList;
    FGrandTotalAmount: IXMLGrandTotalAmountList;
    FInformationAmount: IXMLInformationAmountList;
    FTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    FTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    FGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    FNetLineTotalAmount: IXMLNetLineTotalAmountList;
    FNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    FProductWeightLossInformationAmount: IXMLProductWeightLossInformationAmountList;
    FIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetLineTotalAmount: IXMLLineTotalAmountList;
    function GetChargeTotalAmount: IXMLChargeTotalAmountList;
    function GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
    function GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
    function GetTaxTotalAmount: IXMLTaxTotalAmountList;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
    function GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
    function GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
    function GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
    function GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
    function GetProductWeightLossInformationAmount: IXMLProductWeightLossInformationAmountList;
    function GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
  end;

  TXMLIncludingTaxesLineTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIncludingTaxesLineTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLIncludingTaxesLineTotalAmountList = class(TX2XMLNodeCollection, IXMLIncludingTaxesLineTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIncludingTaxesLineTotalAmountListEnumerator;

    function Get_IncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLProductWeightLossInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLProductWeightLossInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLProductWeightLossInformationAmountList = class(TX2XMLNodeCollection, IXMLProductWeightLossInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLProductWeightLossInformationAmountListEnumerator;

    function Get_ProductWeightLossInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLNetIncludingTaxesLineTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetIncludingTaxesLineTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLNetIncludingTaxesLineTotalAmountList = class(TX2XMLNodeCollection, IXMLNetIncludingTaxesLineTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetIncludingTaxesLineTotalAmountListEnumerator;

    function Get_NetIncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLNetLineTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLNetLineTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLNetLineTotalAmountList = class(TX2XMLNodeCollection, IXMLNetLineTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLNetLineTotalAmountListEnumerator;

    function Get_NetLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLGrossLineTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGrossLineTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLGrossLineTotalAmountList = class(TX2XMLNodeCollection, IXMLGrossLineTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGrossLineTotalAmountListEnumerator;

    function Get_GrossLineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTotalRetailValueInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalRetailValueInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTotalRetailValueInformationAmountList = class(TX2XMLNodeCollection, IXMLTotalRetailValueInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalRetailValueInformationAmountListEnumerator;

    function Get_TotalRetailValueInformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTotalAllowanceChargeAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalAllowanceChargeAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTotalAllowanceChargeAmountList = class(TX2XMLNodeCollection, IXMLTotalAllowanceChargeAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalAllowanceChargeAmountListEnumerator;

    function Get_TotalAllowanceChargeAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTaxTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTaxTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTaxTotalAmountList = class(TX2XMLNodeCollection, IXMLTaxTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTaxTotalAmountListEnumerator;

    function Get_TaxTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTaxBasisTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTaxBasisTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLTaxBasisTotalAmountList = class(TX2XMLNodeCollection, IXMLTaxBasisTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTaxBasisTotalAmountListEnumerator;

    function Get_TaxBasisTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLAllowanceTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAllowanceTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLAllowanceTotalAmountList = class(TX2XMLNodeCollection, IXMLAllowanceTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAllowanceTotalAmountListEnumerator;

    function Get_AllowanceTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLChargeTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLChargeTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLChargeTotalAmountList = class(TX2XMLNodeCollection, IXMLChargeTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLChargeTotalAmountListEnumerator;

    function Get_ChargeTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLLineTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLineTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLLineTotalAmountList = class(TX2XMLNodeCollection, IXMLLineTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLineTotalAmountListEnumerator;

    function Get_LineTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTradeSettlementPaymentMeansType = class(TX2XMLNode, IXMLTradeSettlementPaymentMeansType)
  private
    FInformation: IXMLInformationList;
    FID: IXMLIDList;
    FPayeePartyCreditorFinancialAccount: IXMLPayeePartyCreditorFinancialAccountList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasPaymentChannelCode: Boolean;
    function GetPaymentChannelCode: IXMLPaymentMeansChannelCodeType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLPaymentMeansCodeType;
    function GetHasGuaranteeMethodCode: Boolean;
    function GetGuaranteeMethodCode: IXMLPaymentGuaranteeMeansCodeType;
    function GetHasPaymentMethodCode: Boolean;
    function GetPaymentMethodCode: IXMLCodeType;
    function GetInformation: IXMLInformationList;
    function GetID: IXMLIDList;
    function GetHasApplicableTradeSettlementFinancialCard: Boolean;
    function GetApplicableTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;
    function GetHasPayerPartyDebtorFinancialAccount: Boolean;
    function GetPayerPartyDebtorFinancialAccount: IXMLDebtorFinancialAccountType;
    function GetPayeePartyCreditorFinancialAccount: IXMLPayeePartyCreditorFinancialAccountList;
    function GetHasPayerSpecifiedDebtorFinancialInstitution: Boolean;
    function GetPayerSpecifiedDebtorFinancialInstitution: IXMLDebtorFinancialInstitutionType;
    function GetHasPayeeSpecifiedCreditorFinancialInstitution: Boolean;
    function GetPayeeSpecifiedCreditorFinancialInstitution: IXMLCreditorFinancialInstitutionType;
  end;

  TXMLPayeePartyCreditorFinancialAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPayeePartyCreditorFinancialAccountListEnumerator)
  protected
    function GetCurrent: IXMLCreditorFinancialAccountType;
  end;


  TXMLPayeePartyCreditorFinancialAccountList = class(TX2XMLNodeCollection, IXMLPayeePartyCreditorFinancialAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPayeePartyCreditorFinancialAccountListEnumerator;

    function Get_PayeePartyCreditorFinancialAccount(Index: Integer): IXMLCreditorFinancialAccountType;
    function Add: IXMLCreditorFinancialAccountType;
    function Insert(Index: Integer): IXMLCreditorFinancialAccountType;
  end;

  TXMLIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLIDList = class(TX2XMLNodeCollection, IXMLIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLIDListEnumerator;

    function Get_ID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLInformationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInformationListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLInformationList = class(TX2XMLNodeCollection, IXMLInformationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInformationListEnumerator;

    function Get_Information(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLTradeTaxType = class(TX2XMLNode, IXMLTradeTaxType)
  private
    FCalculatedAmount: IXMLCalculatedAmountList;
    FBasisAmount: IXMLBasisAmountList;
    FUnitBasisAmount: IXMLUnitBasisAmountList;
    FLineTotalBasisAmount: IXMLLineTotalBasisAmountList;
    FAllowanceChargeBasisAmount: IXMLAllowanceChargeBasisAmountList;
    FJurisdiction: IXMLJurisdictionList;
    FInformationAmount: IXMLInformationAmountList;
    FCategoryName: IXMLCategoryNameList;
    FGrandTotalAmount: IXMLGrandTotalAmountList;
    FSpecifiedTradeAccountingAccount: IXMLSpecifiedTradeAccountingAccountList;
    FPlaceApplicableTradeLocation: IXMLPlaceApplicableTradeLocationList;
  public
    procedure AfterConstruction; override;
  protected
    function GetCalculatedAmount: IXMLCalculatedAmountList;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLTaxTypeCodeType;
    function GetHasExemptionReason: Boolean;
    function GetExemptionReason: IXMLTextType;
    function GetHasCalculatedRate: Boolean;
    function GetCalculatedRate: IXMLRateType;
    function GetHasCalculationSequenceNumeric: Boolean;
    function GetCalculationSequenceNumeric: IXMLNumericType;
    function GetHasBasisQuantity: Boolean;
    function GetBasisQuantity: IXMLQuantityType;
    function GetBasisAmount: IXMLBasisAmountList;
    function GetUnitBasisAmount: IXMLUnitBasisAmountList;
    function GetLineTotalBasisAmount: IXMLLineTotalBasisAmountList;
    function GetAllowanceChargeBasisAmount: IXMLAllowanceChargeBasisAmountList;
    function GetHasCategoryCode: Boolean;
    function GetCategoryCode: IXMLTaxCategoryCodeType;
    function GetHasCurrencyCode: Boolean;
    function GetCurrencyCode: IXMLCurrencyCodeType;
    function GetJurisdiction: IXMLJurisdictionList;
    function GetHasCustomsDutyIndicator: Boolean;
    function GetCustomsDutyIndicator: IXMLIndicatorType;
    function GetHasExemptionReasonCode: Boolean;
    function GetExemptionReasonCode: IXMLCodeType;
    function GetHasTaxBasisAllowanceRate: Boolean;
    function GetTaxBasisAllowanceRate: IXMLRateType;
    function GetHasTaxPointDate: Boolean;
    function GetTaxPointDate: IXMLDateType;
    function GetHas_Type: Boolean;
    function Get_Type: IXMLTextType;
    function GetInformationAmount: IXMLInformationAmountList;
    function GetCategoryName: IXMLCategoryNameList;
    function GetHasDueDateTypeCode: Boolean;
    function GetDueDateTypeCode: IXMLTimeReferenceCodeType;
    function GetHasRateApplicablePercent: Boolean;
    function GetRateApplicablePercent: IXMLPercentType;
    function GetGrandTotalAmount: IXMLGrandTotalAmountList;
    function GetHasCalculationMethodCode: Boolean;
    function GetCalculationMethodCode: IXMLCodeType;
    function GetSpecifiedTradeAccountingAccount: IXMLSpecifiedTradeAccountingAccountList;
    function GetHasServiceSupplyTradeCountry: Boolean;
    function GetServiceSupplyTradeCountry: IXMLTradeCountryType;
    function GetHasBuyerRepayableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerRepayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasSellerPayableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetSellerPayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasSellerRefundableTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetSellerRefundableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasBuyerDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetHasBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
    function GetBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
    function GetPlaceApplicableTradeLocation: IXMLPlaceApplicableTradeLocationList;
  end;

  TXMLPlaceApplicableTradeLocationListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPlaceApplicableTradeLocationListEnumerator)
  protected
    function GetCurrent: IXMLTradeLocationType;
  end;


  TXMLPlaceApplicableTradeLocationList = class(TX2XMLNodeCollection, IXMLPlaceApplicableTradeLocationList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPlaceApplicableTradeLocationListEnumerator;

    function Get_PlaceApplicableTradeLocation(Index: Integer): IXMLTradeLocationType;
    function Add: IXMLTradeLocationType;
    function Insert(Index: Integer): IXMLTradeLocationType;
  end;

  TXMLSpecifiedTradeAccountingAccountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLSpecifiedTradeAccountingAccountListEnumerator)
  protected
    function GetCurrent: IXMLTradeAccountingAccountType;
  end;


  TXMLSpecifiedTradeAccountingAccountList = class(TX2XMLNodeCollection, IXMLSpecifiedTradeAccountingAccountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLSpecifiedTradeAccountingAccountListEnumerator;

    function Get_SpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
    function Add: IXMLTradeAccountingAccountType;
    function Insert(Index: Integer): IXMLTradeAccountingAccountType;
  end;

  TXMLGrandTotalAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLGrandTotalAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLGrandTotalAmountList = class(TX2XMLNodeCollection, IXMLGrandTotalAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLGrandTotalAmountListEnumerator;

    function Get_GrandTotalAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLCategoryNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCategoryNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCategoryNameList = class(TX2XMLNodeCollection, IXMLCategoryNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCategoryNameListEnumerator;

    function Get_CategoryName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLInformationAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLInformationAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLInformationAmountList = class(TX2XMLNodeCollection, IXMLInformationAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLInformationAmountListEnumerator;

    function Get_InformationAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLJurisdictionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLJurisdictionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLJurisdictionList = class(TX2XMLNodeCollection, IXMLJurisdictionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLJurisdictionListEnumerator;

    function Get_Jurisdiction(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLAllowanceChargeBasisAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAllowanceChargeBasisAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLAllowanceChargeBasisAmountList = class(TX2XMLNodeCollection, IXMLAllowanceChargeBasisAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAllowanceChargeBasisAmountListEnumerator;

    function Get_AllowanceChargeBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLLineTotalBasisAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLLineTotalBasisAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLLineTotalBasisAmountList = class(TX2XMLNodeCollection, IXMLLineTotalBasisAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLLineTotalBasisAmountListEnumerator;

    function Get_LineTotalBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLUnitBasisAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLUnitBasisAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLUnitBasisAmountList = class(TX2XMLNodeCollection, IXMLUnitBasisAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLUnitBasisAmountListEnumerator;

    function Get_UnitBasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLBasisAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBasisAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLBasisAmountList = class(TX2XMLNodeCollection, IXMLBasisAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBasisAmountListEnumerator;

    function Get_BasisAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLCalculatedAmountListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCalculatedAmountListEnumerator)
  protected
    function GetCurrent: IXMLAmountType;
  end;


  TXMLCalculatedAmountList = class(TX2XMLNodeCollection, IXMLCalculatedAmountList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCalculatedAmountListEnumerator;

    function Get_CalculatedAmount(Index: Integer): IXMLAmountType;
    function Add: IXMLAmountType;
    function Insert(Index: Integer): IXMLAmountType;
  end;

  TXMLTransportCargoInsuranceType = class(TX2XMLNode, IXMLTransportCargoInsuranceType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasCoverageCode: Boolean;
    function GetCoverageCode: IXMLCodeType;
    function GetHasCoverageDescription: Boolean;
    function GetCoverageDescription: IXMLTextType;
    function GetHasContractGeneralConditions: Boolean;
    function GetContractGeneralConditions: IXMLTextType;
    function GetHasCoverageTradeParty: Boolean;
    function GetCoverageTradeParty: IXMLTradePartyType;
  end;

  TXMLTransportCargoTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTransportCargoTypeEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTransportCargoType = class(TX2XMLNodeCollection, IXMLTransportCargoType)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTransportCargoTypeEnumerator;

    function Get_Identification(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;

    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCargoCategoryCodeType;
    function GetHasOperationalCategoryCode: Boolean;
    function GetOperationalCategoryCode: IXMLCargoOperationalCategoryCodeType;
    function GetHasStatisticalClassificationCode: Boolean;
    function GetStatisticalClassificationCode: IXMLCargoCommodityCategoryCodeType;
  end;

  TXMLTransportDangerousGoodsType = class(TX2XMLNode, IXMLTransportDangerousGoodsType)
  private
    FRegulationName: IXMLRegulationNameList;
    FTechnicalName: IXMLTechnicalNameList;
  public
    procedure AfterConstruction; override;
  protected
    function GetHasUNDGIdentificationCode: Boolean;
    function GetUNDGIdentificationCode: IXMLCodeType;
    function GetHasRegulationCode: Boolean;
    function GetRegulationCode: IXMLDangerousGoodsRegulationCodeType;
    function GetRegulationName: IXMLRegulationNameList;
    function GetTechnicalName: IXMLTechnicalNameList;
    function GetHasEMSID: Boolean;
    function GetEMSID: IXMLIDType;
    function GetHasPackagingDangerLevelCode: Boolean;
    function GetPackagingDangerLevelCode: IXMLDangerousGoodsPackagingLevelCodeType;
    function GetHasHazardClassificationID: Boolean;
    function GetHazardClassificationID: IXMLIDType;
    function GetHasAdditionalHazardClassificationID: Boolean;
    function GetAdditionalHazardClassificationID: IXMLIDType;
    function GetHasProperShippingName: Boolean;
    function GetProperShippingName: IXMLTextType;
  end;

  TXMLTechnicalNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTechnicalNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLTechnicalNameList = class(TX2XMLNodeCollection, IXMLTechnicalNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTechnicalNameListEnumerator;

    function Get_TechnicalName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLRegulationNameListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRegulationNameListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLRegulationNameList = class(TX2XMLNodeCollection, IXMLRegulationNameList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRegulationNameListEnumerator;

    function Get_RegulationName(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLUniversalCommunicationType = class(TX2XMLNode, IXMLUniversalCommunicationType)
  public
    procedure AfterConstruction; override;
  protected
    function GetHasURIID: Boolean;
    function GetURIID: IXMLIDType;
    function GetHasChannelCode: Boolean;
    function GetChannelCode: IXMLCommunicationChannelCodeType;
    function GetHasCompleteNumber: Boolean;
    function GetCompleteNumber: IXMLTextType;
  end;

  TXMLValuationBreakdownStatementType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLValuationBreakdownStatementType)
  private
    FDescription: IXMLDescriptionList;
    FMeasurementMethodID: IXMLMeasurementMethodIDList;
    FComment: IXMLCommentList;
    FTypeCode: IXMLTypeCodeList;
    FRequestedActionCode: IXMLRequestedActionCodeList;
    FItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    FItemBasicWorkItem: IXMLItemBasicWorkItemList;
    FTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    FChangedRecordedStatus: IXMLChangedRecordedStatusList;
    FCreationSpecifiedBinaryFile: IXMLCreationSpecifiedBinaryFileList;
    FReaderSpecifiedBinaryFile: IXMLReaderSpecifiedBinaryFileList;
    FReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetName: IXMLTextType;
    function GetDescription: IXMLDescriptionList;
    function GetMeasurementMethodID: IXMLMeasurementMethodIDList;
    function GetCreationDateTime: IXMLDateTimeType;
    function GetDefaultCurrencyCode: IXMLCurrencyCodeType;
    function GetDefaultLanguageCode: IXMLCodeType;
    function GetComment: IXMLCommentList;
    function GetTypeCode: IXMLTypeCodeList;
    function GetRequestedActionCode: IXMLRequestedActionCodeList;
    function GetHasPriceListID: Boolean;
    function GetPriceListID: IXMLIDType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
    function GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
    function GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
    function GetCreationSpecifiedBinaryFile: IXMLCreationSpecifiedBinaryFileList;
    function GetReaderSpecifiedBinaryFile: IXMLReaderSpecifiedBinaryFileList;
    function GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
  end;

  TXMLReferencedSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReferencedSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLReferencedSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLReferencedSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReferencedSpecifiedBinaryFileListEnumerator;

    function Get_ReferencedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLReaderSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLReaderSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLReaderSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLReaderSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLReaderSpecifiedBinaryFileListEnumerator;

    function Get_ReaderSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLCreationSpecifiedBinaryFileListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCreationSpecifiedBinaryFileListEnumerator)
  protected
    function GetCurrent: IXMLSpecifiedBinaryFileType;
  end;


  TXMLCreationSpecifiedBinaryFileList = class(TX2XMLNodeCollection, IXMLCreationSpecifiedBinaryFileList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCreationSpecifiedBinaryFileListEnumerator;

    function Get_CreationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
    function Add: IXMLSpecifiedBinaryFileType;
    function Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
  end;

  TXMLTotalCalculatedPriceListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTotalCalculatedPriceListEnumerator)
  protected
    function GetCurrent: IXMLCalculatedPriceType;
  end;


  TXMLTotalCalculatedPriceList = class(TX2XMLNodeCollection, IXMLTotalCalculatedPriceList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTotalCalculatedPriceListEnumerator;

    function Get_TotalCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
    function Add: IXMLCalculatedPriceType;
    function Insert(Index: Integer): IXMLCalculatedPriceType;
  end;

  TXMLItemBasicWorkItemListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLItemBasicWorkItemListEnumerator)
  protected
    function GetCurrent: IXMLBasicWorkItemType;
  end;


  TXMLItemBasicWorkItemList = class(TX2XMLNodeCollection, IXMLItemBasicWorkItemList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLItemBasicWorkItemListEnumerator;

    function Get_ItemBasicWorkItem(Index: Integer): IXMLBasicWorkItemType;
    function Add: IXMLBasicWorkItemType;
    function Insert(Index: Integer): IXMLBasicWorkItemType;
  end;

  TXMLItemGroupedWorkItemListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLItemGroupedWorkItemListEnumerator)
  protected
    function GetCurrent: IXMLGroupedWorkItemType;
  end;


  TXMLItemGroupedWorkItemList = class(TX2XMLNodeCollection, IXMLItemGroupedWorkItemList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLItemGroupedWorkItemListEnumerator;

    function Get_ItemGroupedWorkItem(Index: Integer): IXMLGroupedWorkItemType;
    function Add: IXMLGroupedWorkItemType;
    function Insert(Index: Integer): IXMLGroupedWorkItemType;
  end;

  TXMLRequestedActionCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRequestedActionCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLRequestedActionCodeList = class(TX2XMLNodeCollection, IXMLRequestedActionCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRequestedActionCodeListEnumerator;

    function Get_RequestedActionCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLTypeCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLTypeCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLTypeCodeList = class(TX2XMLNodeCollection, IXMLTypeCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLTypeCodeListEnumerator;

    function Get_TypeCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLCommentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLCommentListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLCommentList = class(TX2XMLNodeCollection, IXMLCommentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLCommentListEnumerator;

    function Get_Comment(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLMeasurementMethodIDListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLMeasurementMethodIDListEnumerator)
  protected
    function GetCurrent: IXMLIDType;
  end;


  TXMLMeasurementMethodIDList = class(TX2XMLNodeCollection, IXMLMeasurementMethodIDList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLMeasurementMethodIDListEnumerator;

    function Get_MeasurementMethodID(Index: Integer): IXMLIDType;
    function Add: IXMLIDType;
    function Insert(Index: Integer): IXMLIDType;
  end;

  TXMLDescriptionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLDescriptionListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLDescriptionList = class(TX2XMLNodeCollection, IXMLDescriptionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLDescriptionListEnumerator;

    function Get_Description(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLWorkItemComplexDescriptionType = class(TX2XMLNode, IXMLWorkItemComplexDescriptionType)
  private
    F_Abstract: IXML_AbstractList;
    FContent: IXMLContentList;
    FRequestingSpecificationQuery: IXMLRequestingSpecificationQueryList;
    FRespondingSpecificationResponse: IXMLRespondingSpecificationResponseList;
  public
    procedure AfterConstruction; override;
  protected
    function Get_Abstract: IXML_AbstractList;
    function GetContent: IXMLContentList;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetRequestingSpecificationQuery: IXMLRequestingSpecificationQueryList;
    function GetRespondingSpecificationResponse: IXMLRespondingSpecificationResponseList;
    function GetHasSubsetWorkItemComplexDescription: Boolean;
    function GetSubsetWorkItemComplexDescription: IXMLWorkItemComplexDescriptionType;
  end;

  TXMLRespondingSpecificationResponseListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRespondingSpecificationResponseListEnumerator)
  protected
    function GetCurrent: IXMLSpecificationResponseType;
  end;


  TXMLRespondingSpecificationResponseList = class(TX2XMLNodeCollection, IXMLRespondingSpecificationResponseList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRespondingSpecificationResponseListEnumerator;

    function Get_RespondingSpecificationResponse(Index: Integer): IXMLSpecificationResponseType;
    function Add: IXMLSpecificationResponseType;
    function Insert(Index: Integer): IXMLSpecificationResponseType;
  end;

  TXMLRequestingSpecificationQueryListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLRequestingSpecificationQueryListEnumerator)
  protected
    function GetCurrent: IXMLSpecificationQueryType;
  end;


  TXMLRequestingSpecificationQueryList = class(TX2XMLNodeCollection, IXMLRequestingSpecificationQueryList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLRequestingSpecificationQueryListEnumerator;

    function Get_RequestingSpecificationQuery(Index: Integer): IXMLSpecificationQueryType;
    function Add: IXMLSpecificationQueryType;
    function Insert(Index: Integer): IXMLSpecificationQueryType;
  end;

  TXMLContentListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLContentListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXMLContentList = class(TX2XMLNodeCollection, IXMLContentList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLContentListEnumerator;

    function Get_Content(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXML_AbstractListEnumerator = class(TXMLNodeCollectionEnumerator, IXML_AbstractListEnumerator)
  protected
    function GetCurrent: IXMLTextType;
  end;


  TXML_AbstractList = class(TX2XMLNodeCollection, IXML_AbstractList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXML_AbstractListEnumerator;

    function Get__Abstract(Index: Integer): IXMLTextType;
    function Add: IXMLTextType;
    function Insert(Index: Integer): IXMLTextType;
  end;

  TXMLWorkItemDimensionTypeEnumerator = class(TXMLNodeCollectionEnumerator, IXMLWorkItemDimensionTypeEnumerator)
  protected
    function GetCurrent: IXMLWorkItemDimensionType;
  end;


  TXMLWorkItemDimensionType = class(TX2XMLNodeCollection, IXSDValidate, IXSDValidateStrict, IXMLWorkItemDimensionType)
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetEnumerator: IXMLWorkItemDimensionTypeEnumerator;

    function Get_ComponentWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
    function Add: IXMLWorkItemDimensionType;
    function Insert(Index: Integer): IXMLWorkItemDimensionType;

    function GetHasID: Boolean;
    function GetID: IXMLIDType;
    function GetValueMeasure: IXMLMeasureType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetTypeCode: IXMLCodeType;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
  end;

  TXMLWorkItemQuantityAnalysisType = class(TX2XMLNode, IXSDValidate, IXSDValidateStrict, IXMLWorkItemQuantityAnalysisType)
  private
    FPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    FAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    FActualQuantityWorkItemDimension: IXMLActualQuantityWorkItemDimensionList;
    FBreakdownWorkItemQuantityAnalysis: IXMLBreakdownWorkItemQuantityAnalysisList;
    FChangedRecordedStatus: IXMLChangedRecordedStatusList;
  public
    procedure AfterConstruction; override;
  protected
    procedure XSDValidate;
    procedure XSDValidateStrict(AResult: IXSDValidateStrictResult);

    function GetID: IXMLIDType;
    function GetHasActualQuantity: Boolean;
    function GetActualQuantity: IXMLQuantityType;
    function GetHasDescription: Boolean;
    function GetDescription: IXMLTextType;
    function GetHasActualQuantityPercent: Boolean;
    function GetActualQuantityPercent: IXMLPercentType;
    function GetHasTypeCode: Boolean;
    function GetTypeCode: IXMLCodeType;
    function GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
    function GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
    function GetHasContractualLanguageCode: Boolean;
    function GetContractualLanguageCode: IXMLCodeType;
    function GetActualQuantityWorkItemDimension: IXMLActualQuantityWorkItemDimensionList;
    function GetBreakdownWorkItemQuantityAnalysis: IXMLBreakdownWorkItemQuantityAnalysisList;
    function GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
  end;

  TXMLChangedRecordedStatusListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLChangedRecordedStatusListEnumerator)
  protected
    function GetCurrent: IXMLRecordedStatusType;
  end;


  TXMLChangedRecordedStatusList = class(TX2XMLNodeCollection, IXMLChangedRecordedStatusList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLChangedRecordedStatusListEnumerator;

    function Get_ChangedRecordedStatus(Index: Integer): IXMLRecordedStatusType;
    function Add: IXMLRecordedStatusType;
    function Insert(Index: Integer): IXMLRecordedStatusType;
  end;

  TXMLBreakdownWorkItemQuantityAnalysisListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLBreakdownWorkItemQuantityAnalysisListEnumerator)
  protected
    function GetCurrent: IXMLWorkItemQuantityAnalysisType;
  end;


  TXMLBreakdownWorkItemQuantityAnalysisList = class(TX2XMLNodeCollection, IXMLBreakdownWorkItemQuantityAnalysisList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLBreakdownWorkItemQuantityAnalysisListEnumerator;

    function Get_BreakdownWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
    function Add: IXMLWorkItemQuantityAnalysisType;
    function Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;
  end;

  TXMLActualQuantityWorkItemDimensionListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLActualQuantityWorkItemDimensionListEnumerator)
  protected
    function GetCurrent: IXMLWorkItemDimensionType;
  end;


  TXMLActualQuantityWorkItemDimensionList = class(TX2XMLNodeCollection, IXMLActualQuantityWorkItemDimensionList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLActualQuantityWorkItemDimensionListEnumerator;

    function Get_ActualQuantityWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
    function Add: IXMLWorkItemDimensionType;
    function Insert(Index: Integer): IXMLWorkItemDimensionType;
  end;

  TXMLAlternativeClassificationCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLAlternativeClassificationCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLAlternativeClassificationCodeList = class(TX2XMLNodeCollection, IXMLAlternativeClassificationCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLAlternativeClassificationCodeListEnumerator;

    function Get_AlternativeClassificationCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;

  TXMLPrimaryClassificationCodeListEnumerator = class(TXMLNodeCollectionEnumerator, IXMLPrimaryClassificationCodeListEnumerator)
  protected
    function GetCurrent: IXMLCodeType;
  end;


  TXMLPrimaryClassificationCodeList = class(TX2XMLNodeCollection, IXMLPrimaryClassificationCodeList)
  public
    procedure AfterConstruction; override;
  protected
    function GetEnumerator: IXMLPrimaryClassificationCodeListEnumerator;

    function Get_PrimaryClassificationCode(Index: Integer): IXMLCodeType;
    function Add: IXMLCodeType;
    function Insert(Index: Integer): IXMLCodeType;
  end;


const
  AccountingDebitCreditStatusCodeListAgencyIDContentTypeValues: array[TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType] of WideString =
                                                                (
                                                                  '6'
                                                                );

  AccountingDocumentCodeListAgencyIDContentTypeValues: array[TXMLAccountingDocumentCodeListAgencyIDContentType] of WideString =
                                                       (
                                                         '6'
                                                       );

  AddressTypeCodeListAgencyIDContentTypeValues: array[TXMLAddressTypeCodeListAgencyIDContentType] of WideString =
                                                (
                                                  '6'
                                                );

  AdjustmentReasonCodeListAgencyIDContentTypeValues: array[TXMLAdjustmentReasonCodeListAgencyIDContentType] of WideString =
                                                     (
                                                       '6'
                                                     );

  AllowanceChargeReasonCodeListAgencyIDContentTypeValues: array[TXMLAllowanceChargeReasonCodeListAgencyIDContentType] of WideString =
                                                          (
                                                            '6'
                                                          );

  AutomaticDataCaptureMethodCodeListAgencyIDContentTypeValues: array[TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType] of WideString =
                                                               (
                                                                 '6'
                                                               );

  CargoCategoryCodeListAgencyIDContentTypeValues: array[TXMLCargoCategoryCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  CargoOperationalCategoryCodeListAgencyIDContentTypeValues: array[TXMLCargoOperationalCategoryCodeListAgencyIDContentType] of WideString =
                                                             (
                                                               '6'
                                                             );

  ChargePayingPartyRoleCodeListAgencyIDContentTypeValues: array[TXMLChargePayingPartyRoleCodeListAgencyIDContentType] of WideString =
                                                          (
                                                            '6'
                                                          );

  CommunicationChannelCodeListAgencyIDContentTypeValues: array[TXMLCommunicationChannelCodeListAgencyIDContentType] of WideString =
                                                         (
                                                           '6'
                                                         );

  ContactTypeCodeListAgencyIDContentTypeValues: array[TXMLContactTypeCodeListAgencyIDContentType] of WideString =
                                                (
                                                  '6'
                                                );

  CountryIDSchemeAgencyIDContentTypeValues: array[TXMLCountryIDSchemeAgencyIDContentType] of WideString =
                                            (
                                              '5'
                                            );

  CurrencyCodeListAgencyIDContentTypeValues: array[TXMLCurrencyCodeListAgencyIDContentType] of WideString =
                                             (
                                               '5'
                                             );

  DangerousGoodsPackagingLevelCodeListAgencyIDContentTypeValues: array[TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType] of WideString =
                                                                 (
                                                                   '6'
                                                                 );

  DangerousGoodsRegulationCodeListAgencyIDContentTypeValues: array[TXMLDangerousGoodsRegulationCodeListAgencyIDContentType] of WideString =
                                                             (
                                                               '6'
                                                             );

  DeliveryTermsCodeListAgencyIDContentTypeValues: array[TXMLDeliveryTermsCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  DeliveryTermsFunctionCodeListAgencyIDContentTypeValues: array[TXMLDeliveryTermsFunctionCodeListAgencyIDContentType] of WideString =
                                                          (
                                                            '6'
                                                          );

  DimensionTypeCodeListAgencyIDContentTypeValues: array[TXMLDimensionTypeCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  DocumentCodeListAgencyIDContentTypeValues: array[TXMLDocumentCodeListAgencyIDContentType] of WideString =
                                             (
                                               '6'
                                             );

  DocumentStatusCodeListAgencyIDContentTypeValues: array[TXMLDocumentStatusCodeListAgencyIDContentType] of WideString =
                                                   (
                                                     '6'
                                                   );

  FreightChargeTariffClassCodeListAgencyIDContentTypeValues: array[TXMLFreightChargeTariffClassCodeListAgencyIDContentType] of WideString =
                                                             (
                                                               '6'
                                                             );

  FreightChargeTypeIDSchemeAgencyIDContentTypeValues: array[TXMLFreightChargeTypeIDSchemeAgencyIDContentType] of WideString =
                                                      (
                                                        '6'
                                                      );

  LineStatusCodeListAgencyIDContentTypeValues: array[TXMLLineStatusCodeListAgencyIDContentType] of WideString =
                                               (
                                                 '6'
                                               );

  LocationFunctionCodeListAgencyIDContentTypeValues: array[TXMLLocationFunctionCodeListAgencyIDContentType] of WideString =
                                                     (
                                                       '6'
                                                     );

  MessageFunctionCodeListAgencyIDContentTypeValues: array[TXMLMessageFunctionCodeListAgencyIDContentType] of WideString =
                                                    (
                                                      '6'
                                                    );

  PackagingMarkingCodeListAgencyIDContentTypeValues: array[TXMLPackagingMarkingCodeListAgencyIDContentType] of WideString =
                                                     (
                                                       '6'
                                                     );

  PartyRoleCodeListAgencyIDContentTypeValues: array[TXMLPartyRoleCodeListAgencyIDContentType] of WideString =
                                              (
                                                '6'
                                              );

  PaymentGuaranteeMeansCodeListAgencyIDContentTypeValues: array[TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType] of WideString =
                                                          (
                                                            '6'
                                                          );

  PaymentMeansChannelCodeListAgencyIDContentTypeValues: array[TXMLPaymentMeansChannelCodeListAgencyIDContentType] of WideString =
                                                        (
                                                          '6'
                                                        );

  PaymentMeansCodeListAgencyIDContentTypeValues: array[TXMLPaymentMeansCodeListAgencyIDContentType] of WideString =
                                                 (
                                                   '6'
                                                 );

  PaymentTermsEventTimeReferenceCodeListAgencyIDContentTypeValues: array[TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType] of WideString =
                                                                   (
                                                                     '6'
                                                                   );

  PaymentTermsIDSchemeAgencyIDContentTypeValues: array[TXMLPaymentTermsIDSchemeAgencyIDContentType] of WideString =
                                                 (
                                                   '6'
                                                 );

  PaymentTermsTypeCodeListAgencyIDContentTypeValues: array[TXMLPaymentTermsTypeCodeListAgencyIDContentType] of WideString =
                                                     (
                                                       '6'
                                                     );

  PriceTypeCodeListAgencyIDContentTypeValues: array[TXMLPriceTypeCodeListAgencyIDContentType] of WideString =
                                              (
                                                '6'
                                              );

  ReferenceCodeListAgencyIDContentTypeValues: array[TXMLReferenceCodeListAgencyIDContentType] of WideString =
                                              (
                                                '6'
                                              );

  SealConditionCodeListAgencyIDContentTypeValues: array[TXMLSealConditionCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  SealingPartyRoleCodeListAgencyIDContentTypeValues: array[TXMLSealingPartyRoleCodeListAgencyIDContentType] of WideString =
                                                     (
                                                       '6'
                                                     );

  StatusCodeListAgencyIDContentTypeValues: array[TXMLStatusCodeListAgencyIDContentType] of WideString =
                                           (
                                             '6'
                                           );

  TaxCategoryCodeListAgencyIDContentTypeValues: array[TXMLTaxCategoryCodeListAgencyIDContentType] of WideString =
                                                (
                                                  '6'
                                                );

  TaxTypeCodeListAgencyIDContentTypeValues: array[TXMLTaxTypeCodeListAgencyIDContentType] of WideString =
                                            (
                                              '6'
                                            );

  TimeReferenceCodeListAgencyIDContentTypeValues: array[TXMLTimeReferenceCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  TransportEquipmentCategoryCodeListAgencyIDContentTypeValues: array[TXMLTransportEquipmentCategoryCodeListAgencyIDContentType] of WideString =
                                                               (
                                                                 '6'
                                                               );

  TransportEquipmentFullnessCodeListAgencyIDContentTypeValues: array[TXMLTransportEquipmentFullnessCodeListAgencyIDContentType] of WideString =
                                                               (
                                                                 '6'
                                                               );

  TransportMeansTypeCodeListAgencyIDContentTypeValues: array[TXMLTransportMeansTypeCodeListAgencyIDContentType] of WideString =
                                                       (
                                                         '6'
                                                       );

  TransportModeCodeListAgencyIDContentTypeValues: array[TXMLTransportModeCodeListAgencyIDContentType] of WideString =
                                                  (
                                                    '6'
                                                  );

  TransportMovementStageCodeListAgencyIDContentTypeValues: array[TXMLTransportMovementStageCodeListAgencyIDContentType] of WideString =
                                                           (
                                                             '6'
                                                           );

  TransportServicePaymentArrangementCodeListAgencyIDContentTypeValues: array[TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType] of WideString =
                                                                       (
                                                                         '6'
                                                                       );

  AccountingAccountTypeContentTypeValues: array[TXMLAccountingAccountTypeContentType] of WideString =
                                          (
                                            '1',
                                            '2',
                                            '3',
                                            '4',
                                            '5',
                                            '6',
                                            '7'
                                          );

  AccountingAmountTypeContentTypeValues: array[TXMLAccountingAmountTypeContentType] of WideString =
                                         (
                                           '1',
                                           '2',
                                           '3',
                                           '4',
                                           '5',
                                           '6'
                                         );

  ISO3AlphaCurrencyCodeContentTypeValues: array[TXMLISO3AlphaCurrencyCodeContentType] of WideString =
                                          (
                                            'AED',
                                            'AFN',
                                            'ALL',
                                            'AMD',
                                            'ANG',
                                            'AOA',
                                            'ARS',
                                            'AUD',
                                            'AWG',
                                            'AZN',
                                            'BAM',
                                            'BBD',
                                            'BDT',
                                            'BGN',
                                            'BHD',
                                            'BIF',
                                            'BMD',
                                            'BND',
                                            'BOB',
                                            'BOV',
                                            'BRL',
                                            'BSD',
                                            'BTN',
                                            'BWP',
                                            'BYN',
                                            'BZD',
                                            'CAD',
                                            'CDF',
                                            'CHE',
                                            'CHF',
                                            'CHW',
                                            'CLF',
                                            'CLP',
                                            'CNY',
                                            'COP',
                                            'COU',
                                            'CRC',
                                            'CUC',
                                            'CUP',
                                            'CVE',
                                            'CZK',
                                            'DJF',
                                            'DKK',
                                            'DOP',
                                            'DZD',
                                            'EGP',
                                            'ERN',
                                            'ETB',
                                            'EUR',
                                            'FJD',
                                            'FKP',
                                            'GBP',
                                            'GEL',
                                            'GHS',
                                            'GIP',
                                            'GMD',
                                            'GNF',
                                            'GTQ',
                                            'GYD',
                                            'HKD',
                                            'HNL',
                                            'HRK',
                                            'HTG',
                                            'HUF',
                                            'IDR',
                                            'ILS',
                                            'INR',
                                            'IQD',
                                            'IRR',
                                            'ISK',
                                            'JMD',
                                            'JOD',
                                            'JPY',
                                            'KES',
                                            'KGS',
                                            'KHR',
                                            'KMF',
                                            'KPW',
                                            'KRW',
                                            'KWD',
                                            'KYD',
                                            'KZT',
                                            'LAK',
                                            'LBP',
                                            'LKR',
                                            'LRD',
                                            'LSL',
                                            'LYD',
                                            'MAD',
                                            'MDL',
                                            'MGA',
                                            'MKD',
                                            'MMK',
                                            'MNT',
                                            'MOP',
                                            'MRU',
                                            'MUR',
                                            'MVR',
                                            'MWK',
                                            'MXN',
                                            'MXV',
                                            'MYR',
                                            'MZN',
                                            'NAD',
                                            'NGN',
                                            'NIO',
                                            'NOK',
                                            'NPR',
                                            'NZD',
                                            'OMR',
                                            'PAB',
                                            'PEN',
                                            'PGK',
                                            'PHP',
                                            'PKR',
                                            'PLN',
                                            'PYG',
                                            'QAR',
                                            'RON',
                                            'RSD',
                                            'RUB',
                                            'RWF',
                                            'SAR',
                                            'SBD',
                                            'SCR',
                                            'SDG',
                                            'SEK',
                                            'SGD',
                                            'SHP',
                                            'SLE',
                                            'SOS',
                                            'SRD',
                                            'SSP',
                                            'STN',
                                            'SVC',
                                            'SYP',
                                            'SZL',
                                            'THB',
                                            'TJS',
                                            'TMT',
                                            'TND',
                                            'TOP',
                                            'TRY',
                                            'TTD',
                                            'TWD',
                                            'TZS',
                                            'UAH',
                                            'UGX',
                                            'USD',
                                            'USN',
                                            'UYI',
                                            'UYU',
                                            'UYW',
                                            'UZS',
                                            'VED',
                                            'VES',
                                            'VND',
                                            'VUV',
                                            'WST',
                                            'XAF',
                                            'XAG',
                                            'XAU',
                                            'XBA',
                                            'XBB',
                                            'XBC',
                                            'XBD',
                                            'XCD',
                                            'XDR',
                                            'XOF',
                                            'XPD',
                                            'XPF',
                                            'XPT',
                                            'XSU',
                                            'XTS',
                                            'XUA',
                                            'XXX',
                                            'YER',
                                            'ZAR',
                                            'ZMW',
                                            'ZWL'
                                          );

  ActionCodeContentTypeValues: array[TXMLActionCodeContentType] of WideString =
                               (
                                 '1',
                                 '2',
                                 '3',
                                 '4',
                                 '5',
                                 '6',
                                 '7',
                                 '8',
                                 '9',
                                 '10',
                                 '11',
                                 '12',
                                 '13',
                                 '14',
                                 '15',
                                 '16',
                                 '17',
                                 '18',
                                 '19',
                                 '20',
                                 '21',
                                 '22',
                                 '23',
                                 '24',
                                 '25',
                                 '26',
                                 '27',
                                 '28',
                                 '29',
                                 '30',
                                 '31',
                                 '32',
                                 '33',
                                 '34',
                                 '35',
                                 '36',
                                 '37',
                                 '38',
                                 '39',
                                 '40',
                                 '41',
                                 '42',
                                 '43',
                                 '44',
                                 '45',
                                 '46',
                                 '47',
                                 '48',
                                 '49',
                                 '50',
                                 '51',
                                 '52',
                                 '53',
                                 '54',
                                 '55',
                                 '56',
                                 '57',
                                 '58',
                                 '59',
                                 '60',
                                 '61',
                                 '62',
                                 '63',
                                 '64',
                                 '65',
                                 '66',
                                 '67',
                                 '68',
                                 '69',
                                 '70',
                                 '71',
                                 '72',
                                 '73',
                                 '74',
                                 '75',
                                 '76',
                                 '77',
                                 '78',
                                 '79',
                                 '80',
                                 '81',
                                 '82',
                                 '83',
                                 '84',
                                 '85',
                                 '86',
                                 '87',
                                 '88',
                                 '89',
                                 '90',
                                 '91',
                                 '92',
                                 '93',
                                 '94',
                                 '95',
                                 '96',
                                 '97',
                                 '98',
                                 '99',
                                 '100',
                                 '101',
                                 '102',
                                 '103',
                                 '104',
                                 '105',
                                 '106',
                                 '107',
                                 '108',
                                 '109',
                                 '110',
                                 '111',
                                 '112',
                                 '113',
                                 '114',
                                 '115',
                                 '116',
                                 '117',
                                 '118',
                                 '119'
                               );

  AddressTypeContentTypeValues: array[TXMLAddressTypeContentType] of WideString =
                                (
                                  '1',
                                  '2',
                                  '3',
                                  '4',
                                  '5',
                                  '6',
                                  '7',
                                  '8'
                                );

  AdjustmentReasonDescriptionCodeContentTypeValues: array[TXMLAdjustmentReasonDescriptionCodeContentType] of WideString =
                                                    (
                                                      '1',
                                                      '2',
                                                      '3',
                                                      '4',
                                                      '5',
                                                      '6',
                                                      '7',
                                                      '8',
                                                      '9',
                                                      '10',
                                                      '11',
                                                      '12',
                                                      '13',
                                                      '14',
                                                      '15',
                                                      '16',
                                                      '17',
                                                      '18',
                                                      '19',
                                                      '20',
                                                      '21',
                                                      '22',
                                                      '23',
                                                      '24',
                                                      '25',
                                                      '26',
                                                      '27',
                                                      '28',
                                                      '29',
                                                      '30',
                                                      '31',
                                                      '32',
                                                      '33',
                                                      '34',
                                                      '35',
                                                      '36',
                                                      '37',
                                                      '38',
                                                      '39',
                                                      '40',
                                                      '41',
                                                      '42',
                                                      '43',
                                                      '44',
                                                      '45',
                                                      '46',
                                                      '47',
                                                      '48',
                                                      '49',
                                                      '50',
                                                      '51',
                                                      '52',
                                                      '53',
                                                      '54',
                                                      '55',
                                                      '56',
                                                      '57',
                                                      '58',
                                                      '59',
                                                      '60',
                                                      '61',
                                                      '62',
                                                      '63',
                                                      '64',
                                                      '65',
                                                      '66',
                                                      '67',
                                                      '68',
                                                      '69',
                                                      '70',
                                                      '71',
                                                      '72',
                                                      '73',
                                                      '74',
                                                      '75',
                                                      '76',
                                                      '77',
                                                      '78',
                                                      '79',
                                                      '80',
                                                      '81',
                                                      '82',
                                                      '83',
                                                      '84',
                                                      '85',
                                                      '86',
                                                      '87',
                                                      '88',
                                                      '89',
                                                      '90',
                                                      '91',
                                                      '92',
                                                      '93',
                                                      '94',
                                                      '95',
                                                      '96',
                                                      '97',
                                                      '98',
                                                      '99',
                                                      '100',
                                                      '101',
                                                      '102',
                                                      '103',
                                                      '104',
                                                      'ZZZ'
                                                    );

  AllowanceChargeIdentificationCodeContentTypeValues: array[TXMLAllowanceChargeIdentificationCodeContentType] of WideString =
                                                      (
                                                        '1',
                                                        '2',
                                                        '3',
                                                        '4',
                                                        '5',
                                                        '6',
                                                        '7',
                                                        '8',
                                                        '9',
                                                        '10',
                                                        '11',
                                                        '12',
                                                        '13',
                                                        '14',
                                                        '15',
                                                        '16',
                                                        '17',
                                                        '18',
                                                        '19',
                                                        '20',
                                                        '21',
                                                        '22',
                                                        '23',
                                                        '24',
                                                        '25',
                                                        '26',
                                                        '27',
                                                        '28',
                                                        '29',
                                                        '30',
                                                        '31',
                                                        '32',
                                                        '33',
                                                        '34',
                                                        '35',
                                                        '36',
                                                        '37',
                                                        '38',
                                                        '39',
                                                        '40',
                                                        '41',
                                                        '42',
                                                        '44',
                                                        '45',
                                                        '46',
                                                        '47',
                                                        '48',
                                                        '49',
                                                        '50',
                                                        '51',
                                                        '52',
                                                        '53',
                                                        '54',
                                                        '55',
                                                        '56',
                                                        '57',
                                                        '58',
                                                        '59',
                                                        '60',
                                                        '61',
                                                        '62',
                                                        '63',
                                                        '64',
                                                        '65',
                                                        '66',
                                                        '67',
                                                        '68',
                                                        '69',
                                                        '70',
                                                        '71',
                                                        '72',
                                                        '73',
                                                        '74',
                                                        '75',
                                                        '76',
                                                        '77',
                                                        '78',
                                                        '79',
                                                        '80',
                                                        '81',
                                                        '82',
                                                        '83',
                                                        '84',
                                                        '85',
                                                        '86',
                                                        '87',
                                                        '88',
                                                        '89',
                                                        '90',
                                                        '91',
                                                        '92',
                                                        '93',
                                                        '94',
                                                        '95',
                                                        '96',
                                                        '97',
                                                        '98',
                                                        '99',
                                                        '100',
                                                        '101',
                                                        '102',
                                                        '103',
                                                        '104',
                                                        '105',
                                                        '106'
                                                      );

  AllowanceChargeReasonCodeContentTypeValues: array[TXMLAllowanceChargeReasonCodeContentType] of WideString =
                                              (
                                                '1',
                                                '2',
                                                '3',
                                                '4',
                                                '5',
                                                '6',
                                                '7',
                                                '8',
                                                '9',
                                                '10',
                                                '11',
                                                '12',
                                                '13',
                                                '14',
                                                '15',
                                                '16',
                                                '17',
                                                '18',
                                                '19',
                                                '20',
                                                '21',
                                                '22',
                                                '23',
                                                '24',
                                                '25',
                                                '26',
                                                '27',
                                                '28',
                                                '29',
                                                '30',
                                                '31',
                                                '32',
                                                '33',
                                                '34',
                                                '35',
                                                '36',
                                                '37',
                                                '38',
                                                '39',
                                                '40',
                                                '41',
                                                '42',
                                                '43',
                                                '44',
                                                '45',
                                                '46',
                                                '47',
                                                '48',
                                                '49',
                                                '50',
                                                '51',
                                                '52',
                                                '53',
                                                '54',
                                                '55',
                                                '56',
                                                '57',
                                                '58',
                                                '59',
                                                '60',
                                                '61',
                                                '62',
                                                '63',
                                                '64',
                                                '65',
                                                '66',
                                                '67',
                                                '68',
                                                '69',
                                                '70',
                                                '71',
                                                '72',
                                                '73',
                                                '74',
                                                '75',
                                                '76',
                                                '77',
                                                '78',
                                                '79',
                                                '80',
                                                '81',
                                                '82',
                                                '83',
                                                '84',
                                                '85',
                                                '86',
                                                '87',
                                                '88',
                                                '89',
                                                '90',
                                                '91',
                                                '92',
                                                '93',
                                                '94',
                                                '95',
                                                '96',
                                                '97',
                                                '98',
                                                '99',
                                                '100',
                                                '101',
                                                '102',
                                                '103',
                                                '104',
                                                'ZZZ'
                                              );

  AutomaticDataCaptureMethodCodeContentTypeValues: array[TXMLAutomaticDataCaptureMethodCodeContentType] of WideString =
                                                   (
                                                     '50',
                                                     '51',
                                                     '52',
                                                     '64',
                                                     '65',
                                                     '67',
                                                     '78',
                                                     '79',
                                                     '81',
                                                     '82'
                                                   );

  CargoOperationalCategoryCodeContentTypeValues: array[TXMLCargoOperationalCategoryCodeContentType] of WideString =
                                                 (
                                                   '1',
                                                   '2',
                                                   '3',
                                                   '4',
                                                   '5',
                                                   '6',
                                                   '7',
                                                   '8',
                                                   '9',
                                                   '10',
                                                   '11',
                                                   '12',
                                                   '13',
                                                   '14',
                                                   '15',
                                                   '16',
                                                   '17',
                                                   '18',
                                                   '19',
                                                   '20',
                                                   '21',
                                                   '22',
                                                   '23',
                                                   '24',
                                                   '25'
                                                 );

  CargoTypeCodeContentTypeValues: array[TXMLCargoTypeCodeContentType] of WideString =
                                  (
                                    '0',
                                    '1',
                                    '2',
                                    '3',
                                    '4',
                                    '5',
                                    '6',
                                    '7',
                                    '9'
                                  );

  CommodityIdentificationCodeContentTypeValues: array[TXMLCommodityIdentificationCodeContentType] of WideString =
                                                (
                                                  'ZZZ'
                                                );

  CommunicationMeansTypeCodeContentTypeValues: array[TXMLCommunicationMeansTypeCodeContentType] of WideString =
                                               (
                                                 'AA',
                                                 'AB',
                                                 'AC',
                                                 'AD',
                                                 'AE',
                                                 'AF',
                                                 'AG',
                                                 'AH',
                                                 'AI',
                                                 'AJ',
                                                 'AK',
                                                 'AL',
                                                 'AM',
                                                 'AN',
                                                 'AO',
                                                 'AP',
                                                 'AQ',
                                                 'AR',
                                                 'AS',
                                                 'AT',
                                                 'AU',
                                                 'AV',
                                                 'AW',
                                                 'CA',
                                                 'EI',
                                                 'EM',
                                                 'EX',
                                                 'FT',
                                                 'FX',
                                                 'GM',
                                                 'IE',
                                                 'IM',
                                                 'MA',
                                                 'PB',
                                                 'PS',
                                                 'SW',
                                                 'TE',
                                                 'TG',
                                                 'TL',
                                                 'TM',
                                                 'TT',
                                                 'TX',
                                                 'XF',
                                                 'XG',
                                                 'XH',
                                                 'XI',
                                                 'XJ'
                                               );

  ContactFunctionCodeContentTypeValues: array[TXMLContactFunctionCodeContentType] of WideString =
                                        (
                                          'AA',
                                          'AB',
                                          'AC',
                                          'AD',
                                          'AE',
                                          'AF',
                                          'AG',
                                          'AH',
                                          'AI',
                                          'AJ',
                                          'AK',
                                          'AL',
                                          'AM',
                                          'AN',
                                          'AO',
                                          'AP',
                                          'AQ',
                                          'AR',
                                          'AS',
                                          'AT',
                                          'AU',
                                          'AV',
                                          'AW',
                                          'AX',
                                          'AY',
                                          'AZ',
                                          'BA',
                                          'BB',
                                          'BC',
                                          'BD',
                                          'BE',
                                          'BF',
                                          'BG',
                                          'BH',
                                          'BI',
                                          'BJ',
                                          'BK',
                                          'BL',
                                          'BM',
                                          'BN',
                                          'BO',
                                          'BP',
                                          'BQ',
                                          'BR',
                                          'BS',
                                          'BT',
                                          'BU',
                                          'CA',
                                          'CB',
                                          'CC',
                                          'CD',
                                          'CE',
                                          'CF',
                                          'CG',
                                          'CN',
                                          'CO',
                                          'CP',
                                          'CR',
                                          'CW',
                                          'DE',
                                          'DI',
                                          'DL',
                                          'EB',
                                          'EC',
                                          'ED',
                                          'EX',
                                          'GR',
                                          'HE',
                                          'HG',
                                          'HM',
                                          'IC',
                                          'IN',
                                          'LB',
                                          'LO',
                                          'MC',
                                          'MD',
                                          'MH',
                                          'MR',
                                          'MS',
                                          'NT',
                                          'OC',
                                          'PA',
                                          'PD',
                                          'PE',
                                          'PM',
                                          'QA',
                                          'QC',
                                          'RD',
                                          'RP',
                                          'SA',
                                          'SC',
                                          'SD',
                                          'SR',
                                          'SU',
                                          'TA',
                                          'TD',
                                          'TI',
                                          'TR',
                                          'WH',
                                          'WI',
                                          'WJ',
                                          'WK',
                                          'ZZZ'
                                        );

  DangerousGoodsPackingCodeContentTypeValues: array[TXMLDangerousGoodsPackingCodeContentType] of WideString =
                                              (
                                                '1',
                                                '2',
                                                '3',
                                                '4'
                                              );

  DangerousGoodsRegulationCodeContentTypeValues: array[TXMLDangerousGoodsRegulationCodeContentType] of WideString =
                                                 (
                                                   'ADR',
                                                   'ADS',
                                                   'ADT',
                                                   'ADU',
                                                   'ADV',
                                                   'ADW',
                                                   'ADX',
                                                   'ADY',
                                                   'ADZ',
                                                   'AEA',
                                                   'AEB',
                                                   'AGS',
                                                   'ANR',
                                                   'ARD',
                                                   'CFR',
                                                   'COM',
                                                   'GVE',
                                                   'GVS',
                                                   'ICA',
                                                   'IMD',
                                                   'RGE',
                                                   'RID',
                                                   'UI',
                                                   'ZZZ'
                                                 );

  DateOnlyFormatCodeContentTypeValues: array[TXMLDateOnlyFormatCodeContentType] of WideString =
                                       (
                                         '2',
                                         '3',
                                         '4',
                                         '101',
                                         '102',
                                         '105',
                                         '106',
                                         '107',
                                         '110',
                                         '609'
                                       );

  DeliveryTermsCodeContentTypeValues: array[TXMLDeliveryTermsCodeContentType] of WideString =
                                      (
                                        '1',
                                        '2',
                                        'CFR',
                                        'CIF',
                                        'CIP',
                                        'CPT',
                                        'DAP',
                                        'DDP',
                                        'DPU',
                                        'EXW',
                                        'FAS',
                                        'FCA',
                                        'FOB'
                                      );

  DeliveryTermsFunctionCodeContentTypeValues: array[TXMLDeliveryTermsFunctionCodeContentType] of WideString =
                                              (
                                                '1',
                                                '2',
                                                '3',
                                                '4',
                                                '5',
                                                '6',
                                                '7',
                                                '8'
                                              );

  DimensionTypeCodeContentTypeValues: array[TXMLDimensionTypeCodeContentType] of WideString =
                                      (
                                        '1',
                                        '2',
                                        '3',
                                        '4',
                                        '5',
                                        '6',
                                        '7',
                                        '8',
                                        '9',
                                        '10',
                                        '11',
                                        '12',
                                        '13',
                                        '14',
                                        '15',
                                        '16',
                                        '17',
                                        '18',
                                        '19',
                                        '20',
                                        '21',
                                        '22',
                                        '23',
                                        '24'
                                      );

  DocumentNameCodeContentTypeValues: array[TXMLDocumentNameCodeContentType] of WideString =
                                     (
                                       '1',
                                       '2',
                                       '3',
                                       '4',
                                       '5',
                                       '6',
                                       '7',
                                       '8',
                                       '9',
                                       '10',
                                       '11',
                                       '12',
                                       '13',
                                       '14',
                                       '15',
                                       '16',
                                       '17',
                                       '18',
                                       '19',
                                       '20',
                                       '21',
                                       '22',
                                       '23',
                                       '24',
                                       '25',
                                       '26',
                                       '27',
                                       '28',
                                       '29',
                                       '30',
                                       '31',
                                       '32',
                                       '33',
                                       '34',
                                       '35',
                                       '36',
                                       '37',
                                       '38',
                                       '39',
                                       '40',
                                       '41',
                                       '42',
                                       '43',
                                       '44',
                                       '45',
                                       '46',
                                       '47',
                                       '48',
                                       '49',
                                       '50',
                                       '51',
                                       '52',
                                       '53',
                                       '54',
                                       '55',
                                       '56',
                                       '57',
                                       '58',
                                       '59',
                                       '60',
                                       '61',
                                       '62',
                                       '63',
                                       '64',
                                       '65',
                                       '66',
                                       '67',
                                       '68',
                                       '69',
                                       '70',
                                       '71',
                                       '72',
                                       '73',
                                       '74',
                                       '75',
                                       '76',
                                       '77',
                                       '78',
                                       '79',
                                       '80',
                                       '81',
                                       '82',
                                       '83',
                                       '84',
                                       '85',
                                       '86',
                                       '87',
                                       '88',
                                       '89',
                                       '90',
                                       '91',
                                       '92',
                                       '93',
                                       '94',
                                       '95',
                                       '96',
                                       '97',
                                       '98',
                                       '99',
                                       '100',
                                       '101',
                                       '102',
                                       '103',
                                       '104',
                                       '105',
                                       '106',
                                       '107',
                                       '108',
                                       '109',
                                       '110',
                                       '111',
                                       '112',
                                       '113',
                                       '114',
                                       '115',
                                       '116',
                                       '117',
                                       '118',
                                       '119',
                                       '120',
                                       '121',
                                       '122',
                                       '123',
                                       '124',
                                       '125',
                                       '126',
                                       '127',
                                       '128',
                                       '129',
                                       '130',
                                       '131',
                                       '132',
                                       '133',
                                       '134',
                                       '135',
                                       '136',
                                       '137',
                                       '138',
                                       '139',
                                       '140',
                                       '141',
                                       '142',
                                       '143',
                                       '144',
                                       '145',
                                       '146',
                                       '147',
                                       '148',
                                       '149',
                                       '150',
                                       '151',
                                       '152',
                                       '153',
                                       '154',
                                       '155',
                                       '156',
                                       '157',
                                       '158',
                                       '159',
                                       '160',
                                       '161',
                                       '162',
                                       '163',
                                       '164',
                                       '165',
                                       '166',
                                       '167',
                                       '168',
                                       '169',
                                       '170',
                                       '171',
                                       '172',
                                       '173',
                                       '174',
                                       '175',
                                       '176',
                                       '177',
                                       '178',
                                       '179',
                                       '180',
                                       '181',
                                       '182',
                                       '183',
                                       '184',
                                       '185',
                                       '186',
                                       '187',
                                       '188',
                                       '189',
                                       '190',
                                       '191',
                                       '192',
                                       '193',
                                       '194',
                                       '195',
                                       '196',
                                       '197',
                                       '198',
                                       '199',
                                       '200',
                                       '201',
                                       '202',
                                       '203',
                                       '204',
                                       '205',
                                       '206',
                                       '207',
                                       '208',
                                       '209',
                                       '210',
                                       '211',
                                       '212',
                                       '213',
                                       '214',
                                       '215',
                                       '216',
                                       '217',
                                       '218',
                                       '219',
                                       '220',
                                       '221',
                                       '222',
                                       '223',
                                       '224',
                                       '225',
                                       '226',
                                       '227',
                                       '228',
                                       '229',
                                       '230',
                                       '231',
                                       '232',
                                       '233',
                                       '234',
                                       '235',
                                       '236',
                                       '237',
                                       '238',
                                       '239',
                                       '240',
                                       '241',
                                       '242',
                                       '243',
                                       '244',
                                       '245',
                                       '246',
                                       '247',
                                       '248',
                                       '249',
                                       '250',
                                       '251',
                                       '252',
                                       '253',
                                       '254',
                                       '255',
                                       '256',
                                       '257',
                                       '258',
                                       '259',
                                       '260',
                                       '261',
                                       '262',
                                       '263',
                                       '264',
                                       '265',
                                       '266',
                                       '267',
                                       '268',
                                       '269',
                                       '270',
                                       '271',
                                       '272',
                                       '273',
                                       '274',
                                       '275',
                                       '276',
                                       '277',
                                       '278',
                                       '279',
                                       '280',
                                       '281',
                                       '282',
                                       '283',
                                       '284',
                                       '285',
                                       '286',
                                       '287',
                                       '288',
                                       '289',
                                       '290',
                                       '291',
                                       '292',
                                       '293',
                                       '294',
                                       '295',
                                       '296',
                                       '297',
                                       '298',
                                       '299',
                                       '300',
                                       '301',
                                       '302',
                                       '303',
                                       '304',
                                       '305',
                                       '306',
                                       '307',
                                       '308',
                                       '309',
                                       '310',
                                       '311',
                                       '312',
                                       '313',
                                       '314',
                                       '315',
                                       '316',
                                       '317',
                                       '318',
                                       '319',
                                       '320',
                                       '321',
                                       '322',
                                       '323',
                                       '324',
                                       '325',
                                       '326',
                                       '327',
                                       '328',
                                       '329',
                                       '330',
                                       '331',
                                       '332',
                                       '333',
                                       '334',
                                       '335',
                                       '336',
                                       '337',
                                       '338',
                                       '339',
                                       '340',
                                       '341',
                                       '342',
                                       '343',
                                       '344',
                                       '345',
                                       '346',
                                       '347',
                                       '348',
                                       '349',
                                       '350',
                                       '351',
                                       '352',
                                       '353',
                                       '354',
                                       '355',
                                       '356',
                                       '357',
                                       '358',
                                       '359',
                                       '360',
                                       '361',
                                       '362',
                                       '363',
                                       '364',
                                       '365',
                                       '366',
                                       '367',
                                       '368',
                                       '369',
                                       '370',
                                       '371',
                                       '372',
                                       '373',
                                       '374',
                                       '375',
                                       '376',
                                       '377',
                                       '378',
                                       '379',
                                       '380',
                                       '381',
                                       '382',
                                       '383',
                                       '384',
                                       '385',
                                       '386',
                                       '387',
                                       '388',
                                       '389',
                                       '390',
                                       '391',
                                       '392',
                                       '393',
                                       '394',
                                       '395',
                                       '396',
                                       '397',
                                       '398',
                                       '399',
                                       '400',
                                       '401',
                                       '402',
                                       '403',
                                       '404',
                                       '405',
                                       '406',
                                       '407',
                                       '408',
                                       '409',
                                       '410',
                                       '411',
                                       '412',
                                       '413',
                                       '414',
                                       '415',
                                       '416',
                                       '417',
                                       '418',
                                       '419',
                                       '420',
                                       '421',
                                       '422',
                                       '423',
                                       '424',
                                       '425',
                                       '426',
                                       '427',
                                       '428',
                                       '429',
                                       '430',
                                       '431',
                                       '432',
                                       '433',
                                       '434',
                                       '435',
                                       '436',
                                       '437',
                                       '438',
                                       '439',
                                       '440',
                                       '441',
                                       '442',
                                       '443',
                                       '444',
                                       '445',
                                       '446',
                                       '447',
                                       '448',
                                       '449',
                                       '450',
                                       '451',
                                       '452',
                                       '453',
                                       '454',
                                       '455',
                                       '456',
                                       '457',
                                       '458',
                                       '459',
                                       '460',
                                       '461',
                                       '462',
                                       '463',
                                       '464',
                                       '465',
                                       '466',
                                       '467',
                                       '468',
                                       '469',
                                       '470',
                                       '481',
                                       '482',
                                       '483',
                                       '484',
                                       '485',
                                       '486',
                                       '487',
                                       '488',
                                       '489',
                                       '490',
                                       '491',
                                       '493',
                                       '494',
                                       '495',
                                       '496',
                                       '497',
                                       '498',
                                       '499',
                                       '520',
                                       '521',
                                       '522',
                                       '523',
                                       '524',
                                       '525',
                                       '526',
                                       '527',
                                       '528',
                                       '529',
                                       '530',
                                       '531',
                                       '532',
                                       '533',
                                       '534',
                                       '535',
                                       '536',
                                       '537',
                                       '538',
                                       '539',
                                       '550',
                                       '551',
                                       '552',
                                       '553',
                                       '554',
                                       '575',
                                       '576',
                                       '577',
                                       '578',
                                       '579',
                                       '580',
                                       '581',
                                       '582',
                                       '583',
                                       '584',
                                       '585',
                                       '586',
                                       '587',
                                       '588',
                                       '589',
                                       '610',
                                       '621',
                                       '622',
                                       '623',
                                       '624',
                                       '625',
                                       '626',
                                       '627',
                                       '628',
                                       '629',
                                       '630',
                                       '631',
                                       '632',
                                       '633',
                                       '634',
                                       '635',
                                       '636',
                                       '637',
                                       '638',
                                       '639',
                                       '640',
                                       '641',
                                       '642',
                                       '643',
                                       '644',
                                       '645',
                                       '646',
                                       '647',
                                       '648',
                                       '649',
                                       '650',
                                       '651',
                                       '652',
                                       '653',
                                       '654',
                                       '655',
                                       '656',
                                       '657',
                                       '658',
                                       '659',
                                       '700',
                                       '701',
                                       '702',
                                       '703',
                                       '704',
                                       '705',
                                       '706',
                                       '707',
                                       '708',
                                       '709',
                                       '710',
                                       '711',
                                       '712',
                                       '713',
                                       '714',
                                       '715',
                                       '716',
                                       '717',
                                       '718',
                                       '719',
                                       '720',
                                       '721',
                                       '722',
                                       '723',
                                       '724',
                                       '725',
                                       '726',
                                       '727',
                                       '728',
                                       '729',
                                       '730',
                                       '731',
                                       '732',
                                       '733',
                                       '734',
                                       '735',
                                       '736',
                                       '737',
                                       '738',
                                       '739',
                                       '740',
                                       '741',
                                       '742',
                                       '743',
                                       '744',
                                       '745',
                                       '746',
                                       '747',
                                       '748',
                                       '749',
                                       '750',
                                       '751',
                                       '752',
                                       '753',
                                       '754',
                                       '755',
                                       '756',
                                       '757',
                                       '758',
                                       '759',
                                       '760',
                                       '761',
                                       '762',
                                       '763',
                                       '764',
                                       '765',
                                       '766',
                                       '767',
                                       '768',
                                       '769',
                                       '770',
                                       '771',
                                       '772',
                                       '773',
                                       '774',
                                       '775',
                                       '776',
                                       '777',
                                       '778',
                                       '779',
                                       '780',
                                       '781',
                                       '782',
                                       '783',
                                       '784',
                                       '785',
                                       '786',
                                       '787',
                                       '788',
                                       '789',
                                       '790',
                                       '791',
                                       '792',
                                       '793',
                                       '794',
                                       '795',
                                       '796',
                                       '797',
                                       '798',
                                       '799',
                                       '810',
                                       '811',
                                       '812',
                                       '813',
                                       '814',
                                       '815',
                                       '816',
                                       '817',
                                       '818',
                                       '819',
                                       '820',
                                       '821',
                                       '822',
                                       '823',
                                       '824',
                                       '825',
                                       '826',
                                       '827',
                                       '828',
                                       '829',
                                       '830',
                                       '831',
                                       '832',
                                       '833',
                                       '834',
                                       '835',
                                       '836',
                                       '837',
                                       '838',
                                       '839',
                                       '840',
                                       '841',
                                       '842',
                                       '843',
                                       '844',
                                       '845',
                                       '846',
                                       '847',
                                       '848',
                                       '849',
                                       '850',
                                       '851',
                                       '852',
                                       '853',
                                       '854',
                                       '855',
                                       '856',
                                       '857',
                                       '858',
                                       '859',
                                       '860',
                                       '861',
                                       '862',
                                       '863',
                                       '864',
                                       '865',
                                       '866',
                                       '867',
                                       '868',
                                       '869',
                                       '870',
                                       '871',
                                       '872',
                                       '873',
                                       '874',
                                       '875',
                                       '876',
                                       '877',
                                       '878',
                                       '879',
                                       '890',
                                       '891',
                                       '892',
                                       '893',
                                       '894',
                                       '895',
                                       '896',
                                       '897',
                                       '898',
                                       '899',
                                       '900',
                                       '901',
                                       '902',
                                       '903',
                                       '904',
                                       '905',
                                       '906',
                                       '907',
                                       '908',
                                       '909',
                                       '910',
                                       '911',
                                       '912',
                                       '913',
                                       '914',
                                       '915',
                                       '916',
                                       '917',
                                       '925',
                                       '926',
                                       '927',
                                       '929',
                                       '930',
                                       '931',
                                       '932',
                                       '933',
                                       '934',
                                       '935',
                                       '936',
                                       '937',
                                       '938',
                                       '940',
                                       '941',
                                       '950',
                                       '951',
                                       '952',
                                       '953',
                                       '954',
                                       '955',
                                       '960',
                                       '961',
                                       '962',
                                       '963',
                                       '964',
                                       '965',
                                       '966',
                                       '970',
                                       '971',
                                       '972',
                                       '974',
                                       '975',
                                       '976',
                                       '977',
                                       '978',
                                       '979',
                                       '990',
                                       '991',
                                       '995',
                                       '996',
                                       '998'
                                     );

  DocumentNameCodeAccountingContentTypeValues: array[TXMLDocumentNameCodeAccountingContentType] of WideString =
                                               (
                                                 '105',
                                                 '220',
                                                 '223',
                                                 '224',
                                                 '245',
                                                 '315',
                                                 '320',
                                                 '325',
                                                 '326',
                                                 '380',
                                                 '389',
                                                 '393',
                                                 '394',
                                                 '395',
                                                 '398',
                                                 '399',
                                                 '455',
                                                 '481',
                                                 '533',
                                                 '534',
                                                 '640',
                                                 '719',
                                                 '731',
                                                 '747'
                                               );

  DocumentStatusCodeContentTypeValues: array[TXMLDocumentStatusCodeContentType] of WideString =
                                       (
                                         '1',
                                         '2',
                                         '3',
                                         '4',
                                         '5',
                                         '6',
                                         '7',
                                         '8',
                                         '9',
                                         '10',
                                         '11',
                                         '12',
                                         '13',
                                         '14',
                                         '15',
                                         '16',
                                         '17',
                                         '18',
                                         '19',
                                         '20',
                                         '21',
                                         '22',
                                         '23',
                                         '24',
                                         '25',
                                         '26',
                                         '27',
                                         '28',
                                         '29',
                                         '30',
                                         '31',
                                         '32',
                                         '33',
                                         '34',
                                         '35',
                                         '36',
                                         '37',
                                         '38',
                                         '39',
                                         '40',
                                         '41',
                                         '42',
                                         '43',
                                         '44',
                                         '45',
                                         '46',
                                         '47',
                                         '48',
                                         '49',
                                         '50'
                                       );

  DutyTaxFeeTypeCodeContentTypeValues: array[TXMLDutyTaxFeeTypeCodeContentType] of WideString =
                                       (
                                         'AAA',
                                         'AAB',
                                         'AAC',
                                         'AAD',
                                         'AAE',
                                         'AAF',
                                         'AAG',
                                         'AAH',
                                         'AAI',
                                         'AAJ',
                                         'AAK',
                                         'AAL',
                                         'AAM',
                                         'AAO',
                                         'AAP',
                                         'ADD',
                                         'BOL',
                                         'CAP',
                                         'CAR',
                                         'COC',
                                         'CST',
                                         'CUD',
                                         'CVD',
                                         'ENV',
                                         'EXC',
                                         'EXP',
                                         'FET',
                                         'FRE',
                                         'GCN',
                                         'GST',
                                         'ILL',
                                         'IMP',
                                         'IND',
                                         'LAC',
                                         'LCN',
                                         'LDP',
                                         'LOC',
                                         'LST',
                                         'MCA',
                                         'MCD',
                                         'OTH',
                                         'PDB',
                                         'PDC',
                                         'PRF',
                                         'SCN',
                                         'SSS',
                                         'STT',
                                         'SUP',
                                         'SUR',
                                         'SWT',
                                         'TAC',
                                         'TOT',
                                         'TOX',
                                         'TTA',
                                         'VAD',
                                         'VAT'
                                       );

  DutyorTaxorFeeCategoryCodeContentTypeValues: array[TXMLDutyorTaxorFeeCategoryCodeContentType] of WideString =
                                               (
                                                 'A',
                                                 'AA',
                                                 'AB',
                                                 'AC',
                                                 'AD',
                                                 'AE',
                                                 'B',
                                                 'C',
                                                 'D',
                                                 'E',
                                                 'F',
                                                 'G',
                                                 'H',
                                                 'I',
                                                 'J',
                                                 'K',
                                                 'L',
                                                 'M',
                                                 'N',
                                                 'O',
                                                 'S',
                                                 'Z'
                                               );

  EventTimeReferenceCodeContentTypeValues: array[TXMLEventTimeReferenceCodeContentType] of WideString =
                                           (
                                             '1',
                                             '2',
                                             '3',
                                             '4',
                                             '5',
                                             '6',
                                             '7',
                                             '8',
                                             '9',
                                             '10',
                                             '11',
                                             '12',
                                             '13',
                                             '14',
                                             '21',
                                             '22',
                                             '23',
                                             '24',
                                             '25',
                                             '26',
                                             '27',
                                             '28',
                                             '29',
                                             '31',
                                             '32',
                                             '33',
                                             '41',
                                             '42',
                                             '43',
                                             '44',
                                             '45',
                                             '46',
                                             '47',
                                             '48',
                                             '52',
                                             '53',
                                             '54',
                                             '55',
                                             '56',
                                             '57',
                                             '60',
                                             '61',
                                             '62',
                                             '63',
                                             '64',
                                             '65',
                                             '66',
                                             '67',
                                             '68',
                                             '69',
                                             '70',
                                             '71',
                                             '72',
                                             '73',
                                             '74',
                                             '75',
                                             '76',
                                             '77',
                                             '78',
                                             '79',
                                             '80',
                                             '81',
                                             '82',
                                             '83',
                                             'ZZZ'
                                           );

  EventTimeReferenceCodePaymentTermsEventContentTypeValues: array[TXMLEventTimeReferenceCodePaymentTermsEventContentType] of WideString =
                                                            (
                                                              '5',
                                                              '24',
                                                              '29',
                                                              '45',
                                                              '71'
                                                            );

  FreightChargeQuantityUnitBasisCodeContentTypeValues: array[TXMLFreightChargeQuantityUnitBasisCodeContentType] of WideString =
                                                       (
                                                         'ZZZ'
                                                       );

  FreightChargeTariffCodeContentTypeValues: array[TXMLFreightChargeTariffCodeContentType] of WideString =
                                            (
                                              'A',
                                              'B',
                                              'C',
                                              'D',
                                              'E',
                                              'F',
                                              'G',
                                              'H',
                                              'K',
                                              'M',
                                              'N',
                                              'Q',
                                              'R',
                                              'S'
                                            );

  GoodsTypeCodeContentTypeValues: array[TXMLGoodsTypeCodeContentType] of WideString =
                                  (
                                    'ZZZ'
                                  );

  GoodsTypeExtensionCodeContentTypeValues: array[TXMLGoodsTypeExtensionCodeContentType] of WideString =
                                           (
                                             'ZZZ'
                                           );

  LocationFunctionCodeContentTypeValues: array[TXMLLocationFunctionCodeContentType] of WideString =
                                         (
                                           '1',
                                           '2',
                                           '3',
                                           '4',
                                           '5',
                                           '6',
                                           '7',
                                           '8',
                                           '9',
                                           '10',
                                           '11',
                                           '12',
                                           '13',
                                           '14',
                                           '15',
                                           '16',
                                           '17',
                                           '18',
                                           '19',
                                           '20',
                                           '21',
                                           '22',
                                           '23',
                                           '24',
                                           '25',
                                           '26',
                                           '27',
                                           '28',
                                           '29',
                                           '30',
                                           '31',
                                           '32',
                                           '33',
                                           '34',
                                           '35',
                                           '36',
                                           '37',
                                           '38',
                                           '39',
                                           '40',
                                           '41',
                                           '42',
                                           '43',
                                           '44',
                                           '45',
                                           '46',
                                           '47',
                                           '48',
                                           '49',
                                           '50',
                                           '51',
                                           '52',
                                           '53',
                                           '54',
                                           '55',
                                           '56',
                                           '57',
                                           '58',
                                           '59',
                                           '60',
                                           '61',
                                           '62',
                                           '63',
                                           '64',
                                           '65',
                                           '66',
                                           '67',
                                           '68',
                                           '69',
                                           '70',
                                           '71',
                                           '72',
                                           '73',
                                           '74',
                                           '75',
                                           '76',
                                           '77',
                                           '78',
                                           '79',
                                           '80',
                                           '81',
                                           '82',
                                           '83',
                                           '84',
                                           '85',
                                           '86',
                                           '87',
                                           '88',
                                           '89',
                                           '90',
                                           '91',
                                           '92',
                                           '93',
                                           '94',
                                           '95',
                                           '96',
                                           '97',
                                           '98',
                                           '99',
                                           '100',
                                           '101',
                                           '103',
                                           '104',
                                           '105',
                                           '106',
                                           '107',
                                           '108',
                                           '109',
                                           '110',
                                           '111',
                                           '112',
                                           '113',
                                           '114',
                                           '115',
                                           '116',
                                           '117',
                                           '118',
                                           '119',
                                           '120',
                                           '122',
                                           '123',
                                           '124',
                                           '125',
                                           '126',
                                           '127',
                                           '128',
                                           '129',
                                           '130',
                                           '131',
                                           '132',
                                           '133',
                                           '134',
                                           '135',
                                           '136',
                                           '137',
                                           '138',
                                           '139',
                                           '140',
                                           '141',
                                           '142',
                                           '143',
                                           '144',
                                           '145',
                                           '146',
                                           '147',
                                           '148',
                                           '149',
                                           '150',
                                           '151',
                                           '152',
                                           '153',
                                           '154',
                                           '155',
                                           '156',
                                           '157',
                                           '158',
                                           '159',
                                           '160',
                                           '161',
                                           '162',
                                           '163',
                                           '164',
                                           '165',
                                           '166',
                                           '167',
                                           '168',
                                           '169',
                                           '170',
                                           '171',
                                           '172',
                                           '173',
                                           '174',
                                           '175',
                                           '176',
                                           '177',
                                           '178',
                                           '179',
                                           '180',
                                           '181',
                                           '182',
                                           '183',
                                           '184',
                                           '185',
                                           '186',
                                           '187',
                                           '188',
                                           '189',
                                           '190',
                                           '191',
                                           '192',
                                           '193',
                                           '194',
                                           '195',
                                           '196',
                                           '197',
                                           '198',
                                           '199',
                                           '200',
                                           '201',
                                           '202',
                                           '203',
                                           '204',
                                           '205',
                                           '206',
                                           '207',
                                           '208',
                                           '209',
                                           '210',
                                           '211',
                                           '212',
                                           '213',
                                           '214',
                                           '215',
                                           '216',
                                           '217',
                                           '218',
                                           '219',
                                           '220',
                                           '221',
                                           '222',
                                           '223',
                                           '224',
                                           '225',
                                           '226',
                                           '227',
                                           '228',
                                           '229',
                                           '230',
                                           '231',
                                           '232',
                                           '233',
                                           '234',
                                           '235',
                                           '236',
                                           '237',
                                           '238',
                                           '239',
                                           '240',
                                           '241',
                                           '242',
                                           '243',
                                           '244',
                                           '245',
                                           '246',
                                           '247',
                                           '248',
                                           '249',
                                           '250',
                                           '251',
                                           '252',
                                           '253',
                                           '254',
                                           '255',
                                           '256',
                                           '257',
                                           '258',
                                           '259',
                                           '260',
                                           '261',
                                           '262',
                                           '263',
                                           '264',
                                           '265',
                                           '266',
                                           '267',
                                           '268',
                                           '269',
                                           '270',
                                           '271',
                                           '272',
                                           '273',
                                           '274',
                                           '275',
                                           '276',
                                           '277',
                                           '278',
                                           '279',
                                           '280',
                                           '281',
                                           '282',
                                           '283',
                                           '284',
                                           '285',
                                           '286',
                                           '287',
                                           '288',
                                           '289',
                                           '290',
                                           '291',
                                           '292',
                                           '293',
                                           '294',
                                           '295',
                                           '296',
                                           '297',
                                           '298',
                                           '299',
                                           '300',
                                           '301',
                                           '302',
                                           '303',
                                           '304',
                                           '305',
                                           '306',
                                           '307',
                                           '308',
                                           '309',
                                           '310',
                                           '311',
                                           '312',
                                           '313',
                                           '314',
                                           '315',
                                           '316',
                                           'ZZZ'
                                         );

  MeasurementUnitCommonCodeLinearContentTypeValues: array[TXMLMeasurementUnitCommonCodeLinearContentType] of WideString =
                                                    (
                                                      'CMT',
                                                      'FOT',
                                                      'INH',
                                                      'MTR'
                                                    );

  MeasurementUnitCommonCodeVolumeContentTypeValues: array[TXMLMeasurementUnitCommonCodeVolumeContentType] of WideString =
                                                    (
                                                      'CMQ',
                                                      'FTQ',
                                                      'LTR',
                                                      'MMQ',
                                                      'MTQ'
                                                    );

  MeasurementUnitCommonCodeWeightContentTypeValues: array[TXMLMeasurementUnitCommonCodeWeightContentType] of WideString =
                                                    (
                                                      'KGM',
                                                      'TNE'
                                                    );

  MessageFunctionCodeContentTypeValues: array[TXMLMessageFunctionCodeContentType] of WideString =
                                        (
                                          '1',
                                          '2',
                                          '3',
                                          '4',
                                          '5',
                                          '6',
                                          '7',
                                          '8',
                                          '9',
                                          '10',
                                          '11',
                                          '12',
                                          '13',
                                          '14',
                                          '15',
                                          '16',
                                          '17',
                                          '18',
                                          '19',
                                          '20',
                                          '21',
                                          '22',
                                          '23',
                                          '24',
                                          '25',
                                          '26',
                                          '27',
                                          '28',
                                          '29',
                                          '30',
                                          '31',
                                          '32',
                                          '33',
                                          '34',
                                          '35',
                                          '36',
                                          '37',
                                          '38',
                                          '39',
                                          '40',
                                          '41',
                                          '42',
                                          '43',
                                          '44',
                                          '45',
                                          '46',
                                          '47',
                                          '48',
                                          '49',
                                          '50',
                                          '51',
                                          '52',
                                          '53',
                                          '54',
                                          '55',
                                          '56',
                                          '57',
                                          '58',
                                          '59',
                                          '60',
                                          '61',
                                          '62',
                                          '63',
                                          '64',
                                          '65',
                                          '66',
                                          '67',
                                          '68',
                                          '69',
                                          '70',
                                          '71',
                                          '72',
                                          '73'
                                        );

  PackageTypeCodeContentTypeValues: array[TXMLPackageTypeCodeContentType] of WideString =
                                    (
                                      '43',
                                      '44',
                                      '1A',
                                      '1B',
                                      '1D',
                                      '1F',
                                      '1G',
                                      '1W',
                                      '2C',
                                      '3A',
                                      '3H',
                                      '4A',
                                      '4B',
                                      '4C',
                                      '4D',
                                      '4F',
                                      '4G',
                                      '4H',
                                      '5H',
                                      '5L',
                                      '5M',
                                      '6H',
                                      '6P',
                                      '7A',
                                      '7B',
                                      '8A',
                                      '8B',
                                      '8C',
                                      'AA',
                                      'AB',
                                      'AC',
                                      'AD',
                                      'AE',
                                      'AF',
                                      'AG',
                                      'AH',
                                      'AI',
                                      'AJ',
                                      'AL',
                                      'AM',
                                      'AP',
                                      'AT',
                                      'AV',
                                      'B4',
                                      'BA',
                                      'BB',
                                      'BC',
                                      'BD',
                                      'BE',
                                      'BF',
                                      'BG',
                                      'BH',
                                      'BI',
                                      'BJ',
                                      'BK',
                                      'BL',
                                      'BM',
                                      'BN',
                                      'BO',
                                      'BP',
                                      'BQ',
                                      'BR',
                                      'BS',
                                      'BT',
                                      'BU',
                                      'BV',
                                      'BW',
                                      'BX',
                                      'BY',
                                      'BZ',
                                      'CA',
                                      'CB',
                                      'CC',
                                      'CD',
                                      'CE',
                                      'CF',
                                      'CG',
                                      'CH',
                                      'CI',
                                      'CJ',
                                      'CK',
                                      'CL',
                                      'CM',
                                      'CN',
                                      'CO',
                                      'CP',
                                      'CQ',
                                      'CR',
                                      'CS',
                                      'CT',
                                      'CU',
                                      'CV',
                                      'CW',
                                      'CX',
                                      'CY',
                                      'CZ',
                                      'DA',
                                      'DB',
                                      'DC',
                                      'DG',
                                      'DH',
                                      'DI',
                                      'DJ',
                                      'DK',
                                      'DL',
                                      'DM',
                                      'DN',
                                      'DP',
                                      'DR',
                                      'DS',
                                      'DT',
                                      'DU',
                                      'DV',
                                      'DW',
                                      'DX',
                                      'DY',
                                      'EC',
                                      'ED',
                                      'EE',
                                      'EF',
                                      'EG',
                                      'EH',
                                      'EI',
                                      'EN',
                                      'FB',
                                      'FC',
                                      'FD',
                                      'FE',
                                      'FI',
                                      'FL',
                                      'FO',
                                      'FP',
                                      'FR',
                                      'FT',
                                      'FW',
                                      'FX',
                                      'GB',
                                      'GI',
                                      'GL',
                                      'GR',
                                      'GU',
                                      'GY',
                                      'GZ',
                                      'HA',
                                      'HB',
                                      'HC',
                                      'HG',
                                      'HN',
                                      'HR',
                                      'IA',
                                      'IB',
                                      'IC',
                                      'ID',
                                      'IE',
                                      'IF',
                                      'IG',
                                      'IH',
                                      'IK',
                                      'IL',
                                      'IN',
                                      'IZ',
                                      'JB',
                                      'JC',
                                      'JG',
                                      'JR',
                                      'JT',
                                      'JY',
                                      'KG',
                                      'KI',
                                      'LE',
                                      'LG',
                                      'LT',
                                      'LU',
                                      'LV',
                                      'LZ',
                                      'MA',
                                      'MB',
                                      'MC',
                                      'ME',
                                      'MR',
                                      'MS',
                                      'MT',
                                      'MW',
                                      'MX',
                                      'NA',
                                      'NE',
                                      'NF',
                                      'NG',
                                      'NS',
                                      'NT',
                                      'NU',
                                      'NV',
                                      'O1',
                                      'O2',
                                      'O3',
                                      'O4',
                                      'O5',
                                      'O6',
                                      'O7',
                                      'O8',
                                      'O9',
                                      'OA',
                                      'OB',
                                      'OC',
                                      'OD',
                                      'OE',
                                      'OF',
                                      'OG',
                                      'OH',
                                      'OI',
                                      'OJ',
                                      'OK',
                                      'OL',
                                      'OM',
                                      'ON',
                                      'OP',
                                      'OQ',
                                      'OR',
                                      'OS',
                                      'OT',
                                      'OU',
                                      'OV',
                                      'OW',
                                      'OX',
                                      'OY',
                                      'OZ',
                                      'P1',
                                      'P2',
                                      'P3',
                                      'P4',
                                      'PA',
                                      'PB',
                                      'PC',
                                      'PD',
                                      'PE',
                                      'PF',
                                      'PG',
                                      'PH',
                                      'PI',
                                      'PJ',
                                      'PK',
                                      'PL',
                                      'PN',
                                      'PO',
                                      'PP',
                                      'PR',
                                      'PT',
                                      'PU',
                                      'PV',
                                      'PX',
                                      'PY',
                                      'PZ',
                                      'QA',
                                      'QB',
                                      'QC',
                                      'QD',
                                      'QF',
                                      'QG',
                                      'QH',
                                      'QJ',
                                      'QK',
                                      'QL',
                                      'QM',
                                      'QN',
                                      'QP',
                                      'QQ',
                                      'QR',
                                      'QS',
                                      'RD',
                                      'RG',
                                      'RJ',
                                      'RK',
                                      'RL',
                                      'RO',
                                      'RT',
                                      'RZ',
                                      'SA',
                                      'SB',
                                      'SC',
                                      'SD',
                                      'SE',
                                      'SH',
                                      'SI',
                                      'SK',
                                      'SL',
                                      'SM',
                                      'SO',
                                      'SP',
                                      'SS',
                                      'ST',
                                      'SU',
                                      'SV',
                                      'SW',
                                      'SY',
                                      'SZ',
                                      'T1',
                                      'TB',
                                      'TC',
                                      'TD',
                                      'TE',
                                      'TG',
                                      'TI',
                                      'TK',
                                      'TL',
                                      'TN',
                                      'TO',
                                      'TR',
                                      'TS',
                                      'TT',
                                      'TU',
                                      'TV',
                                      'TW',
                                      'TY',
                                      'TZ',
                                      'UC',
                                      'UN',
                                      'VA',
                                      'VG',
                                      'VI',
                                      'VK',
                                      'VL',
                                      'VN',
                                      'VO',
                                      'VP',
                                      'VQ',
                                      'VR',
                                      'VS',
                                      'VY',
                                      'WA',
                                      'WB',
                                      'WC',
                                      'WD',
                                      'WF',
                                      'WG',
                                      'WH',
                                      'WJ',
                                      'WK',
                                      'WL',
                                      'WM',
                                      'WN',
                                      'WP',
                                      'WQ',
                                      'WR',
                                      'WS',
                                      'WT',
                                      'WU',
                                      'WV',
                                      'WW',
                                      'WX',
                                      'WY',
                                      'WZ',
                                      'XA',
                                      'XB',
                                      'XC',
                                      'XD',
                                      'XF',
                                      'XG',
                                      'XH',
                                      'XJ',
                                      'XK',
                                      'YA',
                                      'YB',
                                      'YC',
                                      'YD',
                                      'YF',
                                      'YG',
                                      'YH',
                                      'YJ',
                                      'YK',
                                      'YL',
                                      'YM',
                                      'YN',
                                      'YP',
                                      'YQ',
                                      'YR',
                                      'YS',
                                      'YT',
                                      'YV',
                                      'YW',
                                      'YX',
                                      'YY',
                                      'YZ',
                                      'ZA',
                                      'ZB',
                                      'ZC',
                                      'ZD',
                                      'ZF',
                                      'ZG',
                                      'ZH',
                                      'ZJ',
                                      'ZK',
                                      'ZL',
                                      'ZM',
                                      'ZN',
                                      'ZP',
                                      'ZQ',
                                      'ZR',
                                      'ZS',
                                      'ZT',
                                      'ZU',
                                      'ZV',
                                      'ZW',
                                      'ZX',
                                      'ZY',
                                      'ZZ'
                                    );

  PackagingMarkingCodeContentTypeValues: array[TXMLPackagingMarkingCodeContentType] of WideString =
                                         (
                                           '1',
                                           '2',
                                           '3',
                                           '4',
                                           '5',
                                           '6',
                                           '7',
                                           '8',
                                           '9',
                                           '10',
                                           '31',
                                           '32',
                                           '33',
                                           '34',
                                           '35',
                                           '36',
                                           '37',
                                           '38',
                                           '39',
                                           '40',
                                           '41',
                                           '42',
                                           '43',
                                           '44',
                                           '45',
                                           '46',
                                           '47',
                                           '48',
                                           '49',
                                           '53',
                                           '54',
                                           '55',
                                           '56',
                                           '57',
                                           '58',
                                           '59',
                                           '60',
                                           '61',
                                           '62',
                                           '63',
                                           '66',
                                           '68',
                                           '69',
                                           '70',
                                           '71',
                                           '72',
                                           '73',
                                           '74',
                                           '75',
                                           '76',
                                           '77',
                                           '80'
                                         );

  PartyRoleCodeContentTypeValues: array[TXMLPartyRoleCodeContentType] of WideString =
                                  (
                                    'AA',
                                    'AB',
                                    'AE',
                                    'AF',
                                    'AG',
                                    'AH',
                                    'AI',
                                    'AJ',
                                    'AK',
                                    'AL',
                                    'AM',
                                    'AN',
                                    'AO',
                                    'AP',
                                    'AQ',
                                    'AR',
                                    'AS',
                                    'AT',
                                    'AU',
                                    'AV',
                                    'AW',
                                    'AX',
                                    'AY',
                                    'AZ',
                                    'B1',
                                    'B2',
                                    'BA',
                                    'BB',
                                    'BC',
                                    'BD',
                                    'BE',
                                    'BF',
                                    'BG',
                                    'BH',
                                    'BI',
                                    'BJ',
                                    'BK',
                                    'BL',
                                    'BM',
                                    'BN',
                                    'BO',
                                    'BP',
                                    'BQ',
                                    'BS',
                                    'BT',
                                    'BU',
                                    'BV',
                                    'BW',
                                    'BX',
                                    'BY',
                                    'BZ',
                                    'C1',
                                    'C2',
                                    'CA',
                                    'CB',
                                    'CC',
                                    'CD',
                                    'CE',
                                    'CF',
                                    'CG',
                                    'CH',
                                    'CI',
                                    'CJ',
                                    'CK',
                                    'CL',
                                    'CM',
                                    'CN',
                                    'CNX',
                                    'CNY',
                                    'CNZ',
                                    'CO',
                                    'COA',
                                    'COB',
                                    'COC',
                                    'COD',
                                    'COE',
                                    'COF',
                                    'COG',
                                    'COH',
                                    'COI',
                                    'COJ',
                                    'COK',
                                    'COL',
                                    'COM',
                                    'CON',
                                    'COO',
                                    'COP',
                                    'COQ',
                                    'COR',
                                    'COS',
                                    'COT',
                                    'COU',
                                    'COV',
                                    'COW',
                                    'COX',
                                    'COY',
                                    'COZ',
                                    'CP',
                                    'CPA',
                                    'CPB',
                                    'CPC',
                                    'CPD',
                                    'CPE',
                                    'CPF',
                                    'CPG',
                                    'CPH',
                                    'CPI',
                                    'CPJ',
                                    'CPK',
                                    'CPL',
                                    'CPM',
                                    'CPN',
                                    'CPO',
                                    'CQ',
                                    'CR',
                                    'CS',
                                    'CT',
                                    'CU',
                                    'CV',
                                    'CW',
                                    'CX',
                                    'CY',
                                    'CZ',
                                    'DA',
                                    'DB',
                                    'DC',
                                    'DCP',
                                    'DCQ',
                                    'DCR',
                                    'DCS',
                                    'DCT',
                                    'DCU',
                                    'DCV',
                                    'DCW',
                                    'DCX',
                                    'DCY',
                                    'DCZ',
                                    'DD',
                                    'DDA',
                                    'DDB',
                                    'DDC',
                                    'DDD',
                                    'DDE',
                                    'DDF',
                                    'DDG',
                                    'DDH',
                                    'DDI',
                                    'DDJ',
                                    'DDK',
                                    'DDL',
                                    'DDM',
                                    'DDN',
                                    'DDO',
                                    'DDP',
                                    'DDQ',
                                    'DDR',
                                    'DDS',
                                    'DDT',
                                    'DDU',
                                    'DDV',
                                    'DDW',
                                    'DDX',
                                    'DDY',
                                    'DDZ',
                                    'DE',
                                    'DEA',
                                    'DEB',
                                    'DEC',
                                    'DED',
                                    'DEE',
                                    'DEF',
                                    'DEG',
                                    'DEH',
                                    'DEI',
                                    'DEJ',
                                    'DEK',
                                    'DEL',
                                    'DEM',
                                    'DEN',
                                    'DEO',
                                    'DEP',
                                    'DEQ',
                                    'DER',
                                    'DES',
                                    'DET',
                                    'DEU',
                                    'DEV',
                                    'DEW',
                                    'DEX',
                                    'DEY',
                                    'DEZ',
                                    'DF',
                                    'DFA',
                                    'DFB',
                                    'DFC',
                                    'DFD',
                                    'DFE',
                                    'DFF',
                                    'DFG',
                                    'DFH',
                                    'DFI',
                                    'DFJ',
                                    'DFK',
                                    'DFL',
                                    'DFM',
                                    'DFN',
                                    'DFO',
                                    'DFP',
                                    'DFQ',
                                    'DFR',
                                    'DFS',
                                    'DFT',
                                    'DFU',
                                    'DFV',
                                    'DFW',
                                    'DFX',
                                    'DFY',
                                    'DFZ',
                                    'DG',
                                    'DGA',
                                    'DGB',
                                    'DGC',
                                    'DGD',
                                    'DGE',
                                    'DGF',
                                    'DGG',
                                    'DGH',
                                    'DGI',
                                    'DGJ',
                                    'DGK',
                                    'DGL',
                                    'DGM',
                                    'DGN',
                                    'DGO',
                                    'DGP',
                                    'DGQ',
                                    'DGR',
                                    'DGS',
                                    'DGT',
                                    'DGU',
                                    'DGV',
                                    'DGW',
                                    'DH',
                                    'DI',
                                    'DJ',
                                    'DK',
                                    'DL',
                                    'DM',
                                    'DN',
                                    'DO',
                                    'DP',
                                    'DQ',
                                    'DR',
                                    'DS',
                                    'DT',
                                    'DU',
                                    'DV',
                                    'DW',
                                    'DX',
                                    'DY',
                                    'DZ',
                                    'EA',
                                    'EB',
                                    'EC',
                                    'ED',
                                    'EE',
                                    'EF',
                                    'EG',
                                    'EH',
                                    'EI',
                                    'EJ',
                                    'EK',
                                    'EL',
                                    'EM',
                                    'EN',
                                    'EO',
                                    'EP',
                                    'EQ',
                                    'ER',
                                    'ES',
                                    'ET',
                                    'EU',
                                    'EV',
                                    'EW',
                                    'EX',
                                    'EY',
                                    'EZ',
                                    'FA',
                                    'FB',
                                    'FC',
                                    'FD',
                                    'FE',
                                    'FF',
                                    'FG',
                                    'FH',
                                    'FI',
                                    'FJ',
                                    'FK',
                                    'FL',
                                    'FM',
                                    'FN',
                                    'FO',
                                    'FP',
                                    'FQ',
                                    'FR',
                                    'FS',
                                    'FT',
                                    'FU',
                                    'FV',
                                    'FW',
                                    'FX',
                                    'FY',
                                    'FZ',
                                    'GA',
                                    'GB',
                                    'GC',
                                    'GD',
                                    'GE',
                                    'GF',
                                    'GH',
                                    'GI',
                                    'GJ',
                                    'GK',
                                    'GL',
                                    'GM',
                                    'GN',
                                    'GO',
                                    'GP',
                                    'GQ',
                                    'GR',
                                    'GS',
                                    'GT',
                                    'GU',
                                    'GV',
                                    'GW',
                                    'GX',
                                    'GY',
                                    'GZ',
                                    'HA',
                                    'HB',
                                    'HC',
                                    'HD',
                                    'HE',
                                    'HF',
                                    'HG',
                                    'HH',
                                    'HI',
                                    'HJ',
                                    'HK',
                                    'HL',
                                    'HM',
                                    'HN',
                                    'HO',
                                    'HP',
                                    'HQ',
                                    'HR',
                                    'HS',
                                    'HT',
                                    'HU',
                                    'HV',
                                    'HW',
                                    'HX',
                                    'HY',
                                    'HZ',
                                    'I1',
                                    'I2',
                                    'IB',
                                    'IC',
                                    'ID',
                                    'IE',
                                    'IF',
                                    'IG',
                                    'IH',
                                    'II',
                                    'IJ',
                                    'IL',
                                    'IM',
                                    'IN',
                                    'IO',
                                    'IP',
                                    'IQ',
                                    'IR',
                                    'IS',
                                    'IT',
                                    'IU',
                                    'IV',
                                    'IW',
                                    'IX',
                                    'IY',
                                    'IZ',
                                    'JA',
                                    'JB',
                                    'JC',
                                    'JD',
                                    'JE',
                                    'JF',
                                    'JG',
                                    'JH',
                                    'LA',
                                    'LB',
                                    'LC',
                                    'LD',
                                    'LE',
                                    'LF',
                                    'LG',
                                    'LH',
                                    'LI',
                                    'LJ',
                                    'LK',
                                    'LL',
                                    'LM',
                                    'LN',
                                    'LO',
                                    'LP',
                                    'LQ',
                                    'LR',
                                    'LS',
                                    'LT',
                                    'LU',
                                    'LV',
                                    'MA',
                                    'MAD',
                                    'MDR',
                                    'MF',
                                    'MG',
                                    'MI',
                                    'MOP',
                                    'MP',
                                    'MR',
                                    'MS',
                                    'MT',
                                    'N2',
                                    'NI',
                                    'OA',
                                    'OB',
                                    'OC',
                                    'OD',
                                    'OE',
                                    'OF',
                                    'OG',
                                    'OH',
                                    'OI',
                                    'OJ',
                                    'OK',
                                    'OL',
                                    'OM',
                                    'ON',
                                    'OO',
                                    'OP',
                                    'OQ',
                                    'OR',
                                    'OS',
                                    'OT',
                                    'OU',
                                    'OV',
                                    'OW',
                                    'OX',
                                    'OY',
                                    'OZ',
                                    'P1',
                                    'P2',
                                    'P3',
                                    'P4',
                                    'PA',
                                    'PAD',
                                    'PB',
                                    'PC',
                                    'PD',
                                    'PE',
                                    'PF',
                                    'PG',
                                    'PH',
                                    'PI',
                                    'PJ',
                                    'PK',
                                    'PM',
                                    'PN',
                                    'PO',
                                    'POA',
                                    'PQ',
                                    'PR',
                                    'PS',
                                    'PT',
                                    'PW',
                                    'PX',
                                    'PY',
                                    'PZ',
                                    'RA',
                                    'RB',
                                    'RCA',
                                    'RCR',
                                    'RE',
                                    'RF',
                                    'RH',
                                    'RI',
                                    'RL',
                                    'RM',
                                    'RP',
                                    'RS',
                                    'RV',
                                    'RW',
                                    'SB',
                                    'SE',
                                    'SF',
                                    'SG',
                                    'SI',
                                    'SN',
                                    'SO',
                                    'SPC',
                                    'SR',
                                    'SS',
                                    'ST',
                                    'SU',
                                    'SX',
                                    'SY',
                                    'SZ',
                                    'TA',
                                    'TB',
                                    'TC',
                                    'TCP',
                                    'TCR',
                                    'TD',
                                    'TE',
                                    'TF',
                                    'TG',
                                    'TH',
                                    'TI',
                                    'TJ',
                                    'TK',
                                    'TL',
                                    'TM',
                                    'TN',
                                    'TO',
                                    'TP',
                                    'TQ',
                                    'TR',
                                    'TS',
                                    'TT',
                                    'TU',
                                    'TV',
                                    'TW',
                                    'TX',
                                    'TY',
                                    'TZ',
                                    'UA',
                                    'UB',
                                    'UC',
                                    'UD',
                                    'UE',
                                    'UF',
                                    'UG',
                                    'UH',
                                    'UHP',
                                    'UI',
                                    'UJ',
                                    'UK',
                                    'UL',
                                    'UM',
                                    'UN',
                                    'UO',
                                    'UP',
                                    'UQ',
                                    'UR',
                                    'US',
                                    'UT',
                                    'UU',
                                    'UV',
                                    'UW',
                                    'UX',
                                    'UY',
                                    'UZ',
                                    'VA',
                                    'VB',
                                    'VC',
                                    'VE',
                                    'VF',
                                    'VG',
                                    'VH',
                                    'VI',
                                    'VJ',
                                    'VK',
                                    'VL',
                                    'VM',
                                    'VN',
                                    'VO',
                                    'VP',
                                    'VQ',
                                    'VR',
                                    'VS',
                                    'VT',
                                    'VU',
                                    'VV',
                                    'VW',
                                    'VX',
                                    'VY',
                                    'VZ',
                                    'WA',
                                    'WB',
                                    'WC',
                                    'WD',
                                    'WE',
                                    'WF',
                                    'WG',
                                    'WH',
                                    'WI',
                                    'WJ',
                                    'WK',
                                    'WL',
                                    'WM',
                                    'WN',
                                    'WO',
                                    'WP',
                                    'WPA',
                                    'WQ',
                                    'WR',
                                    'WS',
                                    'WT',
                                    'WU',
                                    'WV',
                                    'WW',
                                    'WX',
                                    'WY',
                                    'WZ',
                                    'ZZZ'
                                  );

  PartyRoleCodeChargePayingContentTypeValues: array[TXMLPartyRoleCodeChargePayingContentType] of WideString =
                                              (
                                                'AB',
                                                'AE',
                                                'AF',
                                                'AH',
                                                'AQ',
                                                'AR',
                                                'AT',
                                                'AU',
                                                'CA',
                                                'CG',
                                                'CN',
                                                'CPD',
                                                'CX',
                                                'CZ',
                                                'DGB',
                                                'EX',
                                                'FW',
                                                'GS',
                                                'IM',
                                                'IV',
                                                'PE'
                                              );

  PaymentGuaranteeMeansCodeContentTypeValues: array[TXMLPaymentGuaranteeMeansCodeContentType] of WideString =
                                              (
                                                '1',
                                                '10',
                                                '11',
                                                '12',
                                                '13',
                                                '14',
                                                '20',
                                                '21',
                                                '23',
                                                '24',
                                                '45',
                                                'ZZZ'
                                              );

  PaymentMeansChannelCodeContentTypeValues: array[TXMLPaymentMeansChannelCodeContentType] of WideString =
                                            (
                                              '1',
                                              '2',
                                              '3',
                                              '4',
                                              '5',
                                              '6',
                                              '7',
                                              '8',
                                              '9',
                                              '10',
                                              '11',
                                              '12',
                                              '13',
                                              '14',
                                              '15',
                                              'ZZZ'
                                            );

  PaymentMeansCodeContentTypeValues: array[TXMLPaymentMeansCodeContentType] of WideString =
                                     (
                                       '1',
                                       '2',
                                       '3',
                                       '4',
                                       '5',
                                       '6',
                                       '7',
                                       '8',
                                       '9',
                                       '10',
                                       '11',
                                       '12',
                                       '13',
                                       '14',
                                       '15',
                                       '16',
                                       '17',
                                       '18',
                                       '19',
                                       '20',
                                       '21',
                                       '22',
                                       '23',
                                       '24',
                                       '25',
                                       '26',
                                       '27',
                                       '28',
                                       '29',
                                       '30',
                                       '31',
                                       '32',
                                       '33',
                                       '34',
                                       '35',
                                       '36',
                                       '37',
                                       '38',
                                       '39',
                                       '40',
                                       '41',
                                       '42',
                                       '43',
                                       '44',
                                       '45',
                                       '46',
                                       '47',
                                       '48',
                                       '49',
                                       '50',
                                       '51',
                                       '52',
                                       '53',
                                       '54',
                                       '55',
                                       '56',
                                       '57',
                                       '58',
                                       '59',
                                       '60',
                                       '61',
                                       '62',
                                       '63',
                                       '64',
                                       '65',
                                       '66',
                                       '67',
                                       '68',
                                       '69',
                                       '70',
                                       '74',
                                       '75',
                                       '76',
                                       '77',
                                       '78',
                                       '91',
                                       '92',
                                       '93',
                                       '94',
                                       '95',
                                       '96',
                                       '97',
                                       'ZZZ'
                                     );

  PaymentTermsTypeCodeContentTypeValues: array[TXMLPaymentTermsTypeCodeContentType] of WideString =
                                         (
                                           '1',
                                           '2',
                                           '3',
                                           '4',
                                           '5',
                                           '6',
                                           '7',
                                           '8',
                                           '9',
                                           '10',
                                           '11',
                                           '12',
                                           '13',
                                           '14',
                                           '15',
                                           '16',
                                           '17',
                                           '18',
                                           '19',
                                           '20',
                                           '21',
                                           '22',
                                           '23',
                                           '24',
                                           '25',
                                           '26',
                                           '27',
                                           '28',
                                           '29',
                                           '30',
                                           '31',
                                           '32',
                                           '33',
                                           '34',
                                           '35',
                                           '36',
                                           '37',
                                           '38',
                                           '39',
                                           '40',
                                           '41',
                                           '42',
                                           '43',
                                           '44',
                                           '45',
                                           '46',
                                           '47',
                                           '48',
                                           '49',
                                           '50',
                                           '51',
                                           '52',
                                           '53',
                                           '54',
                                           '55',
                                           '56',
                                           '57',
                                           '58',
                                           '59',
                                           '60',
                                           '61',
                                           '62',
                                           '63',
                                           '64',
                                           '65',
                                           '66',
                                           '67',
                                           '68',
                                           '69',
                                           '70',
                                           '71',
                                           '72',
                                           '73',
                                           '74',
                                           '75',
                                           '76',
                                           '77',
                                           '78',
                                           'ZZZ'
                                         );

  PriceTypeCodeContentTypeValues: array[TXMLPriceTypeCodeContentType] of WideString =
                                  (
                                    'AA',
                                    'AB',
                                    'AC',
                                    'AD',
                                    'AE',
                                    'AF',
                                    'AG',
                                    'AH',
                                    'AI',
                                    'AJ',
                                    'AK',
                                    'AL',
                                    'AM',
                                    'AN',
                                    'AO',
                                    'AP',
                                    'AQ',
                                    'AR',
                                    'CA',
                                    'CT',
                                    'CU',
                                    'DI',
                                    'EC',
                                    'NW',
                                    'PC',
                                    'PE',
                                    'PK',
                                    'PL',
                                    'PT',
                                    'PU',
                                    'PV',
                                    'PW',
                                    'QT',
                                    'SR',
                                    'TB',
                                    'TU',
                                    'TW',
                                    'WH',
                                    'WI'
                                  );

  ReferenceTypeCodeContentTypeValues: array[TXMLReferenceTypeCodeContentType] of WideString =
                                      (
                                        'AAA',
                                        'AAB',
                                        'AAC',
                                        'AAD',
                                        'AAE',
                                        'AAF',
                                        'AAG',
                                        'AAH',
                                        'AAI',
                                        'AAJ',
                                        'AAK',
                                        'AAL',
                                        'AAM',
                                        'AAN',
                                        'AAO',
                                        'AAP',
                                        'AAQ',
                                        'AAR',
                                        'AAS',
                                        'AAT',
                                        'AAU',
                                        'AAV',
                                        'AAW',
                                        'AAX',
                                        'AAY',
                                        'AAZ',
                                        'ABA',
                                        'ABB',
                                        'ABC',
                                        'ABD',
                                        'ABE',
                                        'ABF',
                                        'ABG',
                                        'ABH',
                                        'ABI',
                                        'ABJ',
                                        'ABK',
                                        'ABL',
                                        'ABM',
                                        'ABN',
                                        'ABO',
                                        'ABP',
                                        'ABQ',
                                        'ABR',
                                        'ABS',
                                        'ABT',
                                        'ABU',
                                        'ABV',
                                        'ABW',
                                        'ABX',
                                        'ABY',
                                        'ABZ',
                                        'AC',
                                        'ACA',
                                        'ACB',
                                        'ACC',
                                        'ACD',
                                        'ACE',
                                        'ACF',
                                        'ACG',
                                        'ACH',
                                        'ACI',
                                        'ACJ',
                                        'ACK',
                                        'ACL',
                                        'ACN',
                                        'ACO',
                                        'ACP',
                                        'ACQ',
                                        'ACR',
                                        'ACT',
                                        'ACU',
                                        'ACV',
                                        'ACW',
                                        'ACX',
                                        'ACY',
                                        'ACZ',
                                        'ADA',
                                        'ADB',
                                        'ADC',
                                        'ADD',
                                        'ADE',
                                        'ADF',
                                        'ADG',
                                        'ADI',
                                        'ADJ',
                                        'ADK',
                                        'ADL',
                                        'ADM',
                                        'ADN',
                                        'ADO',
                                        'ADP',
                                        'ADQ',
                                        'ADT',
                                        'ADU',
                                        'ADV',
                                        'ADW',
                                        'ADX',
                                        'ADY',
                                        'ADZ',
                                        'AE',
                                        'AEA',
                                        'AEB',
                                        'AEC',
                                        'AED',
                                        'AEE',
                                        'AEF',
                                        'AEG',
                                        'AEH',
                                        'AEI',
                                        'AEJ',
                                        'AEK',
                                        'AEL',
                                        'AEM',
                                        'AEN',
                                        'AEO',
                                        'AEP',
                                        'AEQ',
                                        'AER',
                                        'AES',
                                        'AET',
                                        'AEU',
                                        'AEV',
                                        'AEW',
                                        'AEX',
                                        'AEY',
                                        'AEZ',
                                        'AF',
                                        'AFA',
                                        'AFB',
                                        'AFC',
                                        'AFD',
                                        'AFE',
                                        'AFF',
                                        'AFG',
                                        'AFH',
                                        'AFI',
                                        'AFJ',
                                        'AFK',
                                        'AFL',
                                        'AFM',
                                        'AFN',
                                        'AFO',
                                        'AFP',
                                        'AFQ',
                                        'AFR',
                                        'AFS',
                                        'AFT',
                                        'AFU',
                                        'AFV',
                                        'AFW',
                                        'AFX',
                                        'AFY',
                                        'AFZ',
                                        'AGA',
                                        'AGB',
                                        'AGC',
                                        'AGD',
                                        'AGE',
                                        'AGF',
                                        'AGG',
                                        'AGH',
                                        'AGI',
                                        'AGJ',
                                        'AGK',
                                        'AGL',
                                        'AGM',
                                        'AGN',
                                        'AGO',
                                        'AGP',
                                        'AGQ',
                                        'AGR',
                                        'AGS',
                                        'AGT',
                                        'AGU',
                                        'AGV',
                                        'AGW',
                                        'AGX',
                                        'AGY',
                                        'AGZ',
                                        'AHA',
                                        'AHB',
                                        'AHC',
                                        'AHD',
                                        'AHE',
                                        'AHF',
                                        'AHG',
                                        'AHH',
                                        'AHI',
                                        'AHJ',
                                        'AHK',
                                        'AHL',
                                        'AHM',
                                        'AHN',
                                        'AHO',
                                        'AHP',
                                        'AHQ',
                                        'AHR',
                                        'AHS',
                                        'AHT',
                                        'AHU',
                                        'AHV',
                                        'AHX',
                                        'AHY',
                                        'AHZ',
                                        'AIA',
                                        'AIB',
                                        'AIC',
                                        'AID',
                                        'AIE',
                                        'AIF',
                                        'AIG',
                                        'AIH',
                                        'AII',
                                        'AIJ',
                                        'AIK',
                                        'AIL',
                                        'AIM',
                                        'AIN',
                                        'AIO',
                                        'AIP',
                                        'AIQ',
                                        'AIR',
                                        'AIS',
                                        'AIT',
                                        'AIU',
                                        'AIV',
                                        'AIW',
                                        'AIX',
                                        'AIY',
                                        'AIZ',
                                        'AJA',
                                        'AJB',
                                        'AJC',
                                        'AJD',
                                        'AJE',
                                        'AJF',
                                        'AJG',
                                        'AJH',
                                        'AJI',
                                        'AJJ',
                                        'AJK',
                                        'AJL',
                                        'AJM',
                                        'AJN',
                                        'AJO',
                                        'AJP',
                                        'AJQ',
                                        'AJR',
                                        'AJS',
                                        'AJT',
                                        'AJU',
                                        'AJV',
                                        'AJW',
                                        'AJX',
                                        'AJY',
                                        'AJZ',
                                        'AKA',
                                        'AKB',
                                        'AKC',
                                        'AKD',
                                        'AKE',
                                        'AKF',
                                        'AKG',
                                        'AKH',
                                        'AKI',
                                        'AKJ',
                                        'AKK',
                                        'AKL',
                                        'AKM',
                                        'AKN',
                                        'AKO',
                                        'AKP',
                                        'AKQ',
                                        'AKR',
                                        'AKS',
                                        'AKT',
                                        'AKU',
                                        'AKV',
                                        'AKW',
                                        'AKX',
                                        'AKY',
                                        'AKZ',
                                        'ALA',
                                        'ALB',
                                        'ALC',
                                        'ALD',
                                        'ALE',
                                        'ALF',
                                        'ALG',
                                        'ALH',
                                        'ALI',
                                        'ALJ',
                                        'ALK',
                                        'ALL',
                                        'ALM',
                                        'ALN',
                                        'ALO',
                                        'ALP',
                                        'ALQ',
                                        'ALR',
                                        'ALS',
                                        'ALT',
                                        'ALU',
                                        'ALV',
                                        'ALW',
                                        'ALX',
                                        'ALY',
                                        'ALZ',
                                        'AMA',
                                        'AMB',
                                        'AMC',
                                        'AMD',
                                        'AME',
                                        'AMF',
                                        'AMG',
                                        'AMH',
                                        'AMI',
                                        'AMJ',
                                        'AMK',
                                        'AML',
                                        'AMM',
                                        'AMN',
                                        'AMO',
                                        'AMP',
                                        'AMQ',
                                        'AMR',
                                        'AMS',
                                        'AMT',
                                        'AMU',
                                        'AMV',
                                        'AMW',
                                        'AMX',
                                        'AMY',
                                        'AMZ',
                                        'ANA',
                                        'ANB',
                                        'ANC',
                                        'AND',
                                        'ANE',
                                        'ANF',
                                        'ANG',
                                        'ANH',
                                        'ANI',
                                        'ANJ',
                                        'ANK',
                                        'ANL',
                                        'ANM',
                                        'ANN',
                                        'ANO',
                                        'ANP',
                                        'ANQ',
                                        'ANR',
                                        'ANS',
                                        'ANT',
                                        'ANU',
                                        'ANV',
                                        'ANW',
                                        'ANX',
                                        'ANY',
                                        'AOA',
                                        'AOD',
                                        'AOE',
                                        'AOF',
                                        'AOG',
                                        'AOH',
                                        'AOI',
                                        'AOJ',
                                        'AOK',
                                        'AOL',
                                        'AOM',
                                        'AON',
                                        'AOO',
                                        'AOP',
                                        'AOQ',
                                        'AOR',
                                        'AOS',
                                        'AOT',
                                        'AOU',
                                        'AOV',
                                        'AOW',
                                        'AOX',
                                        'AOY',
                                        'AOZ',
                                        'AP',
                                        'APA',
                                        'APB',
                                        'APC',
                                        'APD',
                                        'APE',
                                        'APF',
                                        'APG',
                                        'APH',
                                        'API',
                                        'APJ',
                                        'APK',
                                        'APL',
                                        'APM',
                                        'APN',
                                        'APO',
                                        'APP',
                                        'APQ',
                                        'APR',
                                        'APS',
                                        'APT',
                                        'APU',
                                        'APV',
                                        'APW',
                                        'APX',
                                        'APY',
                                        'APZ',
                                        'AQA',
                                        'AQB',
                                        'AQC',
                                        'AQD',
                                        'AQE',
                                        'AQF',
                                        'AQG',
                                        'AQH',
                                        'AQI',
                                        'AQJ',
                                        'AQK',
                                        'AQL',
                                        'AQM',
                                        'AQN',
                                        'AQO',
                                        'AQP',
                                        'AQQ',
                                        'AQR',
                                        'AQS',
                                        'AQT',
                                        'AQU',
                                        'AQV',
                                        'AQW',
                                        'AQX',
                                        'AQY',
                                        'AQZ',
                                        'ARA',
                                        'ARB',
                                        'ARC',
                                        'ARD',
                                        'ARE',
                                        'ARF',
                                        'ARG',
                                        'ARH',
                                        'ARI',
                                        'ARJ',
                                        'ARK',
                                        'ARL',
                                        'ARM',
                                        'ARN',
                                        'ARO',
                                        'ARP',
                                        'ARQ',
                                        'ARR',
                                        'ARS',
                                        'ART',
                                        'ARU',
                                        'ARV',
                                        'ARW',
                                        'ARX',
                                        'ARY',
                                        'ARZ',
                                        'ASA',
                                        'ASB',
                                        'ASC',
                                        'ASD',
                                        'ASE',
                                        'ASF',
                                        'ASG',
                                        'ASH',
                                        'ASI',
                                        'ASJ',
                                        'ASK',
                                        'ASL',
                                        'ASM',
                                        'ASN',
                                        'ASO',
                                        'ASP',
                                        'ASQ',
                                        'ASR',
                                        'ASS',
                                        'AST',
                                        'ASU',
                                        'ASV',
                                        'ASW',
                                        'ASX',
                                        'ASY',
                                        'ASZ',
                                        'ATA',
                                        'ATB',
                                        'ATC',
                                        'ATD',
                                        'ATE',
                                        'ATF',
                                        'ATG',
                                        'ATH',
                                        'ATI',
                                        'ATJ',
                                        'ATK',
                                        'ATL',
                                        'ATM',
                                        'ATN',
                                        'ATO',
                                        'ATP',
                                        'ATQ',
                                        'ATR',
                                        'ATS',
                                        'ATT',
                                        'ATU',
                                        'ATV',
                                        'ATW',
                                        'ATX',
                                        'ATY',
                                        'ATZ',
                                        'AU',
                                        'AUA',
                                        'AUB',
                                        'AUC',
                                        'AUD',
                                        'AUE',
                                        'AUF',
                                        'AUG',
                                        'AUH',
                                        'AUI',
                                        'AUJ',
                                        'AUK',
                                        'AUL',
                                        'AUM',
                                        'AUN',
                                        'AUO',
                                        'AUP',
                                        'AUQ',
                                        'AUR',
                                        'AUS',
                                        'AUT',
                                        'AUU',
                                        'AUV',
                                        'AUW',
                                        'AUX',
                                        'AUY',
                                        'AUZ',
                                        'AV',
                                        'AVA',
                                        'AVB',
                                        'AVC',
                                        'AVD',
                                        'AVE',
                                        'AVF',
                                        'AVG',
                                        'AVH',
                                        'AVI',
                                        'AVJ',
                                        'AVK',
                                        'AVL',
                                        'AVM',
                                        'AVN',
                                        'AVO',
                                        'AVP',
                                        'AVQ',
                                        'AVR',
                                        'AVS',
                                        'AVT',
                                        'AVU',
                                        'AVV',
                                        'AVW',
                                        'AVX',
                                        'AVY',
                                        'AVZ',
                                        'AWA',
                                        'AWB',
                                        'AWC',
                                        'AWD',
                                        'AWE',
                                        'AWF',
                                        'AWG',
                                        'AWH',
                                        'AWI',
                                        'AWJ',
                                        'AWK',
                                        'AWL',
                                        'AWM',
                                        'AWN',
                                        'AWO',
                                        'AWP',
                                        'AWQ',
                                        'AWR',
                                        'AWS',
                                        'AWT',
                                        'AWU',
                                        'AWV',
                                        'AWW',
                                        'AWX',
                                        'AWY',
                                        'AWZ',
                                        'AXA',
                                        'AXB',
                                        'AXC',
                                        'AXD',
                                        'AXE',
                                        'AXF',
                                        'AXG',
                                        'AXH',
                                        'AXI',
                                        'AXJ',
                                        'AXK',
                                        'AXL',
                                        'AXM',
                                        'AXN',
                                        'AXO',
                                        'AXP',
                                        'AXQ',
                                        'AXR',
                                        'AXS',
                                        'BA',
                                        'BC',
                                        'BD',
                                        'BE',
                                        'BH',
                                        'BM',
                                        'BN',
                                        'BO',
                                        'BR',
                                        'BT',
                                        'BTP',
                                        'BW',
                                        'CAS',
                                        'CAT',
                                        'CAU',
                                        'CAV',
                                        'CAW',
                                        'CAX',
                                        'CAY',
                                        'CAZ',
                                        'CBA',
                                        'CBB',
                                        'CD',
                                        'CEC',
                                        'CED',
                                        'CFE',
                                        'CFF',
                                        'CFO',
                                        'CG',
                                        'CH',
                                        'CK',
                                        'CKN',
                                        'CM',
                                        'CMR',
                                        'CN',
                                        'CNO',
                                        'COF',
                                        'CP',
                                        'CR',
                                        'CRN',
                                        'CS',
                                        'CST',
                                        'CT',
                                        'CU',
                                        'CV',
                                        'CW',
                                        'CZ',
                                        'DA',
                                        'DAN',
                                        'DB',
                                        'DI',
                                        'DL',
                                        'DM',
                                        'DQ',
                                        'DR',
                                        'EA',
                                        'EB',
                                        'ED',
                                        'EE',
                                        'EEP',
                                        'EI',
                                        'EN',
                                        'EQ',
                                        'ER',
                                        'ERN',
                                        'ET',
                                        'EX',
                                        'FC',
                                        'FF',
                                        'FI',
                                        'FLW',
                                        'FN',
                                        'FO',
                                        'FS',
                                        'FT',
                                        'FV',
                                        'FX',
                                        'GA',
                                        'GC',
                                        'GD',
                                        'GDN',
                                        'GN',
                                        'HS',
                                        'HWB',
                                        'IA',
                                        'IB',
                                        'ICA',
                                        'ICE',
                                        'ICO',
                                        'II',
                                        'IL',
                                        'INB',
                                        'INN',
                                        'INO',
                                        'IP',
                                        'IS',
                                        'IT',
                                        'IV',
                                        'JB',
                                        'JE',
                                        'LA',
                                        'LAN',
                                        'LAR',
                                        'LB',
                                        'LC',
                                        'LI',
                                        'LO',
                                        'LRC',
                                        'LS',
                                        'MA',
                                        'MB',
                                        'MF',
                                        'MG',
                                        'MH',
                                        'MR',
                                        'MRN',
                                        'MS',
                                        'MSS',
                                        'MWB',
                                        'NA',
                                        'NF',
                                        'OH',
                                        'OI',
                                        'ON',
                                        'OP',
                                        'OR',
                                        'PB',
                                        'PC',
                                        'PD',
                                        'PE',
                                        'PF',
                                        'PI',
                                        'PK',
                                        'PL',
                                        'POR',
                                        'PP',
                                        'PQ',
                                        'PR',
                                        'PS',
                                        'PW',
                                        'PY',
                                        'RA',
                                        'RC',
                                        'RCN',
                                        'RE',
                                        'REN',
                                        'RF',
                                        'RR',
                                        'RT',
                                        'SA',
                                        'SB',
                                        'SD',
                                        'SE',
                                        'SEA',
                                        'SF',
                                        'SH',
                                        'SI',
                                        'SM',
                                        'SN',
                                        'SP',
                                        'SQ',
                                        'SRN',
                                        'SS',
                                        'STA',
                                        'SW',
                                        'SZ',
                                        'TB',
                                        'TCR',
                                        'TE',
                                        'TF',
                                        'TI',
                                        'TIN',
                                        'TL',
                                        'TN',
                                        'TP',
                                        'UAR',
                                        'UC',
                                        'UCN',
                                        'UN',
                                        'UO',
                                        'URI',
                                        'VA',
                                        'VC',
                                        'VGR',
                                        'VM',
                                        'VN',
                                        'VON',
                                        'VOR',
                                        'VP',
                                        'VR',
                                        'VS',
                                        'VT',
                                        'VV',
                                        'WE',
                                        'WM',
                                        'WN',
                                        'WR',
                                        'WS',
                                        'WY',
                                        'XA',
                                        'XC',
                                        'XP',
                                        'ZZZ'
                                      );

  SealConditionCodeContentTypeValues: array[TXMLSealConditionCodeContentType] of WideString =
                                      (
                                        '1',
                                        '2',
                                        '3',
                                        '4',
                                        '5'
                                      );

  SealingPartyRoleCodeContentTypeValues: array[TXMLSealingPartyRoleCodeContentType] of WideString =
                                         (
                                           'AA',
                                           'AB',
                                           'AC',
                                           'CA',
                                           'CU',
                                           'SH',
                                           'TO'
                                         );

  StatusCodeContentTypeValues: array[TXMLStatusCodeContentType] of WideString =
                               (
                                 '1',
                                 '2',
                                 '3',
                                 '4',
                                 '5',
                                 '6',
                                 '7',
                                 '8',
                                 '9',
                                 '10',
                                 '11',
                                 '12',
                                 '13',
                                 '14',
                                 '15',
                                 '16',
                                 '17',
                                 '18',
                                 '19',
                                 '20',
                                 '21',
                                 '22',
                                 '23',
                                 '24',
                                 '25',
                                 '26',
                                 '27',
                                 '28',
                                 '29',
                                 '30',
                                 '31',
                                 '32',
                                 '33',
                                 '34',
                                 '35',
                                 '36',
                                 '37',
                                 '38',
                                 '39',
                                 '40',
                                 '41',
                                 '42',
                                 '43',
                                 '44',
                                 '45',
                                 '46',
                                 '47',
                                 '48',
                                 '49',
                                 '50',
                                 '51',
                                 '52',
                                 '53',
                                 '54',
                                 '55',
                                 '56',
                                 '57',
                                 '58',
                                 '59',
                                 '60',
                                 '61',
                                 '62',
                                 '63',
                                 '64',
                                 '65',
                                 '66',
                                 '67',
                                 '68',
                                 '69',
                                 '70',
                                 '71',
                                 '72',
                                 '73',
                                 '74',
                                 '75',
                                 '76',
                                 '77',
                                 '78',
                                 '79',
                                 '80',
                                 '81',
                                 '82',
                                 '83',
                                 '84',
                                 '85',
                                 '86',
                                 '87',
                                 '88',
                                 '89',
                                 '90',
                                 '91',
                                 '92',
                                 '93',
                                 '94',
                                 '95',
                                 '96',
                                 '97',
                                 '98',
                                 '99',
                                 '100',
                                 '101',
                                 '102',
                                 '103',
                                 '104',
                                 '105',
                                 '106',
                                 '107',
                                 '108',
                                 '109',
                                 '110',
                                 '111',
                                 '112',
                                 '113',
                                 '114',
                                 '115',
                                 '116',
                                 '117',
                                 '118',
                                 '119',
                                 '120',
                                 '121',
                                 '122',
                                 '123',
                                 '124',
                                 '125',
                                 '126',
                                 '127',
                                 '128',
                                 '129',
                                 '130',
                                 '131',
                                 '132',
                                 '133',
                                 '134',
                                 '135',
                                 '136',
                                 '137',
                                 '138',
                                 '139',
                                 '140',
                                 '141',
                                 '142',
                                 '143',
                                 '144',
                                 '145',
                                 '146',
                                 '147',
                                 '148',
                                 '149',
                                 '150',
                                 '151',
                                 '152',
                                 '153',
                                 '154',
                                 '155',
                                 '156',
                                 '157',
                                 '158',
                                 '159',
                                 '160',
                                 '161',
                                 '162',
                                 '163',
                                 '164',
                                 '165',
                                 '166',
                                 '167',
                                 '168',
                                 '169',
                                 '170',
                                 '171',
                                 '172',
                                 '174',
                                 '175',
                                 '176',
                                 '177',
                                 '178',
                                 '179',
                                 '180',
                                 '181',
                                 '182',
                                 '183',
                                 '184',
                                 '185',
                                 '186',
                                 '187',
                                 '188',
                                 '189',
                                 '190',
                                 '191',
                                 '192',
                                 '193',
                                 '194',
                                 '195',
                                 '196',
                                 '197',
                                 '198',
                                 '199',
                                 '200',
                                 '201',
                                 '202',
                                 '203',
                                 '204',
                                 '205',
                                 '206',
                                 '207',
                                 '208',
                                 '209',
                                 '210',
                                 '211',
                                 '212',
                                 '213',
                                 '214',
                                 '215',
                                 '216',
                                 '218',
                                 '219',
                                 '220',
                                 '222',
                                 '224',
                                 '225',
                                 '227',
                                 '228',
                                 '229',
                                 '231',
                                 '232',
                                 '233',
                                 '234',
                                 '235',
                                 '236',
                                 '238',
                                 '239',
                                 '240',
                                 '241',
                                 '242',
                                 '243',
                                 '247',
                                 '248',
                                 '250',
                                 '251',
                                 '253',
                                 '254',
                                 '255',
                                 '256',
                                 '258',
                                 '260',
                                 '265',
                                 '266',
                                 '267',
                                 '269',
                                 '270',
                                 '271',
                                 '272',
                                 '273',
                                 '274',
                                 '275',
                                 '276',
                                 '277',
                                 '278',
                                 '279',
                                 '280',
                                 '281',
                                 '282',
                                 '283',
                                 '284',
                                 '285',
                                 '286',
                                 '287',
                                 '288',
                                 '291',
                                 '292',
                                 '295',
                                 '297',
                                 '298',
                                 '299',
                                 '300',
                                 '301',
                                 '302',
                                 '306',
                                 '307',
                                 '308',
                                 '309',
                                 '310',
                                 '311',
                                 '312',
                                 '313',
                                 '314',
                                 '315',
                                 '316',
                                 '317',
                                 '318',
                                 '319',
                                 '320',
                                 '321',
                                 '322',
                                 '323',
                                 '324',
                                 '325',
                                 '326',
                                 '327',
                                 '328',
                                 '329',
                                 '330',
                                 '331',
                                 '332',
                                 '333',
                                 '334',
                                 '335',
                                 '336',
                                 '337',
                                 '338',
                                 '339',
                                 '340',
                                 '341',
                                 '342',
                                 '343',
                                 '344',
                                 '345',
                                 '346',
                                 '347',
                                 '348',
                                 '349',
                                 '350',
                                 '351',
                                 '352',
                                 '353',
                                 '354',
                                 '355',
                                 '356',
                                 '357',
                                 '358',
                                 '359',
                                 '360',
                                 '361',
                                 '362',
                                 '363',
                                 '364',
                                 '365',
                                 '366',
                                 '367',
                                 '368',
                                 '369',
                                 '370',
                                 '371',
                                 '372',
                                 '373',
                                 '374',
                                 '375',
                                 '376',
                                 '377',
                                 '378',
                                 '379'
                               );

  StatusDescriptionCodeAccountingDebitCreditContentTypeValues: array[TXMLStatusDescriptionCodeAccountingDebitCreditContentType] of WideString =
                                                               (
                                                                 '29',
                                                                 '30',
                                                                 '31',
                                                                 '32',
                                                                 '33',
                                                                 '34',
                                                                 '66'
                                                               );

  TimeOnlyFormatCodeContentTypeValues: array[TXMLTimeOnlyFormatCodeContentType] of WideString =
                                       (
                                         '209',
                                         '401',
                                         '402',
                                         '404',
                                         '406'
                                       );

  TimePointFormatCodeContentTypeValues: array[TXMLTimePointFormatCodeContentType] of WideString =
                                        (
                                          '102',
                                          '203',
                                          '205',
                                          '209',
                                          '502',
                                          '602'
                                        );

  TransportEquipmentCategoryCodeContentTypeValues: array[TXMLTransportEquipmentCategoryCodeContentType] of WideString =
                                                   (
                                                     'AA',
                                                     'AB',
                                                     'AD',
                                                     'AE',
                                                     'AG',
                                                     'AH',
                                                     'AI',
                                                     'AJ',
                                                     'AK',
                                                     'AL',
                                                     'AM',
                                                     'AN',
                                                     'AO',
                                                     'AP',
                                                     'AQ',
                                                     'AT',
                                                     'BB',
                                                     'BL',
                                                     'BPN',
                                                     'BPO',
                                                     'BPP',
                                                     'BPQ',
                                                     'BPR',
                                                     'BPS',
                                                     'BPT',
                                                     'BPU',
                                                     'BPV',
                                                     'BPW',
                                                     'BPX',
                                                     'BPY',
                                                     'BPZ',
                                                     'BR',
                                                     'BX',
                                                     'CH',
                                                     'CN',
                                                     'DPA',
                                                     'DPB',
                                                     'DPC',
                                                     'DPD',
                                                     'DPE',
                                                     'DPF',
                                                     'DPG',
                                                     'DPH',
                                                     'DPI',
                                                     'DPJ',
                                                     'DPK',
                                                     'DPL',
                                                     'DPM',
                                                     'DPN',
                                                     'DPO',
                                                     'EFP',
                                                     'EFQ',
                                                     'EFR',
                                                     'EFS',
                                                     'EFT',
                                                     'EFU',
                                                     'EFV',
                                                     'EFW',
                                                     'EFX',
                                                     'EFY',
                                                     'EFZ',
                                                     'EGA',
                                                     'EGB',
                                                     'EGC',
                                                     'EGD',
                                                     'EGE',
                                                     'EGF',
                                                     'EGG',
                                                     'EGH',
                                                     'EGI',
                                                     'EYP',
                                                     'FPN',
                                                     'FPR',
                                                     'IL',
                                                     'LAR',
                                                     'LU',
                                                     'MPA',
                                                     'PA',
                                                     'PBP',
                                                     'PFP',
                                                     'PL',
                                                     'PPA',
                                                     'PST',
                                                     'RF',
                                                     'RG',
                                                     'RGF',
                                                     'RO',
                                                     'RR',
                                                     'SPP',
                                                     'STR',
                                                     'SW',
                                                     'TE',
                                                     'TP',
                                                     'TS',
                                                     'TSU',
                                                     'UL'
                                                   );

  TransportEquipmentFullnessCodeContentTypeValues: array[TXMLTransportEquipmentFullnessCodeContentType] of WideString =
                                                   (
                                                     '1',
                                                     '2',
                                                     '3',
                                                     '4',
                                                     '5',
                                                     '6',
                                                     '7',
                                                     '8',
                                                     '9',
                                                     '10',
                                                     '11',
                                                     '12',
                                                     '13'
                                                   );

  TransportMeansTypeCodeContentTypeValues: array[TXMLTransportMeansTypeCodeContentType] of WideString =
                                           (
                                             '1501',
                                             '1502',
                                             '1503',
                                             '1504',
                                             '1505',
                                             '1506',
                                             '1511',
                                             '1512',
                                             '1513',
                                             '1514',
                                             '1515',
                                             '1516',
                                             '1517',
                                             '1518',
                                             '1519',
                                             '1521',
                                             '1522',
                                             '1523',
                                             '1524',
                                             '1525',
                                             '1531',
                                             '1532',
                                             '1533',
                                             '1534',
                                             '1541',
                                             '1542',
                                             '1543',
                                             '1551',
                                             '1552',
                                             '1553',
                                             '1591',
                                             '1592',
                                             '1593',
                                             '1594',
                                             '1601',
                                             '1602',
                                             '1603',
                                             '1604',
                                             '1605',
                                             '1606',
                                             '1607',
                                             '1711',
                                             '1712',
                                             '1721',
                                             '1723',
                                             '1724',
                                             '1725',
                                             '1726',
                                             '1727',
                                             '1728',
                                             '1729',
                                             '1751',
                                             '1752',
                                             '1753',
                                             '1761',
                                             '1762',
                                             '1763',
                                             '1764',
                                             '1765',
                                             '1766',
                                             '1781',
                                             '1782',
                                             '2201',
                                             '2202',
                                             '2203',
                                             '2301',
                                             '2302',
                                             '2303',
                                             '2304',
                                             '2305',
                                             '3100',
                                             '3101',
                                             '3102',
                                             '3103',
                                             '3104',
                                             '3105',
                                             '3106',
                                             '3107',
                                             '3108',
                                             '3109',
                                             '3110',
                                             '3111',
                                             '3112',
                                             '3113',
                                             '3114',
                                             '3115',
                                             '3116',
                                             '3117',
                                             '3118',
                                             '3119',
                                             '3120',
                                             '3121',
                                             '3122',
                                             '3123',
                                             '3124',
                                             '3125',
                                             '3126',
                                             '3127',
                                             '3128',
                                             '3129',
                                             '3130',
                                             '3131',
                                             '3132',
                                             '3133',
                                             '3134',
                                             '3135',
                                             '3136',
                                             '3137',
                                             '3138',
                                             '3201',
                                             '3301',
                                             '3302',
                                             '3303',
                                             '3304',
                                             '4000',
                                             '5000',
                                             '8021',
                                             '8022',
                                             '8023',
                                             '8161',
                                             '8162',
                                             '8163',
                                             '8441',
                                             '8442',
                                             '8443',
                                             '8444',
                                             '8445',
                                             '8446',
                                             '8447',
                                             '8448',
                                             '8451',
                                             '8452',
                                             '8453',
                                             '8454'
                                           );

  TransportModeCodeContentTypeValues: array[TXMLTransportModeCodeContentType] of WideString =
                                      (
                                        '0',
                                        '1',
                                        '2',
                                        '3',
                                        '4',
                                        '5',
                                        '6',
                                        '7',
                                        '8',
                                        '9'
                                      );

  TransportMovementStageCodeContentTypeValues: array[TXMLTransportMovementStageCodeContentType] of WideString =
                                               (
                                                 '1',
                                                 '2',
                                                 '3',
                                                 '4',
                                                 '5',
                                                 '6',
                                                 '10',
                                                 '11',
                                                 '12',
                                                 '13',
                                                 '15',
                                                 '16',
                                                 '17',
                                                 '18',
                                                 '19',
                                                 '20',
                                                 '21',
                                                 '22',
                                                 '23',
                                                 '24',
                                                 '25',
                                                 '26',
                                                 '27',
                                                 '28',
                                                 '29',
                                                 '30',
                                                 '31',
                                                 '32',
                                                 '33',
                                                 '34'
                                               );

  TransportPaymentArrangementCodeContentTypeValues: array[TXMLTransportPaymentArrangementCodeContentType] of WideString =
                                                    (
                                                      'A',
                                                      'B',
                                                      'C',
                                                      'P'
                                                    );

  ISOTwoletterCountryCodeContentTypeValues: array[TXMLISOTwoletterCountryCodeContentType] of WideString =
                                            (
                                              'AD',
                                              'AE',
                                              'AF',
                                              'AG',
                                              'AI',
                                              'AL',
                                              'AM',
                                              'AO',
                                              'AQ',
                                              'AR',
                                              'AS',
                                              'AT',
                                              'AU',
                                              'AW',
                                              'AX',
                                              'AZ',
                                              'BA',
                                              'BB',
                                              'BD',
                                              'BE',
                                              'BF',
                                              'BG',
                                              'BH',
                                              'BI',
                                              'BJ',
                                              'BL',
                                              'BM',
                                              'BN',
                                              'BO',
                                              'BQ',
                                              'BR',
                                              'BS',
                                              'BT',
                                              'BV',
                                              'BW',
                                              'BY',
                                              'BZ',
                                              'CA',
                                              'CC',
                                              'CD',
                                              'CF',
                                              'CG',
                                              'CH',
                                              'CI',
                                              'CK',
                                              'CL',
                                              'CM',
                                              'CN',
                                              'CO',
                                              'CR',
                                              'CU',
                                              'CV',
                                              'CW',
                                              'CX',
                                              'CY',
                                              'CZ',
                                              'DE',
                                              'DJ',
                                              'DK',
                                              'DM',
                                              'DO',
                                              'DZ',
                                              'EC',
                                              'EE',
                                              'EG',
                                              'EH',
                                              'ER',
                                              'ES',
                                              'ET',
                                              'FI',
                                              'FJ',
                                              'FK',
                                              'FM',
                                              'FO',
                                              'FR',
                                              'GA',
                                              'GB',
                                              'GD',
                                              'GE',
                                              'GF',
                                              'GG',
                                              'GH',
                                              'GI',
                                              'GL',
                                              'GM',
                                              'GN',
                                              'GP',
                                              'GQ',
                                              'GR',
                                              'GS',
                                              'GT',
                                              'GU',
                                              'GW',
                                              'GY',
                                              'HK',
                                              'HM',
                                              'HN',
                                              'HR',
                                              'HT',
                                              'HU',
                                              'ID',
                                              'IE',
                                              'IL',
                                              'IM',
                                              'IN',
                                              'IO',
                                              'IQ',
                                              'IR',
                                              'IS',
                                              'IT',
                                              'JE',
                                              'JM',
                                              'JO',
                                              'JP',
                                              'KE',
                                              'KG',
                                              'KH',
                                              'KI',
                                              'KM',
                                              'KN',
                                              'KP',
                                              'KR',
                                              'KW',
                                              'KY',
                                              'KZ',
                                              'LA',
                                              'LB',
                                              'LC',
                                              'LI',
                                              'LK',
                                              'LR',
                                              'LS',
                                              'LT',
                                              'LU',
                                              'LV',
                                              'LY',
                                              'MA',
                                              'MC',
                                              'MD',
                                              'ME',
                                              'MF',
                                              'MG',
                                              'MH',
                                              'MK',
                                              'ML',
                                              'MM',
                                              'MN',
                                              'MO',
                                              'MP',
                                              'MQ',
                                              'MR',
                                              'MS',
                                              'MT',
                                              'MU',
                                              'MV',
                                              'MW',
                                              'MX',
                                              'MY',
                                              'MZ',
                                              'NA',
                                              'NC',
                                              'NE',
                                              'NF',
                                              'NG',
                                              'NI',
                                              'NL',
                                              'NO',
                                              'NP',
                                              'NR',
                                              'NU',
                                              'NZ',
                                              'OM',
                                              'PA',
                                              'PE',
                                              'PF',
                                              'PG',
                                              'PH',
                                              'PK',
                                              'PL',
                                              'PM',
                                              'PN',
                                              'PR',
                                              'PS',
                                              'PT',
                                              'PW',
                                              'PY',
                                              'QA',
                                              'RE',
                                              'RO',
                                              'RS',
                                              'RU',
                                              'RW',
                                              'SA',
                                              'SB',
                                              'SC',
                                              'SD',
                                              'SE',
                                              'SG',
                                              'SH',
                                              'SI',
                                              'SJ',
                                              'SK',
                                              'SL',
                                              'SM',
                                              'SN',
                                              'SO',
                                              'SR',
                                              'SS',
                                              'ST',
                                              'SV',
                                              'SX',
                                              'SY',
                                              'SZ',
                                              'TC',
                                              'TD',
                                              'TF',
                                              'TG',
                                              'TH',
                                              'TJ',
                                              'TK',
                                              'TL',
                                              'TM',
                                              'TN',
                                              'TO',
                                              'TR',
                                              'TT',
                                              'TV',
                                              'TW',
                                              'TZ',
                                              'UA',
                                              'UG',
                                              'UM',
                                              'US',
                                              'UY',
                                              'UZ',
                                              'VA',
                                              'VC',
                                              'VE',
                                              'VG',
                                              'VI',
                                              'VN',
                                              'VU',
                                              'WF',
                                              'WS',
                                              'YE',
                                              'YT',
                                              'ZA',
                                              'ZM',
                                              'ZW'
                                            );

  FreightCostCodeContentTypeValues: array[TXMLFreightCostCodeContentType] of WideString =
                                    (
                                      '100000',
                                      '100999',
                                      '101000',
                                      '101002',
                                      '101003',
                                      '101004',
                                      '101005',
                                      '101006',
                                      '101007',
                                      '101008',
                                      '101009',
                                      '101010',
                                      '101011',
                                      '101012',
                                      '101013',
                                      '101014',
                                      '101015',
                                      '101016',
                                      '101017',
                                      '101018',
                                      '101019',
                                      '101020',
                                      '101021',
                                      '101022',
                                      '101024',
                                      '101027',
                                      '101028',
                                      '101029',
                                      '101031',
                                      '101033',
                                      '101034',
                                      '101035',
                                      '101036',
                                      '101037',
                                      '101038',
                                      '101039',
                                      '101040',
                                      '101041',
                                      '101042',
                                      '101043',
                                      '101044',
                                      '101045',
                                      '101046',
                                      '101047',
                                      '101048',
                                      '101049',
                                      '101050',
                                      '101051',
                                      '101052',
                                      '101053',
                                      '101054',
                                      '101056',
                                      '101057',
                                      '101058',
                                      '101059',
                                      '101060',
                                      '101061',
                                      '102000',
                                      '102002',
                                      '102003',
                                      '102004',
                                      '102005',
                                      '102006',
                                      '102011',
                                      '102012',
                                      '102013',
                                      '102014',
                                      '102015',
                                      '102016',
                                      '102017',
                                      '102018',
                                      '102019',
                                      '102020',
                                      '102021',
                                      '102022',
                                      '102023',
                                      '102024',
                                      '102025',
                                      '102026',
                                      '102027',
                                      '102028',
                                      '102029',
                                      '102030',
                                      '102041',
                                      '102042',
                                      '102043',
                                      '102044',
                                      '102045',
                                      '102046',
                                      '102047',
                                      '102049',
                                      '102050',
                                      '102051',
                                      '102052',
                                      '102070',
                                      '102071',
                                      '102072',
                                      '102073',
                                      '102074',
                                      '102075',
                                      '102076',
                                      '102077',
                                      '102078',
                                      '102079',
                                      '102080',
                                      '102081',
                                      '102082',
                                      '102083',
                                      '102084',
                                      '102085',
                                      '102086',
                                      '102087',
                                      '102088',
                                      '103000',
                                      '103001',
                                      '103002',
                                      '103003',
                                      '103004',
                                      '103005',
                                      '103006',
                                      '103007',
                                      '103008',
                                      '103009',
                                      '103010',
                                      '103011',
                                      '103012',
                                      '103013',
                                      '103015',
                                      '103016',
                                      '103017',
                                      '103018',
                                      '103019',
                                      '104000',
                                      '104002',
                                      '104003',
                                      '104004',
                                      '104005',
                                      '104006',
                                      '104007',
                                      '104008',
                                      '104009',
                                      '104010',
                                      '104011',
                                      '104012',
                                      '104013',
                                      '104014',
                                      '104015',
                                      '104016',
                                      '104024',
                                      '104025',
                                      '104027',
                                      '104028',
                                      '104029',
                                      '104030',
                                      '104031',
                                      '104032',
                                      '104036',
                                      '104037',
                                      '104038',
                                      '104039',
                                      '104041',
                                      '104042',
                                      '104043',
                                      '104044',
                                      '104045',
                                      '104046',
                                      '104052',
                                      '104055',
                                      '104056',
                                      '104059',
                                      '104060',
                                      '104063',
                                      '104064',
                                      '104068',
                                      '104069',
                                      '104070',
                                      '104071',
                                      '104072',
                                      '104073',
                                      '104074',
                                      '104075',
                                      '104076',
                                      '104077',
                                      '104078',
                                      '104079',
                                      '104080',
                                      '104081',
                                      '104082',
                                      '104083',
                                      '104084',
                                      '104085',
                                      '104102',
                                      '104104',
                                      '104106',
                                      '104107',
                                      '104108',
                                      '104109',
                                      '104110',
                                      '104111',
                                      '104112',
                                      '104113',
                                      '104114',
                                      '104115',
                                      '104116',
                                      '104118',
                                      '104119',
                                      '104120',
                                      '104121',
                                      '104124',
                                      '104125',
                                      '104127',
                                      '104129',
                                      '104130',
                                      '104131',
                                      '104132',
                                      '104134',
                                      '104135',
                                      '104136',
                                      '104137',
                                      '104138',
                                      '104139',
                                      '104140',
                                      '104141',
                                      '104142',
                                      '104144',
                                      '104145',
                                      '104146',
                                      '104148',
                                      '104149',
                                      '104150',
                                      '104151',
                                      '104152',
                                      '104153',
                                      '104154',
                                      '104155',
                                      '104156',
                                      '104157',
                                      '104158',
                                      '104159',
                                      '104160',
                                      '104161',
                                      '104162',
                                      '104163',
                                      '104164',
                                      '104165',
                                      '104166',
                                      '104167',
                                      '104168',
                                      '104169',
                                      '104170',
                                      '104172',
                                      '104173',
                                      '104175',
                                      '104176',
                                      '104177',
                                      '104178',
                                      '104179',
                                      '104180',
                                      '104181',
                                      '104182',
                                      '104183',
                                      '104185',
                                      '104186',
                                      '104188',
                                      '104189',
                                      '104190',
                                      '104191',
                                      '104192',
                                      '104193',
                                      '104194',
                                      '104195',
                                      '104196',
                                      '104197',
                                      '104198',
                                      '104199',
                                      '104200',
                                      '104201',
                                      '104202',
                                      '104203',
                                      '104204',
                                      '104205',
                                      '104206',
                                      '104207',
                                      '104208',
                                      '104209',
                                      '104210',
                                      '104211',
                                      '104212',
                                      '104213',
                                      '105000',
                                      '105001',
                                      '105002',
                                      '105003',
                                      '105004',
                                      '105005',
                                      '105006',
                                      '105007',
                                      '105009',
                                      '105010',
                                      '105012',
                                      '105013',
                                      '105014',
                                      '105015',
                                      '105016',
                                      '105017',
                                      '105018',
                                      '105020',
                                      '106000',
                                      '106001',
                                      '106002',
                                      '106003',
                                      '106004',
                                      '106005',
                                      '106006',
                                      '106007',
                                      '106008',
                                      '106009',
                                      '106010',
                                      '106011',
                                      '106012',
                                      '106013',
                                      '106014',
                                      '106015',
                                      '106016',
                                      '106018',
                                      '107000',
                                      '107001',
                                      '107002',
                                      '108000',
                                      '108001',
                                      '108002',
                                      '108003',
                                      '108004',
                                      '108005',
                                      '108006',
                                      '109000',
                                      '109001',
                                      '110000',
                                      '110001',
                                      '110002',
                                      '110003',
                                      '110004',
                                      '110005',
                                      '110006',
                                      '110007',
                                      '110008',
                                      '110009',
                                      '110010',
                                      '110011',
                                      '200000',
                                      '200999',
                                      '202000',
                                      '202001',
                                      '202002',
                                      '202003',
                                      '202004',
                                      '202005',
                                      '202006',
                                      '202007',
                                      '202008',
                                      '202009',
                                      '202010',
                                      '202011',
                                      '202012',
                                      '202013',
                                      '203000',
                                      '203001',
                                      '203002',
                                      '203003',
                                      '203004',
                                      '203005',
                                      '203006',
                                      '203007',
                                      '203008',
                                      '203009',
                                      '203010',
                                      '203011',
                                      '203012',
                                      '203013',
                                      '203014',
                                      '203015',
                                      '203016',
                                      '203017',
                                      '203018',
                                      '203019',
                                      '203020',
                                      '203021',
                                      '203022',
                                      '203023',
                                      '203024',
                                      '203025',
                                      '203026',
                                      '203027',
                                      '203028',
                                      '203029',
                                      '203030',
                                      '203031',
                                      '203032',
                                      '203033',
                                      '203034',
                                      '203035',
                                      '203036',
                                      '203037',
                                      '203038',
                                      '203039',
                                      '203040',
                                      '203041',
                                      '203042',
                                      '203043',
                                      '203044',
                                      '203045',
                                      '203046',
                                      '203047',
                                      '203048',
                                      '203049',
                                      '203050',
                                      '203051',
                                      '203052',
                                      '203053',
                                      '203054',
                                      '203055',
                                      '203056',
                                      '203057',
                                      '203058',
                                      '203059',
                                      '203060',
                                      '203061',
                                      '203062',
                                      '203063',
                                      '203064',
                                      '203065',
                                      '203066',
                                      '203067',
                                      '203068',
                                      '203069',
                                      '203070',
                                      '203071',
                                      '203072',
                                      '203073',
                                      '203074',
                                      '203075',
                                      '203076',
                                      '203077',
                                      '203078',
                                      '203079',
                                      '203080',
                                      '203081',
                                      '203082',
                                      '203083',
                                      '203084',
                                      '203085',
                                      '203086',
                                      '203087',
                                      '203088',
                                      '203089',
                                      '203090',
                                      '203091',
                                      '203092',
                                      '203093',
                                      '203094',
                                      '203095',
                                      '203096',
                                      '203097',
                                      '203098',
                                      '203099',
                                      '203100',
                                      '203102',
                                      '203104',
                                      '203105',
                                      '203106',
                                      '203107',
                                      '203108',
                                      '203109',
                                      '203110',
                                      '203111',
                                      '203112',
                                      '203113',
                                      '203114',
                                      '203115',
                                      '203116',
                                      '203117',
                                      '203118',
                                      '203119',
                                      '203120',
                                      '203121',
                                      '203122',
                                      '203123',
                                      '203124',
                                      '203125',
                                      '203126',
                                      '203127',
                                      '203130',
                                      '203131',
                                      '203133',
                                      '203134',
                                      '203135',
                                      '203136',
                                      '203137',
                                      '203138',
                                      '203139',
                                      '203140',
                                      '203141',
                                      '203142',
                                      '203143',
                                      '203144',
                                      '203145',
                                      '203146',
                                      '203147',
                                      '203148',
                                      '203149',
                                      '203150',
                                      '203151',
                                      '203152',
                                      '203153',
                                      '203154',
                                      '203155',
                                      '203156',
                                      '203157',
                                      '203158',
                                      '203159',
                                      '203160',
                                      '203161',
                                      '203162',
                                      '203163',
                                      '203164',
                                      '203165',
                                      '203166',
                                      '203167',
                                      '203168',
                                      '203169',
                                      '203170',
                                      '203171',
                                      '203172',
                                      '203173',
                                      '203174',
                                      '203175',
                                      '203176',
                                      '203177',
                                      '203178',
                                      '203179',
                                      '203180',
                                      '203181',
                                      '203182',
                                      '203183',
                                      '203184',
                                      '203185',
                                      '203186',
                                      '203187',
                                      '203188',
                                      '203189',
                                      '203190',
                                      '203191',
                                      '203192',
                                      '203193',
                                      '203194',
                                      '203195',
                                      '203196',
                                      '203197',
                                      '203198',
                                      '203199',
                                      '203200',
                                      '203201',
                                      '203202',
                                      '203203',
                                      '203204',
                                      '203205',
                                      '204000',
                                      '204001',
                                      '204002',
                                      '204003',
                                      '204004',
                                      '204005',
                                      '204006',
                                      '204007',
                                      '204008',
                                      '204009',
                                      '204010',
                                      '204011',
                                      '204012',
                                      '204013',
                                      '204014',
                                      '204015',
                                      '204016',
                                      '204017',
                                      '204018',
                                      '204019',
                                      '204020',
                                      '204021',
                                      '204022',
                                      '204023',
                                      '204024',
                                      '204025',
                                      '204026',
                                      '204027',
                                      '204028',
                                      '204029',
                                      '204030',
                                      '204031',
                                      '204032',
                                      '204033',
                                      '204034',
                                      '204035',
                                      '204036',
                                      '204037',
                                      '204038',
                                      '204039',
                                      '204040',
                                      '204041',
                                      '204042',
                                      '204043',
                                      '204044',
                                      '204045',
                                      '204046',
                                      '204047',
                                      '204048',
                                      '204049',
                                      '204050',
                                      '204051',
                                      '204052',
                                      '204053',
                                      '204054',
                                      '204055',
                                      '204056',
                                      '204057',
                                      '204058',
                                      '204059',
                                      '204060',
                                      '204061',
                                      '204062',
                                      '204063',
                                      '204064',
                                      '204065',
                                      '204066',
                                      '204067',
                                      '204068',
                                      '204069',
                                      '204070',
                                      '204071',
                                      '204072',
                                      '204073',
                                      '204074',
                                      '204075',
                                      '204076',
                                      '204077',
                                      '204078',
                                      '204079',
                                      '204080',
                                      '204081',
                                      '204082',
                                      '204083',
                                      '204084',
                                      '204085',
                                      '204086',
                                      '204087',
                                      '204088',
                                      '204089',
                                      '204090',
                                      '204091',
                                      '204092',
                                      '204093',
                                      '204094',
                                      '204095',
                                      '204096',
                                      '204097',
                                      '204098',
                                      '204099',
                                      '204100',
                                      '204101',
                                      '204102',
                                      '204103',
                                      '204104',
                                      '204105',
                                      '204106',
                                      '204107',
                                      '204108',
                                      '204109',
                                      '204110',
                                      '204111',
                                      '204112',
                                      '204113',
                                      '204114',
                                      '204115',
                                      '204116',
                                      '204117',
                                      '204118',
                                      '204119',
                                      '204120',
                                      '204121',
                                      '204122',
                                      '204123',
                                      '204124',
                                      '204125',
                                      '204126',
                                      '204127',
                                      '204128',
                                      '204129',
                                      '204130',
                                      '204131',
                                      '204132',
                                      '204133',
                                      '204134',
                                      '204135',
                                      '204136',
                                      '204137',
                                      '204138',
                                      '204139',
                                      '204140',
                                      '204141',
                                      '204142',
                                      '204143',
                                      '204144',
                                      '204145',
                                      '204146',
                                      '204148',
                                      '204150',
                                      '204151',
                                      '204152',
                                      '204153',
                                      '204154',
                                      '204155',
                                      '204156',
                                      '204157',
                                      '204158',
                                      '204159',
                                      '204160',
                                      '204161',
                                      '204162',
                                      '204163',
                                      '204164',
                                      '204165',
                                      '204166',
                                      '204167',
                                      '204168',
                                      '204169',
                                      '204170',
                                      '204171',
                                      '204172',
                                      '204173',
                                      '204175',
                                      '204176',
                                      '204177',
                                      '204178',
                                      '204179',
                                      '204180',
                                      '204181',
                                      '204182',
                                      '204183',
                                      '204184',
                                      '204185',
                                      '204186',
                                      '204187',
                                      '204188',
                                      '204189',
                                      '204190',
                                      '204191',
                                      '204192',
                                      '204193',
                                      '204194',
                                      '204195',
                                      '204196',
                                      '204197',
                                      '204198',
                                      '204199',
                                      '204200',
                                      '204201',
                                      '204202',
                                      '204203',
                                      '204204',
                                      '204205',
                                      '204206',
                                      '204207',
                                      '204208',
                                      '204209',
                                      '204210',
                                      '204211',
                                      '204212',
                                      '204213',
                                      '204214',
                                      '204215',
                                      '204216',
                                      '204217',
                                      '204218',
                                      '204219',
                                      '205000',
                                      '205001',
                                      '205002',
                                      '205003',
                                      '205004',
                                      '205005',
                                      '205006',
                                      '205007',
                                      '205008',
                                      '205009',
                                      '205010',
                                      '205011',
                                      '205012',
                                      '205013',
                                      '205014',
                                      '205015',
                                      '205016',
                                      '205017',
                                      '205018',
                                      '205019',
                                      '205020',
                                      '205021',
                                      '205022',
                                      '205023',
                                      '205025',
                                      '205027',
                                      '205028',
                                      '205029',
                                      '205030',
                                      '205031',
                                      '205032',
                                      '205033',
                                      '205034',
                                      '205035',
                                      '205036',
                                      '205037',
                                      '205038',
                                      '205039',
                                      '205040',
                                      '205041',
                                      '205042',
                                      '205043',
                                      '205044',
                                      '205045',
                                      '205046',
                                      '205047',
                                      '205048',
                                      '205049',
                                      '205050',
                                      '205051',
                                      '205052',
                                      '205053',
                                      '205054',
                                      '205055',
                                      '205056',
                                      '205057',
                                      '205058',
                                      '205059',
                                      '205060',
                                      '205061',
                                      '205062',
                                      '206000',
                                      '206001',
                                      '206002',
                                      '206003',
                                      '206004',
                                      '206005',
                                      '206006',
                                      '206007',
                                      '206008',
                                      '206009',
                                      '206010',
                                      '206011',
                                      '206012',
                                      '206013',
                                      '206014',
                                      '206015',
                                      '206016',
                                      '206017',
                                      '206018',
                                      '206019',
                                      '206020',
                                      '206021',
                                      '206023',
                                      '206025',
                                      '206026',
                                      '206027',
                                      '206028',
                                      '206029',
                                      '206030',
                                      '206031',
                                      '206032',
                                      '206033',
                                      '206034',
                                      '206035',
                                      '206036',
                                      '206037',
                                      '206038',
                                      '206039',
                                      '206040',
                                      '206041',
                                      '206042',
                                      '206043',
                                      '206044',
                                      '206045',
                                      '206046',
                                      '206047',
                                      '206048',
                                      '206049',
                                      '206050',
                                      '206051',
                                      '206052',
                                      '206053',
                                      '206054',
                                      '206055',
                                      '206056',
                                      '206057',
                                      '206058',
                                      '206059',
                                      '206060',
                                      '206061',
                                      '206062',
                                      '206063',
                                      '206064',
                                      '206065',
                                      '206066',
                                      '207000',
                                      '207001',
                                      '207002',
                                      '207003',
                                      '207004',
                                      '207005',
                                      '207006',
                                      '207007',
                                      '207008',
                                      '207009',
                                      '207010',
                                      '207011',
                                      '207012',
                                      '207013',
                                      '207014',
                                      '207015',
                                      '207016',
                                      '207017',
                                      '207018',
                                      '207019',
                                      '207020',
                                      '207022',
                                      '207023',
                                      '207024',
                                      '207025',
                                      '207026',
                                      '207027',
                                      '207028',
                                      '207029',
                                      '207030',
                                      '207032',
                                      '207033',
                                      '207034',
                                      '207035',
                                      '207036',
                                      '207037',
                                      '207038',
                                      '207039',
                                      '207040',
                                      '207041',
                                      '207042',
                                      '207043',
                                      '207044',
                                      '207045',
                                      '207046',
                                      '207047',
                                      '207048',
                                      '207049',
                                      '207050',
                                      '207051',
                                      '207052',
                                      '207053',
                                      '207054',
                                      '207055',
                                      '207056',
                                      '207057',
                                      '207058',
                                      '207059',
                                      '207060',
                                      '207061',
                                      '207062',
                                      '208000',
                                      '208001',
                                      '208002',
                                      '208003',
                                      '208004',
                                      '208005',
                                      '208006',
                                      '208007',
                                      '208008',
                                      '208009',
                                      '208010',
                                      '208011',
                                      '208012',
                                      '208013',
                                      '208014',
                                      '208015',
                                      '208016',
                                      '208017',
                                      '208018',
                                      '208019',
                                      '208020',
                                      '208021',
                                      '208022',
                                      '208023',
                                      '208024',
                                      '208025',
                                      '208026',
                                      '208027',
                                      '208028',
                                      '208030',
                                      '208031',
                                      '208032',
                                      '208034',
                                      '208035',
                                      '208036',
                                      '208037',
                                      '208038',
                                      '208039',
                                      '208040',
                                      '208041',
                                      '208042',
                                      '208043',
                                      '208044',
                                      '208045',
                                      '208046',
                                      '208047',
                                      '208048',
                                      '208049',
                                      '208050',
                                      '208051',
                                      '209000',
                                      '209001',
                                      '209002',
                                      '209003',
                                      '209004',
                                      '209005',
                                      '209006',
                                      '209007',
                                      '209008',
                                      '209009',
                                      '209010',
                                      '209011',
                                      '209012',
                                      '209013',
                                      '209014',
                                      '209015',
                                      '209032',
                                      '209033',
                                      '209034',
                                      '209058',
                                      '209060',
                                      '209061',
                                      '209062',
                                      '209063',
                                      '209064',
                                      '209065',
                                      '209066',
                                      '209067',
                                      '209068',
                                      '209069',
                                      '209070',
                                      '209071',
                                      '209072',
                                      '209073',
                                      '209074',
                                      '210000',
                                      '210001',
                                      '210002',
                                      '210003',
                                      '210004',
                                      '210005',
                                      '210006',
                                      '210007',
                                      '210008',
                                      '210009',
                                      '210010',
                                      '210011',
                                      '210012',
                                      '210013',
                                      '210014',
                                      '210015',
                                      '210016',
                                      '210017',
                                      '210018',
                                      '210019',
                                      '210020',
                                      '210021',
                                      '210022',
                                      '210023',
                                      '210024',
                                      '210025',
                                      '210026',
                                      '210027',
                                      '210028',
                                      '210029',
                                      '210030',
                                      '210031',
                                      '210032',
                                      '210033',
                                      '210034',
                                      '210035',
                                      '210036',
                                      '210037',
                                      '210038',
                                      '210039',
                                      '210040',
                                      '210041',
                                      '210042',
                                      '210043',
                                      '210044',
                                      '210045',
                                      '210046',
                                      '210047',
                                      '210048',
                                      '210049',
                                      '210050',
                                      '210051',
                                      '210052',
                                      '210053',
                                      '210054',
                                      '210055',
                                      '210056',
                                      '210057',
                                      '210058',
                                      '210059',
                                      '210060',
                                      '210061',
                                      '210062',
                                      '211000',
                                      '211001',
                                      '211002',
                                      '211003',
                                      '211004',
                                      '211005',
                                      '211006',
                                      '211007',
                                      '211008',
                                      '211009',
                                      '211010',
                                      '211011',
                                      '211012',
                                      '211013',
                                      '211014',
                                      '211015',
                                      '211016',
                                      '211017',
                                      '211018',
                                      '211019',
                                      '211020',
                                      '211021',
                                      '211022',
                                      '211023',
                                      '211024',
                                      '211025',
                                      '211026',
                                      '211027',
                                      '211028',
                                      '211029',
                                      '211030',
                                      '211031',
                                      '211032',
                                      '211033',
                                      '211034',
                                      '211035',
                                      '211036',
                                      '211037',
                                      '211038',
                                      '211039',
                                      '211040',
                                      '211041',
                                      '211042',
                                      '211043',
                                      '211044',
                                      '212000',
                                      '212001',
                                      '212002',
                                      '212003',
                                      '212004',
                                      '213000',
                                      '213001',
                                      '213002',
                                      '213003',
                                      '213004',
                                      '213005',
                                      '214000',
                                      '214001',
                                      '214002',
                                      '214003',
                                      '214004',
                                      '215000',
                                      '215001',
                                      '215002',
                                      '215004',
                                      '215005',
                                      '215006',
                                      '215007',
                                      '215008',
                                      '215009',
                                      '215010',
                                      '215011',
                                      '216000',
                                      '216001',
                                      '216002',
                                      '216003',
                                      '216004',
                                      '216005',
                                      '216006',
                                      '216007',
                                      '216008',
                                      '216009',
                                      '216010',
                                      '216011',
                                      '216012',
                                      '216013',
                                      '216014',
                                      '216015',
                                      '216016',
                                      '216017',
                                      '216019',
                                      '216020',
                                      '216021',
                                      '216022',
                                      '216023',
                                      '216024',
                                      '216025',
                                      '216026',
                                      '216027',
                                      '216028',
                                      '216029',
                                      '216030',
                                      '216031',
                                      '216032',
                                      '216033',
                                      '216034',
                                      '216035',
                                      '216036',
                                      '216037',
                                      '216038',
                                      '216039',
                                      '216040',
                                      '216041',
                                      '216042',
                                      '216044',
                                      '216045',
                                      '216046',
                                      '216047',
                                      '216048',
                                      '216049',
                                      '216050',
                                      '216051',
                                      '216052',
                                      '216053',
                                      '216054',
                                      '216055',
                                      '216056',
                                      '216057',
                                      '216058',
                                      '216059',
                                      '216060',
                                      '216061',
                                      '216062',
                                      '216063',
                                      '216064',
                                      '216065',
                                      '216066',
                                      '216067',
                                      '216068',
                                      '216069',
                                      '216070',
                                      '216071',
                                      '216072',
                                      '216073',
                                      '216074',
                                      '216075',
                                      '216076',
                                      '216077',
                                      '216078',
                                      '216079',
                                      '216080',
                                      '216081',
                                      '216082',
                                      '216083',
                                      '216084',
                                      '216085',
                                      '216086',
                                      '216087',
                                      '216088',
                                      '216089',
                                      '216090',
                                      '216091',
                                      '216092',
                                      '216093',
                                      '216094',
                                      '300000',
                                      '300999',
                                      '301000',
                                      '301001',
                                      '301002',
                                      '301003',
                                      '301004',
                                      '301005',
                                      '301006',
                                      '301007',
                                      '301008',
                                      '301009',
                                      '301010',
                                      '301011',
                                      '301012',
                                      '301013',
                                      '301014',
                                      '301015',
                                      '301016',
                                      '301017',
                                      '301018',
                                      '301019',
                                      '301020',
                                      '301021',
                                      '301022',
                                      '301023',
                                      '301024',
                                      '301025',
                                      '301026',
                                      '301027',
                                      '301028',
                                      '301029',
                                      '301030',
                                      '301031',
                                      '301032',
                                      '301033',
                                      '301034',
                                      '301035',
                                      '301036',
                                      '301037',
                                      '301038',
                                      '301039',
                                      '301040',
                                      '301041',
                                      '301042',
                                      '301043',
                                      '301044',
                                      '301045',
                                      '301046',
                                      '301047',
                                      '301048',
                                      '301049',
                                      '301050',
                                      '301051',
                                      '301052',
                                      '301053',
                                      '301054',
                                      '301055',
                                      '301056',
                                      '301057',
                                      '301058',
                                      '301059',
                                      '301060',
                                      '301061',
                                      '301062',
                                      '301063',
                                      '301064',
                                      '301065',
                                      '301066',
                                      '301067',
                                      '301068',
                                      '301069',
                                      '301070',
                                      '301072',
                                      '301073',
                                      '301074',
                                      '301075',
                                      '301076',
                                      '301077',
                                      '301078',
                                      '302000',
                                      '302001',
                                      '302002',
                                      '302003',
                                      '302004',
                                      '302005',
                                      '302006',
                                      '302007',
                                      '302008',
                                      '302009',
                                      '302010',
                                      '302011',
                                      '302012',
                                      '302013',
                                      '302014',
                                      '302016',
                                      '302017',
                                      '302018',
                                      '400000',
                                      '400999',
                                      '401000',
                                      '401001',
                                      '401003',
                                      '401004',
                                      '401005',
                                      '401006',
                                      '401009',
                                      '401015',
                                      '401016',
                                      '401017',
                                      '401018',
                                      '402000',
                                      '402001',
                                      '402002',
                                      '402003',
                                      '402004',
                                      '402005',
                                      '402006',
                                      '402007',
                                      '500000',
                                      '500999',
                                      '501000',
                                      '501001',
                                      '501002',
                                      '501003',
                                      '501004',
                                      '501005',
                                      '501006',
                                      '501007',
                                      '501008',
                                      '501009',
                                      '502000',
                                      '502001',
                                      '502002',
                                      '502003',
                                      '502004',
                                      '502005',
                                      '502006',
                                      '600000',
                                      '600018',
                                      '600926',
                                      '600999',
                                      '601000',
                                      '601001',
                                      '601002',
                                      '601003',
                                      '601004',
                                      '601005',
                                      '601006',
                                      '601007',
                                      '601008',
                                      '602000',
                                      '602001',
                                      '602002',
                                      '602003',
                                      '603000',
                                      '603001',
                                      '603002',
                                      '603003',
                                      '603004',
                                      '603005',
                                      '603006',
                                      '603007',
                                      '603008',
                                      '603009',
                                      '603010',
                                      '604000',
                                      '604001',
                                      '604002',
                                      '605000',
                                      '606000',
                                      '606003',
                                      '606004',
                                      '606005',
                                      '606006',
                                      '606007',
                                      '606008',
                                      '606009',
                                      '607000',
                                      '607001',
                                      '608000',
                                      '608001',
                                      '608002',
                                      '608003',
                                      '609000',
                                      '609001',
                                      '609002',
                                      '609003',
                                      '609004',
                                      '609005',
                                      '609006',
                                      '609007',
                                      '609008',
                                      '609009',
                                      '609010',
                                      '609011',
                                      '609012',
                                      '609013',
                                      '609015',
                                      '609016',
                                      '609017',
                                      '609018',
                                      '609019',
                                      '609020',
                                      '609022',
                                      '609023',
                                      '609024',
                                      '609025',
                                      '609026',
                                      '609027',
                                      '609028',
                                      '609029',
                                      '609030',
                                      '609031',
                                      '609032',
                                      '609033',
                                      '609034',
                                      '609035',
                                      '609036',
                                      '609037',
                                      '609038',
                                      '609039',
                                      '609040',
                                      '609041',
                                      '609042',
                                      '609043',
                                      '609044',
                                      '609045',
                                      '609046',
                                      '609047',
                                      '609049',
                                      '609050',
                                      '609051',
                                      '609052',
                                      '609053',
                                      '609054',
                                      '609055',
                                      '609056',
                                      '609057',
                                      '609058',
                                      '609059',
                                      '609060',
                                      '609061',
                                      '609062',
                                      '609063',
                                      '609064',
                                      '609065',
                                      '609067',
                                      '609068',
                                      '609069',
                                      '609070',
                                      '609071',
                                      '609072',
                                      '609073',
                                      '609074',
                                      '609075',
                                      '609077',
                                      '609078',
                                      '609079',
                                      '609080',
                                      '609081',
                                      '609082',
                                      '609083',
                                      '609084',
                                      '609085',
                                      '609087',
                                      '609088',
                                      '609089',
                                      '609090',
                                      '609091',
                                      '609092',
                                      '609093',
                                      '609094',
                                      '609095',
                                      '609096',
                                      '609097',
                                      '609098',
                                      '609099',
                                      '609100',
                                      '609101',
                                      '609102',
                                      '609103',
                                      '609104',
                                      '609105',
                                      '609106',
                                      '609107',
                                      '609111',
                                      '609112',
                                      '609113',
                                      '609115',
                                      '609116',
                                      '609117',
                                      '609118',
                                      '609119',
                                      '609120',
                                      '609122',
                                      '609123',
                                      '609124',
                                      '609125',
                                      '609126',
                                      '609128',
                                      '609129',
                                      '609130',
                                      '609131',
                                      '609132',
                                      '609133',
                                      '609134',
                                      '609135',
                                      '609136',
                                      '609137',
                                      '609138',
                                      '609139',
                                      '609140',
                                      '609141',
                                      '609142',
                                      '609143',
                                      '609144',
                                      '609145'
                                    );

  PaymentTermsDescriptionIdentifierContentTypeValues: array[TXMLPaymentTermsDescriptionIdentifierContentType] of WideString =
                                                      (
                                                        '1',
                                                        '2',
                                                        '3',
                                                        '4',
                                                        '5',
                                                        '6',
                                                        '7'
                                                      );

  { Enumeration conversion helpers }
  function StringToPaymentTermsDescriptionIdentifierContentType(const AValue: WideString): TXMLPaymentTermsDescriptionIdentifierContentType;
  function StringToFreightCostCodeContentType(const AValue: WideString): TXMLFreightCostCodeContentType;
  function StringToISOTwoletterCountryCodeContentType(const AValue: WideString): TXMLISOTwoletterCountryCodeContentType;
  function StringToTransportPaymentArrangementCodeContentType(const AValue: WideString): TXMLTransportPaymentArrangementCodeContentType;
  function StringToTransportMovementStageCodeContentType(const AValue: WideString): TXMLTransportMovementStageCodeContentType;
  function StringToTransportModeCodeContentType(const AValue: WideString): TXMLTransportModeCodeContentType;
  function StringToTransportMeansTypeCodeContentType(const AValue: WideString): TXMLTransportMeansTypeCodeContentType;
  function StringToTransportEquipmentFullnessCodeContentType(const AValue: WideString): TXMLTransportEquipmentFullnessCodeContentType;
  function StringToTransportEquipmentCategoryCodeContentType(const AValue: WideString): TXMLTransportEquipmentCategoryCodeContentType;
  function StringToTimePointFormatCodeContentType(const AValue: WideString): TXMLTimePointFormatCodeContentType;
  function StringToTimeOnlyFormatCodeContentType(const AValue: WideString): TXMLTimeOnlyFormatCodeContentType;
  function StringToStatusDescriptionCodeAccountingDebitCreditContentType(const AValue: WideString): TXMLStatusDescriptionCodeAccountingDebitCreditContentType;
  function StringToStatusCodeContentType(const AValue: WideString): TXMLStatusCodeContentType;
  function StringToSealingPartyRoleCodeContentType(const AValue: WideString): TXMLSealingPartyRoleCodeContentType;
  function StringToSealConditionCodeContentType(const AValue: WideString): TXMLSealConditionCodeContentType;
  function StringToReferenceTypeCodeContentType(const AValue: WideString): TXMLReferenceTypeCodeContentType;
  function StringToPriceTypeCodeContentType(const AValue: WideString): TXMLPriceTypeCodeContentType;
  function StringToPaymentTermsTypeCodeContentType(const AValue: WideString): TXMLPaymentTermsTypeCodeContentType;
  function StringToPaymentMeansCodeContentType(const AValue: WideString): TXMLPaymentMeansCodeContentType;
  function StringToPaymentMeansChannelCodeContentType(const AValue: WideString): TXMLPaymentMeansChannelCodeContentType;
  function StringToPaymentGuaranteeMeansCodeContentType(const AValue: WideString): TXMLPaymentGuaranteeMeansCodeContentType;
  function StringToPartyRoleCodeChargePayingContentType(const AValue: WideString): TXMLPartyRoleCodeChargePayingContentType;
  function StringToPartyRoleCodeContentType(const AValue: WideString): TXMLPartyRoleCodeContentType;
  function StringToPackagingMarkingCodeContentType(const AValue: WideString): TXMLPackagingMarkingCodeContentType;
  function StringToPackageTypeCodeContentType(const AValue: WideString): TXMLPackageTypeCodeContentType;
  function StringToMessageFunctionCodeContentType(const AValue: WideString): TXMLMessageFunctionCodeContentType;
  function StringToMeasurementUnitCommonCodeWeightContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeWeightContentType;
  function StringToMeasurementUnitCommonCodeVolumeContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeVolumeContentType;
  function StringToMeasurementUnitCommonCodeLinearContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeLinearContentType;
  function StringToLocationFunctionCodeContentType(const AValue: WideString): TXMLLocationFunctionCodeContentType;
  function StringToGoodsTypeExtensionCodeContentType(const AValue: WideString): TXMLGoodsTypeExtensionCodeContentType;
  function StringToGoodsTypeCodeContentType(const AValue: WideString): TXMLGoodsTypeCodeContentType;
  function StringToFreightChargeTariffCodeContentType(const AValue: WideString): TXMLFreightChargeTariffCodeContentType;
  function StringToFreightChargeQuantityUnitBasisCodeContentType(const AValue: WideString): TXMLFreightChargeQuantityUnitBasisCodeContentType;
  function StringToEventTimeReferenceCodePaymentTermsEventContentType(const AValue: WideString): TXMLEventTimeReferenceCodePaymentTermsEventContentType;
  function StringToEventTimeReferenceCodeContentType(const AValue: WideString): TXMLEventTimeReferenceCodeContentType;
  function StringToDutyorTaxorFeeCategoryCodeContentType(const AValue: WideString): TXMLDutyorTaxorFeeCategoryCodeContentType;
  function StringToDutyTaxFeeTypeCodeContentType(const AValue: WideString): TXMLDutyTaxFeeTypeCodeContentType;
  function StringToDocumentStatusCodeContentType(const AValue: WideString): TXMLDocumentStatusCodeContentType;
  function StringToDocumentNameCodeAccountingContentType(const AValue: WideString): TXMLDocumentNameCodeAccountingContentType;
  function StringToDocumentNameCodeContentType(const AValue: WideString): TXMLDocumentNameCodeContentType;
  function StringToDimensionTypeCodeContentType(const AValue: WideString): TXMLDimensionTypeCodeContentType;
  function StringToDeliveryTermsFunctionCodeContentType(const AValue: WideString): TXMLDeliveryTermsFunctionCodeContentType;
  function StringToDeliveryTermsCodeContentType(const AValue: WideString): TXMLDeliveryTermsCodeContentType;
  function StringToDateOnlyFormatCodeContentType(const AValue: WideString): TXMLDateOnlyFormatCodeContentType;
  function StringToDangerousGoodsRegulationCodeContentType(const AValue: WideString): TXMLDangerousGoodsRegulationCodeContentType;
  function StringToDangerousGoodsPackingCodeContentType(const AValue: WideString): TXMLDangerousGoodsPackingCodeContentType;
  function StringToContactFunctionCodeContentType(const AValue: WideString): TXMLContactFunctionCodeContentType;
  function StringToCommunicationMeansTypeCodeContentType(const AValue: WideString): TXMLCommunicationMeansTypeCodeContentType;
  function StringToCommodityIdentificationCodeContentType(const AValue: WideString): TXMLCommodityIdentificationCodeContentType;
  function StringToCargoTypeCodeContentType(const AValue: WideString): TXMLCargoTypeCodeContentType;
  function StringToCargoOperationalCategoryCodeContentType(const AValue: WideString): TXMLCargoOperationalCategoryCodeContentType;
  function StringToAutomaticDataCaptureMethodCodeContentType(const AValue: WideString): TXMLAutomaticDataCaptureMethodCodeContentType;
  function StringToAllowanceChargeReasonCodeContentType(const AValue: WideString): TXMLAllowanceChargeReasonCodeContentType;
  function StringToAllowanceChargeIdentificationCodeContentType(const AValue: WideString): TXMLAllowanceChargeIdentificationCodeContentType;
  function StringToAdjustmentReasonDescriptionCodeContentType(const AValue: WideString): TXMLAdjustmentReasonDescriptionCodeContentType;
  function StringToAddressTypeContentType(const AValue: WideString): TXMLAddressTypeContentType;
  function StringToActionCodeContentType(const AValue: WideString): TXMLActionCodeContentType;
  function StringToISO3AlphaCurrencyCodeContentType(const AValue: WideString): TXMLISO3AlphaCurrencyCodeContentType;
  function StringToAccountingAmountTypeContentType(const AValue: WideString): TXMLAccountingAmountTypeContentType;
  function StringToAccountingAccountTypeContentType(const AValue: WideString): TXMLAccountingAccountTypeContentType;
  function StringToTransportServicePaymentArrangementCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;
  function StringToTransportMovementStageCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportMovementStageCodeListAgencyIDContentType;
  function StringToTransportModeCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportModeCodeListAgencyIDContentType;
  function StringToTransportMeansTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportMeansTypeCodeListAgencyIDContentType;
  function StringToTransportEquipmentFullnessCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;
  function StringToTransportEquipmentCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;
  function StringToTimeReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLTimeReferenceCodeListAgencyIDContentType;
  function StringToTaxTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLTaxTypeCodeListAgencyIDContentType;
  function StringToTaxCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLTaxCategoryCodeListAgencyIDContentType;
  function StringToStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLStatusCodeListAgencyIDContentType;
  function StringToSealingPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLSealingPartyRoleCodeListAgencyIDContentType;
  function StringToSealConditionCodeListAgencyIDContentType(const AValue: WideString): TXMLSealConditionCodeListAgencyIDContentType;
  function StringToReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLReferenceCodeListAgencyIDContentType;
  function StringToPriceTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLPriceTypeCodeListAgencyIDContentType;
  function StringToPaymentTermsTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsTypeCodeListAgencyIDContentType;
  function StringToPaymentTermsIDSchemeAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsIDSchemeAgencyIDContentType;
  function StringToPaymentTermsEventTimeReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;
  function StringToPaymentMeansCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentMeansCodeListAgencyIDContentType;
  function StringToPaymentMeansChannelCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentMeansChannelCodeListAgencyIDContentType;
  function StringToPaymentGuaranteeMeansCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;
  function StringToPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLPartyRoleCodeListAgencyIDContentType;
  function StringToPackagingMarkingCodeListAgencyIDContentType(const AValue: WideString): TXMLPackagingMarkingCodeListAgencyIDContentType;
  function StringToMessageFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLMessageFunctionCodeListAgencyIDContentType;
  function StringToLocationFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLLocationFunctionCodeListAgencyIDContentType;
  function StringToLineStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLLineStatusCodeListAgencyIDContentType;
  function StringToFreightChargeTypeIDSchemeAgencyIDContentType(const AValue: WideString): TXMLFreightChargeTypeIDSchemeAgencyIDContentType;
  function StringToFreightChargeTariffClassCodeListAgencyIDContentType(const AValue: WideString): TXMLFreightChargeTariffClassCodeListAgencyIDContentType;
  function StringToDocumentStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLDocumentStatusCodeListAgencyIDContentType;
  function StringToDocumentCodeListAgencyIDContentType(const AValue: WideString): TXMLDocumentCodeListAgencyIDContentType;
  function StringToDimensionTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLDimensionTypeCodeListAgencyIDContentType;
  function StringToDeliveryTermsFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;
  function StringToDeliveryTermsCodeListAgencyIDContentType(const AValue: WideString): TXMLDeliveryTermsCodeListAgencyIDContentType;
  function StringToDangerousGoodsRegulationCodeListAgencyIDContentType(const AValue: WideString): TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;
  function StringToDangerousGoodsPackagingLevelCodeListAgencyIDContentType(const AValue: WideString): TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;
  function StringToCurrencyCodeListAgencyIDContentType(const AValue: WideString): TXMLCurrencyCodeListAgencyIDContentType;
  function StringToCountryIDSchemeAgencyIDContentType(const AValue: WideString): TXMLCountryIDSchemeAgencyIDContentType;
  function StringToContactTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLContactTypeCodeListAgencyIDContentType;
  function StringToCommunicationChannelCodeListAgencyIDContentType(const AValue: WideString): TXMLCommunicationChannelCodeListAgencyIDContentType;
  function StringToChargePayingPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLChargePayingPartyRoleCodeListAgencyIDContentType;
  function StringToCargoOperationalCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLCargoOperationalCategoryCodeListAgencyIDContentType;
  function StringToCargoCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLCargoCategoryCodeListAgencyIDContentType;
  function StringToAutomaticDataCaptureMethodCodeListAgencyIDContentType(const AValue: WideString): TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;
  function StringToAllowanceChargeReasonCodeListAgencyIDContentType(const AValue: WideString): TXMLAllowanceChargeReasonCodeListAgencyIDContentType;
  function StringToAdjustmentReasonCodeListAgencyIDContentType(const AValue: WideString): TXMLAdjustmentReasonCodeListAgencyIDContentType;
  function StringToAddressTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLAddressTypeCodeListAgencyIDContentType;
  function StringToAccountingDocumentCodeListAgencyIDContentType(const AValue: WideString): TXMLAccountingDocumentCodeListAgencyIDContentType;
  function StringToAccountingDebitCreditStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;

implementation
uses
  Variants;

{ Enumeration conversion helpers }
function StringToPaymentTermsDescriptionIdentifierContentType(const AValue: WideString): TXMLPaymentTermsDescriptionIdentifierContentType;
var
  enumValue: TXMLPaymentTermsDescriptionIdentifierContentType;

begin
  Result := TXMLPaymentTermsDescriptionIdentifierContentType(-1);
  for enumValue := Low(TXMLPaymentTermsDescriptionIdentifierContentType) to High(TXMLPaymentTermsDescriptionIdentifierContentType) do
    if PaymentTermsDescriptionIdentifierContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToFreightCostCodeContentType(const AValue: WideString): TXMLFreightCostCodeContentType;
var
  enumValue: TXMLFreightCostCodeContentType;

begin
  Result := TXMLFreightCostCodeContentType(-1);
  for enumValue := Low(TXMLFreightCostCodeContentType) to High(TXMLFreightCostCodeContentType) do
    if FreightCostCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToISOTwoletterCountryCodeContentType(const AValue: WideString): TXMLISOTwoletterCountryCodeContentType;
var
  enumValue: TXMLISOTwoletterCountryCodeContentType;

begin
  Result := TXMLISOTwoletterCountryCodeContentType(-1);
  for enumValue := Low(TXMLISOTwoletterCountryCodeContentType) to High(TXMLISOTwoletterCountryCodeContentType) do
    if ISOTwoletterCountryCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportPaymentArrangementCodeContentType(const AValue: WideString): TXMLTransportPaymentArrangementCodeContentType;
var
  enumValue: TXMLTransportPaymentArrangementCodeContentType;

begin
  Result := TXMLTransportPaymentArrangementCodeContentType(-1);
  for enumValue := Low(TXMLTransportPaymentArrangementCodeContentType) to High(TXMLTransportPaymentArrangementCodeContentType) do
    if TransportPaymentArrangementCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportMovementStageCodeContentType(const AValue: WideString): TXMLTransportMovementStageCodeContentType;
var
  enumValue: TXMLTransportMovementStageCodeContentType;

begin
  Result := TXMLTransportMovementStageCodeContentType(-1);
  for enumValue := Low(TXMLTransportMovementStageCodeContentType) to High(TXMLTransportMovementStageCodeContentType) do
    if TransportMovementStageCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportModeCodeContentType(const AValue: WideString): TXMLTransportModeCodeContentType;
var
  enumValue: TXMLTransportModeCodeContentType;

begin
  Result := TXMLTransportModeCodeContentType(-1);
  for enumValue := Low(TXMLTransportModeCodeContentType) to High(TXMLTransportModeCodeContentType) do
    if TransportModeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportMeansTypeCodeContentType(const AValue: WideString): TXMLTransportMeansTypeCodeContentType;
var
  enumValue: TXMLTransportMeansTypeCodeContentType;

begin
  Result := TXMLTransportMeansTypeCodeContentType(-1);
  for enumValue := Low(TXMLTransportMeansTypeCodeContentType) to High(TXMLTransportMeansTypeCodeContentType) do
    if TransportMeansTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportEquipmentFullnessCodeContentType(const AValue: WideString): TXMLTransportEquipmentFullnessCodeContentType;
var
  enumValue: TXMLTransportEquipmentFullnessCodeContentType;

begin
  Result := TXMLTransportEquipmentFullnessCodeContentType(-1);
  for enumValue := Low(TXMLTransportEquipmentFullnessCodeContentType) to High(TXMLTransportEquipmentFullnessCodeContentType) do
    if TransportEquipmentFullnessCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportEquipmentCategoryCodeContentType(const AValue: WideString): TXMLTransportEquipmentCategoryCodeContentType;
var
  enumValue: TXMLTransportEquipmentCategoryCodeContentType;

begin
  Result := TXMLTransportEquipmentCategoryCodeContentType(-1);
  for enumValue := Low(TXMLTransportEquipmentCategoryCodeContentType) to High(TXMLTransportEquipmentCategoryCodeContentType) do
    if TransportEquipmentCategoryCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTimePointFormatCodeContentType(const AValue: WideString): TXMLTimePointFormatCodeContentType;
var
  enumValue: TXMLTimePointFormatCodeContentType;

begin
  Result := TXMLTimePointFormatCodeContentType(-1);
  for enumValue := Low(TXMLTimePointFormatCodeContentType) to High(TXMLTimePointFormatCodeContentType) do
    if TimePointFormatCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTimeOnlyFormatCodeContentType(const AValue: WideString): TXMLTimeOnlyFormatCodeContentType;
var
  enumValue: TXMLTimeOnlyFormatCodeContentType;

begin
  Result := TXMLTimeOnlyFormatCodeContentType(-1);
  for enumValue := Low(TXMLTimeOnlyFormatCodeContentType) to High(TXMLTimeOnlyFormatCodeContentType) do
    if TimeOnlyFormatCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToStatusDescriptionCodeAccountingDebitCreditContentType(const AValue: WideString): TXMLStatusDescriptionCodeAccountingDebitCreditContentType;
var
  enumValue: TXMLStatusDescriptionCodeAccountingDebitCreditContentType;

begin
  Result := TXMLStatusDescriptionCodeAccountingDebitCreditContentType(-1);
  for enumValue := Low(TXMLStatusDescriptionCodeAccountingDebitCreditContentType) to High(TXMLStatusDescriptionCodeAccountingDebitCreditContentType) do
    if StatusDescriptionCodeAccountingDebitCreditContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToStatusCodeContentType(const AValue: WideString): TXMLStatusCodeContentType;
var
  enumValue: TXMLStatusCodeContentType;

begin
  Result := TXMLStatusCodeContentType(-1);
  for enumValue := Low(TXMLStatusCodeContentType) to High(TXMLStatusCodeContentType) do
    if StatusCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToSealingPartyRoleCodeContentType(const AValue: WideString): TXMLSealingPartyRoleCodeContentType;
var
  enumValue: TXMLSealingPartyRoleCodeContentType;

begin
  Result := TXMLSealingPartyRoleCodeContentType(-1);
  for enumValue := Low(TXMLSealingPartyRoleCodeContentType) to High(TXMLSealingPartyRoleCodeContentType) do
    if SealingPartyRoleCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToSealConditionCodeContentType(const AValue: WideString): TXMLSealConditionCodeContentType;
var
  enumValue: TXMLSealConditionCodeContentType;

begin
  Result := TXMLSealConditionCodeContentType(-1);
  for enumValue := Low(TXMLSealConditionCodeContentType) to High(TXMLSealConditionCodeContentType) do
    if SealConditionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToReferenceTypeCodeContentType(const AValue: WideString): TXMLReferenceTypeCodeContentType;
var
  enumValue: TXMLReferenceTypeCodeContentType;

begin
  Result := TXMLReferenceTypeCodeContentType(-1);
  for enumValue := Low(TXMLReferenceTypeCodeContentType) to High(TXMLReferenceTypeCodeContentType) do
    if ReferenceTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPriceTypeCodeContentType(const AValue: WideString): TXMLPriceTypeCodeContentType;
var
  enumValue: TXMLPriceTypeCodeContentType;

begin
  Result := TXMLPriceTypeCodeContentType(-1);
  for enumValue := Low(TXMLPriceTypeCodeContentType) to High(TXMLPriceTypeCodeContentType) do
    if PriceTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentTermsTypeCodeContentType(const AValue: WideString): TXMLPaymentTermsTypeCodeContentType;
var
  enumValue: TXMLPaymentTermsTypeCodeContentType;

begin
  Result := TXMLPaymentTermsTypeCodeContentType(-1);
  for enumValue := Low(TXMLPaymentTermsTypeCodeContentType) to High(TXMLPaymentTermsTypeCodeContentType) do
    if PaymentTermsTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentMeansCodeContentType(const AValue: WideString): TXMLPaymentMeansCodeContentType;
var
  enumValue: TXMLPaymentMeansCodeContentType;

begin
  Result := TXMLPaymentMeansCodeContentType(-1);
  for enumValue := Low(TXMLPaymentMeansCodeContentType) to High(TXMLPaymentMeansCodeContentType) do
    if PaymentMeansCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentMeansChannelCodeContentType(const AValue: WideString): TXMLPaymentMeansChannelCodeContentType;
var
  enumValue: TXMLPaymentMeansChannelCodeContentType;

begin
  Result := TXMLPaymentMeansChannelCodeContentType(-1);
  for enumValue := Low(TXMLPaymentMeansChannelCodeContentType) to High(TXMLPaymentMeansChannelCodeContentType) do
    if PaymentMeansChannelCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentGuaranteeMeansCodeContentType(const AValue: WideString): TXMLPaymentGuaranteeMeansCodeContentType;
var
  enumValue: TXMLPaymentGuaranteeMeansCodeContentType;

begin
  Result := TXMLPaymentGuaranteeMeansCodeContentType(-1);
  for enumValue := Low(TXMLPaymentGuaranteeMeansCodeContentType) to High(TXMLPaymentGuaranteeMeansCodeContentType) do
    if PaymentGuaranteeMeansCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPartyRoleCodeChargePayingContentType(const AValue: WideString): TXMLPartyRoleCodeChargePayingContentType;
var
  enumValue: TXMLPartyRoleCodeChargePayingContentType;

begin
  Result := TXMLPartyRoleCodeChargePayingContentType(-1);
  for enumValue := Low(TXMLPartyRoleCodeChargePayingContentType) to High(TXMLPartyRoleCodeChargePayingContentType) do
    if PartyRoleCodeChargePayingContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPartyRoleCodeContentType(const AValue: WideString): TXMLPartyRoleCodeContentType;
var
  enumValue: TXMLPartyRoleCodeContentType;

begin
  Result := TXMLPartyRoleCodeContentType(-1);
  for enumValue := Low(TXMLPartyRoleCodeContentType) to High(TXMLPartyRoleCodeContentType) do
    if PartyRoleCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPackagingMarkingCodeContentType(const AValue: WideString): TXMLPackagingMarkingCodeContentType;
var
  enumValue: TXMLPackagingMarkingCodeContentType;

begin
  Result := TXMLPackagingMarkingCodeContentType(-1);
  for enumValue := Low(TXMLPackagingMarkingCodeContentType) to High(TXMLPackagingMarkingCodeContentType) do
    if PackagingMarkingCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPackageTypeCodeContentType(const AValue: WideString): TXMLPackageTypeCodeContentType;
var
  enumValue: TXMLPackageTypeCodeContentType;

begin
  Result := TXMLPackageTypeCodeContentType(-1);
  for enumValue := Low(TXMLPackageTypeCodeContentType) to High(TXMLPackageTypeCodeContentType) do
    if PackageTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToMessageFunctionCodeContentType(const AValue: WideString): TXMLMessageFunctionCodeContentType;
var
  enumValue: TXMLMessageFunctionCodeContentType;

begin
  Result := TXMLMessageFunctionCodeContentType(-1);
  for enumValue := Low(TXMLMessageFunctionCodeContentType) to High(TXMLMessageFunctionCodeContentType) do
    if MessageFunctionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToMeasurementUnitCommonCodeWeightContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeWeightContentType;
var
  enumValue: TXMLMeasurementUnitCommonCodeWeightContentType;

begin
  Result := TXMLMeasurementUnitCommonCodeWeightContentType(-1);
  for enumValue := Low(TXMLMeasurementUnitCommonCodeWeightContentType) to High(TXMLMeasurementUnitCommonCodeWeightContentType) do
    if MeasurementUnitCommonCodeWeightContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToMeasurementUnitCommonCodeVolumeContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeVolumeContentType;
var
  enumValue: TXMLMeasurementUnitCommonCodeVolumeContentType;

begin
  Result := TXMLMeasurementUnitCommonCodeVolumeContentType(-1);
  for enumValue := Low(TXMLMeasurementUnitCommonCodeVolumeContentType) to High(TXMLMeasurementUnitCommonCodeVolumeContentType) do
    if MeasurementUnitCommonCodeVolumeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToMeasurementUnitCommonCodeLinearContentType(const AValue: WideString): TXMLMeasurementUnitCommonCodeLinearContentType;
var
  enumValue: TXMLMeasurementUnitCommonCodeLinearContentType;

begin
  Result := TXMLMeasurementUnitCommonCodeLinearContentType(-1);
  for enumValue := Low(TXMLMeasurementUnitCommonCodeLinearContentType) to High(TXMLMeasurementUnitCommonCodeLinearContentType) do
    if MeasurementUnitCommonCodeLinearContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToLocationFunctionCodeContentType(const AValue: WideString): TXMLLocationFunctionCodeContentType;
var
  enumValue: TXMLLocationFunctionCodeContentType;

begin
  Result := TXMLLocationFunctionCodeContentType(-1);
  for enumValue := Low(TXMLLocationFunctionCodeContentType) to High(TXMLLocationFunctionCodeContentType) do
    if LocationFunctionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToGoodsTypeExtensionCodeContentType(const AValue: WideString): TXMLGoodsTypeExtensionCodeContentType;
var
  enumValue: TXMLGoodsTypeExtensionCodeContentType;

begin
  Result := TXMLGoodsTypeExtensionCodeContentType(-1);
  for enumValue := Low(TXMLGoodsTypeExtensionCodeContentType) to High(TXMLGoodsTypeExtensionCodeContentType) do
    if GoodsTypeExtensionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToGoodsTypeCodeContentType(const AValue: WideString): TXMLGoodsTypeCodeContentType;
var
  enumValue: TXMLGoodsTypeCodeContentType;

begin
  Result := TXMLGoodsTypeCodeContentType(-1);
  for enumValue := Low(TXMLGoodsTypeCodeContentType) to High(TXMLGoodsTypeCodeContentType) do
    if GoodsTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToFreightChargeTariffCodeContentType(const AValue: WideString): TXMLFreightChargeTariffCodeContentType;
var
  enumValue: TXMLFreightChargeTariffCodeContentType;

begin
  Result := TXMLFreightChargeTariffCodeContentType(-1);
  for enumValue := Low(TXMLFreightChargeTariffCodeContentType) to High(TXMLFreightChargeTariffCodeContentType) do
    if FreightChargeTariffCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToFreightChargeQuantityUnitBasisCodeContentType(const AValue: WideString): TXMLFreightChargeQuantityUnitBasisCodeContentType;
var
  enumValue: TXMLFreightChargeQuantityUnitBasisCodeContentType;

begin
  Result := TXMLFreightChargeQuantityUnitBasisCodeContentType(-1);
  for enumValue := Low(TXMLFreightChargeQuantityUnitBasisCodeContentType) to High(TXMLFreightChargeQuantityUnitBasisCodeContentType) do
    if FreightChargeQuantityUnitBasisCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToEventTimeReferenceCodePaymentTermsEventContentType(const AValue: WideString): TXMLEventTimeReferenceCodePaymentTermsEventContentType;
var
  enumValue: TXMLEventTimeReferenceCodePaymentTermsEventContentType;

begin
  Result := TXMLEventTimeReferenceCodePaymentTermsEventContentType(-1);
  for enumValue := Low(TXMLEventTimeReferenceCodePaymentTermsEventContentType) to High(TXMLEventTimeReferenceCodePaymentTermsEventContentType) do
    if EventTimeReferenceCodePaymentTermsEventContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToEventTimeReferenceCodeContentType(const AValue: WideString): TXMLEventTimeReferenceCodeContentType;
var
  enumValue: TXMLEventTimeReferenceCodeContentType;

begin
  Result := TXMLEventTimeReferenceCodeContentType(-1);
  for enumValue := Low(TXMLEventTimeReferenceCodeContentType) to High(TXMLEventTimeReferenceCodeContentType) do
    if EventTimeReferenceCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDutyorTaxorFeeCategoryCodeContentType(const AValue: WideString): TXMLDutyorTaxorFeeCategoryCodeContentType;
var
  enumValue: TXMLDutyorTaxorFeeCategoryCodeContentType;

begin
  Result := TXMLDutyorTaxorFeeCategoryCodeContentType(-1);
  for enumValue := Low(TXMLDutyorTaxorFeeCategoryCodeContentType) to High(TXMLDutyorTaxorFeeCategoryCodeContentType) do
    if DutyorTaxorFeeCategoryCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDutyTaxFeeTypeCodeContentType(const AValue: WideString): TXMLDutyTaxFeeTypeCodeContentType;
var
  enumValue: TXMLDutyTaxFeeTypeCodeContentType;

begin
  Result := TXMLDutyTaxFeeTypeCodeContentType(-1);
  for enumValue := Low(TXMLDutyTaxFeeTypeCodeContentType) to High(TXMLDutyTaxFeeTypeCodeContentType) do
    if DutyTaxFeeTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDocumentStatusCodeContentType(const AValue: WideString): TXMLDocumentStatusCodeContentType;
var
  enumValue: TXMLDocumentStatusCodeContentType;

begin
  Result := TXMLDocumentStatusCodeContentType(-1);
  for enumValue := Low(TXMLDocumentStatusCodeContentType) to High(TXMLDocumentStatusCodeContentType) do
    if DocumentStatusCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDocumentNameCodeAccountingContentType(const AValue: WideString): TXMLDocumentNameCodeAccountingContentType;
var
  enumValue: TXMLDocumentNameCodeAccountingContentType;

begin
  Result := TXMLDocumentNameCodeAccountingContentType(-1);
  for enumValue := Low(TXMLDocumentNameCodeAccountingContentType) to High(TXMLDocumentNameCodeAccountingContentType) do
    if DocumentNameCodeAccountingContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDocumentNameCodeContentType(const AValue: WideString): TXMLDocumentNameCodeContentType;
var
  enumValue: TXMLDocumentNameCodeContentType;

begin
  Result := TXMLDocumentNameCodeContentType(-1);
  for enumValue := Low(TXMLDocumentNameCodeContentType) to High(TXMLDocumentNameCodeContentType) do
    if DocumentNameCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDimensionTypeCodeContentType(const AValue: WideString): TXMLDimensionTypeCodeContentType;
var
  enumValue: TXMLDimensionTypeCodeContentType;

begin
  Result := TXMLDimensionTypeCodeContentType(-1);
  for enumValue := Low(TXMLDimensionTypeCodeContentType) to High(TXMLDimensionTypeCodeContentType) do
    if DimensionTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDeliveryTermsFunctionCodeContentType(const AValue: WideString): TXMLDeliveryTermsFunctionCodeContentType;
var
  enumValue: TXMLDeliveryTermsFunctionCodeContentType;

begin
  Result := TXMLDeliveryTermsFunctionCodeContentType(-1);
  for enumValue := Low(TXMLDeliveryTermsFunctionCodeContentType) to High(TXMLDeliveryTermsFunctionCodeContentType) do
    if DeliveryTermsFunctionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDeliveryTermsCodeContentType(const AValue: WideString): TXMLDeliveryTermsCodeContentType;
var
  enumValue: TXMLDeliveryTermsCodeContentType;

begin
  Result := TXMLDeliveryTermsCodeContentType(-1);
  for enumValue := Low(TXMLDeliveryTermsCodeContentType) to High(TXMLDeliveryTermsCodeContentType) do
    if DeliveryTermsCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDateOnlyFormatCodeContentType(const AValue: WideString): TXMLDateOnlyFormatCodeContentType;
var
  enumValue: TXMLDateOnlyFormatCodeContentType;

begin
  Result := TXMLDateOnlyFormatCodeContentType(-1);
  for enumValue := Low(TXMLDateOnlyFormatCodeContentType) to High(TXMLDateOnlyFormatCodeContentType) do
    if DateOnlyFormatCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDangerousGoodsRegulationCodeContentType(const AValue: WideString): TXMLDangerousGoodsRegulationCodeContentType;
var
  enumValue: TXMLDangerousGoodsRegulationCodeContentType;

begin
  Result := TXMLDangerousGoodsRegulationCodeContentType(-1);
  for enumValue := Low(TXMLDangerousGoodsRegulationCodeContentType) to High(TXMLDangerousGoodsRegulationCodeContentType) do
    if DangerousGoodsRegulationCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDangerousGoodsPackingCodeContentType(const AValue: WideString): TXMLDangerousGoodsPackingCodeContentType;
var
  enumValue: TXMLDangerousGoodsPackingCodeContentType;

begin
  Result := TXMLDangerousGoodsPackingCodeContentType(-1);
  for enumValue := Low(TXMLDangerousGoodsPackingCodeContentType) to High(TXMLDangerousGoodsPackingCodeContentType) do
    if DangerousGoodsPackingCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToContactFunctionCodeContentType(const AValue: WideString): TXMLContactFunctionCodeContentType;
var
  enumValue: TXMLContactFunctionCodeContentType;

begin
  Result := TXMLContactFunctionCodeContentType(-1);
  for enumValue := Low(TXMLContactFunctionCodeContentType) to High(TXMLContactFunctionCodeContentType) do
    if ContactFunctionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCommunicationMeansTypeCodeContentType(const AValue: WideString): TXMLCommunicationMeansTypeCodeContentType;
var
  enumValue: TXMLCommunicationMeansTypeCodeContentType;

begin
  Result := TXMLCommunicationMeansTypeCodeContentType(-1);
  for enumValue := Low(TXMLCommunicationMeansTypeCodeContentType) to High(TXMLCommunicationMeansTypeCodeContentType) do
    if CommunicationMeansTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCommodityIdentificationCodeContentType(const AValue: WideString): TXMLCommodityIdentificationCodeContentType;
var
  enumValue: TXMLCommodityIdentificationCodeContentType;

begin
  Result := TXMLCommodityIdentificationCodeContentType(-1);
  for enumValue := Low(TXMLCommodityIdentificationCodeContentType) to High(TXMLCommodityIdentificationCodeContentType) do
    if CommodityIdentificationCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCargoTypeCodeContentType(const AValue: WideString): TXMLCargoTypeCodeContentType;
var
  enumValue: TXMLCargoTypeCodeContentType;

begin
  Result := TXMLCargoTypeCodeContentType(-1);
  for enumValue := Low(TXMLCargoTypeCodeContentType) to High(TXMLCargoTypeCodeContentType) do
    if CargoTypeCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCargoOperationalCategoryCodeContentType(const AValue: WideString): TXMLCargoOperationalCategoryCodeContentType;
var
  enumValue: TXMLCargoOperationalCategoryCodeContentType;

begin
  Result := TXMLCargoOperationalCategoryCodeContentType(-1);
  for enumValue := Low(TXMLCargoOperationalCategoryCodeContentType) to High(TXMLCargoOperationalCategoryCodeContentType) do
    if CargoOperationalCategoryCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAutomaticDataCaptureMethodCodeContentType(const AValue: WideString): TXMLAutomaticDataCaptureMethodCodeContentType;
var
  enumValue: TXMLAutomaticDataCaptureMethodCodeContentType;

begin
  Result := TXMLAutomaticDataCaptureMethodCodeContentType(-1);
  for enumValue := Low(TXMLAutomaticDataCaptureMethodCodeContentType) to High(TXMLAutomaticDataCaptureMethodCodeContentType) do
    if AutomaticDataCaptureMethodCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAllowanceChargeReasonCodeContentType(const AValue: WideString): TXMLAllowanceChargeReasonCodeContentType;
var
  enumValue: TXMLAllowanceChargeReasonCodeContentType;

begin
  Result := TXMLAllowanceChargeReasonCodeContentType(-1);
  for enumValue := Low(TXMLAllowanceChargeReasonCodeContentType) to High(TXMLAllowanceChargeReasonCodeContentType) do
    if AllowanceChargeReasonCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAllowanceChargeIdentificationCodeContentType(const AValue: WideString): TXMLAllowanceChargeIdentificationCodeContentType;
var
  enumValue: TXMLAllowanceChargeIdentificationCodeContentType;

begin
  Result := TXMLAllowanceChargeIdentificationCodeContentType(-1);
  for enumValue := Low(TXMLAllowanceChargeIdentificationCodeContentType) to High(TXMLAllowanceChargeIdentificationCodeContentType) do
    if AllowanceChargeIdentificationCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAdjustmentReasonDescriptionCodeContentType(const AValue: WideString): TXMLAdjustmentReasonDescriptionCodeContentType;
var
  enumValue: TXMLAdjustmentReasonDescriptionCodeContentType;

begin
  Result := TXMLAdjustmentReasonDescriptionCodeContentType(-1);
  for enumValue := Low(TXMLAdjustmentReasonDescriptionCodeContentType) to High(TXMLAdjustmentReasonDescriptionCodeContentType) do
    if AdjustmentReasonDescriptionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAddressTypeContentType(const AValue: WideString): TXMLAddressTypeContentType;
var
  enumValue: TXMLAddressTypeContentType;

begin
  Result := TXMLAddressTypeContentType(-1);
  for enumValue := Low(TXMLAddressTypeContentType) to High(TXMLAddressTypeContentType) do
    if AddressTypeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToActionCodeContentType(const AValue: WideString): TXMLActionCodeContentType;
var
  enumValue: TXMLActionCodeContentType;

begin
  Result := TXMLActionCodeContentType(-1);
  for enumValue := Low(TXMLActionCodeContentType) to High(TXMLActionCodeContentType) do
    if ActionCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToISO3AlphaCurrencyCodeContentType(const AValue: WideString): TXMLISO3AlphaCurrencyCodeContentType;
var
  enumValue: TXMLISO3AlphaCurrencyCodeContentType;

begin
  Result := TXMLISO3AlphaCurrencyCodeContentType(-1);
  for enumValue := Low(TXMLISO3AlphaCurrencyCodeContentType) to High(TXMLISO3AlphaCurrencyCodeContentType) do
    if ISO3AlphaCurrencyCodeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAccountingAmountTypeContentType(const AValue: WideString): TXMLAccountingAmountTypeContentType;
var
  enumValue: TXMLAccountingAmountTypeContentType;

begin
  Result := TXMLAccountingAmountTypeContentType(-1);
  for enumValue := Low(TXMLAccountingAmountTypeContentType) to High(TXMLAccountingAmountTypeContentType) do
    if AccountingAmountTypeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAccountingAccountTypeContentType(const AValue: WideString): TXMLAccountingAccountTypeContentType;
var
  enumValue: TXMLAccountingAccountTypeContentType;

begin
  Result := TXMLAccountingAccountTypeContentType(-1);
  for enumValue := Low(TXMLAccountingAccountTypeContentType) to High(TXMLAccountingAccountTypeContentType) do
    if AccountingAccountTypeContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportServicePaymentArrangementCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;

begin
  Result := TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType) to High(TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType) do
    if TransportServicePaymentArrangementCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportMovementStageCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportMovementStageCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportMovementStageCodeListAgencyIDContentType;

begin
  Result := TXMLTransportMovementStageCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportMovementStageCodeListAgencyIDContentType) to High(TXMLTransportMovementStageCodeListAgencyIDContentType) do
    if TransportMovementStageCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportModeCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportModeCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportModeCodeListAgencyIDContentType;

begin
  Result := TXMLTransportModeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportModeCodeListAgencyIDContentType) to High(TXMLTransportModeCodeListAgencyIDContentType) do
    if TransportModeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportMeansTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportMeansTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportMeansTypeCodeListAgencyIDContentType;

begin
  Result := TXMLTransportMeansTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportMeansTypeCodeListAgencyIDContentType) to High(TXMLTransportMeansTypeCodeListAgencyIDContentType) do
    if TransportMeansTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportEquipmentFullnessCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;

begin
  Result := TXMLTransportEquipmentFullnessCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportEquipmentFullnessCodeListAgencyIDContentType) to High(TXMLTransportEquipmentFullnessCodeListAgencyIDContentType) do
    if TransportEquipmentFullnessCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTransportEquipmentCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;
var
  enumValue: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;

begin
  Result := TXMLTransportEquipmentCategoryCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTransportEquipmentCategoryCodeListAgencyIDContentType) to High(TXMLTransportEquipmentCategoryCodeListAgencyIDContentType) do
    if TransportEquipmentCategoryCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTimeReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLTimeReferenceCodeListAgencyIDContentType;
var
  enumValue: TXMLTimeReferenceCodeListAgencyIDContentType;

begin
  Result := TXMLTimeReferenceCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTimeReferenceCodeListAgencyIDContentType) to High(TXMLTimeReferenceCodeListAgencyIDContentType) do
    if TimeReferenceCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTaxTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLTaxTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLTaxTypeCodeListAgencyIDContentType;

begin
  Result := TXMLTaxTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTaxTypeCodeListAgencyIDContentType) to High(TXMLTaxTypeCodeListAgencyIDContentType) do
    if TaxTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToTaxCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLTaxCategoryCodeListAgencyIDContentType;
var
  enumValue: TXMLTaxCategoryCodeListAgencyIDContentType;

begin
  Result := TXMLTaxCategoryCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLTaxCategoryCodeListAgencyIDContentType) to High(TXMLTaxCategoryCodeListAgencyIDContentType) do
    if TaxCategoryCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLStatusCodeListAgencyIDContentType;
var
  enumValue: TXMLStatusCodeListAgencyIDContentType;

begin
  Result := TXMLStatusCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLStatusCodeListAgencyIDContentType) to High(TXMLStatusCodeListAgencyIDContentType) do
    if StatusCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToSealingPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLSealingPartyRoleCodeListAgencyIDContentType;
var
  enumValue: TXMLSealingPartyRoleCodeListAgencyIDContentType;

begin
  Result := TXMLSealingPartyRoleCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLSealingPartyRoleCodeListAgencyIDContentType) to High(TXMLSealingPartyRoleCodeListAgencyIDContentType) do
    if SealingPartyRoleCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToSealConditionCodeListAgencyIDContentType(const AValue: WideString): TXMLSealConditionCodeListAgencyIDContentType;
var
  enumValue: TXMLSealConditionCodeListAgencyIDContentType;

begin
  Result := TXMLSealConditionCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLSealConditionCodeListAgencyIDContentType) to High(TXMLSealConditionCodeListAgencyIDContentType) do
    if SealConditionCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLReferenceCodeListAgencyIDContentType;
var
  enumValue: TXMLReferenceCodeListAgencyIDContentType;

begin
  Result := TXMLReferenceCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLReferenceCodeListAgencyIDContentType) to High(TXMLReferenceCodeListAgencyIDContentType) do
    if ReferenceCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPriceTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLPriceTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLPriceTypeCodeListAgencyIDContentType;

begin
  Result := TXMLPriceTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPriceTypeCodeListAgencyIDContentType) to High(TXMLPriceTypeCodeListAgencyIDContentType) do
    if PriceTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentTermsTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLPaymentTermsTypeCodeListAgencyIDContentType;

begin
  Result := TXMLPaymentTermsTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentTermsTypeCodeListAgencyIDContentType) to High(TXMLPaymentTermsTypeCodeListAgencyIDContentType) do
    if PaymentTermsTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentTermsIDSchemeAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsIDSchemeAgencyIDContentType;
var
  enumValue: TXMLPaymentTermsIDSchemeAgencyIDContentType;

begin
  Result := TXMLPaymentTermsIDSchemeAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentTermsIDSchemeAgencyIDContentType) to High(TXMLPaymentTermsIDSchemeAgencyIDContentType) do
    if PaymentTermsIDSchemeAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentTermsEventTimeReferenceCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;
var
  enumValue: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;

begin
  Result := TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType) to High(TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType) do
    if PaymentTermsEventTimeReferenceCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentMeansCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentMeansCodeListAgencyIDContentType;
var
  enumValue: TXMLPaymentMeansCodeListAgencyIDContentType;

begin
  Result := TXMLPaymentMeansCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentMeansCodeListAgencyIDContentType) to High(TXMLPaymentMeansCodeListAgencyIDContentType) do
    if PaymentMeansCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentMeansChannelCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentMeansChannelCodeListAgencyIDContentType;
var
  enumValue: TXMLPaymentMeansChannelCodeListAgencyIDContentType;

begin
  Result := TXMLPaymentMeansChannelCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentMeansChannelCodeListAgencyIDContentType) to High(TXMLPaymentMeansChannelCodeListAgencyIDContentType) do
    if PaymentMeansChannelCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPaymentGuaranteeMeansCodeListAgencyIDContentType(const AValue: WideString): TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;
var
  enumValue: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;

begin
  Result := TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType) to High(TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType) do
    if PaymentGuaranteeMeansCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLPartyRoleCodeListAgencyIDContentType;
var
  enumValue: TXMLPartyRoleCodeListAgencyIDContentType;

begin
  Result := TXMLPartyRoleCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPartyRoleCodeListAgencyIDContentType) to High(TXMLPartyRoleCodeListAgencyIDContentType) do
    if PartyRoleCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToPackagingMarkingCodeListAgencyIDContentType(const AValue: WideString): TXMLPackagingMarkingCodeListAgencyIDContentType;
var
  enumValue: TXMLPackagingMarkingCodeListAgencyIDContentType;

begin
  Result := TXMLPackagingMarkingCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLPackagingMarkingCodeListAgencyIDContentType) to High(TXMLPackagingMarkingCodeListAgencyIDContentType) do
    if PackagingMarkingCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToMessageFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLMessageFunctionCodeListAgencyIDContentType;
var
  enumValue: TXMLMessageFunctionCodeListAgencyIDContentType;

begin
  Result := TXMLMessageFunctionCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLMessageFunctionCodeListAgencyIDContentType) to High(TXMLMessageFunctionCodeListAgencyIDContentType) do
    if MessageFunctionCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToLocationFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLLocationFunctionCodeListAgencyIDContentType;
var
  enumValue: TXMLLocationFunctionCodeListAgencyIDContentType;

begin
  Result := TXMLLocationFunctionCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLLocationFunctionCodeListAgencyIDContentType) to High(TXMLLocationFunctionCodeListAgencyIDContentType) do
    if LocationFunctionCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToLineStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLLineStatusCodeListAgencyIDContentType;
var
  enumValue: TXMLLineStatusCodeListAgencyIDContentType;

begin
  Result := TXMLLineStatusCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLLineStatusCodeListAgencyIDContentType) to High(TXMLLineStatusCodeListAgencyIDContentType) do
    if LineStatusCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToFreightChargeTypeIDSchemeAgencyIDContentType(const AValue: WideString): TXMLFreightChargeTypeIDSchemeAgencyIDContentType;
var
  enumValue: TXMLFreightChargeTypeIDSchemeAgencyIDContentType;

begin
  Result := TXMLFreightChargeTypeIDSchemeAgencyIDContentType(-1);
  for enumValue := Low(TXMLFreightChargeTypeIDSchemeAgencyIDContentType) to High(TXMLFreightChargeTypeIDSchemeAgencyIDContentType) do
    if FreightChargeTypeIDSchemeAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToFreightChargeTariffClassCodeListAgencyIDContentType(const AValue: WideString): TXMLFreightChargeTariffClassCodeListAgencyIDContentType;
var
  enumValue: TXMLFreightChargeTariffClassCodeListAgencyIDContentType;

begin
  Result := TXMLFreightChargeTariffClassCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLFreightChargeTariffClassCodeListAgencyIDContentType) to High(TXMLFreightChargeTariffClassCodeListAgencyIDContentType) do
    if FreightChargeTariffClassCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDocumentStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLDocumentStatusCodeListAgencyIDContentType;
var
  enumValue: TXMLDocumentStatusCodeListAgencyIDContentType;

begin
  Result := TXMLDocumentStatusCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDocumentStatusCodeListAgencyIDContentType) to High(TXMLDocumentStatusCodeListAgencyIDContentType) do
    if DocumentStatusCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDocumentCodeListAgencyIDContentType(const AValue: WideString): TXMLDocumentCodeListAgencyIDContentType;
var
  enumValue: TXMLDocumentCodeListAgencyIDContentType;

begin
  Result := TXMLDocumentCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDocumentCodeListAgencyIDContentType) to High(TXMLDocumentCodeListAgencyIDContentType) do
    if DocumentCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDimensionTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLDimensionTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLDimensionTypeCodeListAgencyIDContentType;

begin
  Result := TXMLDimensionTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDimensionTypeCodeListAgencyIDContentType) to High(TXMLDimensionTypeCodeListAgencyIDContentType) do
    if DimensionTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDeliveryTermsFunctionCodeListAgencyIDContentType(const AValue: WideString): TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;
var
  enumValue: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;

begin
  Result := TXMLDeliveryTermsFunctionCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDeliveryTermsFunctionCodeListAgencyIDContentType) to High(TXMLDeliveryTermsFunctionCodeListAgencyIDContentType) do
    if DeliveryTermsFunctionCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDeliveryTermsCodeListAgencyIDContentType(const AValue: WideString): TXMLDeliveryTermsCodeListAgencyIDContentType;
var
  enumValue: TXMLDeliveryTermsCodeListAgencyIDContentType;

begin
  Result := TXMLDeliveryTermsCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDeliveryTermsCodeListAgencyIDContentType) to High(TXMLDeliveryTermsCodeListAgencyIDContentType) do
    if DeliveryTermsCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDangerousGoodsRegulationCodeListAgencyIDContentType(const AValue: WideString): TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;
var
  enumValue: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;

begin
  Result := TXMLDangerousGoodsRegulationCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDangerousGoodsRegulationCodeListAgencyIDContentType) to High(TXMLDangerousGoodsRegulationCodeListAgencyIDContentType) do
    if DangerousGoodsRegulationCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToDangerousGoodsPackagingLevelCodeListAgencyIDContentType(const AValue: WideString): TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;
var
  enumValue: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;

begin
  Result := TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType) to High(TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType) do
    if DangerousGoodsPackagingLevelCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCurrencyCodeListAgencyIDContentType(const AValue: WideString): TXMLCurrencyCodeListAgencyIDContentType;
var
  enumValue: TXMLCurrencyCodeListAgencyIDContentType;

begin
  Result := TXMLCurrencyCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLCurrencyCodeListAgencyIDContentType) to High(TXMLCurrencyCodeListAgencyIDContentType) do
    if CurrencyCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCountryIDSchemeAgencyIDContentType(const AValue: WideString): TXMLCountryIDSchemeAgencyIDContentType;
var
  enumValue: TXMLCountryIDSchemeAgencyIDContentType;

begin
  Result := TXMLCountryIDSchemeAgencyIDContentType(-1);
  for enumValue := Low(TXMLCountryIDSchemeAgencyIDContentType) to High(TXMLCountryIDSchemeAgencyIDContentType) do
    if CountryIDSchemeAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToContactTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLContactTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLContactTypeCodeListAgencyIDContentType;

begin
  Result := TXMLContactTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLContactTypeCodeListAgencyIDContentType) to High(TXMLContactTypeCodeListAgencyIDContentType) do
    if ContactTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCommunicationChannelCodeListAgencyIDContentType(const AValue: WideString): TXMLCommunicationChannelCodeListAgencyIDContentType;
var
  enumValue: TXMLCommunicationChannelCodeListAgencyIDContentType;

begin
  Result := TXMLCommunicationChannelCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLCommunicationChannelCodeListAgencyIDContentType) to High(TXMLCommunicationChannelCodeListAgencyIDContentType) do
    if CommunicationChannelCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToChargePayingPartyRoleCodeListAgencyIDContentType(const AValue: WideString): TXMLChargePayingPartyRoleCodeListAgencyIDContentType;
var
  enumValue: TXMLChargePayingPartyRoleCodeListAgencyIDContentType;

begin
  Result := TXMLChargePayingPartyRoleCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLChargePayingPartyRoleCodeListAgencyIDContentType) to High(TXMLChargePayingPartyRoleCodeListAgencyIDContentType) do
    if ChargePayingPartyRoleCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCargoOperationalCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLCargoOperationalCategoryCodeListAgencyIDContentType;
var
  enumValue: TXMLCargoOperationalCategoryCodeListAgencyIDContentType;

begin
  Result := TXMLCargoOperationalCategoryCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLCargoOperationalCategoryCodeListAgencyIDContentType) to High(TXMLCargoOperationalCategoryCodeListAgencyIDContentType) do
    if CargoOperationalCategoryCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToCargoCategoryCodeListAgencyIDContentType(const AValue: WideString): TXMLCargoCategoryCodeListAgencyIDContentType;
var
  enumValue: TXMLCargoCategoryCodeListAgencyIDContentType;

begin
  Result := TXMLCargoCategoryCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLCargoCategoryCodeListAgencyIDContentType) to High(TXMLCargoCategoryCodeListAgencyIDContentType) do
    if CargoCategoryCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAutomaticDataCaptureMethodCodeListAgencyIDContentType(const AValue: WideString): TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;
var
  enumValue: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;

begin
  Result := TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType) to High(TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType) do
    if AutomaticDataCaptureMethodCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAllowanceChargeReasonCodeListAgencyIDContentType(const AValue: WideString): TXMLAllowanceChargeReasonCodeListAgencyIDContentType;
var
  enumValue: TXMLAllowanceChargeReasonCodeListAgencyIDContentType;

begin
  Result := TXMLAllowanceChargeReasonCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAllowanceChargeReasonCodeListAgencyIDContentType) to High(TXMLAllowanceChargeReasonCodeListAgencyIDContentType) do
    if AllowanceChargeReasonCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAdjustmentReasonCodeListAgencyIDContentType(const AValue: WideString): TXMLAdjustmentReasonCodeListAgencyIDContentType;
var
  enumValue: TXMLAdjustmentReasonCodeListAgencyIDContentType;

begin
  Result := TXMLAdjustmentReasonCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAdjustmentReasonCodeListAgencyIDContentType) to High(TXMLAdjustmentReasonCodeListAgencyIDContentType) do
    if AdjustmentReasonCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAddressTypeCodeListAgencyIDContentType(const AValue: WideString): TXMLAddressTypeCodeListAgencyIDContentType;
var
  enumValue: TXMLAddressTypeCodeListAgencyIDContentType;

begin
  Result := TXMLAddressTypeCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAddressTypeCodeListAgencyIDContentType) to High(TXMLAddressTypeCodeListAgencyIDContentType) do
    if AddressTypeCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAccountingDocumentCodeListAgencyIDContentType(const AValue: WideString): TXMLAccountingDocumentCodeListAgencyIDContentType;
var
  enumValue: TXMLAccountingDocumentCodeListAgencyIDContentType;

begin
  Result := TXMLAccountingDocumentCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAccountingDocumentCodeListAgencyIDContentType) to High(TXMLAccountingDocumentCodeListAgencyIDContentType) do
    if AccountingDocumentCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;

function StringToAccountingDebitCreditStatusCodeListAgencyIDContentType(const AValue: WideString): TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;
var
  enumValue: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;

begin
  Result := TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType(-1);
  for enumValue := Low(TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType) to High(TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType) do
    if AccountingDebitCreditStatusCodeListAgencyIDContentTypeValues[enumValue] = AValue then
    begin
      Result := enumValue;
      break;
    end;
end;


{ Implementation for CrossIndustryInvoice_100pD22B }
procedure TXMLCrossIndustryInvoiceType.AfterConstruction;
begin
  RegisterChildNode('ExchangedDocumentContext', TXMLExchangedDocumentContextType);
  RegisterChildNode('ExchangedDocument', TXMLExchangedDocumentType);
  RegisterChildNode('SupplyChainTradeTransaction', TXMLSupplyChainTradeTransactionType);
  RegisterChildNode('ValuationBreakdownStatement', TXMLValuationBreakdownStatementType);
  inherited;
end;

procedure TXMLCrossIndustryInvoiceType.XSDValidate;
begin
  GetExchangedDocumentContext;
  GetExchangedDocument;
  GetSupplyChainTradeTransaction;
  SortChildNodes(Self, ['ExchangedDocumentContext', 'ExchangedDocument', 'SupplyChainTradeTransaction', 'ValuationBreakdownStatement']);
end;

procedure TXMLCrossIndustryInvoiceType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetExchangedDocumentContext;
  GetExchangedDocument;
  GetSupplyChainTradeTransaction;
  SortChildNodes(Self, ['ExchangedDocumentContext', 'ExchangedDocument', 'SupplyChainTradeTransaction', 'ValuationBreakdownStatement']);
end;

function TXMLCrossIndustryInvoiceType.GetExchangedDocumentContext: IXMLExchangedDocumentContextType;
begin
  Result := (ChildNodes['ExchangedDocumentContext'] as IXMLExchangedDocumentContextType);
end;

function TXMLCrossIndustryInvoiceType.GetExchangedDocument: IXMLExchangedDocumentType;
begin
  Result := (ChildNodes['ExchangedDocument'] as IXMLExchangedDocumentType);
end;

function TXMLCrossIndustryInvoiceType.GetSupplyChainTradeTransaction: IXMLSupplyChainTradeTransactionType;
begin
  Result := (ChildNodes['SupplyChainTradeTransaction'] as IXMLSupplyChainTradeTransactionType);
end;

function TXMLCrossIndustryInvoiceType.GetHasValuationBreakdownStatement: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValuationBreakdownStatement'));
end;


function TXMLCrossIndustryInvoiceType.GetValuationBreakdownStatement: IXMLValuationBreakdownStatementType;
begin
  Result := (ChildNodes['ValuationBreakdownStatement'] as IXMLValuationBreakdownStatementType);
end;


{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_QualifiedDataType_100 }
function TXMLAccountingAccountTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLAccountingAccountTypeCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLAccountingAccountTypeCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLAccountingAccountTypeCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLAccountingAmountTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLAccountingAmountTypeCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLAccountingAmountTypeCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLAccountingAmountTypeCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLAccountingDebitCreditStatusCodeType.GetHaslistID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listID')) and (Length(AttributeNodes['listID'].Text) > 0);
end;


function TXMLAccountingDebitCreditStatusCodeType.listIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistID then
    Result := GetlistID
  else
    Result := ADefaultValue;
end;


function TXMLAccountingDebitCreditStatusCodeType.GetlistID: WideString;
begin
  Result := AttributeNodes['listID'].Text;
end;

function TXMLAccountingDebitCreditStatusCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAccountingDebitCreditStatusCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAccountingDebitCreditStatusCodeType.GetlistAgencyID: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType;
begin
  Result := StringToAccountingDebitCreditStatusCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

function TXMLAccountingDebitCreditStatusCodeType.GetHaslistVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listVersionID')) and (Length(AttributeNodes['listVersionID'].Text) > 0);
end;


function TXMLAccountingDebitCreditStatusCodeType.listVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistVersionID then
    Result := GetlistVersionID
  else
    Result := ADefaultValue;
end;


function TXMLAccountingDebitCreditStatusCodeType.GetlistVersionID: WideString;
begin
  Result := AttributeNodes['listVersionID'].Text;
end;

function TXMLAccountingDebitCreditStatusCodeType.GetHaslistURI: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listURI')) and (Length(AttributeNodes['listURI'].Text) > 0);
end;


function TXMLAccountingDebitCreditStatusCodeType.listURIDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistURI then
    Result := GetlistURI
  else
    Result := ADefaultValue;
end;


function TXMLAccountingDebitCreditStatusCodeType.GetlistURI: WideString;
begin
  Result := AttributeNodes['listURI'].Text;
end;

procedure TXMLAccountingDebitCreditStatusCodeType.SetlistID(const Value: WideString);
begin
  SetAttribute('listID', GetValidXMLText(Value));
end;

procedure TXMLAccountingDebitCreditStatusCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAccountingDebitCreditStatusCodeType.SetlistAgencyID(const Value: TXMLAccountingDebitCreditStatusCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AccountingDebitCreditStatusCodeListAgencyIDContentTypeValues[Value]);
end;

procedure TXMLAccountingDebitCreditStatusCodeType.SetlistVersionID(const Value: WideString);
begin
  SetAttribute('listVersionID', GetValidXMLText(Value));
end;

procedure TXMLAccountingDebitCreditStatusCodeType.SetlistURI(const Value: WideString);
begin
  SetAttribute('listURI', GetValidXMLText(Value));
end;

function TXMLAccountingDocumentCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAccountingDocumentCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAccountingDocumentCodeType.GetlistAgencyID: TXMLAccountingDocumentCodeListAgencyIDContentType;
begin
  Result := StringToAccountingDocumentCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLAccountingDocumentCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAccountingDocumentCodeType.SetlistAgencyID(const Value: TXMLAccountingDocumentCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AccountingDocumentCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLAddressTypeCodeType.GetHaslistID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listID')) and (Length(AttributeNodes['listID'].Text) > 0);
end;


function TXMLAddressTypeCodeType.listIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistID then
    Result := GetlistID
  else
    Result := ADefaultValue;
end;


function TXMLAddressTypeCodeType.GetlistID: WideString;
begin
  Result := AttributeNodes['listID'].Text;
end;

function TXMLAddressTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAddressTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAddressTypeCodeType.GetlistAgencyID: TXMLAddressTypeCodeListAgencyIDContentType;
begin
  Result := StringToAddressTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

function TXMLAddressTypeCodeType.GetHaslistVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listVersionID')) and (Length(AttributeNodes['listVersionID'].Text) > 0);
end;


function TXMLAddressTypeCodeType.listVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistVersionID then
    Result := GetlistVersionID
  else
    Result := ADefaultValue;
end;


function TXMLAddressTypeCodeType.GetlistVersionID: WideString;
begin
  Result := AttributeNodes['listVersionID'].Text;
end;

function TXMLAddressTypeCodeType.GetHasname: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('name')) and (Length(AttributeNodes['name'].Text) > 0);
end;


function TXMLAddressTypeCodeType.nameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasname then
    Result := Getname
  else
    Result := ADefaultValue;
end;


function TXMLAddressTypeCodeType.Getname: WideString;
begin
  Result := AttributeNodes['name'].Text;
end;

procedure TXMLAddressTypeCodeType.SetlistID(const Value: WideString);
begin
  SetAttribute('listID', GetValidXMLText(Value));
end;

procedure TXMLAddressTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAddressTypeCodeType.SetlistAgencyID(const Value: TXMLAddressTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AddressTypeCodeListAgencyIDContentTypeValues[Value]);
end;

procedure TXMLAddressTypeCodeType.SetlistVersionID(const Value: WideString);
begin
  SetAttribute('listVersionID', GetValidXMLText(Value));
end;

procedure TXMLAddressTypeCodeType.Setname(const Value: WideString);
begin
  SetAttribute('name', GetValidXMLText(Value));
end;

function TXMLAdjustmentReasonCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAdjustmentReasonCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAdjustmentReasonCodeType.GetlistAgencyID: TXMLAdjustmentReasonCodeListAgencyIDContentType;
begin
  Result := StringToAdjustmentReasonCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLAdjustmentReasonCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAdjustmentReasonCodeType.SetlistAgencyID(const Value: TXMLAdjustmentReasonCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AdjustmentReasonCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLAllowanceChargeIdentificationCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLAllowanceChargeIdentificationCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLAllowanceChargeIdentificationCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLAllowanceChargeIdentificationCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLAllowanceChargeReasonCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAllowanceChargeReasonCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAllowanceChargeReasonCodeType.GetlistAgencyID: TXMLAllowanceChargeReasonCodeListAgencyIDContentType;
begin
  Result := StringToAllowanceChargeReasonCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLAllowanceChargeReasonCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAllowanceChargeReasonCodeType.SetlistAgencyID(const Value: TXMLAllowanceChargeReasonCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AllowanceChargeReasonCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLAutomaticDataCaptureMethodCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLAutomaticDataCaptureMethodCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLAutomaticDataCaptureMethodCodeType.GetlistAgencyID: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType;
begin
  Result := StringToAutomaticDataCaptureMethodCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLAutomaticDataCaptureMethodCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLAutomaticDataCaptureMethodCodeType.SetlistAgencyID(const Value: TXMLAutomaticDataCaptureMethodCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', AutomaticDataCaptureMethodCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLCargoCategoryCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLCargoCategoryCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLCargoCategoryCodeType.GetlistAgencyID: TXMLCargoCategoryCodeListAgencyIDContentType;
begin
  Result := StringToCargoCategoryCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLCargoCategoryCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLCargoCategoryCodeType.SetlistAgencyID(const Value: TXMLCargoCategoryCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', CargoCategoryCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLCargoCommodityCategoryCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLCargoCommodityCategoryCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLCargoCommodityCategoryCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLCargoCommodityCategoryCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLCargoOperationalCategoryCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLCargoOperationalCategoryCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLCargoOperationalCategoryCodeType.GetlistAgencyID: TXMLCargoOperationalCategoryCodeListAgencyIDContentType;
begin
  Result := StringToCargoOperationalCategoryCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLCargoOperationalCategoryCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLCargoOperationalCategoryCodeType.SetlistAgencyID(const Value: TXMLCargoOperationalCategoryCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', CargoOperationalCategoryCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLChargePayingPartyRoleCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLChargePayingPartyRoleCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLChargePayingPartyRoleCodeType.GetlistAgencyID: TXMLChargePayingPartyRoleCodeListAgencyIDContentType;
begin
  Result := StringToChargePayingPartyRoleCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLChargePayingPartyRoleCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLChargePayingPartyRoleCodeType.SetlistAgencyID(const Value: TXMLChargePayingPartyRoleCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', ChargePayingPartyRoleCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLCommunicationChannelCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLCommunicationChannelCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLCommunicationChannelCodeType.GetlistAgencyID: TXMLCommunicationChannelCodeListAgencyIDContentType;
begin
  Result := StringToCommunicationChannelCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLCommunicationChannelCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLCommunicationChannelCodeType.SetlistAgencyID(const Value: TXMLCommunicationChannelCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', CommunicationChannelCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLContactTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLContactTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLContactTypeCodeType.GetlistAgencyID: TXMLContactTypeCodeListAgencyIDContentType;
begin
  Result := StringToContactTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLContactTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLContactTypeCodeType.SetlistAgencyID(const Value: TXMLContactTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', ContactTypeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLCountryIDType.GetHasschemeAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeAgencyID'));
end;


function TXMLCountryIDType.GetschemeAgencyIDText: WideString;
begin
  Result := AttributeNodes['schemeAgencyID'].Text;
end;


function TXMLCountryIDType.GetschemeAgencyID: TXMLCountryIDSchemeAgencyIDContentType;
begin
  Result := StringToCountryIDSchemeAgencyIDContentType(GetschemeAgencyIDText);
end;

procedure TXMLCountryIDType.SetschemeAgencyIDText(const Value: WideString);
begin
  AttributeNodes['schemeAgencyID'].NodeValue := Value;
end;


procedure TXMLCountryIDType.SetschemeAgencyID(const Value: TXMLCountryIDSchemeAgencyIDContentType);
begin
  SetAttribute('schemeAgencyID', CountryIDSchemeAgencyIDContentTypeValues[Value]);
end;

function TXMLCurrencyCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLCurrencyCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLCurrencyCodeType.GetlistAgencyID: TXMLCurrencyCodeListAgencyIDContentType;
begin
  Result := StringToCurrencyCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLCurrencyCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLCurrencyCodeType.SetlistAgencyID(const Value: TXMLCurrencyCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', CurrencyCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDangerousGoodsPackagingLevelCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDangerousGoodsPackagingLevelCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDangerousGoodsPackagingLevelCodeType.GetlistAgencyID: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType;
begin
  Result := StringToDangerousGoodsPackagingLevelCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDangerousGoodsPackagingLevelCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDangerousGoodsPackagingLevelCodeType.SetlistAgencyID(const Value: TXMLDangerousGoodsPackagingLevelCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DangerousGoodsPackagingLevelCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDangerousGoodsRegulationCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDangerousGoodsRegulationCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDangerousGoodsRegulationCodeType.GetlistAgencyID: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType;
begin
  Result := StringToDangerousGoodsRegulationCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDangerousGoodsRegulationCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDangerousGoodsRegulationCodeType.SetlistAgencyID(const Value: TXMLDangerousGoodsRegulationCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DangerousGoodsRegulationCodeListAgencyIDContentTypeValues[Value]);
end;

procedure TXMLDateOnlyFormattedDateTimeType.AfterConstruction;
begin
  RegisterChildNode('DateTimeString', TXMLDateOnlyFormattedDateTimeTypeDateTimeString, 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100');
  inherited;
end;

procedure TXMLDateOnlyFormattedDateTimeType.XSDValidate;
begin
  GetDateTimeString;
end;

procedure TXMLDateOnlyFormattedDateTimeType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetDateTimeString;
end;

function TXMLDateOnlyFormattedDateTimeType.GetDateTimeString: IXMLDateOnlyFormattedDateTimeTypeDateTimeString;
begin
  Result := (ChildNodesNS['DateTimeString', 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100'] as IXMLDateOnlyFormattedDateTimeTypeDateTimeString);
end;

procedure TXMLDateOnlyFormattedDateTimeTypeDateTimeString.XSDValidate;
begin
end;

procedure TXMLDateOnlyFormattedDateTimeTypeDateTimeString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLDateOnlyFormattedDateTimeTypeDateTimeString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format'));
end;


function TXMLDateOnlyFormattedDateTimeTypeDateTimeString.GetformatText: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;


function TXMLDateOnlyFormattedDateTimeTypeDateTimeString.Getformat: TXMLDateOnlyFormatCodeContentType;
begin
  Result := StringToDateOnlyFormatCodeContentType(GetformatText);
end;

function TXMLDateOnlyFormattedDateTimeTypeDateTimeString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLDateOnlyFormattedDateTimeTypeDateTimeString.SetformatText(const Value: WideString);
begin
  AttributeNodes['format'].NodeValue := Value;
end;


procedure TXMLDateOnlyFormattedDateTimeTypeDateTimeString.Setformat(const Value: TXMLDateOnlyFormatCodeContentType);
begin
  SetAttribute('format', DateOnlyFormatCodeContentTypeValues[Value]);
end;

procedure TXMLDateOnlyFormattedDateTimeTypeDateTimeString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

function TXMLDeliveryTermsCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDeliveryTermsCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDeliveryTermsCodeType.GetlistAgencyID: TXMLDeliveryTermsCodeListAgencyIDContentType;
begin
  Result := StringToDeliveryTermsCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDeliveryTermsCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDeliveryTermsCodeType.SetlistAgencyID(const Value: TXMLDeliveryTermsCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DeliveryTermsCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDeliveryTermsFunctionCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDeliveryTermsFunctionCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDeliveryTermsFunctionCodeType.GetlistAgencyID: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType;
begin
  Result := StringToDeliveryTermsFunctionCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDeliveryTermsFunctionCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDeliveryTermsFunctionCodeType.SetlistAgencyID(const Value: TXMLDeliveryTermsFunctionCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DeliveryTermsFunctionCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDimensionTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDimensionTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDimensionTypeCodeType.GetlistAgencyID: TXMLDimensionTypeCodeListAgencyIDContentType;
begin
  Result := StringToDimensionTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDimensionTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDimensionTypeCodeType.SetlistAgencyID(const Value: TXMLDimensionTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DimensionTypeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDocumentCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDocumentCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDocumentCodeType.GetlistAgencyID: TXMLDocumentCodeListAgencyIDContentType;
begin
  Result := StringToDocumentCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDocumentCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDocumentCodeType.SetlistAgencyID(const Value: TXMLDocumentCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DocumentCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLDocumentStatusCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLDocumentStatusCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLDocumentStatusCodeType.GetlistAgencyID: TXMLDocumentStatusCodeListAgencyIDContentType;
begin
  Result := StringToDocumentStatusCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLDocumentStatusCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLDocumentStatusCodeType.SetlistAgencyID(const Value: TXMLDocumentStatusCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', DocumentStatusCodeListAgencyIDContentTypeValues[Value]);
end;

procedure TXMLFormattedDateTimeType.AfterConstruction;
begin
  RegisterChildNode('DateTimeString', TXMLFormattedDateTimeTypeDateTimeString, 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100');
  inherited;
end;

procedure TXMLFormattedDateTimeType.XSDValidate;
begin
  GetDateTimeString;
end;

procedure TXMLFormattedDateTimeType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetDateTimeString;
end;

function TXMLFormattedDateTimeType.GetDateTimeString: IXMLFormattedDateTimeTypeDateTimeString;
begin
  Result := (ChildNodesNS['DateTimeString', 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100'] as IXMLFormattedDateTimeTypeDateTimeString);
end;

procedure TXMLFormattedDateTimeTypeDateTimeString.XSDValidate;
begin
end;

procedure TXMLFormattedDateTimeTypeDateTimeString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLFormattedDateTimeTypeDateTimeString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format'));
end;


function TXMLFormattedDateTimeTypeDateTimeString.GetformatText: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;


function TXMLFormattedDateTimeTypeDateTimeString.Getformat: TXMLTimePointFormatCodeContentType;
begin
  Result := StringToTimePointFormatCodeContentType(GetformatText);
end;

function TXMLFormattedDateTimeTypeDateTimeString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLFormattedDateTimeTypeDateTimeString.SetformatText(const Value: WideString);
begin
  AttributeNodes['format'].NodeValue := Value;
end;


procedure TXMLFormattedDateTimeTypeDateTimeString.Setformat(const Value: TXMLTimePointFormatCodeContentType);
begin
  SetAttribute('format', TimePointFormatCodeContentTypeValues[Value]);
end;

procedure TXMLFormattedDateTimeTypeDateTimeString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

function TXMLFreightChargeTariffClassCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLFreightChargeTariffClassCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLFreightChargeTariffClassCodeType.GetlistAgencyID: TXMLFreightChargeTariffClassCodeListAgencyIDContentType;
begin
  Result := StringToFreightChargeTariffClassCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLFreightChargeTariffClassCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLFreightChargeTariffClassCodeType.SetlistAgencyID(const Value: TXMLFreightChargeTariffClassCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', FreightChargeTariffClassCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLFreightChargeTypeIDType.GetHasschemeAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeAgencyID'));
end;


function TXMLFreightChargeTypeIDType.GetschemeAgencyIDText: WideString;
begin
  Result := AttributeNodes['schemeAgencyID'].Text;
end;


function TXMLFreightChargeTypeIDType.GetschemeAgencyID: TXMLFreightChargeTypeIDSchemeAgencyIDContentType;
begin
  Result := StringToFreightChargeTypeIDSchemeAgencyIDContentType(GetschemeAgencyIDText);
end;

procedure TXMLFreightChargeTypeIDType.SetschemeAgencyIDText(const Value: WideString);
begin
  AttributeNodes['schemeAgencyID'].NodeValue := Value;
end;


procedure TXMLFreightChargeTypeIDType.SetschemeAgencyID(const Value: TXMLFreightChargeTypeIDSchemeAgencyIDContentType);
begin
  SetAttribute('schemeAgencyID', FreightChargeTypeIDSchemeAgencyIDContentTypeValues[Value]);
end;

function TXMLGoodsTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLGoodsTypeCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLGoodsTypeCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLGoodsTypeCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLGoodsTypeExtensionCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLGoodsTypeExtensionCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLGoodsTypeExtensionCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLGoodsTypeExtensionCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLLinearUnitMeasureType.GetHasunitCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCode'));
end;


function TXMLLinearUnitMeasureType.GetunitCodeText: WideString;
begin
  Result := AttributeNodes['unitCode'].Text;
end;


function TXMLLinearUnitMeasureType.GetunitCode: TXMLMeasurementUnitCommonCodeLinearContentType;
begin
  Result := StringToMeasurementUnitCommonCodeLinearContentType(GetunitCodeText);
end;

procedure TXMLLinearUnitMeasureType.SetunitCodeText(const Value: WideString);
begin
  AttributeNodes['unitCode'].NodeValue := Value;
end;


procedure TXMLLinearUnitMeasureType.SetunitCode(const Value: TXMLMeasurementUnitCommonCodeLinearContentType);
begin
  SetAttribute('unitCode', MeasurementUnitCommonCodeLinearContentTypeValues[Value]);
end;

function TXMLLineStatusCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLLineStatusCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLLineStatusCodeType.GetlistAgencyID: TXMLLineStatusCodeListAgencyIDContentType;
begin
  Result := StringToLineStatusCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLLineStatusCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLLineStatusCodeType.SetlistAgencyID(const Value: TXMLLineStatusCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', LineStatusCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLLocationFunctionCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLLocationFunctionCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLLocationFunctionCodeType.GetlistAgencyID: TXMLLocationFunctionCodeListAgencyIDContentType;
begin
  Result := StringToLocationFunctionCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLLocationFunctionCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLLocationFunctionCodeType.SetlistAgencyID(const Value: TXMLLocationFunctionCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', LocationFunctionCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLLogisticsChargeCalculationBasisCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLLogisticsChargeCalculationBasisCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLLogisticsChargeCalculationBasisCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLLogisticsChargeCalculationBasisCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLMessageFunctionCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLMessageFunctionCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLMessageFunctionCodeType.GetlistAgencyID: TXMLMessageFunctionCodeListAgencyIDContentType;
begin
  Result := StringToMessageFunctionCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLMessageFunctionCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLMessageFunctionCodeType.SetlistAgencyID(const Value: TXMLMessageFunctionCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', MessageFunctionCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPackageTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLPackageTypeCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLPackageTypeCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

procedure TXMLPackageTypeCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

function TXMLPackagingMarkingCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPackagingMarkingCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPackagingMarkingCodeType.GetlistAgencyID: TXMLPackagingMarkingCodeListAgencyIDContentType;
begin
  Result := StringToPackagingMarkingCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPackagingMarkingCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPackagingMarkingCodeType.SetlistAgencyID(const Value: TXMLPackagingMarkingCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PackagingMarkingCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPartyRoleCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPartyRoleCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPartyRoleCodeType.GetlistAgencyID: TXMLPartyRoleCodeListAgencyIDContentType;
begin
  Result := StringToPartyRoleCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPartyRoleCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPartyRoleCodeType.SetlistAgencyID(const Value: TXMLPartyRoleCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PartyRoleCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentGuaranteeMeansCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPaymentGuaranteeMeansCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPaymentGuaranteeMeansCodeType.GetlistAgencyID: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType;
begin
  Result := StringToPaymentGuaranteeMeansCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPaymentGuaranteeMeansCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentGuaranteeMeansCodeType.SetlistAgencyID(const Value: TXMLPaymentGuaranteeMeansCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PaymentGuaranteeMeansCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentMeansChannelCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPaymentMeansChannelCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPaymentMeansChannelCodeType.GetlistAgencyID: TXMLPaymentMeansChannelCodeListAgencyIDContentType;
begin
  Result := StringToPaymentMeansChannelCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPaymentMeansChannelCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentMeansChannelCodeType.SetlistAgencyID(const Value: TXMLPaymentMeansChannelCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PaymentMeansChannelCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentMeansCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPaymentMeansCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPaymentMeansCodeType.GetlistAgencyID: TXMLPaymentMeansCodeListAgencyIDContentType;
begin
  Result := StringToPaymentMeansCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPaymentMeansCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentMeansCodeType.SetlistAgencyID(const Value: TXMLPaymentMeansCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PaymentMeansCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentTermsEventTimeReferenceCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPaymentTermsEventTimeReferenceCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPaymentTermsEventTimeReferenceCodeType.GetlistAgencyID: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType;
begin
  Result := StringToPaymentTermsEventTimeReferenceCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPaymentTermsEventTimeReferenceCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentTermsEventTimeReferenceCodeType.SetlistAgencyID(const Value: TXMLPaymentTermsEventTimeReferenceCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PaymentTermsEventTimeReferenceCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentTermsIDType.GetHasschemeAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeAgencyID'));
end;


function TXMLPaymentTermsIDType.GetschemeAgencyIDText: WideString;
begin
  Result := AttributeNodes['schemeAgencyID'].Text;
end;


function TXMLPaymentTermsIDType.GetschemeAgencyID: TXMLPaymentTermsIDSchemeAgencyIDContentType;
begin
  Result := StringToPaymentTermsIDSchemeAgencyIDContentType(GetschemeAgencyIDText);
end;

procedure TXMLPaymentTermsIDType.SetschemeAgencyIDText(const Value: WideString);
begin
  AttributeNodes['schemeAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentTermsIDType.SetschemeAgencyID(const Value: TXMLPaymentTermsIDSchemeAgencyIDContentType);
begin
  SetAttribute('schemeAgencyID', PaymentTermsIDSchemeAgencyIDContentTypeValues[Value]);
end;

function TXMLPaymentTermsTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPaymentTermsTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPaymentTermsTypeCodeType.GetlistAgencyID: TXMLPaymentTermsTypeCodeListAgencyIDContentType;
begin
  Result := StringToPaymentTermsTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPaymentTermsTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPaymentTermsTypeCodeType.SetlistAgencyID(const Value: TXMLPaymentTermsTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PaymentTermsTypeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLPriceTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLPriceTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLPriceTypeCodeType.GetlistAgencyID: TXMLPriceTypeCodeListAgencyIDContentType;
begin
  Result := StringToPriceTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLPriceTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLPriceTypeCodeType.SetlistAgencyID(const Value: TXMLPriceTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', PriceTypeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLReferenceCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLReferenceCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLReferenceCodeType.GetlistAgencyID: TXMLReferenceCodeListAgencyIDContentType;
begin
  Result := StringToReferenceCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLReferenceCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLReferenceCodeType.SetlistAgencyID(const Value: TXMLReferenceCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', ReferenceCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLSealConditionCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLSealConditionCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLSealConditionCodeType.GetlistAgencyID: TXMLSealConditionCodeListAgencyIDContentType;
begin
  Result := StringToSealConditionCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLSealConditionCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLSealConditionCodeType.SetlistAgencyID(const Value: TXMLSealConditionCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', SealConditionCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLSealingPartyRoleCodeType.GetHaslistID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listID')) and (Length(AttributeNodes['listID'].Text) > 0);
end;


function TXMLSealingPartyRoleCodeType.listIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistID then
    Result := GetlistID
  else
    Result := ADefaultValue;
end;


function TXMLSealingPartyRoleCodeType.GetlistID: WideString;
begin
  Result := AttributeNodes['listID'].Text;
end;

function TXMLSealingPartyRoleCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLSealingPartyRoleCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLSealingPartyRoleCodeType.GetlistAgencyID: TXMLSealingPartyRoleCodeListAgencyIDContentType;
begin
  Result := StringToSealingPartyRoleCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLSealingPartyRoleCodeType.SetlistID(const Value: WideString);
begin
  SetAttribute('listID', GetValidXMLText(Value));
end;

procedure TXMLSealingPartyRoleCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLSealingPartyRoleCodeType.SetlistAgencyID(const Value: TXMLSealingPartyRoleCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', SealingPartyRoleCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLStatusCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLStatusCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLStatusCodeType.GetlistAgencyID: TXMLStatusCodeListAgencyIDContentType;
begin
  Result := StringToStatusCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLStatusCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLStatusCodeType.SetlistAgencyID(const Value: TXMLStatusCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', StatusCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTaxCategoryCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTaxCategoryCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTaxCategoryCodeType.GetlistAgencyID: TXMLTaxCategoryCodeListAgencyIDContentType;
begin
  Result := StringToTaxCategoryCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTaxCategoryCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTaxCategoryCodeType.SetlistAgencyID(const Value: TXMLTaxCategoryCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TaxCategoryCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTaxTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTaxTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTaxTypeCodeType.GetlistAgencyID: TXMLTaxTypeCodeListAgencyIDContentType;
begin
  Result := StringToTaxTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTaxTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTaxTypeCodeType.SetlistAgencyID(const Value: TXMLTaxTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TaxTypeCodeListAgencyIDContentTypeValues[Value]);
end;

procedure TXMLTimeOnlyFormattedDateTimeType.AfterConstruction;
begin
  RegisterChildNode('DateTimeString', TXMLTimeOnlyFormattedDateTimeTypeDateTimeString, 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100');
  inherited;
end;

procedure TXMLTimeOnlyFormattedDateTimeType.XSDValidate;
begin
  GetDateTimeString;
end;

procedure TXMLTimeOnlyFormattedDateTimeType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetDateTimeString;
end;

function TXMLTimeOnlyFormattedDateTimeType.GetDateTimeString: IXMLTimeOnlyFormattedDateTimeTypeDateTimeString;
begin
  Result := (ChildNodesNS['DateTimeString', 'urn:un:unece:uncefact:data:standard:QualifiedDataType:100'] as IXMLTimeOnlyFormattedDateTimeTypeDateTimeString);
end;

procedure TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.XSDValidate;
begin
end;

procedure TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format'));
end;


function TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.GetformatText: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;


function TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.Getformat: TXMLTimeOnlyFormatCodeContentType;
begin
  Result := StringToTimeOnlyFormatCodeContentType(GetformatText);
end;

function TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.SetformatText(const Value: WideString);
begin
  AttributeNodes['format'].NodeValue := Value;
end;


procedure TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.Setformat(const Value: TXMLTimeOnlyFormatCodeContentType);
begin
  SetAttribute('format', TimeOnlyFormatCodeContentTypeValues[Value]);
end;

procedure TXMLTimeOnlyFormattedDateTimeTypeDateTimeString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

function TXMLTimeReferenceCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTimeReferenceCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTimeReferenceCodeType.GetlistAgencyID: TXMLTimeReferenceCodeListAgencyIDContentType;
begin
  Result := StringToTimeReferenceCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTimeReferenceCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTimeReferenceCodeType.SetlistAgencyID(const Value: TXMLTimeReferenceCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TimeReferenceCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportEquipmentCategoryCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportEquipmentCategoryCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportEquipmentCategoryCodeType.GetlistAgencyID: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType;
begin
  Result := StringToTransportEquipmentCategoryCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportEquipmentCategoryCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportEquipmentCategoryCodeType.SetlistAgencyID(const Value: TXMLTransportEquipmentCategoryCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportEquipmentCategoryCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportEquipmentFullnessCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportEquipmentFullnessCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportEquipmentFullnessCodeType.GetlistAgencyID: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType;
begin
  Result := StringToTransportEquipmentFullnessCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportEquipmentFullnessCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportEquipmentFullnessCodeType.SetlistAgencyID(const Value: TXMLTransportEquipmentFullnessCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportEquipmentFullnessCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportMeansTypeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportMeansTypeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportMeansTypeCodeType.GetlistAgencyID: TXMLTransportMeansTypeCodeListAgencyIDContentType;
begin
  Result := StringToTransportMeansTypeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportMeansTypeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportMeansTypeCodeType.SetlistAgencyID(const Value: TXMLTransportMeansTypeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportMeansTypeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportModeCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportModeCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportModeCodeType.GetlistAgencyID: TXMLTransportModeCodeListAgencyIDContentType;
begin
  Result := StringToTransportModeCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportModeCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportModeCodeType.SetlistAgencyID(const Value: TXMLTransportModeCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportModeCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportMovementStageCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportMovementStageCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportMovementStageCodeType.GetlistAgencyID: TXMLTransportMovementStageCodeListAgencyIDContentType;
begin
  Result := StringToTransportMovementStageCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportMovementStageCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportMovementStageCodeType.SetlistAgencyID(const Value: TXMLTransportMovementStageCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportMovementStageCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLTransportServicePaymentArrangementCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID'));
end;


function TXMLTransportServicePaymentArrangementCodeType.GetlistAgencyIDText: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;


function TXMLTransportServicePaymentArrangementCodeType.GetlistAgencyID: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType;
begin
  Result := StringToTransportServicePaymentArrangementCodeListAgencyIDContentType(GetlistAgencyIDText);
end;

procedure TXMLTransportServicePaymentArrangementCodeType.SetlistAgencyIDText(const Value: WideString);
begin
  AttributeNodes['listAgencyID'].NodeValue := Value;
end;


procedure TXMLTransportServicePaymentArrangementCodeType.SetlistAgencyID(const Value: TXMLTransportServicePaymentArrangementCodeListAgencyIDContentType);
begin
  SetAttribute('listAgencyID', TransportServicePaymentArrangementCodeListAgencyIDContentTypeValues[Value]);
end;

function TXMLVolumeUnitMeasureType.GetHasunitCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCode'));
end;


function TXMLVolumeUnitMeasureType.GetunitCodeText: WideString;
begin
  Result := AttributeNodes['unitCode'].Text;
end;


function TXMLVolumeUnitMeasureType.GetunitCode: TXMLMeasurementUnitCommonCodeVolumeContentType;
begin
  Result := StringToMeasurementUnitCommonCodeVolumeContentType(GetunitCodeText);
end;

procedure TXMLVolumeUnitMeasureType.SetunitCodeText(const Value: WideString);
begin
  AttributeNodes['unitCode'].NodeValue := Value;
end;


procedure TXMLVolumeUnitMeasureType.SetunitCode(const Value: TXMLMeasurementUnitCommonCodeVolumeContentType);
begin
  SetAttribute('unitCode', MeasurementUnitCommonCodeVolumeContentTypeValues[Value]);
end;

function TXMLWeightUnitMeasureType.GetHasunitCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCode'));
end;


function TXMLWeightUnitMeasureType.GetunitCodeText: WideString;
begin
  Result := AttributeNodes['unitCode'].Text;
end;


function TXMLWeightUnitMeasureType.GetunitCode: TXMLMeasurementUnitCommonCodeWeightContentType;
begin
  Result := StringToMeasurementUnitCommonCodeWeightContentType(GetunitCodeText);
end;

procedure TXMLWeightUnitMeasureType.SetunitCodeText(const Value: WideString);
begin
  AttributeNodes['unitCode'].NodeValue := Value;
end;


procedure TXMLWeightUnitMeasureType.SetunitCode(const Value: TXMLMeasurementUnitCommonCodeWeightContentType);
begin
  SetAttribute('unitCode', MeasurementUnitCommonCodeWeightContentTypeValues[Value]);
end;


{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAccountType_D11A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_EDIFICAS-EU_AccountingAmountType_D11A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_ISO_ISO3AlphaCurrencyCode_2012-08-31 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ActionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AddressType_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AdjustmentReasonDescriptionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeIdentificationCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AllowanceChargeReasonCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_AutomaticDataCaptureMethodCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoOperationalCategoryCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CargoTypeCode_1996Rev2Final }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommodityIdentificationCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_CommunicationMeansTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ContactFunctionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsPackingCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DangerousGoodsRegulationCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DateOnlyFormatCode_D21B }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsCode_2020 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DeliveryTermsFunctionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DimensionTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentNameCode_Accounting_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DocumentStatusCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyTaxFeeTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_DutyorTaxorFeeCategoryCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_EventTimeReferenceCodePaymentTermsEvent_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeQuantityUnitBasisCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_FreightChargeTariffCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_GoodsTypeExtensionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_LocationFunctionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeLinear_4 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeVolume_4 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MeasurementUnitCommonCodeWeight_4 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_MessageFunctionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackageTypeCode_2006 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PackagingMarkingCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PartyRoleCode_ChargePaying_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentGuaranteeMeansCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansChannelCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentMeansCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PaymentTermsTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_PriceTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_ReferenceTypeCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealConditionCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_SealingPartyRoleCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_StatusDescriptionCode_AccountingDebitCredit_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimeOnlyFormatCode_D21B }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TimePointFormatCode_D21B }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentCategoryCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportEquipmentFullnessCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMeansTypeCode_2007 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportModeCode_2 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportMovementStageCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_codelist_standard_UNECE_TransportPaymentArrangementCode_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_UnqualifiedDataType_100 }
function TXMLAmountType.GetHascurrencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('currencyID')) and (Length(AttributeNodes['currencyID'].Text) > 0);
end;


function TXMLAmountType.currencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHascurrencyID then
    Result := GetcurrencyID
  else
    Result := ADefaultValue;
end;


function TXMLAmountType.GetcurrencyID: WideString;
begin
  Result := AttributeNodes['currencyID'].Text;
end;

function TXMLAmountType.GetHascurrencyCodeListVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('currencyCodeListVersionID')) and (Length(AttributeNodes['currencyCodeListVersionID'].Text) > 0);
end;


function TXMLAmountType.currencyCodeListVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHascurrencyCodeListVersionID then
    Result := GetcurrencyCodeListVersionID
  else
    Result := ADefaultValue;
end;


function TXMLAmountType.GetcurrencyCodeListVersionID: WideString;
begin
  Result := AttributeNodes['currencyCodeListVersionID'].Text;
end;

procedure TXMLAmountType.SetcurrencyID(const Value: WideString);
begin
  SetAttribute('currencyID', GetValidXMLText(Value));
end;

procedure TXMLAmountType.SetcurrencyCodeListVersionID(const Value: WideString);
begin
  SetAttribute('currencyCodeListVersionID', GetValidXMLText(Value));
end;

function TXMLBinaryObjectType.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLBinaryObjectType.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

function TXMLBinaryObjectType.GetHasmimeCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('mimeCode')) and (Length(AttributeNodes['mimeCode'].Text) > 0);
end;


function TXMLBinaryObjectType.mimeCodeDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasmimeCode then
    Result := GetmimeCode
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.GetmimeCode: WideString;
begin
  Result := AttributeNodes['mimeCode'].Text;
end;

function TXMLBinaryObjectType.GetHasencodingCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('encodingCode')) and (Length(AttributeNodes['encodingCode'].Text) > 0);
end;


function TXMLBinaryObjectType.encodingCodeDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasencodingCode then
    Result := GetencodingCode
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.GetencodingCode: WideString;
begin
  Result := AttributeNodes['encodingCode'].Text;
end;

function TXMLBinaryObjectType.GetHascharacterSetCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('characterSetCode')) and (Length(AttributeNodes['characterSetCode'].Text) > 0);
end;


function TXMLBinaryObjectType.characterSetCodeDef(const ADefaultValue: WideString): WideString;
begin
  if GetHascharacterSetCode then
    Result := GetcharacterSetCode
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.GetcharacterSetCode: WideString;
begin
  Result := AttributeNodes['characterSetCode'].Text;
end;

function TXMLBinaryObjectType.GetHasuri: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('uri')) and (Length(AttributeNodes['uri'].Text) > 0);
end;


function TXMLBinaryObjectType.uriDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasuri then
    Result := Geturi
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.Geturi: WideString;
begin
  Result := AttributeNodes['uri'].Text;
end;

function TXMLBinaryObjectType.GetHasfilename: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('filename')) and (Length(AttributeNodes['filename'].Text) > 0);
end;


function TXMLBinaryObjectType.filenameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasfilename then
    Result := Getfilename
  else
    Result := ADefaultValue;
end;


function TXMLBinaryObjectType.Getfilename: WideString;
begin
  Result := AttributeNodes['filename'].Text;
end;

procedure TXMLBinaryObjectType.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

procedure TXMLBinaryObjectType.SetmimeCode(const Value: WideString);
begin
  SetAttribute('mimeCode', GetValidXMLText(Value));
end;

procedure TXMLBinaryObjectType.SetencodingCode(const Value: WideString);
begin
  SetAttribute('encodingCode', GetValidXMLText(Value));
end;

procedure TXMLBinaryObjectType.SetcharacterSetCode(const Value: WideString);
begin
  SetAttribute('characterSetCode', GetValidXMLText(Value));
end;

procedure TXMLBinaryObjectType.Seturi(const Value: WideString);
begin
  SetAttribute('uri', GetValidXMLText(Value));
end;

procedure TXMLBinaryObjectType.Setfilename(const Value: WideString);
begin
  SetAttribute('filename', GetValidXMLText(Value));
end;

function TXMLCodeType.GetHaslistID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listID')) and (Length(AttributeNodes['listID'].Text) > 0);
end;


function TXMLCodeType.listIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistID then
    Result := GetlistID
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistID: WideString;
begin
  Result := AttributeNodes['listID'].Text;
end;

function TXMLCodeType.GetHaslistAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyID')) and (Length(AttributeNodes['listAgencyID'].Text) > 0);
end;


function TXMLCodeType.listAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyID then
    Result := GetlistAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistAgencyID: WideString;
begin
  Result := AttributeNodes['listAgencyID'].Text;
end;

function TXMLCodeType.GetHaslistAgencyName: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listAgencyName')) and (Length(AttributeNodes['listAgencyName'].Text) > 0);
end;


function TXMLCodeType.listAgencyNameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistAgencyName then
    Result := GetlistAgencyName
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistAgencyName: WideString;
begin
  Result := AttributeNodes['listAgencyName'].Text;
end;

function TXMLCodeType.GetHaslistName: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listName')) and (Length(AttributeNodes['listName'].Text) > 0);
end;


function TXMLCodeType.listNameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistName then
    Result := GetlistName
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistName: WideString;
begin
  Result := AttributeNodes['listName'].Text;
end;

function TXMLCodeType.GetHaslistVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listVersionID')) and (Length(AttributeNodes['listVersionID'].Text) > 0);
end;


function TXMLCodeType.listVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistVersionID then
    Result := GetlistVersionID
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistVersionID: WideString;
begin
  Result := AttributeNodes['listVersionID'].Text;
end;

function TXMLCodeType.GetHasname: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('name')) and (Length(AttributeNodes['name'].Text) > 0);
end;


function TXMLCodeType.nameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasname then
    Result := Getname
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.Getname: WideString;
begin
  Result := AttributeNodes['name'].Text;
end;

function TXMLCodeType.GetHaslanguageID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('languageID')) and (Length(AttributeNodes['languageID'].Text) > 0);
end;


function TXMLCodeType.languageIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslanguageID then
    Result := GetlanguageID
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlanguageID: WideString;
begin
  Result := AttributeNodes['languageID'].Text;
end;

function TXMLCodeType.GetHaslistURI: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listURI')) and (Length(AttributeNodes['listURI'].Text) > 0);
end;


function TXMLCodeType.listURIDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistURI then
    Result := GetlistURI
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistURI: WideString;
begin
  Result := AttributeNodes['listURI'].Text;
end;

function TXMLCodeType.GetHaslistSchemeURI: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('listSchemeURI')) and (Length(AttributeNodes['listSchemeURI'].Text) > 0);
end;


function TXMLCodeType.listSchemeURIDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslistSchemeURI then
    Result := GetlistSchemeURI
  else
    Result := ADefaultValue;
end;


function TXMLCodeType.GetlistSchemeURI: WideString;
begin
  Result := AttributeNodes['listSchemeURI'].Text;
end;

procedure TXMLCodeType.SetlistID(const Value: WideString);
begin
  SetAttribute('listID', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistAgencyID(const Value: WideString);
begin
  SetAttribute('listAgencyID', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistAgencyName(const Value: WideString);
begin
  SetAttribute('listAgencyName', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistName(const Value: WideString);
begin
  SetAttribute('listName', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistVersionID(const Value: WideString);
begin
  SetAttribute('listVersionID', GetValidXMLText(Value));
end;

procedure TXMLCodeType.Setname(const Value: WideString);
begin
  SetAttribute('name', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlanguageID(const Value: WideString);
begin
  SetAttribute('languageID', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistURI(const Value: WideString);
begin
  SetAttribute('listURI', GetValidXMLText(Value));
end;

procedure TXMLCodeType.SetlistSchemeURI(const Value: WideString);
begin
  SetAttribute('listSchemeURI', GetValidXMLText(Value));
end;

procedure TXMLDateTimeType.AfterConstruction;
begin
  RegisterChildNode('DateTimeString', TXMLDateTimeTypeDateTimeString, 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100');
  inherited;
end;

function TXMLDateTimeType.GetHasDateTimeString: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DateTimeString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'));
end;


function TXMLDateTimeType.GetDateTimeString: IXMLDateTimeTypeDateTimeString;
begin
  Result := (ChildNodesNS['DateTimeString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'] as IXMLDateTimeTypeDateTimeString);
end;

function TXMLDateTimeType.GetHasDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DateTime', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100')) and (Length(ChildNodesNS['DateTime', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].Text) > 0);
end;


function TXMLDateTimeType.DateTimeDef(const ADefaultValue: TDateTime): TDateTime;
begin
  if GetHasDateTime then
    Result := GetDateTime
  else
    Result := ADefaultValue;
end;


function TXMLDateTimeType.GetDateTime: TDateTime;
begin
  Result := XMLToDateTime(ChildNodesNS['DateTime', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue, xdtDateTime);
end;

procedure TXMLDateTimeType.SetDateTime(const Value: TDateTime);
begin
  ChildNodesNS['DateTime', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue := DateTimeToXML(Value, xdtDateTime);
end;

procedure TXMLDateTimeTypeDateTimeString.XSDValidate;
begin
end;

procedure TXMLDateTimeTypeDateTimeString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLDateTimeTypeDateTimeString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLDateTimeTypeDateTimeString.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLDateTimeTypeDateTimeString.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

function TXMLDateTimeTypeDateTimeString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLDateTimeTypeDateTimeString.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

procedure TXMLDateTimeTypeDateTimeString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

procedure TXMLDateType.AfterConstruction;
begin
  RegisterChildNode('DateString', TXMLDateString, 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100');
  inherited;
end;

function TXMLDateType.GetHasDateString: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DateString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'));
end;


function TXMLDateType.GetDateString: IXMLDateString;
begin
  Result := (ChildNodesNS['DateString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'] as IXMLDateString);
end;

function TXMLDateType.GetHasDate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Date', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100')) and (Length(ChildNodesNS['Date', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].Text) > 0);
end;


function TXMLDateType.DateDef(const ADefaultValue: TDateTime): TDateTime;
begin
  if GetHasDate then
    Result := GetDate
  else
    Result := ADefaultValue;
end;


function TXMLDateType.GetDate: TDateTime;
begin
  Result := XMLToDateTime(ChildNodesNS['Date', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue, xdtDate);
end;

procedure TXMLDateType.SetDate(const Value: TDateTime);
begin
  ChildNodesNS['Date', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue := DateTimeToXML(Value, xdtDate);
end;

procedure TXMLDateString.XSDValidate;
begin
end;

procedure TXMLDateString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLDateString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLDateString.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLDateString.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

function TXMLDateString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLDateString.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

procedure TXMLDateString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

function TXMLIDType.GetHasschemeID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeID')) and (Length(AttributeNodes['schemeID'].Text) > 0);
end;


function TXMLIDType.schemeIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeID then
    Result := GetschemeID
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeID: WideString;
begin
  Result := AttributeNodes['schemeID'].Text;
end;

function TXMLIDType.GetHasschemeName: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeName')) and (Length(AttributeNodes['schemeName'].Text) > 0);
end;


function TXMLIDType.schemeNameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeName then
    Result := GetschemeName
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeName: WideString;
begin
  Result := AttributeNodes['schemeName'].Text;
end;

function TXMLIDType.GetHasschemeAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeAgencyID')) and (Length(AttributeNodes['schemeAgencyID'].Text) > 0);
end;


function TXMLIDType.schemeAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeAgencyID then
    Result := GetschemeAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeAgencyID: WideString;
begin
  Result := AttributeNodes['schemeAgencyID'].Text;
end;

function TXMLIDType.GetHasschemeAgencyName: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeAgencyName')) and (Length(AttributeNodes['schemeAgencyName'].Text) > 0);
end;


function TXMLIDType.schemeAgencyNameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeAgencyName then
    Result := GetschemeAgencyName
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeAgencyName: WideString;
begin
  Result := AttributeNodes['schemeAgencyName'].Text;
end;

function TXMLIDType.GetHasschemeVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeVersionID')) and (Length(AttributeNodes['schemeVersionID'].Text) > 0);
end;


function TXMLIDType.schemeVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeVersionID then
    Result := GetschemeVersionID
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeVersionID: WideString;
begin
  Result := AttributeNodes['schemeVersionID'].Text;
end;

function TXMLIDType.GetHasschemeDataURI: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeDataURI')) and (Length(AttributeNodes['schemeDataURI'].Text) > 0);
end;


function TXMLIDType.schemeDataURIDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeDataURI then
    Result := GetschemeDataURI
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeDataURI: WideString;
begin
  Result := AttributeNodes['schemeDataURI'].Text;
end;

function TXMLIDType.GetHasschemeURI: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('schemeURI')) and (Length(AttributeNodes['schemeURI'].Text) > 0);
end;


function TXMLIDType.schemeURIDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasschemeURI then
    Result := GetschemeURI
  else
    Result := ADefaultValue;
end;


function TXMLIDType.GetschemeURI: WideString;
begin
  Result := AttributeNodes['schemeURI'].Text;
end;

procedure TXMLIDType.SetschemeID(const Value: WideString);
begin
  SetAttribute('schemeID', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeName(const Value: WideString);
begin
  SetAttribute('schemeName', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeAgencyID(const Value: WideString);
begin
  SetAttribute('schemeAgencyID', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeAgencyName(const Value: WideString);
begin
  SetAttribute('schemeAgencyName', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeVersionID(const Value: WideString);
begin
  SetAttribute('schemeVersionID', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeDataURI(const Value: WideString);
begin
  SetAttribute('schemeDataURI', GetValidXMLText(Value));
end;

procedure TXMLIDType.SetschemeURI(const Value: WideString);
begin
  SetAttribute('schemeURI', GetValidXMLText(Value));
end;

procedure TXMLIndicatorType.AfterConstruction;
begin
  RegisterChildNode('IndicatorString', TXMLIndicatorString, 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100');
  inherited;
end;

function TXMLIndicatorType.GetHasIndicatorString: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IndicatorString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'));
end;


function TXMLIndicatorType.GetIndicatorString: IXMLIndicatorString;
begin
  Result := (ChildNodesNS['IndicatorString', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'] as IXMLIndicatorString);
end;

function TXMLIndicatorType.GetHasIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Indicator', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100')) and (Length(ChildNodesNS['Indicator', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].Text) > 0);
end;


function TXMLIndicatorType.IndicatorDef(const ADefaultValue: Boolean): Boolean;
begin
  if GetHasIndicator then
    Result := GetIndicator
  else
    Result := ADefaultValue;
end;


function TXMLIndicatorType.GetIndicator: Boolean;
begin
  Result := ChildNodesNS['Indicator', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue;
end;

procedure TXMLIndicatorType.SetIndicator(const Value: Boolean);
begin
  ChildNodesNS['Indicator', 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100'].NodeValue := BoolToXML(Value);
end;

procedure TXMLIndicatorString.XSDValidate;
begin
end;

procedure TXMLIndicatorString.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
end;

function TXMLIndicatorString.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLIndicatorString.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLIndicatorString.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

function TXMLIndicatorString.GetValue: WideString;
begin
  Result := VarToStr(GetNodeValue);
end;

procedure TXMLIndicatorString.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

procedure TXMLIndicatorString.SetValue(const Value: WideString);
begin
  SetNodeValue(GetValidXMLText(Value));
end;

function TXMLMeasureType.GetHasunitCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCode')) and (Length(AttributeNodes['unitCode'].Text) > 0);
end;


function TXMLMeasureType.unitCodeDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCode then
    Result := GetunitCode
  else
    Result := ADefaultValue;
end;


function TXMLMeasureType.GetunitCode: WideString;
begin
  Result := AttributeNodes['unitCode'].Text;
end;

function TXMLMeasureType.GetHasunitCodeListVersionID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCodeListVersionID')) and (Length(AttributeNodes['unitCodeListVersionID'].Text) > 0);
end;


function TXMLMeasureType.unitCodeListVersionIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCodeListVersionID then
    Result := GetunitCodeListVersionID
  else
    Result := ADefaultValue;
end;


function TXMLMeasureType.GetunitCodeListVersionID: WideString;
begin
  Result := AttributeNodes['unitCodeListVersionID'].Text;
end;

procedure TXMLMeasureType.SetunitCode(const Value: WideString);
begin
  SetAttribute('unitCode', GetValidXMLText(Value));
end;

procedure TXMLMeasureType.SetunitCodeListVersionID(const Value: WideString);
begin
  SetAttribute('unitCodeListVersionID', GetValidXMLText(Value));
end;

function TXMLNumericType.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLNumericType.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLNumericType.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

procedure TXMLNumericType.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

function TXMLPercentType.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLPercentType.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLPercentType.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

procedure TXMLPercentType.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

function TXMLQuantityType.GetHasunitCode: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCode')) and (Length(AttributeNodes['unitCode'].Text) > 0);
end;


function TXMLQuantityType.unitCodeDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCode then
    Result := GetunitCode
  else
    Result := ADefaultValue;
end;


function TXMLQuantityType.GetunitCode: WideString;
begin
  Result := AttributeNodes['unitCode'].Text;
end;

function TXMLQuantityType.GetHasunitCodeListID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCodeListID')) and (Length(AttributeNodes['unitCodeListID'].Text) > 0);
end;


function TXMLQuantityType.unitCodeListIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCodeListID then
    Result := GetunitCodeListID
  else
    Result := ADefaultValue;
end;


function TXMLQuantityType.GetunitCodeListID: WideString;
begin
  Result := AttributeNodes['unitCodeListID'].Text;
end;

function TXMLQuantityType.GetHasunitCodeListAgencyID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCodeListAgencyID')) and (Length(AttributeNodes['unitCodeListAgencyID'].Text) > 0);
end;


function TXMLQuantityType.unitCodeListAgencyIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCodeListAgencyID then
    Result := GetunitCodeListAgencyID
  else
    Result := ADefaultValue;
end;


function TXMLQuantityType.GetunitCodeListAgencyID: WideString;
begin
  Result := AttributeNodes['unitCodeListAgencyID'].Text;
end;

function TXMLQuantityType.GetHasunitCodeListAgencyName: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('unitCodeListAgencyName')) and (Length(AttributeNodes['unitCodeListAgencyName'].Text) > 0);
end;


function TXMLQuantityType.unitCodeListAgencyNameDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasunitCodeListAgencyName then
    Result := GetunitCodeListAgencyName
  else
    Result := ADefaultValue;
end;


function TXMLQuantityType.GetunitCodeListAgencyName: WideString;
begin
  Result := AttributeNodes['unitCodeListAgencyName'].Text;
end;

procedure TXMLQuantityType.SetunitCode(const Value: WideString);
begin
  SetAttribute('unitCode', GetValidXMLText(Value));
end;

procedure TXMLQuantityType.SetunitCodeListID(const Value: WideString);
begin
  SetAttribute('unitCodeListID', GetValidXMLText(Value));
end;

procedure TXMLQuantityType.SetunitCodeListAgencyID(const Value: WideString);
begin
  SetAttribute('unitCodeListAgencyID', GetValidXMLText(Value));
end;

procedure TXMLQuantityType.SetunitCodeListAgencyName(const Value: WideString);
begin
  SetAttribute('unitCodeListAgencyName', GetValidXMLText(Value));
end;

function TXMLRateType.GetHasformat: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('format')) and (Length(AttributeNodes['format'].Text) > 0);
end;


function TXMLRateType.formatDef(const ADefaultValue: WideString): WideString;
begin
  if GetHasformat then
    Result := Getformat
  else
    Result := ADefaultValue;
end;


function TXMLRateType.Getformat: WideString;
begin
  Result := AttributeNodes['format'].Text;
end;

procedure TXMLRateType.Setformat(const Value: WideString);
begin
  SetAttribute('format', GetValidXMLText(Value));
end;

function TXMLTextType.GetHaslanguageID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('languageID')) and (Length(AttributeNodes['languageID'].Text) > 0);
end;


function TXMLTextType.languageIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslanguageID then
    Result := GetlanguageID
  else
    Result := ADefaultValue;
end;


function TXMLTextType.GetlanguageID: WideString;
begin
  Result := AttributeNodes['languageID'].Text;
end;

function TXMLTextType.GetHaslanguageLocaleID: Boolean;
begin
  Result := Assigned(AttributeNodes.FindNode('languageLocaleID')) and (Length(AttributeNodes['languageLocaleID'].Text) > 0);
end;


function TXMLTextType.languageLocaleIDDef(const ADefaultValue: WideString): WideString;
begin
  if GetHaslanguageLocaleID then
    Result := GetlanguageLocaleID
  else
    Result := ADefaultValue;
end;


function TXMLTextType.GetlanguageLocaleID: WideString;
begin
  Result := AttributeNodes['languageLocaleID'].Text;
end;

procedure TXMLTextType.SetlanguageID(const Value: WideString);
begin
  SetAttribute('languageID', GetValidXMLText(Value));
end;

procedure TXMLTextType.SetlanguageLocaleID(const Value: WideString);
begin
  SetAttribute('languageLocaleID', GetValidXMLText(Value));
end;


{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_ISO_ISOTwo-letterCountryCode_SecondEdition2006 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_FreightCostCode_4 }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_identifierlist_standard_UNECE_PaymentTermsDescriptionIdentifier_D22A }

{ Implementation for CrossIndustryInvoice_100pD22B_urn_un_unece_uncefact_data_standard_ReusableAggregateBusinessInformationEntity_100 }
procedure TXMLAdvancePaymentType.AfterConstruction;
begin
  RegisterChildNode('PaidAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FormattedReceivedDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedTradeTax := CreateCollection(TXMLIncludedTradeTaxList, IXMLTradeTaxType, 'IncludedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedTradeTaxList;
  RegisterChildNode('IncludedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceSpecifiedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInvoiceSpecifiedReferencedDocument := CreateCollection(TXMLInvoiceSpecifiedReferencedDocumentList, IXMLReferencedDocumentType, 'InvoiceSpecifiedReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInvoiceSpecifiedReferencedDocumentList;
  RegisterChildNode('InvoiceSpecifiedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLAdvancePaymentType.XSDValidate;
begin
  GetPaidAmount;
  SortChildNodes(Self, ['PaidAmount', 'FormattedReceivedDateTime', 'IncludedTradeTax', 'InvoiceSpecifiedReferencedDocument']);
end;

procedure TXMLAdvancePaymentType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetPaidAmount;
  SortChildNodes(Self, ['PaidAmount', 'FormattedReceivedDateTime', 'IncludedTradeTax', 'InvoiceSpecifiedReferencedDocument']);
end;

function TXMLAdvancePaymentType.GetPaidAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['PaidAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLAdvancePaymentType.GetHasFormattedReceivedDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FormattedReceivedDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAdvancePaymentType.GetFormattedReceivedDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['FormattedReceivedDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLAdvancePaymentType.GetIncludedTradeTax: IXMLIncludedTradeTaxList;
begin
  Result := FIncludedTradeTax;
end;

function TXMLAdvancePaymentType.GetInvoiceSpecifiedReferencedDocument: IXMLInvoiceSpecifiedReferencedDocumentList;
begin
  Result := FInvoiceSpecifiedReferencedDocument;
end;

function TXMLInvoiceSpecifiedReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLInvoiceSpecifiedReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('InvoiceSpecifiedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InvoiceSpecifiedReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInvoiceSpecifiedReferencedDocumentList.GetEnumerator: IXMLInvoiceSpecifiedReferencedDocumentListEnumerator;
begin
  Result := TXMLInvoiceSpecifiedReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLInvoiceSpecifiedReferencedDocumentList.Get_InvoiceSpecifiedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLInvoiceSpecifiedReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLInvoiceSpecifiedReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

procedure TXMLAppliedAllowanceChargeType.AfterConstruction;
begin
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryAppliedTax', TXMLAppliedTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLAppliedAllowanceChargeType.XSDValidate;
begin
  GetChargeIndicator;
  SortChildNodes(Self, ['ActualAmount', 'Description', 'ReasonCode', 'CalculationPercent', 'BasisAmount', 
    'ChargeIndicator', 'CategoryAppliedTax']);
end;

procedure TXMLAppliedAllowanceChargeType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetChargeIndicator;
  SortChildNodes(Self, ['ActualAmount', 'Description', 'ReasonCode', 'CalculationPercent', 'BasisAmount', 
    'ChargeIndicator', 'CategoryAppliedTax']);
end;

function TXMLAppliedAllowanceChargeType.GetHasActualAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetActualAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['ActualAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLAppliedAllowanceChargeType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLAppliedAllowanceChargeType.GetHasReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLAppliedAllowanceChargeType.GetHasCalculationPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetCalculationPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLAppliedAllowanceChargeType.GetHasBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLAppliedAllowanceChargeType.GetChargeIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ChargeIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLAppliedAllowanceChargeType.GetHasCategoryAppliedTax: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryAppliedTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedAllowanceChargeType.GetCategoryAppliedTax: IXMLAppliedTaxType;
begin
  Result := (ChildNodesNS['CategoryAppliedTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAppliedTaxType);
end;

procedure TXMLAppliedTaxType.AfterConstruction;
begin
  RegisterChildNode('CalculatedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculatedRate', TXMLRateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxPointDate', TXMLDateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLAppliedTaxType.GetHasCalculatedAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculatedAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedTaxType.GetCalculatedAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['CalculatedAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLAppliedTaxType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedTaxType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLAppliedTaxType.GetHasCalculatedRate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculatedRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedTaxType.GetCalculatedRate: IXMLRateType;
begin
  Result := (ChildNodesNS['CalculatedRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLRateType);
end;

function TXMLAppliedTaxType.GetHasBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedTaxType.GetBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLAppliedTaxType.GetHasTaxPointDate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TaxPointDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAppliedTaxType.GetTaxPointDate: IXMLDateType;
begin
  Result := (ChildNodesNS['TaxPointDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateType);
end;

procedure TXMLAvailablePeriodType.AfterConstruction;
begin
  RegisterChildNode('StartDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EndDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLAvailablePeriodType.GetHasStartDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAvailablePeriodType.GetStartDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['StartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLAvailablePeriodType.GetHasEndDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EndDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAvailablePeriodType.GetEndDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['EndDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLAvailablePeriodType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLAvailablePeriodType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLBasicWorkItemType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferenceID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPrimaryClassificationCode := CreateCollection(TXMLPrimaryClassificationCodeList, IXMLCodeType, 'PrimaryClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPrimaryClassificationCodeList;
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAlternativeClassificationCode := CreateCollection(TXMLAlternativeClassificationCodeList, IXMLCodeType, 'AlternativeClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAlternativeClassificationCodeList;
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FComment := CreateCollection(TXMLCommentList, IXMLTextType, 'Comment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCommentList;
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalQuantityClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Index', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequestedActionCode := CreateCollection(TXMLRequestedActionCodeList, IXMLCodeType, 'RequestedActionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequestedActionCodeList;
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PriceListItemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualWorkItemComplexDescription := CreateCollection(TXMLActualWorkItemComplexDescriptionList, IXMLWorkItemComplexDescriptionType, 'ActualWorkItemComplexDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualWorkItemComplexDescriptionList;
  RegisterChildNode('ActualWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalQuantityWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalQuantityWorkItemQuantityAnalysis := CreateCollection(TXMLTotalQuantityWorkItemQuantityAnalysisList, IXMLWorkItemQuantityAnalysisType, 'TotalQuantityWorkItemQuantityAnalysis', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalQuantityWorkItemQuantityAnalysisList;
  RegisterChildNode('TotalQuantityWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUnitCalculatedPrice := CreateCollection(TXMLUnitCalculatedPriceList, IXMLCalculatedPriceType, 'UnitCalculatedPrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUnitCalculatedPriceList;
  RegisterChildNode('UnitCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalCalculatedPrice := CreateCollection(TXMLTotalCalculatedPriceList, IXMLCalculatedPriceType, 'TotalCalculatedPrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalCalculatedPriceList;
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChangedRecordedStatus := CreateCollection(TXMLChangedRecordedStatusList, IXMLRecordedStatusType, 'ChangedRecordedStatus', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChangedRecordedStatusList;
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FItemBasicWorkItem := CreateCollection(TXMLItemBasicWorkItemList, IXMLBasicWorkItemType, 'ItemBasicWorkItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLItemBasicWorkItemList;
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReferencedSpecifiedBinaryFile := CreateCollection(TXMLReferencedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'ReferencedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferencedSpecifiedBinaryFileList;
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLBasicWorkItemType.XSDValidate;
begin
  GetID;
  SortChildNodes(Self, ['ID', 'ReferenceID', 'PrimaryClassificationCode', 'AlternativeClassificationCode', 'TypeCode', 
    'Comment', 'TotalQuantity', 'TotalQuantityClassificationCode', 'Index', 'RequestedActionCode', 
    'PriceListItemID', 'ContractualLanguageCode', 'ActualWorkItemComplexDescription', 'TotalQuantityWorkItemQuantityAnalysis', 'UnitCalculatedPrice', 
    'TotalCalculatedPrice', 'ChangedRecordedStatus', 'ItemBasicWorkItem', 'ReferencedSpecifiedBinaryFile']);
end;

procedure TXMLBasicWorkItemType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  SortChildNodes(Self, ['ID', 'ReferenceID', 'PrimaryClassificationCode', 'AlternativeClassificationCode', 'TypeCode', 
    'Comment', 'TotalQuantity', 'TotalQuantityClassificationCode', 'Index', 'RequestedActionCode', 
    'PriceListItemID', 'ContractualLanguageCode', 'ActualWorkItemComplexDescription', 'TotalQuantityWorkItemQuantityAnalysis', 'UnitCalculatedPrice', 
    'TotalCalculatedPrice', 'ChangedRecordedStatus', 'ItemBasicWorkItem', 'ReferencedSpecifiedBinaryFile']);
end;

function TXMLBasicWorkItemType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLBasicWorkItemType.GetHasReferenceID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReferenceID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.GetReferenceID: IXMLIDType;
begin
  Result := (ChildNodesNS['ReferenceID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLBasicWorkItemType.GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
begin
  Result := FPrimaryClassificationCode;
end;

function TXMLBasicWorkItemType.GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
begin
  Result := FAlternativeClassificationCode;
end;

function TXMLBasicWorkItemType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLBasicWorkItemType.GetComment: IXMLCommentList;
begin
  Result := FComment;
end;

function TXMLBasicWorkItemType.GetHasTotalQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.GetTotalQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['TotalQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLBasicWorkItemType.GetHasTotalQuantityClassificationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalQuantityClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.GetTotalQuantityClassificationCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TotalQuantityClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLBasicWorkItemType.GetHas_Index: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Index', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.Get_Index: IXMLTextType;
begin
  Result := (ChildNodesNS['Index', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLBasicWorkItemType.GetRequestedActionCode: IXMLRequestedActionCodeList;
begin
  Result := FRequestedActionCode;
end;

function TXMLBasicWorkItemType.GetHasPriceListItemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PriceListItemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.GetPriceListItemID: IXMLIDType;
begin
  Result := (ChildNodesNS['PriceListItemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLBasicWorkItemType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBasicWorkItemType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLBasicWorkItemType.GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
begin
  Result := FActualWorkItemComplexDescription;
end;

function TXMLBasicWorkItemType.GetTotalQuantityWorkItemQuantityAnalysis: IXMLTotalQuantityWorkItemQuantityAnalysisList;
begin
  Result := FTotalQuantityWorkItemQuantityAnalysis;
end;

function TXMLBasicWorkItemType.GetUnitCalculatedPrice: IXMLUnitCalculatedPriceList;
begin
  Result := FUnitCalculatedPrice;
end;

function TXMLBasicWorkItemType.GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
begin
  Result := FTotalCalculatedPrice;
end;

function TXMLBasicWorkItemType.GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
begin
  Result := FChangedRecordedStatus;
end;

function TXMLBasicWorkItemType.GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
begin
  Result := FItemBasicWorkItem;
end;

function TXMLBasicWorkItemType.GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
begin
  Result := FReferencedSpecifiedBinaryFile;
end;

function TXMLUnitCalculatedPriceListEnumerator.GetCurrent: IXMLCalculatedPriceType;
begin
  Result := (inherited GetCurrent as IXMLCalculatedPriceType);
end;

procedure TXMLUnitCalculatedPriceList.AfterConstruction;
begin
  RegisterChildNode('UnitCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UnitCalculatedPrice';
  ItemInterface := IXMLCalculatedPriceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUnitCalculatedPriceList.GetEnumerator: IXMLUnitCalculatedPriceListEnumerator;
begin
  Result := TXMLUnitCalculatedPriceListEnumerator.Create(Self);
end;

function TXMLUnitCalculatedPriceList.Get_UnitCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
begin
  Result := (List[Index] as IXMLCalculatedPriceType);
end;

function TXMLUnitCalculatedPriceList.Add: IXMLCalculatedPriceType;
begin
  Result := (AddItem(-1) as IXMLCalculatedPriceType);
end;

function TXMLUnitCalculatedPriceList.Insert(Index: Integer): IXMLCalculatedPriceType;
begin
  Result := (AddItem(Index) as IXMLCalculatedPriceType);
end;

function TXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator.GetCurrent: IXMLWorkItemQuantityAnalysisType;
begin
  Result := (inherited GetCurrent as IXMLWorkItemQuantityAnalysisType);
end;

procedure TXMLTotalQuantityWorkItemQuantityAnalysisList.AfterConstruction;
begin
  RegisterChildNode('TotalQuantityWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalQuantityWorkItemQuantityAnalysis';
  ItemInterface := IXMLWorkItemQuantityAnalysisType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalQuantityWorkItemQuantityAnalysisList.GetEnumerator: IXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator;
begin
  Result := TXMLTotalQuantityWorkItemQuantityAnalysisListEnumerator.Create(Self);
end;

function TXMLTotalQuantityWorkItemQuantityAnalysisList.Get_TotalQuantityWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
begin
  Result := (List[Index] as IXMLWorkItemQuantityAnalysisType);
end;

function TXMLTotalQuantityWorkItemQuantityAnalysisList.Add: IXMLWorkItemQuantityAnalysisType;
begin
  Result := (AddItem(-1) as IXMLWorkItemQuantityAnalysisType);
end;

function TXMLTotalQuantityWorkItemQuantityAnalysisList.Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;
begin
  Result := (AddItem(Index) as IXMLWorkItemQuantityAnalysisType);
end;

procedure TXMLBranchFinancialInstitutionType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LocationFinancialInstitutionAddress', TXMLFinancialInstitutionAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLBranchFinancialInstitutionType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBranchFinancialInstitutionType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLBranchFinancialInstitutionType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBranchFinancialInstitutionType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLBranchFinancialInstitutionType.GetHasLocationFinancialInstitutionAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLBranchFinancialInstitutionType.GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
begin
  Result := (ChildNodesNS['LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFinancialInstitutionAddressType);
end;

procedure TXMLCalculatedPriceType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChargeAmount := CreateCollection(TXMLChargeAmountList, IXMLAmountType, 'ChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChargeAmountList;
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RelatedAppliedAllowanceCharge', TXMLAppliedAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRelatedAppliedAllowanceCharge := CreateCollection(TXMLRelatedAppliedAllowanceChargeList, IXMLAppliedAllowanceChargeType, 'RelatedAppliedAllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRelatedAppliedAllowanceChargeList;
  RegisterChildNode('RelatedAppliedAllowanceCharge', TXMLAppliedAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLCalculatedPriceType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLCalculatedPriceType.GetChargeAmount: IXMLChargeAmountList;
begin
  Result := FChargeAmount;
end;

function TXMLCalculatedPriceType.GetRelatedAppliedAllowanceCharge: IXMLRelatedAppliedAllowanceChargeList;
begin
  Result := FRelatedAppliedAllowanceCharge;
end;

function TXMLRelatedAppliedAllowanceChargeListEnumerator.GetCurrent: IXMLAppliedAllowanceChargeType;
begin
  Result := (inherited GetCurrent as IXMLAppliedAllowanceChargeType);
end;

procedure TXMLRelatedAppliedAllowanceChargeList.AfterConstruction;
begin
  RegisterChildNode('RelatedAppliedAllowanceCharge', TXMLAppliedAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RelatedAppliedAllowanceCharge';
  ItemInterface := IXMLAppliedAllowanceChargeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRelatedAppliedAllowanceChargeList.GetEnumerator: IXMLRelatedAppliedAllowanceChargeListEnumerator;
begin
  Result := TXMLRelatedAppliedAllowanceChargeListEnumerator.Create(Self);
end;

function TXMLRelatedAppliedAllowanceChargeList.Get_RelatedAppliedAllowanceCharge(Index: Integer): IXMLAppliedAllowanceChargeType;
begin
  Result := (List[Index] as IXMLAppliedAllowanceChargeType);
end;

function TXMLRelatedAppliedAllowanceChargeList.Add: IXMLAppliedAllowanceChargeType;
begin
  Result := (AddItem(-1) as IXMLAppliedAllowanceChargeType);
end;

function TXMLRelatedAppliedAllowanceChargeList.Insert(Index: Integer): IXMLAppliedAllowanceChargeType;
begin
  Result := (AddItem(Index) as IXMLAppliedAllowanceChargeType);
end;

procedure TXMLContactPersonType.AfterConstruction;
begin
  RegisterChildNode('GivenName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MiddleName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FamilyName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLContactPersonType.GetHasGivenName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GivenName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLContactPersonType.GetGivenName: IXMLTextType;
begin
  Result := (ChildNodesNS['GivenName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLContactPersonType.GetHasMiddleName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MiddleName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLContactPersonType.GetMiddleName: IXMLTextType;
begin
  Result := (ChildNodesNS['MiddleName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLContactPersonType.GetHasFamilyName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FamilyName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLContactPersonType.GetFamilyName: IXMLTextType;
begin
  Result := (ChildNodesNS['FamilyName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLCreditorFinancialAccountType.AfterConstruction;
begin
  RegisterChildNode('IBANID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AccountName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProprietaryID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLCreditorFinancialAccountType.GetHasIBANID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IBANID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialAccountType.GetIBANID: IXMLIDType;
begin
  Result := (ChildNodesNS['IBANID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialAccountType.GetHasAccountName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AccountName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialAccountType.GetAccountName: IXMLTextType;
begin
  Result := (ChildNodesNS['AccountName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLCreditorFinancialAccountType.GetHasProprietaryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProprietaryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialAccountType.GetProprietaryID: IXMLIDType;
begin
  Result := (ChildNodesNS['ProprietaryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLCreditorFinancialInstitutionType.AfterConstruction;
begin
  RegisterChildNode('BICID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CHIPSUniversalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NewZealandNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IrishNSCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UKSortCodeID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CHIPSParticipantID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SwissBCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FedwireRoutingNumberID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PortugueseNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RussianCentralBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItalianDomesticID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AustrianBankleitzahlID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CanadianPaymentsAssociationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SICID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GermanBankleitzahlID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpanishDomesticInterbankingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SouthAfricanNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HongKongBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AustralianBSBID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IndianFinancialSystemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HellenicBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PolishNationalClearingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClearingSystemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('JapanFinancialInstitutionCommonID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LocationFinancialInstitutionAddress', TXMLFinancialInstitutionAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubDivisionBranchFinancialInstitution', TXMLBranchFinancialInstitutionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLCreditorFinancialInstitutionType.GetHasBICID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetBICID: IXMLIDType;
begin
  Result := (ChildNodesNS['BICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasCHIPSUniversalID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CHIPSUniversalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetCHIPSUniversalID: IXMLIDType;
begin
  Result := (ChildNodesNS['CHIPSUniversalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasNewZealandNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NewZealandNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetNewZealandNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['NewZealandNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasIrishNSCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IrishNSCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetIrishNSCID: IXMLIDType;
begin
  Result := (ChildNodesNS['IrishNSCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasUKSortCodeID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UKSortCodeID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetUKSortCodeID: IXMLIDType;
begin
  Result := (ChildNodesNS['UKSortCodeID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasCHIPSParticipantID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CHIPSParticipantID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetCHIPSParticipantID: IXMLIDType;
begin
  Result := (ChildNodesNS['CHIPSParticipantID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasSwissBCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SwissBCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetSwissBCID: IXMLIDType;
begin
  Result := (ChildNodesNS['SwissBCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasFedwireRoutingNumberID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FedwireRoutingNumberID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetFedwireRoutingNumberID: IXMLIDType;
begin
  Result := (ChildNodesNS['FedwireRoutingNumberID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasPortugueseNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PortugueseNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetPortugueseNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['PortugueseNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasRussianCentralBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RussianCentralBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetRussianCentralBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['RussianCentralBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasItalianDomesticID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ItalianDomesticID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetItalianDomesticID: IXMLIDType;
begin
  Result := (ChildNodesNS['ItalianDomesticID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasAustrianBankleitzahlID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AustrianBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetAustrianBankleitzahlID: IXMLIDType;
begin
  Result := (ChildNodesNS['AustrianBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasCanadianPaymentsAssociationID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CanadianPaymentsAssociationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetCanadianPaymentsAssociationID: IXMLIDType;
begin
  Result := (ChildNodesNS['CanadianPaymentsAssociationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasSICID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetSICID: IXMLIDType;
begin
  Result := (ChildNodesNS['SICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasGermanBankleitzahlID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GermanBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetGermanBankleitzahlID: IXMLIDType;
begin
  Result := (ChildNodesNS['GermanBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasSpanishDomesticInterbankingID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpanishDomesticInterbankingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetSpanishDomesticInterbankingID: IXMLIDType;
begin
  Result := (ChildNodesNS['SpanishDomesticInterbankingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasSouthAfricanNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SouthAfricanNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetSouthAfricanNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['SouthAfricanNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasHongKongBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HongKongBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetHongKongBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['HongKongBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasAustralianBSBID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AustralianBSBID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetAustralianBSBID: IXMLIDType;
begin
  Result := (ChildNodesNS['AustralianBSBID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasIndianFinancialSystemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IndianFinancialSystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetIndianFinancialSystemID: IXMLIDType;
begin
  Result := (ChildNodesNS['IndianFinancialSystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasHellenicBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HellenicBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetHellenicBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['HellenicBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasPolishNationalClearingID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PolishNationalClearingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetPolishNationalClearingID: IXMLIDType;
begin
  Result := (ChildNodesNS['PolishNationalClearingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasClearingSystemName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ClearingSystemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetClearingSystemName: IXMLTextType;
begin
  Result := (ChildNodesNS['ClearingSystemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasJapanFinancialInstitutionCommonID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('JapanFinancialInstitutionCommonID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetJapanFinancialInstitutionCommonID: IXMLIDType;
begin
  Result := (ChildNodesNS['JapanFinancialInstitutionCommonID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasLocationFinancialInstitutionAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
begin
  Result := (ChildNodesNS['LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFinancialInstitutionAddressType);
end;

function TXMLCreditorFinancialInstitutionType.GetHasSubDivisionBranchFinancialInstitution: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubDivisionBranchFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCreditorFinancialInstitutionType.GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;
begin
  Result := (ChildNodesNS['SubDivisionBranchFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLBranchFinancialInstitutionType);
end;

procedure TXMLCrossBorderCustomsValuationType.AfterConstruction;
begin
  RegisterChildNode('AddedAdjustmentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeductedAdjustmentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AddedAdjustmentPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeductedAdjustmentPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('WTOAdditionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeApportionMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OtherChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FOtherChargeAmount := CreateCollection(TXMLOtherChargeAmountList, IXMLAmountType, 'OtherChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLOtherChargeAmountList;
  RegisterChildNode('OtherChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerSellerRelationshipIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerSellerRelationshipPriceInfluenceIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SaleRestrictionIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SalePriceConditionIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RoyaltyLicenseFeeIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SaleRestriction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSaleRestriction := CreateCollection(TXMLSaleRestrictionList, IXMLTextType, 'SaleRestriction', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSaleRestrictionList;
  RegisterChildNode('SaleRestriction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeCurrencyExchange', TXMLTradeCurrencyExchangeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLCrossBorderCustomsValuationType.GetHasAddedAdjustmentAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AddedAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetAddedAdjustmentAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['AddedAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasDeductedAdjustmentAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeductedAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetDeductedAdjustmentAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['DeductedAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasAddedAdjustmentPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AddedAdjustmentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetAddedAdjustmentPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['AddedAdjustmentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasDeductedAdjustmentPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeductedAdjustmentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetDeductedAdjustmentPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['DeductedAdjustmentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['MethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasWTOAdditionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('WTOAdditionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetWTOAdditionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['WTOAdditionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasChargeApportionMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeApportionMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetChargeApportionMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ChargeApportionMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLCrossBorderCustomsValuationType.GetOtherChargeAmount: IXMLOtherChargeAmountList;
begin
  Result := FOtherChargeAmount;
end;

function TXMLCrossBorderCustomsValuationType.GetHasBuyerSellerRelationshipIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerSellerRelationshipIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetBuyerSellerRelationshipIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['BuyerSellerRelationshipIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasBuyerSellerRelationshipPriceInfluenceIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerSellerRelationshipPriceInfluenceIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetBuyerSellerRelationshipPriceInfluenceIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['BuyerSellerRelationshipPriceInfluenceIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasSaleRestrictionIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SaleRestrictionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetSaleRestrictionIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['SaleRestrictionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasSalePriceConditionIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SalePriceConditionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetSalePriceConditionIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['SalePriceConditionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasRoyaltyLicenseFeeIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RoyaltyLicenseFeeIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetRoyaltyLicenseFeeIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['RoyaltyLicenseFeeIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLCrossBorderCustomsValuationType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLCrossBorderCustomsValuationType.GetSaleRestriction: IXMLSaleRestrictionList;
begin
  Result := FSaleRestriction;
end;

function TXMLCrossBorderCustomsValuationType.GetHasApplicableTradeCurrencyExchange: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderCustomsValuationType.GetApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
begin
  Result := (ChildNodesNS['ApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCurrencyExchangeType);
end;

function TXMLSaleRestrictionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLSaleRestrictionList.AfterConstruction;
begin
  RegisterChildNode('SaleRestriction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SaleRestriction';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSaleRestrictionList.GetEnumerator: IXMLSaleRestrictionListEnumerator;
begin
  Result := TXMLSaleRestrictionListEnumerator.Create(Self);
end;

function TXMLSaleRestrictionList.Get_SaleRestriction(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLSaleRestrictionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLSaleRestrictionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLOtherChargeAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLOtherChargeAmountList.AfterConstruction;
begin
  RegisterChildNode('OtherChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'OtherChargeAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLOtherChargeAmountList.GetEnumerator: IXMLOtherChargeAmountListEnumerator;
begin
  Result := TXMLOtherChargeAmountListEnumerator.Create(Self);
end;

function TXMLOtherChargeAmountList.Get_OtherChargeAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLOtherChargeAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLOtherChargeAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLCrossBorderRegulatoryProcedureType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TransactionNatureCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TariffAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NonTariffChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Remark', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRemark := CreateCollection(TXMLRemarkList, IXMLTextType, 'Remark', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRemarkList;
  RegisterChildNode('Remark', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableTradeTax := CreateCollection(TXMLApplicableTradeTaxList, IXMLTradeTaxType, 'ApplicableTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableTradeTaxList;
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLCrossBorderRegulatoryProcedureType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLCrossBorderRegulatoryProcedureType.GetHasTransactionNatureCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TransactionNatureCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderRegulatoryProcedureType.GetTransactionNatureCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TransactionNatureCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLCrossBorderRegulatoryProcedureType.GetHasTariffAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TariffAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderRegulatoryProcedureType.GetTariffAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['TariffAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLCrossBorderRegulatoryProcedureType.GetHasNonTariffChargeAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NonTariffChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderRegulatoryProcedureType.GetNonTariffChargeAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['NonTariffChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLCrossBorderRegulatoryProcedureType.GetHasTotalChargeAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLCrossBorderRegulatoryProcedureType.GetTotalChargeAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['TotalChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLCrossBorderRegulatoryProcedureType.GetRemark: IXMLRemarkList;
begin
  Result := FRemark;
end;

function TXMLCrossBorderRegulatoryProcedureType.GetApplicableTradeTax: IXMLApplicableTradeTaxList;
begin
  Result := FApplicableTradeTax;
end;

function TXMLRemarkListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLRemarkList.AfterConstruction;
begin
  RegisterChildNode('Remark', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Remark';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRemarkList.GetEnumerator: IXMLRemarkListEnumerator;
begin
  Result := TXMLRemarkListEnumerator.Create(Self);
end;

function TXMLRemarkList.Get_Remark(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLRemarkList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLRemarkList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLDebtorFinancialAccountType.AfterConstruction;
begin
  RegisterChildNode('IBANID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AccountName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProprietaryID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDebtorFinancialAccountType.GetHasIBANID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IBANID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialAccountType.GetIBANID: IXMLIDType;
begin
  Result := (ChildNodesNS['IBANID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialAccountType.GetHasAccountName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AccountName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialAccountType.GetAccountName: IXMLTextType;
begin
  Result := (ChildNodesNS['AccountName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDebtorFinancialAccountType.GetHasProprietaryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProprietaryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialAccountType.GetProprietaryID: IXMLIDType;
begin
  Result := (ChildNodesNS['ProprietaryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLDebtorFinancialInstitutionType.AfterConstruction;
begin
  RegisterChildNode('BICID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClearingSystemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CHIPSUniversalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NewZealandNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IrishNSCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UKSortCodeID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CHIPSParticipantID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SwissBCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FedwireRoutingNumberID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PortugueseNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RussianCentralBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItalianDomesticID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AustrianBankleitzahlID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CanadianPaymentsAssociationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SICID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GermanBankleitzahlID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpanishDomesticInterbankingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SouthAfricanNCCID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HongKongBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AustralianBSBID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IndianFinancialSystemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HellenicBankID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PolishNationalClearingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('JapanFinancialInstitutionCommonID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LocationFinancialInstitutionAddress', TXMLFinancialInstitutionAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubDivisionBranchFinancialInstitution', TXMLBranchFinancialInstitutionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDebtorFinancialInstitutionType.GetHasBICID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetBICID: IXMLIDType;
begin
  Result := (ChildNodesNS['BICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasClearingSystemName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ClearingSystemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetClearingSystemName: IXMLTextType;
begin
  Result := (ChildNodesNS['ClearingSystemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasCHIPSUniversalID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CHIPSUniversalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetCHIPSUniversalID: IXMLIDType;
begin
  Result := (ChildNodesNS['CHIPSUniversalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasNewZealandNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NewZealandNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetNewZealandNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['NewZealandNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasIrishNSCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IrishNSCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetIrishNSCID: IXMLIDType;
begin
  Result := (ChildNodesNS['IrishNSCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasUKSortCodeID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UKSortCodeID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetUKSortCodeID: IXMLIDType;
begin
  Result := (ChildNodesNS['UKSortCodeID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasCHIPSParticipantID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CHIPSParticipantID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetCHIPSParticipantID: IXMLIDType;
begin
  Result := (ChildNodesNS['CHIPSParticipantID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasSwissBCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SwissBCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetSwissBCID: IXMLIDType;
begin
  Result := (ChildNodesNS['SwissBCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasFedwireRoutingNumberID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FedwireRoutingNumberID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetFedwireRoutingNumberID: IXMLIDType;
begin
  Result := (ChildNodesNS['FedwireRoutingNumberID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasPortugueseNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PortugueseNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetPortugueseNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['PortugueseNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasRussianCentralBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RussianCentralBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetRussianCentralBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['RussianCentralBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasItalianDomesticID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ItalianDomesticID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetItalianDomesticID: IXMLIDType;
begin
  Result := (ChildNodesNS['ItalianDomesticID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasAustrianBankleitzahlID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AustrianBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetAustrianBankleitzahlID: IXMLIDType;
begin
  Result := (ChildNodesNS['AustrianBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasCanadianPaymentsAssociationID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CanadianPaymentsAssociationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetCanadianPaymentsAssociationID: IXMLIDType;
begin
  Result := (ChildNodesNS['CanadianPaymentsAssociationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasSICID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetSICID: IXMLIDType;
begin
  Result := (ChildNodesNS['SICID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasGermanBankleitzahlID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GermanBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetGermanBankleitzahlID: IXMLIDType;
begin
  Result := (ChildNodesNS['GermanBankleitzahlID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasSpanishDomesticInterbankingID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpanishDomesticInterbankingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetSpanishDomesticInterbankingID: IXMLIDType;
begin
  Result := (ChildNodesNS['SpanishDomesticInterbankingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasSouthAfricanNCCID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SouthAfricanNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetSouthAfricanNCCID: IXMLIDType;
begin
  Result := (ChildNodesNS['SouthAfricanNCCID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasHongKongBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HongKongBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetHongKongBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['HongKongBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasAustralianBSBID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AustralianBSBID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetAustralianBSBID: IXMLIDType;
begin
  Result := (ChildNodesNS['AustralianBSBID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasIndianFinancialSystemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IndianFinancialSystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetIndianFinancialSystemID: IXMLIDType;
begin
  Result := (ChildNodesNS['IndianFinancialSystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasHellenicBankID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HellenicBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetHellenicBankID: IXMLIDType;
begin
  Result := (ChildNodesNS['HellenicBankID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasPolishNationalClearingID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PolishNationalClearingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetPolishNationalClearingID: IXMLIDType;
begin
  Result := (ChildNodesNS['PolishNationalClearingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasJapanFinancialInstitutionCommonID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('JapanFinancialInstitutionCommonID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetJapanFinancialInstitutionCommonID: IXMLIDType;
begin
  Result := (ChildNodesNS['JapanFinancialInstitutionCommonID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasLocationFinancialInstitutionAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetLocationFinancialInstitutionAddress: IXMLFinancialInstitutionAddressType;
begin
  Result := (ChildNodesNS['LocationFinancialInstitutionAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFinancialInstitutionAddressType);
end;

function TXMLDebtorFinancialInstitutionType.GetHasSubDivisionBranchFinancialInstitution: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubDivisionBranchFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDebtorFinancialInstitutionType.GetSubDivisionBranchFinancialInstitution: IXMLBranchFinancialInstitutionType;
begin
  Result := (ChildNodesNS['SubDivisionBranchFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLBranchFinancialInstitutionType);
end;

procedure TXMLDeliveryAdjustmentType.AfterConstruction;
begin
  RegisterChildNode('ReasonCode', TXMLAdjustmentReasonCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReason := CreateCollection(TXMLReasonList, IXMLTextType, 'Reason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReasonList;
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualAmount := CreateCollection(TXMLActualAmountList, IXMLAmountType, 'ActualAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualAmountList;
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDeliveryAdjustmentType.GetHasReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDeliveryAdjustmentType.GetReasonCode: IXMLAdjustmentReasonCodeType;
begin
  Result := (ChildNodesNS['ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAdjustmentReasonCodeType);
end;

function TXMLDeliveryAdjustmentType.GetReason: IXMLReasonList;
begin
  Result := FReason;
end;

function TXMLDeliveryAdjustmentType.GetActualAmount: IXMLActualAmountList;
begin
  Result := FActualAmount;
end;

function TXMLDeliveryAdjustmentType.GetHasActualQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDeliveryAdjustmentType.GetActualQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLDeliveryAdjustmentType.GetHasActualDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDeliveryAdjustmentType.GetActualDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

procedure TXMLDisposalInstructionsType.AfterConstruction;
begin
  RegisterChildNode('MaterialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RecyclingDescriptionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRecyclingDescriptionCode := CreateCollection(TXMLRecyclingDescriptionCodeList, IXMLCodeType, 'RecyclingDescriptionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRecyclingDescriptionCodeList;
  RegisterChildNode('RecyclingDescriptionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RecyclingProcedure', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRecyclingProcedure := CreateCollection(TXMLRecyclingProcedureList, IXMLTextType, 'RecyclingProcedure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRecyclingProcedureList;
  RegisterChildNode('RecyclingProcedure', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDisposalInstructionsType.GetHasMaterialID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaterialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDisposalInstructionsType.GetMaterialID: IXMLIDType;
begin
  Result := (ChildNodesNS['MaterialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDisposalInstructionsType.GetRecyclingDescriptionCode: IXMLRecyclingDescriptionCodeList;
begin
  Result := FRecyclingDescriptionCode;
end;

function TXMLDisposalInstructionsType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLDisposalInstructionsType.GetRecyclingProcedure: IXMLRecyclingProcedureList;
begin
  Result := FRecyclingProcedure;
end;

function TXMLRecyclingProcedureListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLRecyclingProcedureList.AfterConstruction;
begin
  RegisterChildNode('RecyclingProcedure', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RecyclingProcedure';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRecyclingProcedureList.GetEnumerator: IXMLRecyclingProcedureListEnumerator;
begin
  Result := TXMLRecyclingProcedureListEnumerator.Create(Self);
end;

function TXMLRecyclingProcedureList.Get_RecyclingProcedure(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLRecyclingProcedureList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLRecyclingProcedureList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLRecyclingDescriptionCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLRecyclingDescriptionCodeList.AfterConstruction;
begin
  RegisterChildNode('RecyclingDescriptionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RecyclingDescriptionCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRecyclingDescriptionCodeList.GetEnumerator: IXMLRecyclingDescriptionCodeListEnumerator;
begin
  Result := TXMLRecyclingDescriptionCodeListEnumerator.Create(Self);
end;

function TXMLRecyclingDescriptionCodeList.Get_RecyclingDescriptionCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLRecyclingDescriptionCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLRecyclingDescriptionCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

procedure TXMLDocumentAuthenticationType.AfterConstruction;
begin
  RegisterChildNode('ActualDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformation := CreateCollection(TXMLInformationList, IXMLTextType, 'Information', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationList;
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Signatory', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SignatoryImageBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCategoryCode := CreateCollection(TXMLCategoryCodeList, IXMLCodeType, 'CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCategoryCodeList;
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDocumentAuthenticationType.GetHasActualDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentAuthenticationType.GetActualDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLDocumentAuthenticationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentAuthenticationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDocumentAuthenticationType.GetInformation: IXMLInformationList;
begin
  Result := FInformation;
end;

function TXMLDocumentAuthenticationType.GetHasSignatory: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Signatory', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentAuthenticationType.GetSignatory: IXMLTextType;
begin
  Result := (ChildNodesNS['Signatory', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDocumentAuthenticationType.GetHasSignatoryImageBinaryObject: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SignatoryImageBinaryObject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentAuthenticationType.GetSignatoryImageBinaryObject: IXMLBinaryObjectType;
begin
  Result := (ChildNodesNS['SignatoryImageBinaryObject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLBinaryObjectType);
end;

function TXMLDocumentAuthenticationType.GetCategoryCode: IXMLCategoryCodeList;
begin
  Result := FCategoryCode;
end;

function TXMLCategoryCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLCategoryCodeList.AfterConstruction;
begin
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CategoryCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCategoryCodeList.GetEnumerator: IXMLCategoryCodeListEnumerator;
begin
  Result := TXMLCategoryCodeListEnumerator.Create(Self);
end;

function TXMLCategoryCodeList.Get_CategoryCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLCategoryCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLCategoryCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

procedure TXMLDocumentContextParameterType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Value', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedDocumentVersion', TXMLDocumentVersionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDocumentContextParameterType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentContextParameterType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDocumentContextParameterType.GetHasValue: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Value', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentContextParameterType.GetValue: IXMLTextType;
begin
  Result := (ChildNodesNS['Value', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDocumentContextParameterType.GetHasSpecifiedDocumentVersion: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedDocumentVersion', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentContextParameterType.GetSpecifiedDocumentVersion: IXMLDocumentVersionType;
begin
  Result := (ChildNodesNS['SpecifiedDocumentVersion', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentVersionType);
end;

procedure TXMLDocumentLineDocumentType.AfterConstruction;
begin
  RegisterChildNode('LineID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ParentLineID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineStatusCode', TXMLLineStatusCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineStatusReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ResponseReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedNote := CreateCollection(TXMLIncludedNoteList, IXMLNoteType, 'IncludedNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedNoteList;
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReferenceReferencedDocument := CreateCollection(TXMLReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'ReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferenceReferencedDocumentList;
  RegisterChildNode('ReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDocumentLineDocumentType.GetHasLineID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetLineID: IXMLIDType;
begin
  Result := (ChildNodesNS['LineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDocumentLineDocumentType.GetHasParentLineID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ParentLineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetParentLineID: IXMLIDType;
begin
  Result := (ChildNodesNS['ParentLineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDocumentLineDocumentType.GetHasLineStatusCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineStatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetLineStatusCode: IXMLLineStatusCodeType;
begin
  Result := (ChildNodesNS['LineStatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLineStatusCodeType);
end;

function TXMLDocumentLineDocumentType.GetHasLineStatusReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineStatusReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetLineStatusReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['LineStatusReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLDocumentLineDocumentType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLDocumentLineDocumentType.GetHasResponseReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ResponseReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentLineDocumentType.GetResponseReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ResponseReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLDocumentLineDocumentType.GetIncludedNote: IXMLIncludedNoteList;
begin
  Result := FIncludedNote;
end;

function TXMLDocumentLineDocumentType.GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
begin
  Result := FReferenceReferencedDocument;
end;

procedure TXMLDocumentVersionType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssueDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLDocumentVersionType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentVersionType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLDocumentVersionType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentVersionType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLDocumentVersionType.GetHasIssueDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLDocumentVersionType.GetIssueDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['IssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

procedure TXMLExchangedDocumentContextType.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTransactionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TestIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BusinessProcessSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBusinessProcessSpecifiedDocumentContextParameter := CreateCollection(TXMLBusinessProcessSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'BusinessProcessSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBusinessProcessSpecifiedDocumentContextParameterList;
  RegisterChildNode('BusinessProcessSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BIMSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBIMSpecifiedDocumentContextParameter := CreateCollection(TXMLBIMSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'BIMSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBIMSpecifiedDocumentContextParameterList;
  RegisterChildNode('BIMSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ScenarioSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FScenarioSpecifiedDocumentContextParameter := CreateCollection(TXMLScenarioSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'ScenarioSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLScenarioSpecifiedDocumentContextParameterList;
  RegisterChildNode('ScenarioSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicationSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicationSpecifiedDocumentContextParameter := CreateCollection(TXMLApplicationSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'ApplicationSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicationSpecifiedDocumentContextParameterList;
  RegisterChildNode('ApplicationSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GuidelineSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGuidelineSpecifiedDocumentContextParameter := CreateCollection(TXMLGuidelineSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'GuidelineSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGuidelineSpecifiedDocumentContextParameterList;
  RegisterChildNode('GuidelineSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubsetSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubsetSpecifiedDocumentContextParameter := CreateCollection(TXMLSubsetSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'SubsetSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubsetSpecifiedDocumentContextParameterList;
  RegisterChildNode('SubsetSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MessageStandardSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UserSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUserSpecifiedDocumentContextParameter := CreateCollection(TXMLUserSpecifiedDocumentContextParameterList, IXMLDocumentContextParameterType, 'UserSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUserSpecifiedDocumentContextParameterList;
  RegisterChildNode('UserSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLExchangedDocumentContextType.GetHasSpecifiedTransactionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedTransactionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentContextType.GetSpecifiedTransactionID: IXMLIDType;
begin
  Result := (ChildNodesNS['SpecifiedTransactionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentContextType.GetHasTestIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TestIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentContextType.GetTestIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['TestIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLExchangedDocumentContextType.GetBusinessProcessSpecifiedDocumentContextParameter: IXMLBusinessProcessSpecifiedDocumentContextParameterList;
begin
  Result := FBusinessProcessSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetBIMSpecifiedDocumentContextParameter: IXMLBIMSpecifiedDocumentContextParameterList;
begin
  Result := FBIMSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetScenarioSpecifiedDocumentContextParameter: IXMLScenarioSpecifiedDocumentContextParameterList;
begin
  Result := FScenarioSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetApplicationSpecifiedDocumentContextParameter: IXMLApplicationSpecifiedDocumentContextParameterList;
begin
  Result := FApplicationSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetGuidelineSpecifiedDocumentContextParameter: IXMLGuidelineSpecifiedDocumentContextParameterList;
begin
  Result := FGuidelineSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetSubsetSpecifiedDocumentContextParameter: IXMLSubsetSpecifiedDocumentContextParameterList;
begin
  Result := FSubsetSpecifiedDocumentContextParameter;
end;

function TXMLExchangedDocumentContextType.GetHasMessageStandardSpecifiedDocumentContextParameter: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MessageStandardSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentContextType.GetMessageStandardSpecifiedDocumentContextParameter: IXMLDocumentContextParameterType;
begin
  Result := (ChildNodesNS['MessageStandardSpecifiedDocumentContextParameter', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentContextParameterType);
end;

function TXMLExchangedDocumentContextType.GetUserSpecifiedDocumentContextParameter: IXMLUserSpecifiedDocumentContextParameterList;
begin
  Result := FUserSpecifiedDocumentContextParameter;
end;

function TXMLUserSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLUserSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('UserSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UserSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUserSpecifiedDocumentContextParameterList.GetEnumerator: IXMLUserSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLUserSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLUserSpecifiedDocumentContextParameterList.Get_UserSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLUserSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLUserSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLSubsetSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLSubsetSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('SubsetSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SubsetSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSubsetSpecifiedDocumentContextParameterList.GetEnumerator: IXMLSubsetSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLSubsetSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLSubsetSpecifiedDocumentContextParameterList.Get_SubsetSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLSubsetSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLSubsetSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLGuidelineSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLGuidelineSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('GuidelineSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GuidelineSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGuidelineSpecifiedDocumentContextParameterList.GetEnumerator: IXMLGuidelineSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLGuidelineSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLGuidelineSpecifiedDocumentContextParameterList.Get_GuidelineSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLGuidelineSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLGuidelineSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLApplicationSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLApplicationSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('ApplicationSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicationSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicationSpecifiedDocumentContextParameterList.GetEnumerator: IXMLApplicationSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLApplicationSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLApplicationSpecifiedDocumentContextParameterList.Get_ApplicationSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLApplicationSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLApplicationSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLScenarioSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLScenarioSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('ScenarioSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ScenarioSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLScenarioSpecifiedDocumentContextParameterList.GetEnumerator: IXMLScenarioSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLScenarioSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLScenarioSpecifiedDocumentContextParameterList.Get_ScenarioSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLScenarioSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLScenarioSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLBIMSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLBIMSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('BIMSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BIMSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBIMSpecifiedDocumentContextParameterList.GetEnumerator: IXMLBIMSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLBIMSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLBIMSpecifiedDocumentContextParameterList.Get_BIMSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLBIMSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLBIMSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

function TXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator.GetCurrent: IXMLDocumentContextParameterType;
begin
  Result := (inherited GetCurrent as IXMLDocumentContextParameterType);
end;

procedure TXMLBusinessProcessSpecifiedDocumentContextParameterList.AfterConstruction;
begin
  RegisterChildNode('BusinessProcessSpecifiedDocumentContextParameter', TXMLDocumentContextParameterType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BusinessProcessSpecifiedDocumentContextParameter';
  ItemInterface := IXMLDocumentContextParameterType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBusinessProcessSpecifiedDocumentContextParameterList.GetEnumerator: IXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator;
begin
  Result := TXMLBusinessProcessSpecifiedDocumentContextParameterListEnumerator.Create(Self);
end;

function TXMLBusinessProcessSpecifiedDocumentContextParameterList.Get_BusinessProcessSpecifiedDocumentContextParameter(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (List[Index] as IXMLDocumentContextParameterType);
end;

function TXMLBusinessProcessSpecifiedDocumentContextParameterList.Add: IXMLDocumentContextParameterType;
begin
  Result := (AddItem(-1) as IXMLDocumentContextParameterType);
end;

function TXMLBusinessProcessSpecifiedDocumentContextParameterList.Insert(Index: Integer): IXMLDocumentContextParameterType;
begin
  Result := (AddItem(Index) as IXMLDocumentContextParameterType);
end;

procedure TXMLExchangedDocumentType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLDocumentCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssueDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CopyIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Purpose', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ControlRequirementIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LanguageID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLanguageID := CreateCollection(TXMLLanguageIDList, IXMLIDType, 'LanguageID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLanguageIDList;
  RegisterChildNode('LanguageID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PurposeCode', TXMLMessageFunctionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RevisionDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VersionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PreviousRevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestedResponseTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequestedResponseTypeCode := CreateCollection(TXMLRequestedResponseTypeCodeList, IXMLCodeType, 'RequestedResponseTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequestedResponseTypeCodeList;
  RegisterChildNode('RequestedResponseTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreationDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FirstVersionIssueDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubtypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedNote := CreateCollection(TXMLIncludedNoteList, IXMLNoteType, 'IncludedNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedNoteList;
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReferenceReferencedDocument := CreateCollection(TXMLReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'ReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferenceReferencedDocumentList;
  RegisterChildNode('ReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SignatoryDocumentAuthentication', TXMLDocumentAuthenticationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EffectiveSpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssuerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AttachedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAttachedSpecifiedBinaryFile := CreateCollection(TXMLAttachedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'AttachedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAttachedSpecifiedBinaryFileList;
  RegisterChildNode('AttachedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLExchangedDocumentType.XSDValidate;
begin
  GetIssueDateTime;
  SortChildNodes(Self, ['ID', 'Name', 'TypeCode', 'IssueDateTime', 'CopyIndicator', 
    'Purpose', 'ControlRequirementIndicator', 'LanguageID', 'PurposeCode', 'RevisionDateTime', 
    'VersionID', 'GlobalID', 'RevisionID', 'PreviousRevisionID', 'CategoryCode', 
    'RequestedResponseTypeCode', 'CreationDateTime', 'FirstVersionIssueDateTime', 'SubtypeCode', 'IncludedNote', 
    'ReferenceReferencedDocument', 'SignatoryDocumentAuthentication', 'EffectiveSpecifiedPeriod', 'IssuerTradeParty', 'AttachedSpecifiedBinaryFile']);
end;

procedure TXMLExchangedDocumentType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetIssueDateTime;
  SortChildNodes(Self, ['ID', 'Name', 'TypeCode', 'IssueDateTime', 'CopyIndicator', 
    'Purpose', 'ControlRequirementIndicator', 'LanguageID', 'PurposeCode', 'RevisionDateTime', 
    'VersionID', 'GlobalID', 'RevisionID', 'PreviousRevisionID', 'CategoryCode', 
    'RequestedResponseTypeCode', 'CreationDateTime', 'FirstVersionIssueDateTime', 'SubtypeCode', 'IncludedNote', 
    'ReferenceReferencedDocument', 'SignatoryDocumentAuthentication', 'EffectiveSpecifiedPeriod', 'IssuerTradeParty', 'AttachedSpecifiedBinaryFile']);
end;

function TXMLExchangedDocumentType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLExchangedDocumentType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetTypeCode: IXMLDocumentCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentCodeType);
end;

function TXMLExchangedDocumentType.GetIssueDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['IssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLExchangedDocumentType.GetHasCopyIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CopyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetCopyIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['CopyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLExchangedDocumentType.GetHasPurpose: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Purpose', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetPurpose: IXMLTextType;
begin
  Result := (ChildNodesNS['Purpose', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLExchangedDocumentType.GetHasControlRequirementIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ControlRequirementIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetControlRequirementIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ControlRequirementIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLExchangedDocumentType.GetLanguageID: IXMLLanguageIDList;
begin
  Result := FLanguageID;
end;

function TXMLExchangedDocumentType.GetHasPurposeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PurposeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetPurposeCode: IXMLMessageFunctionCodeType;
begin
  Result := (ChildNodesNS['PurposeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMessageFunctionCodeType);
end;

function TXMLExchangedDocumentType.GetHasRevisionDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RevisionDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetRevisionDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['RevisionDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLExchangedDocumentType.GetHasVersionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetVersionID: IXMLIDType;
begin
  Result := (ChildNodesNS['VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentType.GetHasGlobalID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetGlobalID: IXMLIDType;
begin
  Result := (ChildNodesNS['GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentType.GetHasRevisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetRevisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['RevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentType.GetHasPreviousRevisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PreviousRevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetPreviousRevisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['PreviousRevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLExchangedDocumentType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLExchangedDocumentType.GetRequestedResponseTypeCode: IXMLRequestedResponseTypeCodeList;
begin
  Result := FRequestedResponseTypeCode;
end;

function TXMLExchangedDocumentType.GetHasCreationDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CreationDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetCreationDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['CreationDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLExchangedDocumentType.GetHasFirstVersionIssueDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FirstVersionIssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetFirstVersionIssueDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['FirstVersionIssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLExchangedDocumentType.GetHasSubtypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubtypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetSubtypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['SubtypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLExchangedDocumentType.GetIncludedNote: IXMLIncludedNoteList;
begin
  Result := FIncludedNote;
end;

function TXMLExchangedDocumentType.GetReferenceReferencedDocument: IXMLReferenceReferencedDocumentList;
begin
  Result := FReferenceReferencedDocument;
end;

function TXMLExchangedDocumentType.GetHasSignatoryDocumentAuthentication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SignatoryDocumentAuthentication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetSignatoryDocumentAuthentication: IXMLDocumentAuthenticationType;
begin
  Result := (ChildNodesNS['SignatoryDocumentAuthentication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentAuthenticationType);
end;

function TXMLExchangedDocumentType.GetHasEffectiveSpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EffectiveSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['EffectiveSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLExchangedDocumentType.GetHasIssuerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssuerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLExchangedDocumentType.GetIssuerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['IssuerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLExchangedDocumentType.GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
begin
  Result := FAttachedSpecifiedBinaryFile;
end;

function TXMLReferenceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLReferenceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('ReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ReferenceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReferenceReferencedDocumentList.GetEnumerator: IXMLReferenceReferencedDocumentListEnumerator;
begin
  Result := TXMLReferenceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLReferenceReferencedDocumentList.Get_ReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLReferenceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLReferenceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLRequestedResponseTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLRequestedResponseTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('RequestedResponseTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RequestedResponseTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRequestedResponseTypeCodeList.GetEnumerator: IXMLRequestedResponseTypeCodeListEnumerator;
begin
  Result := TXMLRequestedResponseTypeCodeListEnumerator.Create(Self);
end;

function TXMLRequestedResponseTypeCodeList.Get_RequestedResponseTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLRequestedResponseTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLRequestedResponseTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLLanguageIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLLanguageIDList.AfterConstruction;
begin
  RegisterChildNode('LanguageID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'LanguageID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLanguageIDList.GetEnumerator: IXMLLanguageIDListEnumerator;
begin
  Result := TXMLLanguageIDListEnumerator.Create(Self);
end;

function TXMLLanguageIDList.Get_LanguageID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLLanguageIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLLanguageIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLFinancialAdjustmentType.AfterConstruction;
begin
  RegisterChildNode('ReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReason := CreateCollection(TXMLReasonList, IXMLTextType, 'Reason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReasonList;
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualAmount := CreateCollection(TXMLActualAmountList, IXMLAmountType, 'ActualAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualAmountList;
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DirectionCode', TXMLAccountingDebitCreditStatusCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClaimRelatedTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RelatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRelatedTradeTax := CreateCollection(TXMLRelatedTradeTaxList, IXMLTradeTaxType, 'RelatedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRelatedTradeTaxList;
  RegisterChildNode('RelatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLFinancialAdjustmentType.GetHasReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLFinancialAdjustmentType.GetReason: IXMLReasonList;
begin
  Result := FReason;
end;

function TXMLFinancialAdjustmentType.GetActualAmount: IXMLActualAmountList;
begin
  Result := FActualAmount;
end;

function TXMLFinancialAdjustmentType.GetHasActualQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetActualQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLFinancialAdjustmentType.GetHasActualDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetActualDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ActualDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLFinancialAdjustmentType.GetHasDirectionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DirectionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetDirectionCode: IXMLAccountingDebitCreditStatusCodeType;
begin
  Result := (ChildNodesNS['DirectionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAccountingDebitCreditStatusCodeType);
end;

function TXMLFinancialAdjustmentType.GetHasClaimRelatedTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ClaimRelatedTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetClaimRelatedTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ClaimRelatedTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLFinancialAdjustmentType.GetHasInvoiceReferenceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialAdjustmentType.GetInvoiceReferenceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['InvoiceReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLFinancialAdjustmentType.GetRelatedTradeTax: IXMLRelatedTradeTaxList;
begin
  Result := FRelatedTradeTax;
end;

function TXMLRelatedTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLRelatedTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('RelatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RelatedTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRelatedTradeTaxList.GetEnumerator: IXMLRelatedTradeTaxListEnumerator;
begin
  Result := TXMLRelatedTradeTaxListEnumerator.Create(Self);
end;

function TXMLRelatedTradeTaxList.Get_RelatedTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLRelatedTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLRelatedTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLReasonListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLReasonList.AfterConstruction;
begin
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Reason';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReasonList.GetEnumerator: IXMLReasonListEnumerator;
begin
  Result := TXMLReasonListEnumerator.Create(Self);
end;

function TXMLReasonList.Get_Reason(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLReasonList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLReasonList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLFinancialInstitutionAddressType.AfterConstruction;
begin
  RegisterChildNode('PostcodeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuildingNumber', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineOne', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineTwo', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineThree', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineFour', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineFive', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StreetName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CityName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountrySubDivisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DepartmentName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostOfficeBox', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CityID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountrySubDivisionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLFinancialInstitutionAddressType.GetHasPostcodeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostcodeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetPostcodeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['PostcodeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLFinancialInstitutionAddressType.GetHasBuildingNumber: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuildingNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetBuildingNumber: IXMLTextType;
begin
  Result := (ChildNodesNS['BuildingNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasLineOne: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineOne', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetLineOne: IXMLTextType;
begin
  Result := (ChildNodesNS['LineOne', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasLineTwo: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineTwo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetLineTwo: IXMLTextType;
begin
  Result := (ChildNodesNS['LineTwo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasLineThree: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineThree', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetLineThree: IXMLTextType;
begin
  Result := (ChildNodesNS['LineThree', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasLineFour: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineFour', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetLineFour: IXMLTextType;
begin
  Result := (ChildNodesNS['LineFour', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasLineFive: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineFive', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetLineFive: IXMLTextType;
begin
  Result := (ChildNodesNS['LineFive', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasStreetName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetStreetName: IXMLTextType;
begin
  Result := (ChildNodesNS['StreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCityName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CityName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCityName: IXMLTextType;
begin
  Result := (ChildNodesNS['CityName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCountrySubDivisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCountrySubDivisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCountryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCountryID: IXMLIDType;
begin
  Result := (ChildNodesNS['CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLFinancialInstitutionAddressType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLFinancialInstitutionAddressType.GetHasDepartmentName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetDepartmentName: IXMLTextType;
begin
  Result := (ChildNodesNS['DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasPostOfficeBox: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostOfficeBox', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetPostOfficeBox: IXMLTextType;
begin
  Result := (ChildNodesNS['PostOfficeBox', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCityID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CityID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCityID: IXMLIDType;
begin
  Result := (ChildNodesNS['CityID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCountrySubDivisionName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountrySubDivisionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCountrySubDivisionName: IXMLTextType;
begin
  Result := (ChildNodesNS['CountrySubDivisionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLFinancialInstitutionAddressType.GetHasCountryName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLFinancialInstitutionAddressType.GetCountryName: IXMLTextType;
begin
  Result := (ChildNodesNS['CountryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLGeographicalCoordinateType.AfterConstruction;
begin
  RegisterChildNode('AltitudeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LatitudeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LongitudeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SystemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLGeographicalCoordinateType.GetHasAltitudeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AltitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGeographicalCoordinateType.GetAltitudeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['AltitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLGeographicalCoordinateType.GetHasLatitudeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LatitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGeographicalCoordinateType.GetLatitudeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['LatitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLGeographicalCoordinateType.GetHasLongitudeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LongitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGeographicalCoordinateType.GetLongitudeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['LongitudeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLGeographicalCoordinateType.GetHasSystemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGeographicalCoordinateType.GetSystemID: IXMLIDType;
begin
  Result := (ChildNodesNS['SystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLGroupedWorkItemType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPrimaryClassificationCode := CreateCollection(TXMLPrimaryClassificationCodeList, IXMLCodeType, 'PrimaryClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPrimaryClassificationCodeList;
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAlternativeClassificationCode := CreateCollection(TXMLAlternativeClassificationCodeList, IXMLCodeType, 'AlternativeClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAlternativeClassificationCodeList;
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FComment := CreateCollection(TXMLCommentList, IXMLTextType, 'Comment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCommentList;
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Index', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequestedActionCode := CreateCollection(TXMLRequestedActionCodeList, IXMLCodeType, 'RequestedActionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequestedActionCodeList;
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PriceListItemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalCalculatedPrice := CreateCollection(TXMLTotalCalculatedPriceList, IXMLCalculatedPriceType, 'TotalCalculatedPrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalCalculatedPriceList;
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemGroupedWorkItem', TXMLGroupedWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FItemGroupedWorkItem := CreateCollection(TXMLItemGroupedWorkItemList, IXMLGroupedWorkItemType, 'ItemGroupedWorkItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLItemGroupedWorkItemList;
  RegisterChildNode('ItemGroupedWorkItem', TXMLGroupedWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FItemBasicWorkItem := CreateCollection(TXMLItemBasicWorkItemList, IXMLBasicWorkItemType, 'ItemBasicWorkItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLItemBasicWorkItemList;
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChangedRecordedStatus := CreateCollection(TXMLChangedRecordedStatusList, IXMLRecordedStatusType, 'ChangedRecordedStatus', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChangedRecordedStatusList;
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualWorkItemComplexDescription := CreateCollection(TXMLActualWorkItemComplexDescriptionList, IXMLWorkItemComplexDescriptionType, 'ActualWorkItemComplexDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualWorkItemComplexDescriptionList;
  RegisterChildNode('ActualWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReferencedSpecifiedBinaryFile := CreateCollection(TXMLReferencedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'ReferencedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferencedSpecifiedBinaryFileList;
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLGroupedWorkItemType.XSDValidate;
begin
  GetID;
  SortChildNodes(Self, ['ID', 'PrimaryClassificationCode', 'AlternativeClassificationCode', 'TypeCode', 'Comment', 
    'TotalQuantity', 'Index', 'RequestedActionCode', 'PriceListItemID', 'ContractualLanguageCode', 
    'TotalCalculatedPrice', 'ItemGroupedWorkItem', 'ItemBasicWorkItem', 'ChangedRecordedStatus', 'ActualWorkItemComplexDescription', 
    'ReferencedSpecifiedBinaryFile']);
end;

procedure TXMLGroupedWorkItemType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  SortChildNodes(Self, ['ID', 'PrimaryClassificationCode', 'AlternativeClassificationCode', 'TypeCode', 'Comment', 
    'TotalQuantity', 'Index', 'RequestedActionCode', 'PriceListItemID', 'ContractualLanguageCode', 
    'TotalCalculatedPrice', 'ItemGroupedWorkItem', 'ItemBasicWorkItem', 'ChangedRecordedStatus', 'ActualWorkItemComplexDescription', 
    'ReferencedSpecifiedBinaryFile']);
end;

function TXMLGroupedWorkItemType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLGroupedWorkItemType.GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
begin
  Result := FPrimaryClassificationCode;
end;

function TXMLGroupedWorkItemType.GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
begin
  Result := FAlternativeClassificationCode;
end;

function TXMLGroupedWorkItemType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLGroupedWorkItemType.GetComment: IXMLCommentList;
begin
  Result := FComment;
end;

function TXMLGroupedWorkItemType.GetHasTotalQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGroupedWorkItemType.GetTotalQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['TotalQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLGroupedWorkItemType.GetHas_Index: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Index', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGroupedWorkItemType.Get_Index: IXMLTextType;
begin
  Result := (ChildNodesNS['Index', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLGroupedWorkItemType.GetRequestedActionCode: IXMLRequestedActionCodeList;
begin
  Result := FRequestedActionCode;
end;

function TXMLGroupedWorkItemType.GetHasPriceListItemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PriceListItemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGroupedWorkItemType.GetPriceListItemID: IXMLIDType;
begin
  Result := (ChildNodesNS['PriceListItemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLGroupedWorkItemType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLGroupedWorkItemType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLGroupedWorkItemType.GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
begin
  Result := FTotalCalculatedPrice;
end;

function TXMLGroupedWorkItemType.GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
begin
  Result := FItemGroupedWorkItem;
end;

function TXMLGroupedWorkItemType.GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
begin
  Result := FItemBasicWorkItem;
end;

function TXMLGroupedWorkItemType.GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
begin
  Result := FChangedRecordedStatus;
end;

function TXMLGroupedWorkItemType.GetActualWorkItemComplexDescription: IXMLActualWorkItemComplexDescriptionList;
begin
  Result := FActualWorkItemComplexDescription;
end;

function TXMLGroupedWorkItemType.GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
begin
  Result := FReferencedSpecifiedBinaryFile;
end;

function TXMLActualWorkItemComplexDescriptionListEnumerator.GetCurrent: IXMLWorkItemComplexDescriptionType;
begin
  Result := (inherited GetCurrent as IXMLWorkItemComplexDescriptionType);
end;

procedure TXMLActualWorkItemComplexDescriptionList.AfterConstruction;
begin
  RegisterChildNode('ActualWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ActualWorkItemComplexDescription';
  ItemInterface := IXMLWorkItemComplexDescriptionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLActualWorkItemComplexDescriptionList.GetEnumerator: IXMLActualWorkItemComplexDescriptionListEnumerator;
begin
  Result := TXMLActualWorkItemComplexDescriptionListEnumerator.Create(Self);
end;

function TXMLActualWorkItemComplexDescriptionList.Get_ActualWorkItemComplexDescription(Index: Integer): IXMLWorkItemComplexDescriptionType;
begin
  Result := (List[Index] as IXMLWorkItemComplexDescriptionType);
end;

function TXMLActualWorkItemComplexDescriptionList.Add: IXMLWorkItemComplexDescriptionType;
begin
  Result := (AddItem(-1) as IXMLWorkItemComplexDescriptionType);
end;

function TXMLActualWorkItemComplexDescriptionList.Insert(Index: Integer): IXMLWorkItemComplexDescriptionType;
begin
  Result := (AddItem(Index) as IXMLWorkItemComplexDescriptionType);
end;

procedure TXMLHeaderTradeAgreementType.AfterConstruction;
begin
  RegisterChildNode('Reference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReference := CreateCollection(TXMLReferenceList, IXMLTextType, 'Reference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferenceList;
  RegisterChildNode('Reference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SalesAgentTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerRequisitionerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBuyerRequisitionerTradeParty := CreateCollection(TXMLBuyerRequisitionerTradePartyList, IXMLTradePartyType, 'BuyerRequisitionerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBuyerRequisitionerTradePartyList;
  RegisterChildNode('BuyerRequisitionerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerAssignedAccountantTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerAssignedAccountantTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerTaxRepresentativeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerTaxRepresentativeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductEndUserTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeDeliveryTerms', TXMLTradeDeliveryTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('QuotationReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OrderResponseReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DemandForecastReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SupplyInstructionReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PromotionalDealReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PriceListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequisitionerReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequisitionerReferencedDocument := CreateCollection(TXMLRequisitionerReferencedDocumentList, IXMLReferencedDocumentType, 'RequisitionerReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequisitionerReferencedDocumentList;
  RegisterChildNode('RequisitionerReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerAgentTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PurchaseConditionsReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPurchaseConditionsReferencedDocument := CreateCollection(TXMLPurchaseConditionsReferencedDocumentList, IXMLReferencedDocumentType, 'PurchaseConditionsReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPurchaseConditionsReferencedDocumentList;
  RegisterChildNode('PurchaseConditionsReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedProcuringProject', TXMLProcuringProjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimateCustomerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUltimateCustomerOrderReferencedDocument := CreateCollection(TXMLUltimateCustomerOrderReferencedDocumentList, IXMLReferencedDocumentType, 'UltimateCustomerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUltimateCustomerOrderReferencedDocumentList;
  RegisterChildNode('UltimateCustomerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PricingBaseApplicableLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLHeaderTradeAgreementType.GetReference: IXMLReferenceList;
begin
  Result := FReference;
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerReference: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerReference: IXMLTextType;
begin
  Result := (ChildNodesNS['BuyerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLHeaderTradeAgreementType.GetHasSellerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSellerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['SellerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['BuyerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasSalesAgentTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SalesAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSalesAgentTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['SalesAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
begin
  Result := FBuyerRequisitionerTradeParty;
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerAssignedAccountantTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerAssignedAccountantTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerAssignedAccountantTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['BuyerAssignedAccountantTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasSellerAssignedAccountantTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerAssignedAccountantTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSellerAssignedAccountantTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['SellerAssignedAccountantTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerTaxRepresentativeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerTaxRepresentativeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerTaxRepresentativeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['BuyerTaxRepresentativeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasSellerTaxRepresentativeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerTaxRepresentativeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSellerTaxRepresentativeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['SellerTaxRepresentativeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasProductEndUserTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProductEndUserTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetProductEndUserTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ProductEndUserTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetHasApplicableTradeDeliveryTerms: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradeDeliveryTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
begin
  Result := (ChildNodesNS['ApplicableTradeDeliveryTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeDeliveryTermsType);
end;

function TXMLHeaderTradeAgreementType.GetHasSellerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasQuotationReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('QuotationReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetQuotationReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['QuotationReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasOrderResponseReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OrderResponseReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetOrderResponseReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['OrderResponseReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasContractReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetContractReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasDemandForecastReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DemandForecastReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DemandForecastReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasSupplyInstructionReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SupplyInstructionReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSupplyInstructionReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['SupplyInstructionReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasPromotionalDealReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PromotionalDealReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['PromotionalDealReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetHasPriceListReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PriceListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetPriceListReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['PriceListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeAgreementType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLHeaderTradeAgreementType.GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
begin
  Result := FRequisitionerReferencedDocument;
end;

function TXMLHeaderTradeAgreementType.GetHasBuyerAgentTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetBuyerAgentTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['BuyerAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeAgreementType.GetPurchaseConditionsReferencedDocument: IXMLPurchaseConditionsReferencedDocumentList;
begin
  Result := FPurchaseConditionsReferencedDocument;
end;

function TXMLHeaderTradeAgreementType.GetHasSpecifiedProcuringProject: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedProcuringProject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetSpecifiedProcuringProject: IXMLProcuringProjectType;
begin
  Result := (ChildNodesNS['SpecifiedProcuringProject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLProcuringProjectType);
end;

function TXMLHeaderTradeAgreementType.GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
begin
  Result := FUltimateCustomerOrderReferencedDocument;
end;

function TXMLHeaderTradeAgreementType.GetHasPricingBaseApplicableLogisticsLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PricingBaseApplicableLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeAgreementType.GetPricingBaseApplicableLogisticsLocation: IXMLLogisticsLocationType;
begin
  Result := (ChildNodesNS['PricingBaseApplicableLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsLocationType);
end;

function TXMLPurchaseConditionsReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLPurchaseConditionsReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('PurchaseConditionsReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PurchaseConditionsReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPurchaseConditionsReferencedDocumentList.GetEnumerator: IXMLPurchaseConditionsReferencedDocumentListEnumerator;
begin
  Result := TXMLPurchaseConditionsReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLPurchaseConditionsReferencedDocumentList.Get_PurchaseConditionsReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLPurchaseConditionsReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLPurchaseConditionsReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLReferenceListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLReferenceList.AfterConstruction;
begin
  RegisterChildNode('Reference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Reference';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReferenceList.GetEnumerator: IXMLReferenceListEnumerator;
begin
  Result := TXMLReferenceListEnumerator.Create(Self);
end;

function TXMLReferenceList.Get_Reference(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLReferenceList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLReferenceList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLHeaderTradeDeliveryType.AfterConstruction;
begin
  RegisterChildNode('RelatedSupplyChainConsignment', TXMLSupplyChainConsignmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ShipToTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimateShipToTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ShipFromTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDespatchSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualPickUpSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualReceiptSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DespatchAdviceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceivingAdviceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeliveryNoteReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConsumptionReportReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PreviousDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPreviousDeliverySupplyChainEvent := CreateCollection(TXMLPreviousDeliverySupplyChainEventList, IXMLSupplyChainEventType, 'PreviousDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPreviousDeliverySupplyChainEventList;
  RegisterChildNode('PreviousDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackingListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLHeaderTradeDeliveryType.GetHasRelatedSupplyChainConsignment: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RelatedSupplyChainConsignment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
begin
  Result := (ChildNodesNS['RelatedSupplyChainConsignment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainConsignmentType);
end;

function TXMLHeaderTradeDeliveryType.GetHasShipToTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetShipToTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeDeliveryType.GetHasUltimateShipToTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UltimateShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetUltimateShipToTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['UltimateShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeDeliveryType.GetHasShipFromTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ShipFromTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetShipFromTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ShipFromTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeDeliveryType.GetHasActualDespatchSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDespatchSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualDespatchSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLHeaderTradeDeliveryType.GetHasActualPickUpSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualPickUpSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualPickUpSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLHeaderTradeDeliveryType.GetHasActualDeliverySupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLHeaderTradeDeliveryType.GetHasActualReceiptSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualReceiptSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualReceiptSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLHeaderTradeDeliveryType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLHeaderTradeDeliveryType.GetHasDespatchAdviceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DespatchAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DespatchAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeDeliveryType.GetHasReceivingAdviceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReceivingAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ReceivingAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeDeliveryType.GetHasDeliveryNoteReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeliveryNoteReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DeliveryNoteReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeDeliveryType.GetHasConsumptionReportReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConsumptionReportReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ConsumptionReportReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeDeliveryType.GetPreviousDeliverySupplyChainEvent: IXMLPreviousDeliverySupplyChainEventList;
begin
  Result := FPreviousDeliverySupplyChainEvent;
end;

function TXMLHeaderTradeDeliveryType.GetHasPackingListReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackingListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeDeliveryType.GetPackingListReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['PackingListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLPreviousDeliverySupplyChainEventListEnumerator.GetCurrent: IXMLSupplyChainEventType;
begin
  Result := (inherited GetCurrent as IXMLSupplyChainEventType);
end;

procedure TXMLPreviousDeliverySupplyChainEventList.AfterConstruction;
begin
  RegisterChildNode('PreviousDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PreviousDeliverySupplyChainEvent';
  ItemInterface := IXMLSupplyChainEventType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPreviousDeliverySupplyChainEventList.GetEnumerator: IXMLPreviousDeliverySupplyChainEventListEnumerator;
begin
  Result := TXMLPreviousDeliverySupplyChainEventListEnumerator.Create(Self);
end;

function TXMLPreviousDeliverySupplyChainEventList.Get_PreviousDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
begin
  Result := (List[Index] as IXMLSupplyChainEventType);
end;

function TXMLPreviousDeliverySupplyChainEventList.Add: IXMLSupplyChainEventType;
begin
  Result := (AddItem(-1) as IXMLSupplyChainEventType);
end;

function TXMLPreviousDeliverySupplyChainEventList.Insert(Index: Integer): IXMLSupplyChainEventType;
begin
  Result := (AddItem(Index) as IXMLSupplyChainEventType);
end;

procedure TXMLHeaderTradeSettlementType.AfterConstruction;
begin
  RegisterChildNode('DuePayableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDuePayableAmount := CreateCollection(TXMLDuePayableAmountList, IXMLAmountType, 'DuePayableAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDuePayableAmountList;
  RegisterChildNode('DuePayableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditorReferenceTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditorReferenceTypeCode := CreateCollection(TXMLCreditorReferenceTypeCodeList, IXMLCodeType, 'CreditorReferenceTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditorReferenceTypeCodeList;
  RegisterChildNode('CreditorReferenceTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditorReferenceType', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditorReferenceType := CreateCollection(TXMLCreditorReferenceTypeList, IXMLTextType, 'CreditorReferenceType', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditorReferenceTypeList;
  RegisterChildNode('CreditorReferenceType', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditorReferenceIssuerID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditorReferenceIssuerID := CreateCollection(TXMLCreditorReferenceIssuerIDList, IXMLIDType, 'CreditorReferenceIssuerID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditorReferenceIssuerIDList;
  RegisterChildNode('CreditorReferenceIssuerID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditorReferenceID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPaymentReference := CreateCollection(TXMLPaymentReferenceList, IXMLTextType, 'PaymentReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPaymentReferenceList;
  RegisterChildNode('PaymentReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceIssuerReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NextInvoiceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNextInvoiceDateTime := CreateCollection(TXMLNextInvoiceDateTimeList, IXMLDateTimeType, 'NextInvoiceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNextInvoiceDateTimeList;
  RegisterChildNode('NextInvoiceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditReason := CreateCollection(TXMLCreditReasonList, IXMLTextType, 'CreditReason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditReasonList;
  RegisterChildNode('CreditReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoicerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayeeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxApplicableTradeCurrencyExchange', TXMLTradeCurrencyExchangeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceApplicableTradeCurrencyExchange', TXMLTradeCurrencyExchangeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentApplicableTradeCurrencyExchange', TXMLTradeCurrencyExchangeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeSettlementPaymentMeans', TXMLTradeSettlementPaymentMeansType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeSettlementPaymentMeans := CreateCollection(TXMLSpecifiedTradeSettlementPaymentMeansList, IXMLTradeSettlementPaymentMeansType, 'SpecifiedTradeSettlementPaymentMeans', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeSettlementPaymentMeansList;
  RegisterChildNode('SpecifiedTradeSettlementPaymentMeans', TXMLTradeSettlementPaymentMeansType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableTradeTax := CreateCollection(TXMLApplicableTradeTaxList, IXMLTradeTaxType, 'ApplicableTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableTradeTaxList;
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BillingSpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeAllowanceCharge := CreateCollection(TXMLSpecifiedTradeAllowanceChargeList, IXMLTradeAllowanceChargeType, 'SpecifiedTradeAllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeAllowanceChargeList;
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubtotalCalculatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubtotalCalculatedTradeTax := CreateCollection(TXMLSubtotalCalculatedTradeTaxList, IXMLTradeTaxType, 'SubtotalCalculatedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubtotalCalculatedTradeTaxList;
  RegisterChildNode('SubtotalCalculatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLogisticsServiceCharge', TXMLLogisticsServiceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedLogisticsServiceCharge := CreateCollection(TXMLSpecifiedLogisticsServiceChargeList, IXMLLogisticsServiceChargeType, 'SpecifiedLogisticsServiceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedLogisticsServiceChargeList;
  RegisterChildNode('SpecifiedLogisticsServiceCharge', TXMLLogisticsServiceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradePaymentTerms', TXMLTradePaymentTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradePaymentTerms := CreateCollection(TXMLSpecifiedTradePaymentTermsList, IXMLTradePaymentTermsType, 'SpecifiedTradePaymentTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradePaymentTermsList;
  RegisterChildNode('SpecifiedTradePaymentTerms', TXMLTradePaymentTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeSettlementHeaderMonetarySummation', TXMLTradeSettlementHeaderMonetarySummationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedFinancialAdjustment := CreateCollection(TXMLSpecifiedFinancialAdjustmentList, IXMLFinancialAdjustmentType, 'SpecifiedFinancialAdjustment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedFinancialAdjustmentList;
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInvoiceReferencedDocument := CreateCollection(TXMLInvoiceReferencedDocumentList, IXMLReferencedDocumentType, 'InvoiceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInvoiceReferencedDocumentList;
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProFormaInvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LetterOfCreditReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FactoringAgreementReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FFactoringAgreementReferencedDocument := CreateCollection(TXMLFactoringAgreementReferencedDocumentList, IXMLReferencedDocumentType, 'FactoringAgreementReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLFactoringAgreementReferencedDocumentList;
  RegisterChildNode('FactoringAgreementReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FactoringListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FFactoringListReferencedDocument := CreateCollection(TXMLFactoringListReferencedDocumentList, IXMLReferencedDocumentType, 'FactoringListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLFactoringListReferencedDocumentList;
  RegisterChildNode('FactoringListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPayableSpecifiedTradeAccountingAccount := CreateCollection(TXMLPayableSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'PayableSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPayableSpecifiedTradeAccountingAccountList;
  RegisterChildNode('PayableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceivableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReceivableSpecifiedTradeAccountingAccount := CreateCollection(TXMLReceivableSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'ReceivableSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReceivableSpecifiedTradeAccountingAccountList;
  RegisterChildNode('ReceivableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PurchaseSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPurchaseSpecifiedTradeAccountingAccount := CreateCollection(TXMLPurchaseSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'PurchaseSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPurchaseSpecifiedTradeAccountingAccountList;
  RegisterChildNode('PurchaseSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SalesSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSalesSpecifiedTradeAccountingAccount := CreateCollection(TXMLSalesSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'SalesSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSalesSpecifiedTradeAccountingAccountList;
  RegisterChildNode('SalesSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeSettlementFinancialCard', TXMLTradeSettlementFinancialCardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeSettlementFinancialCard := CreateCollection(TXMLSpecifiedTradeSettlementFinancialCardList, IXMLTradeSettlementFinancialCardType, 'SpecifiedTradeSettlementFinancialCard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeSettlementFinancialCardList;
  RegisterChildNode('SpecifiedTradeSettlementFinancialCard', TXMLTradeSettlementFinancialCardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedAdvancePayment', TXMLAdvancePaymentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedAdvancePayment := CreateCollection(TXMLSpecifiedAdvancePaymentList, IXMLAdvancePaymentType, 'SpecifiedAdvancePayment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedAdvancePaymentList;
  RegisterChildNode('SpecifiedAdvancePayment', TXMLAdvancePaymentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimatePayeeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLHeaderTradeSettlementType.GetDuePayableAmount: IXMLDuePayableAmountList;
begin
  Result := FDuePayableAmount;
end;

function TXMLHeaderTradeSettlementType.GetCreditorReferenceTypeCode: IXMLCreditorReferenceTypeCodeList;
begin
  Result := FCreditorReferenceTypeCode;
end;

function TXMLHeaderTradeSettlementType.GetCreditorReferenceType: IXMLCreditorReferenceTypeList;
begin
  Result := FCreditorReferenceType;
end;

function TXMLHeaderTradeSettlementType.GetCreditorReferenceIssuerID: IXMLCreditorReferenceIssuerIDList;
begin
  Result := FCreditorReferenceIssuerID;
end;

function TXMLHeaderTradeSettlementType.GetHasCreditorReferenceID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CreditorReferenceID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetCreditorReferenceID: IXMLIDType;
begin
  Result := (ChildNodesNS['CreditorReferenceID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLHeaderTradeSettlementType.GetPaymentReference: IXMLPaymentReferenceList;
begin
  Result := FPaymentReference;
end;

function TXMLHeaderTradeSettlementType.GetHasTaxCurrencyCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TaxCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetTaxCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['TaxCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLHeaderTradeSettlementType.GetHasInvoiceCurrencyCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoiceCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['InvoiceCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLHeaderTradeSettlementType.GetHasPaymentCurrencyCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetPaymentCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['PaymentCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLHeaderTradeSettlementType.GetHasInvoiceIssuerReference: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceIssuerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoiceIssuerReference: IXMLTextType;
begin
  Result := (ChildNodesNS['InvoiceIssuerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLHeaderTradeSettlementType.GetHasInvoiceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoiceDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['InvoiceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLHeaderTradeSettlementType.GetNextInvoiceDateTime: IXMLNextInvoiceDateTimeList;
begin
  Result := FNextInvoiceDateTime;
end;

function TXMLHeaderTradeSettlementType.GetHasCreditReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CreditReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetCreditReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CreditReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLHeaderTradeSettlementType.GetCreditReason: IXMLCreditReasonList;
begin
  Result := FCreditReason;
end;

function TXMLHeaderTradeSettlementType.GetHasInvoicerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoicerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoicerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['InvoicerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeSettlementType.GetHasInvoiceeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoiceeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['InvoiceeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeSettlementType.GetHasPayeeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayeeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetPayeeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['PayeeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeSettlementType.GetHasPayerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetPayerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['PayerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLHeaderTradeSettlementType.GetHasTaxApplicableTradeCurrencyExchange: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TaxApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetTaxApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
begin
  Result := (ChildNodesNS['TaxApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCurrencyExchangeType);
end;

function TXMLHeaderTradeSettlementType.GetHasInvoiceApplicableTradeCurrencyExchange: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetInvoiceApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
begin
  Result := (ChildNodesNS['InvoiceApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCurrencyExchangeType);
end;

function TXMLHeaderTradeSettlementType.GetHasPaymentApplicableTradeCurrencyExchange: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetPaymentApplicableTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
begin
  Result := (ChildNodesNS['PaymentApplicableTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCurrencyExchangeType);
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedTradeSettlementPaymentMeans: IXMLSpecifiedTradeSettlementPaymentMeansList;
begin
  Result := FSpecifiedTradeSettlementPaymentMeans;
end;

function TXMLHeaderTradeSettlementType.GetApplicableTradeTax: IXMLApplicableTradeTaxList;
begin
  Result := FApplicableTradeTax;
end;

function TXMLHeaderTradeSettlementType.GetHasBillingSpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BillingSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['BillingSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
begin
  Result := FSpecifiedTradeAllowanceCharge;
end;

function TXMLHeaderTradeSettlementType.GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
begin
  Result := FSubtotalCalculatedTradeTax;
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
begin
  Result := FSpecifiedLogisticsServiceCharge;
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
begin
  Result := FSpecifiedTradePaymentTerms;
end;

function TXMLHeaderTradeSettlementType.GetHasSpecifiedTradeSettlementHeaderMonetarySummation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedTradeSettlementHeaderMonetarySummation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetSpecifiedTradeSettlementHeaderMonetarySummation: IXMLTradeSettlementHeaderMonetarySummationType;
begin
  Result := (ChildNodesNS['SpecifiedTradeSettlementHeaderMonetarySummation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeSettlementHeaderMonetarySummationType);
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
begin
  Result := FSpecifiedFinancialAdjustment;
end;

function TXMLHeaderTradeSettlementType.GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
begin
  Result := FInvoiceReferencedDocument;
end;

function TXMLHeaderTradeSettlementType.GetHasProFormaInvoiceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProFormaInvoiceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetProFormaInvoiceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ProFormaInvoiceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeSettlementType.GetHasLetterOfCreditReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LetterOfCreditReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetLetterOfCreditReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['LetterOfCreditReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLHeaderTradeSettlementType.GetFactoringAgreementReferencedDocument: IXMLFactoringAgreementReferencedDocumentList;
begin
  Result := FFactoringAgreementReferencedDocument;
end;

function TXMLHeaderTradeSettlementType.GetFactoringListReferencedDocument: IXMLFactoringListReferencedDocumentList;
begin
  Result := FFactoringListReferencedDocument;
end;

function TXMLHeaderTradeSettlementType.GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
begin
  Result := FPayableSpecifiedTradeAccountingAccount;
end;

function TXMLHeaderTradeSettlementType.GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
begin
  Result := FReceivableSpecifiedTradeAccountingAccount;
end;

function TXMLHeaderTradeSettlementType.GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
begin
  Result := FPurchaseSpecifiedTradeAccountingAccount;
end;

function TXMLHeaderTradeSettlementType.GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
begin
  Result := FSalesSpecifiedTradeAccountingAccount;
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedTradeSettlementFinancialCard: IXMLSpecifiedTradeSettlementFinancialCardList;
begin
  Result := FSpecifiedTradeSettlementFinancialCard;
end;

function TXMLHeaderTradeSettlementType.GetSpecifiedAdvancePayment: IXMLSpecifiedAdvancePaymentList;
begin
  Result := FSpecifiedAdvancePayment;
end;

function TXMLHeaderTradeSettlementType.GetHasUltimatePayeeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UltimatePayeeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLHeaderTradeSettlementType.GetUltimatePayeeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['UltimatePayeeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSpecifiedAdvancePaymentListEnumerator.GetCurrent: IXMLAdvancePaymentType;
begin
  Result := (inherited GetCurrent as IXMLAdvancePaymentType);
end;

procedure TXMLSpecifiedAdvancePaymentList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedAdvancePayment', TXMLAdvancePaymentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedAdvancePayment';
  ItemInterface := IXMLAdvancePaymentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedAdvancePaymentList.GetEnumerator: IXMLSpecifiedAdvancePaymentListEnumerator;
begin
  Result := TXMLSpecifiedAdvancePaymentListEnumerator.Create(Self);
end;

function TXMLSpecifiedAdvancePaymentList.Get_SpecifiedAdvancePayment(Index: Integer): IXMLAdvancePaymentType;
begin
  Result := (List[Index] as IXMLAdvancePaymentType);
end;

function TXMLSpecifiedAdvancePaymentList.Add: IXMLAdvancePaymentType;
begin
  Result := (AddItem(-1) as IXMLAdvancePaymentType);
end;

function TXMLSpecifiedAdvancePaymentList.Insert(Index: Integer): IXMLAdvancePaymentType;
begin
  Result := (AddItem(Index) as IXMLAdvancePaymentType);
end;

function TXMLSpecifiedTradeSettlementFinancialCardListEnumerator.GetCurrent: IXMLTradeSettlementFinancialCardType;
begin
  Result := (inherited GetCurrent as IXMLTradeSettlementFinancialCardType);
end;

procedure TXMLSpecifiedTradeSettlementFinancialCardList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTradeSettlementFinancialCard', TXMLTradeSettlementFinancialCardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTradeSettlementFinancialCard';
  ItemInterface := IXMLTradeSettlementFinancialCardType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTradeSettlementFinancialCardList.GetEnumerator: IXMLSpecifiedTradeSettlementFinancialCardListEnumerator;
begin
  Result := TXMLSpecifiedTradeSettlementFinancialCardListEnumerator.Create(Self);
end;

function TXMLSpecifiedTradeSettlementFinancialCardList.Get_SpecifiedTradeSettlementFinancialCard(Index: Integer): IXMLTradeSettlementFinancialCardType;
begin
  Result := (List[Index] as IXMLTradeSettlementFinancialCardType);
end;

function TXMLSpecifiedTradeSettlementFinancialCardList.Add: IXMLTradeSettlementFinancialCardType;
begin
  Result := (AddItem(-1) as IXMLTradeSettlementFinancialCardType);
end;

function TXMLSpecifiedTradeSettlementFinancialCardList.Insert(Index: Integer): IXMLTradeSettlementFinancialCardType;
begin
  Result := (AddItem(Index) as IXMLTradeSettlementFinancialCardType);
end;

function TXMLFactoringListReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLFactoringListReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('FactoringListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'FactoringListReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLFactoringListReferencedDocumentList.GetEnumerator: IXMLFactoringListReferencedDocumentListEnumerator;
begin
  Result := TXMLFactoringListReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLFactoringListReferencedDocumentList.Get_FactoringListReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLFactoringListReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLFactoringListReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLFactoringAgreementReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLFactoringAgreementReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('FactoringAgreementReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'FactoringAgreementReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLFactoringAgreementReferencedDocumentList.GetEnumerator: IXMLFactoringAgreementReferencedDocumentListEnumerator;
begin
  Result := TXMLFactoringAgreementReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLFactoringAgreementReferencedDocumentList.Get_FactoringAgreementReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLFactoringAgreementReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLFactoringAgreementReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLSpecifiedTradeSettlementPaymentMeansListEnumerator.GetCurrent: IXMLTradeSettlementPaymentMeansType;
begin
  Result := (inherited GetCurrent as IXMLTradeSettlementPaymentMeansType);
end;

procedure TXMLSpecifiedTradeSettlementPaymentMeansList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTradeSettlementPaymentMeans', TXMLTradeSettlementPaymentMeansType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTradeSettlementPaymentMeans';
  ItemInterface := IXMLTradeSettlementPaymentMeansType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTradeSettlementPaymentMeansList.GetEnumerator: IXMLSpecifiedTradeSettlementPaymentMeansListEnumerator;
begin
  Result := TXMLSpecifiedTradeSettlementPaymentMeansListEnumerator.Create(Self);
end;

function TXMLSpecifiedTradeSettlementPaymentMeansList.Get_SpecifiedTradeSettlementPaymentMeans(Index: Integer): IXMLTradeSettlementPaymentMeansType;
begin
  Result := (List[Index] as IXMLTradeSettlementPaymentMeansType);
end;

function TXMLSpecifiedTradeSettlementPaymentMeansList.Add: IXMLTradeSettlementPaymentMeansType;
begin
  Result := (AddItem(-1) as IXMLTradeSettlementPaymentMeansType);
end;

function TXMLSpecifiedTradeSettlementPaymentMeansList.Insert(Index: Integer): IXMLTradeSettlementPaymentMeansType;
begin
  Result := (AddItem(Index) as IXMLTradeSettlementPaymentMeansType);
end;

function TXMLCreditReasonListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCreditReasonList.AfterConstruction;
begin
  RegisterChildNode('CreditReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditReason';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditReasonList.GetEnumerator: IXMLCreditReasonListEnumerator;
begin
  Result := TXMLCreditReasonListEnumerator.Create(Self);
end;

function TXMLCreditReasonList.Get_CreditReason(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCreditReasonList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCreditReasonList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLNextInvoiceDateTimeListEnumerator.GetCurrent: IXMLDateTimeType;
begin
  Result := (inherited GetCurrent as IXMLDateTimeType);
end;

procedure TXMLNextInvoiceDateTimeList.AfterConstruction;
begin
  RegisterChildNode('NextInvoiceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NextInvoiceDateTime';
  ItemInterface := IXMLDateTimeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNextInvoiceDateTimeList.GetEnumerator: IXMLNextInvoiceDateTimeListEnumerator;
begin
  Result := TXMLNextInvoiceDateTimeListEnumerator.Create(Self);
end;

function TXMLNextInvoiceDateTimeList.Get_NextInvoiceDateTime(Index: Integer): IXMLDateTimeType;
begin
  Result := (List[Index] as IXMLDateTimeType);
end;

function TXMLNextInvoiceDateTimeList.Add: IXMLDateTimeType;
begin
  Result := (AddItem(-1) as IXMLDateTimeType);
end;

function TXMLNextInvoiceDateTimeList.Insert(Index: Integer): IXMLDateTimeType;
begin
  Result := (AddItem(Index) as IXMLDateTimeType);
end;

function TXMLCreditorReferenceIssuerIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLCreditorReferenceIssuerIDList.AfterConstruction;
begin
  RegisterChildNode('CreditorReferenceIssuerID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditorReferenceIssuerID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditorReferenceIssuerIDList.GetEnumerator: IXMLCreditorReferenceIssuerIDListEnumerator;
begin
  Result := TXMLCreditorReferenceIssuerIDListEnumerator.Create(Self);
end;

function TXMLCreditorReferenceIssuerIDList.Get_CreditorReferenceIssuerID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLCreditorReferenceIssuerIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLCreditorReferenceIssuerIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLCreditorReferenceTypeListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCreditorReferenceTypeList.AfterConstruction;
begin
  RegisterChildNode('CreditorReferenceType', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditorReferenceType';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditorReferenceTypeList.GetEnumerator: IXMLCreditorReferenceTypeListEnumerator;
begin
  Result := TXMLCreditorReferenceTypeListEnumerator.Create(Self);
end;

function TXMLCreditorReferenceTypeList.Get_CreditorReferenceType(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCreditorReferenceTypeList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCreditorReferenceTypeList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLCreditorReferenceTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLCreditorReferenceTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('CreditorReferenceTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditorReferenceTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditorReferenceTypeCodeList.GetEnumerator: IXMLCreditorReferenceTypeCodeListEnumerator;
begin
  Result := TXMLCreditorReferenceTypeCodeListEnumerator.Create(Self);
end;

function TXMLCreditorReferenceTypeCodeList.Get_CreditorReferenceTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLCreditorReferenceTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLCreditorReferenceTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLLegalOrganizationTypeEnumerator.GetCurrent: IXMLLegalRegistrationType;
begin
  Result := (inherited GetCurrent as IXMLLegalRegistrationType);
end;

procedure TXMLLegalOrganizationType.AfterConstruction;
begin
  RegisterChildNode('LegalClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TradingBusinessName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostalTradeAddress', TXMLTradeAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AuthorizedLegalRegistration', TXMLLegalRegistrationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AuthorizedLegalRegistration';
  ItemInterface := IXMLLegalRegistrationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLegalOrganizationType.GetEnumerator: IXMLLegalOrganizationTypeEnumerator;
begin
  Result := TXMLLegalOrganizationTypeEnumerator.Create(Self);
end;

function TXMLLegalOrganizationType.Get_AuthorizedLegalRegistration(Index: Integer): IXMLLegalRegistrationType;
begin
  Result := (List[Index] as IXMLLegalRegistrationType);
end;

function TXMLLegalOrganizationType.Add: IXMLLegalRegistrationType;
begin
  Result := (AddItem(-1) as IXMLLegalRegistrationType);
end;

function TXMLLegalOrganizationType.Insert(Index: Integer): IXMLLegalRegistrationType;
begin
  Result := (AddItem(Index) as IXMLLegalRegistrationType);
end;

function TXMLLegalOrganizationType.GetHasLegalClassificationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LegalClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalOrganizationType.GetLegalClassificationCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['LegalClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLegalOrganizationType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalOrganizationType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLegalOrganizationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalOrganizationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLegalOrganizationType.GetHasTradingBusinessName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TradingBusinessName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalOrganizationType.GetTradingBusinessName: IXMLTextType;
begin
  Result := (ChildNodesNS['TradingBusinessName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLegalOrganizationType.GetHasPostalTradeAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalOrganizationType.GetPostalTradeAddress: IXMLTradeAddressType;
begin
  Result := (ChildNodesNS['PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAddressType);
end;

procedure TXMLLegalRegistrationType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLegalRegistrationType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalRegistrationType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLegalRegistrationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLegalRegistrationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLLineTradeAgreementType.AfterConstruction;
begin
  RegisterChildNode('BuyerReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerRequisitionerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBuyerRequisitionerTradeParty := CreateCollection(TXMLBuyerRequisitionerTradePartyList, IXMLTradePartyType, 'BuyerRequisitionerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBuyerRequisitionerTradePartyList;
  RegisterChildNode('BuyerRequisitionerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeDeliveryTerms', TXMLTradeDeliveryTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('QuotationReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DemandForecastReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PromotionalDealReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequisitionerReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequisitionerReferencedDocument := CreateCollection(TXMLRequisitionerReferencedDocumentList, IXMLReferencedDocumentType, 'RequisitionerReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequisitionerReferencedDocumentList;
  RegisterChildNode('RequisitionerReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemSellerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemBuyerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSpecifiedMarketplace', TXMLSpecifiedMarketplaceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimateCustomerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUltimateCustomerOrderReferencedDocument := CreateCollection(TXMLUltimateCustomerOrderReferencedDocumentList, IXMLReferencedDocumentType, 'UltimateCustomerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUltimateCustomerOrderReferencedDocumentList;
  RegisterChildNode('UltimateCustomerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLineTradeAgreementType.GetHasBuyerReference: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetBuyerReference: IXMLTextType;
begin
  Result := (ChildNodesNS['BuyerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLineTradeAgreementType.GetBuyerRequisitionerTradeParty: IXMLBuyerRequisitionerTradePartyList;
begin
  Result := FBuyerRequisitionerTradeParty;
end;

function TXMLLineTradeAgreementType.GetHasApplicableTradeDeliveryTerms: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradeDeliveryTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetApplicableTradeDeliveryTerms: IXMLTradeDeliveryTermsType;
begin
  Result := (ChildNodesNS['ApplicableTradeDeliveryTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeDeliveryTermsType);
end;

function TXMLLineTradeAgreementType.GetHasSellerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetHasBuyerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetHasQuotationReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('QuotationReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetQuotationReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['QuotationReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetHasContractReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetContractReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetHasDemandForecastReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DemandForecastReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetDemandForecastReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DemandForecastReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetHasPromotionalDealReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PromotionalDealReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetPromotionalDealReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['PromotionalDealReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeAgreementType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLLineTradeAgreementType.GetHasGrossPriceProductTradePrice: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GrossPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetGrossPriceProductTradePrice: IXMLTradePriceType;
begin
  Result := (ChildNodesNS['GrossPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePriceType);
end;

function TXMLLineTradeAgreementType.GetHasNetPriceProductTradePrice: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NetPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetNetPriceProductTradePrice: IXMLTradePriceType;
begin
  Result := (ChildNodesNS['NetPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePriceType);
end;

function TXMLLineTradeAgreementType.GetRequisitionerReferencedDocument: IXMLRequisitionerReferencedDocumentList;
begin
  Result := FRequisitionerReferencedDocument;
end;

function TXMLLineTradeAgreementType.GetHasItemSellerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ItemSellerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetItemSellerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ItemSellerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLLineTradeAgreementType.GetHasItemBuyerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ItemBuyerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetItemBuyerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ItemBuyerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLLineTradeAgreementType.GetHasIncludedSpecifiedMarketplace: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IncludedSpecifiedMarketplace', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeAgreementType.GetIncludedSpecifiedMarketplace: IXMLSpecifiedMarketplaceType;
begin
  Result := (ChildNodesNS['IncludedSpecifiedMarketplace', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedMarketplaceType);
end;

function TXMLLineTradeAgreementType.GetUltimateCustomerOrderReferencedDocument: IXMLUltimateCustomerOrderReferencedDocumentList;
begin
  Result := FUltimateCustomerOrderReferencedDocument;
end;

function TXMLUltimateCustomerOrderReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLUltimateCustomerOrderReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('UltimateCustomerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UltimateCustomerOrderReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUltimateCustomerOrderReferencedDocumentList.GetEnumerator: IXMLUltimateCustomerOrderReferencedDocumentListEnumerator;
begin
  Result := TXMLUltimateCustomerOrderReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLUltimateCustomerOrderReferencedDocumentList.Get_UltimateCustomerOrderReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLUltimateCustomerOrderReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLUltimateCustomerOrderReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLRequisitionerReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLRequisitionerReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('RequisitionerReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RequisitionerReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRequisitionerReferencedDocumentList.GetEnumerator: IXMLRequisitionerReferencedDocumentListEnumerator;
begin
  Result := TXMLRequisitionerReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLRequisitionerReferencedDocumentList.Get_RequisitionerReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLRequisitionerReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLRequisitionerReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLBuyerRequisitionerTradePartyListEnumerator.GetCurrent: IXMLTradePartyType;
begin
  Result := (inherited GetCurrent as IXMLTradePartyType);
end;

procedure TXMLBuyerRequisitionerTradePartyList.AfterConstruction;
begin
  RegisterChildNode('BuyerRequisitionerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BuyerRequisitionerTradeParty';
  ItemInterface := IXMLTradePartyType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBuyerRequisitionerTradePartyList.GetEnumerator: IXMLBuyerRequisitionerTradePartyListEnumerator;
begin
  Result := TXMLBuyerRequisitionerTradePartyListEnumerator.Create(Self);
end;

function TXMLBuyerRequisitionerTradePartyList.Get_BuyerRequisitionerTradeParty(Index: Integer): IXMLTradePartyType;
begin
  Result := (List[Index] as IXMLTradePartyType);
end;

function TXMLBuyerRequisitionerTradePartyList.Add: IXMLTradePartyType;
begin
  Result := (AddItem(-1) as IXMLTradePartyType);
end;

function TXMLBuyerRequisitionerTradePartyList.Insert(Index: Integer): IXMLTradePartyType;
begin
  Result := (AddItem(Index) as IXMLTradePartyType);
end;

procedure TXMLLineTradeDeliveryType.AfterConstruction;
begin
  RegisterChildNode('RequestedQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceivedQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BilledQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeFreeQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackageQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PerPackageUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TheoreticalWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DespatchedQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedDeliveryAdjustment', TXMLDeliveryAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedDeliveryAdjustment := CreateCollection(TXMLSpecifiedDeliveryAdjustmentList, IXMLDeliveryAdjustmentType, 'SpecifiedDeliveryAdjustment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedDeliveryAdjustmentList;
  RegisterChildNode('SpecifiedDeliveryAdjustment', TXMLDeliveryAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSupplyChainPackaging', TXMLSupplyChainPackagingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedSupplyChainPackaging := CreateCollection(TXMLIncludedSupplyChainPackagingList, IXMLSupplyChainPackagingType, 'IncludedSupplyChainPackaging', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedSupplyChainPackagingList;
  RegisterChildNode('IncludedSupplyChainPackaging', TXMLSupplyChainPackagingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RelatedSupplyChainConsignment', TXMLSupplyChainConsignmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ShipToTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimateShipToTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ShipFromTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDespatchSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualPickUpSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestedDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualReceiptSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DespatchAdviceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceivingAdviceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeliveryNoteReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConsumptionReportReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackingListReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLineTradeDeliveryType.GetHasRequestedQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RequestedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetRequestedQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['RequestedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasReceivedQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReceivedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetReceivedQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ReceivedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasBilledQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BilledQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetBilledQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['BilledQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasChargeFreeQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeFreeQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetChargeFreeQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ChargeFreeQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasPackageQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetPackageQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasProductUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProductUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetProductUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ProductUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasPerPackageUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PerPackageUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetPerPackageUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['PerPackageUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetHasNetWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetNetWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLLineTradeDeliveryType.GetHasGrossWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLLineTradeDeliveryType.GetHasTheoreticalWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TheoreticalWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetTheoreticalWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['TheoreticalWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLLineTradeDeliveryType.GetHasDespatchedQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DespatchedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetDespatchedQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['DespatchedQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLLineTradeDeliveryType.GetSpecifiedDeliveryAdjustment: IXMLSpecifiedDeliveryAdjustmentList;
begin
  Result := FSpecifiedDeliveryAdjustment;
end;

function TXMLLineTradeDeliveryType.GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
begin
  Result := FIncludedSupplyChainPackaging;
end;

function TXMLLineTradeDeliveryType.GetHasRelatedSupplyChainConsignment: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RelatedSupplyChainConsignment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetRelatedSupplyChainConsignment: IXMLSupplyChainConsignmentType;
begin
  Result := (ChildNodesNS['RelatedSupplyChainConsignment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainConsignmentType);
end;

function TXMLLineTradeDeliveryType.GetHasShipToTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetShipToTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLLineTradeDeliveryType.GetHasUltimateShipToTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UltimateShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetUltimateShipToTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['UltimateShipToTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLLineTradeDeliveryType.GetHasShipFromTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ShipFromTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetShipFromTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ShipFromTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLLineTradeDeliveryType.GetHasActualDespatchSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDespatchSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetActualDespatchSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualDespatchSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLLineTradeDeliveryType.GetHasActualPickUpSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualPickUpSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetActualPickUpSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualPickUpSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLLineTradeDeliveryType.GetHasRequestedDeliverySupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RequestedDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetRequestedDeliverySupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['RequestedDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLLineTradeDeliveryType.GetHasActualDeliverySupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetActualDeliverySupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLLineTradeDeliveryType.GetHasActualReceiptSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualReceiptSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetActualReceiptSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ActualReceiptSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLLineTradeDeliveryType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLLineTradeDeliveryType.GetHasDespatchAdviceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DespatchAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetDespatchAdviceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DespatchAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeDeliveryType.GetHasReceivingAdviceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReceivingAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetReceivingAdviceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ReceivingAdviceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeDeliveryType.GetHasDeliveryNoteReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeliveryNoteReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetDeliveryNoteReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['DeliveryNoteReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeDeliveryType.GetHasConsumptionReportReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConsumptionReportReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetConsumptionReportReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['ConsumptionReportReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLLineTradeDeliveryType.GetHasPackingListReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackingListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeDeliveryType.GetPackingListReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['PackingListReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLSpecifiedDeliveryAdjustmentListEnumerator.GetCurrent: IXMLDeliveryAdjustmentType;
begin
  Result := (inherited GetCurrent as IXMLDeliveryAdjustmentType);
end;

procedure TXMLSpecifiedDeliveryAdjustmentList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedDeliveryAdjustment', TXMLDeliveryAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedDeliveryAdjustment';
  ItemInterface := IXMLDeliveryAdjustmentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedDeliveryAdjustmentList.GetEnumerator: IXMLSpecifiedDeliveryAdjustmentListEnumerator;
begin
  Result := TXMLSpecifiedDeliveryAdjustmentListEnumerator.Create(Self);
end;

function TXMLSpecifiedDeliveryAdjustmentList.Get_SpecifiedDeliveryAdjustment(Index: Integer): IXMLDeliveryAdjustmentType;
begin
  Result := (List[Index] as IXMLDeliveryAdjustmentType);
end;

function TXMLSpecifiedDeliveryAdjustmentList.Add: IXMLDeliveryAdjustmentType;
begin
  Result := (AddItem(-1) as IXMLDeliveryAdjustmentType);
end;

function TXMLSpecifiedDeliveryAdjustmentList.Insert(Index: Integer): IXMLDeliveryAdjustmentType;
begin
  Result := (AddItem(Index) as IXMLDeliveryAdjustmentType);
end;

procedure TXMLLineTradeSettlementType.AfterConstruction;
begin
  RegisterChildNode('PaymentReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPaymentReference := CreateCollection(TXMLPaymentReferenceList, IXMLTextType, 'PaymentReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPaymentReferenceList;
  RegisterChildNode('PaymentReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceIssuerReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalAdjustmentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DiscountIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableTradeTax := CreateCollection(TXMLApplicableTradeTaxList, IXMLTradeTaxType, 'ApplicableTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableTradeTaxList;
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BillingSpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeAllowanceCharge := CreateCollection(TXMLSpecifiedTradeAllowanceChargeList, IXMLTradeAllowanceChargeType, 'SpecifiedTradeAllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeAllowanceChargeList;
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubtotalCalculatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubtotalCalculatedTradeTax := CreateCollection(TXMLSubtotalCalculatedTradeTaxList, IXMLTradeTaxType, 'SubtotalCalculatedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubtotalCalculatedTradeTaxList;
  RegisterChildNode('SubtotalCalculatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLogisticsServiceCharge', TXMLLogisticsServiceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedLogisticsServiceCharge := CreateCollection(TXMLSpecifiedLogisticsServiceChargeList, IXMLLogisticsServiceChargeType, 'SpecifiedLogisticsServiceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedLogisticsServiceChargeList;
  RegisterChildNode('SpecifiedLogisticsServiceCharge', TXMLLogisticsServiceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradePaymentTerms', TXMLTradePaymentTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradePaymentTerms := CreateCollection(TXMLSpecifiedTradePaymentTermsList, IXMLTradePaymentTermsType, 'SpecifiedTradePaymentTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradePaymentTermsList;
  RegisterChildNode('SpecifiedTradePaymentTerms', TXMLTradePaymentTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeSettlementLineMonetarySummation', TXMLTradeSettlementLineMonetarySummationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedFinancialAdjustment := CreateCollection(TXMLSpecifiedFinancialAdjustmentList, IXMLFinancialAdjustmentType, 'SpecifiedFinancialAdjustment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedFinancialAdjustmentList;
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInvoiceReferencedDocument := CreateCollection(TXMLInvoiceReferencedDocumentList, IXMLReferencedDocumentType, 'InvoiceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInvoiceReferencedDocumentList;
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPayableSpecifiedTradeAccountingAccount := CreateCollection(TXMLPayableSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'PayableSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPayableSpecifiedTradeAccountingAccountList;
  RegisterChildNode('PayableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceivableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReceivableSpecifiedTradeAccountingAccount := CreateCollection(TXMLReceivableSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'ReceivableSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReceivableSpecifiedTradeAccountingAccountList;
  RegisterChildNode('ReceivableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PurchaseSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPurchaseSpecifiedTradeAccountingAccount := CreateCollection(TXMLPurchaseSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'PurchaseSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPurchaseSpecifiedTradeAccountingAccountList;
  RegisterChildNode('PurchaseSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SalesSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSalesSpecifiedTradeAccountingAccount := CreateCollection(TXMLSalesSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'SalesSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSalesSpecifiedTradeAccountingAccountList;
  RegisterChildNode('SalesSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeSettlementFinancialCard', TXMLTradeSettlementFinancialCardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLineTradeSettlementType.GetPaymentReference: IXMLPaymentReferenceList;
begin
  Result := FPaymentReference;
end;

function TXMLLineTradeSettlementType.GetHasInvoiceIssuerReference: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceIssuerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetInvoiceIssuerReference: IXMLTextType;
begin
  Result := (ChildNodesNS['InvoiceIssuerReference', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLineTradeSettlementType.GetHasTotalAdjustmentAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetTotalAdjustmentAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['TotalAdjustmentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLLineTradeSettlementType.GetHasDiscountIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DiscountIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetDiscountIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['DiscountIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLLineTradeSettlementType.GetHasInvoiceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InvoiceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetInvoiceDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['InvoiceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLLineTradeSettlementType.GetApplicableTradeTax: IXMLApplicableTradeTaxList;
begin
  Result := FApplicableTradeTax;
end;

function TXMLLineTradeSettlementType.GetHasBillingSpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BillingSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetBillingSpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['BillingSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLLineTradeSettlementType.GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
begin
  Result := FSpecifiedTradeAllowanceCharge;
end;

function TXMLLineTradeSettlementType.GetSubtotalCalculatedTradeTax: IXMLSubtotalCalculatedTradeTaxList;
begin
  Result := FSubtotalCalculatedTradeTax;
end;

function TXMLLineTradeSettlementType.GetSpecifiedLogisticsServiceCharge: IXMLSpecifiedLogisticsServiceChargeList;
begin
  Result := FSpecifiedLogisticsServiceCharge;
end;

function TXMLLineTradeSettlementType.GetSpecifiedTradePaymentTerms: IXMLSpecifiedTradePaymentTermsList;
begin
  Result := FSpecifiedTradePaymentTerms;
end;

function TXMLLineTradeSettlementType.GetHasSpecifiedTradeSettlementLineMonetarySummation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedTradeSettlementLineMonetarySummation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetSpecifiedTradeSettlementLineMonetarySummation: IXMLTradeSettlementLineMonetarySummationType;
begin
  Result := (ChildNodesNS['SpecifiedTradeSettlementLineMonetarySummation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeSettlementLineMonetarySummationType);
end;

function TXMLLineTradeSettlementType.GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
begin
  Result := FSpecifiedFinancialAdjustment;
end;

function TXMLLineTradeSettlementType.GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
begin
  Result := FInvoiceReferencedDocument;
end;

function TXMLLineTradeSettlementType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLLineTradeSettlementType.GetPayableSpecifiedTradeAccountingAccount: IXMLPayableSpecifiedTradeAccountingAccountList;
begin
  Result := FPayableSpecifiedTradeAccountingAccount;
end;

function TXMLLineTradeSettlementType.GetReceivableSpecifiedTradeAccountingAccount: IXMLReceivableSpecifiedTradeAccountingAccountList;
begin
  Result := FReceivableSpecifiedTradeAccountingAccount;
end;

function TXMLLineTradeSettlementType.GetPurchaseSpecifiedTradeAccountingAccount: IXMLPurchaseSpecifiedTradeAccountingAccountList;
begin
  Result := FPurchaseSpecifiedTradeAccountingAccount;
end;

function TXMLLineTradeSettlementType.GetSalesSpecifiedTradeAccountingAccount: IXMLSalesSpecifiedTradeAccountingAccountList;
begin
  Result := FSalesSpecifiedTradeAccountingAccount;
end;

function TXMLLineTradeSettlementType.GetHasSpecifiedTradeSettlementFinancialCard: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedTradeSettlementFinancialCard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLineTradeSettlementType.GetSpecifiedTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;
begin
  Result := (ChildNodesNS['SpecifiedTradeSettlementFinancialCard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeSettlementFinancialCardType);
end;

function TXMLSalesSpecifiedTradeAccountingAccountListEnumerator.GetCurrent: IXMLTradeAccountingAccountType;
begin
  Result := (inherited GetCurrent as IXMLTradeAccountingAccountType);
end;

procedure TXMLSalesSpecifiedTradeAccountingAccountList.AfterConstruction;
begin
  RegisterChildNode('SalesSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SalesSpecifiedTradeAccountingAccount';
  ItemInterface := IXMLTradeAccountingAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSalesSpecifiedTradeAccountingAccountList.GetEnumerator: IXMLSalesSpecifiedTradeAccountingAccountListEnumerator;
begin
  Result := TXMLSalesSpecifiedTradeAccountingAccountListEnumerator.Create(Self);
end;

function TXMLSalesSpecifiedTradeAccountingAccountList.Get_SalesSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (List[Index] as IXMLTradeAccountingAccountType);
end;

function TXMLSalesSpecifiedTradeAccountingAccountList.Add: IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(-1) as IXMLTradeAccountingAccountType);
end;

function TXMLSalesSpecifiedTradeAccountingAccountList.Insert(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(Index) as IXMLTradeAccountingAccountType);
end;

function TXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator.GetCurrent: IXMLTradeAccountingAccountType;
begin
  Result := (inherited GetCurrent as IXMLTradeAccountingAccountType);
end;

procedure TXMLPurchaseSpecifiedTradeAccountingAccountList.AfterConstruction;
begin
  RegisterChildNode('PurchaseSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PurchaseSpecifiedTradeAccountingAccount';
  ItemInterface := IXMLTradeAccountingAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPurchaseSpecifiedTradeAccountingAccountList.GetEnumerator: IXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator;
begin
  Result := TXMLPurchaseSpecifiedTradeAccountingAccountListEnumerator.Create(Self);
end;

function TXMLPurchaseSpecifiedTradeAccountingAccountList.Get_PurchaseSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (List[Index] as IXMLTradeAccountingAccountType);
end;

function TXMLPurchaseSpecifiedTradeAccountingAccountList.Add: IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(-1) as IXMLTradeAccountingAccountType);
end;

function TXMLPurchaseSpecifiedTradeAccountingAccountList.Insert(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(Index) as IXMLTradeAccountingAccountType);
end;

function TXMLReceivableSpecifiedTradeAccountingAccountListEnumerator.GetCurrent: IXMLTradeAccountingAccountType;
begin
  Result := (inherited GetCurrent as IXMLTradeAccountingAccountType);
end;

procedure TXMLReceivableSpecifiedTradeAccountingAccountList.AfterConstruction;
begin
  RegisterChildNode('ReceivableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ReceivableSpecifiedTradeAccountingAccount';
  ItemInterface := IXMLTradeAccountingAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReceivableSpecifiedTradeAccountingAccountList.GetEnumerator: IXMLReceivableSpecifiedTradeAccountingAccountListEnumerator;
begin
  Result := TXMLReceivableSpecifiedTradeAccountingAccountListEnumerator.Create(Self);
end;

function TXMLReceivableSpecifiedTradeAccountingAccountList.Get_ReceivableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (List[Index] as IXMLTradeAccountingAccountType);
end;

function TXMLReceivableSpecifiedTradeAccountingAccountList.Add: IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(-1) as IXMLTradeAccountingAccountType);
end;

function TXMLReceivableSpecifiedTradeAccountingAccountList.Insert(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(Index) as IXMLTradeAccountingAccountType);
end;

function TXMLPayableSpecifiedTradeAccountingAccountListEnumerator.GetCurrent: IXMLTradeAccountingAccountType;
begin
  Result := (inherited GetCurrent as IXMLTradeAccountingAccountType);
end;

procedure TXMLPayableSpecifiedTradeAccountingAccountList.AfterConstruction;
begin
  RegisterChildNode('PayableSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PayableSpecifiedTradeAccountingAccount';
  ItemInterface := IXMLTradeAccountingAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPayableSpecifiedTradeAccountingAccountList.GetEnumerator: IXMLPayableSpecifiedTradeAccountingAccountListEnumerator;
begin
  Result := TXMLPayableSpecifiedTradeAccountingAccountListEnumerator.Create(Self);
end;

function TXMLPayableSpecifiedTradeAccountingAccountList.Get_PayableSpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (List[Index] as IXMLTradeAccountingAccountType);
end;

function TXMLPayableSpecifiedTradeAccountingAccountList.Add: IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(-1) as IXMLTradeAccountingAccountType);
end;

function TXMLPayableSpecifiedTradeAccountingAccountList.Insert(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(Index) as IXMLTradeAccountingAccountType);
end;

function TXMLSpecifiedTradePaymentTermsListEnumerator.GetCurrent: IXMLTradePaymentTermsType;
begin
  Result := (inherited GetCurrent as IXMLTradePaymentTermsType);
end;

procedure TXMLSpecifiedTradePaymentTermsList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTradePaymentTerms', TXMLTradePaymentTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTradePaymentTerms';
  ItemInterface := IXMLTradePaymentTermsType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTradePaymentTermsList.GetEnumerator: IXMLSpecifiedTradePaymentTermsListEnumerator;
begin
  Result := TXMLSpecifiedTradePaymentTermsListEnumerator.Create(Self);
end;

function TXMLSpecifiedTradePaymentTermsList.Get_SpecifiedTradePaymentTerms(Index: Integer): IXMLTradePaymentTermsType;
begin
  Result := (List[Index] as IXMLTradePaymentTermsType);
end;

function TXMLSpecifiedTradePaymentTermsList.Add: IXMLTradePaymentTermsType;
begin
  Result := (AddItem(-1) as IXMLTradePaymentTermsType);
end;

function TXMLSpecifiedTradePaymentTermsList.Insert(Index: Integer): IXMLTradePaymentTermsType;
begin
  Result := (AddItem(Index) as IXMLTradePaymentTermsType);
end;

function TXMLSpecifiedLogisticsServiceChargeListEnumerator.GetCurrent: IXMLLogisticsServiceChargeType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsServiceChargeType);
end;

procedure TXMLSpecifiedLogisticsServiceChargeList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedLogisticsServiceCharge', TXMLLogisticsServiceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedLogisticsServiceCharge';
  ItemInterface := IXMLLogisticsServiceChargeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedLogisticsServiceChargeList.GetEnumerator: IXMLSpecifiedLogisticsServiceChargeListEnumerator;
begin
  Result := TXMLSpecifiedLogisticsServiceChargeListEnumerator.Create(Self);
end;

function TXMLSpecifiedLogisticsServiceChargeList.Get_SpecifiedLogisticsServiceCharge(Index: Integer): IXMLLogisticsServiceChargeType;
begin
  Result := (List[Index] as IXMLLogisticsServiceChargeType);
end;

function TXMLSpecifiedLogisticsServiceChargeList.Add: IXMLLogisticsServiceChargeType;
begin
  Result := (AddItem(-1) as IXMLLogisticsServiceChargeType);
end;

function TXMLSpecifiedLogisticsServiceChargeList.Insert(Index: Integer): IXMLLogisticsServiceChargeType;
begin
  Result := (AddItem(Index) as IXMLLogisticsServiceChargeType);
end;

function TXMLSubtotalCalculatedTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLSubtotalCalculatedTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('SubtotalCalculatedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SubtotalCalculatedTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSubtotalCalculatedTradeTaxList.GetEnumerator: IXMLSubtotalCalculatedTradeTaxListEnumerator;
begin
  Result := TXMLSubtotalCalculatedTradeTaxListEnumerator.Create(Self);
end;

function TXMLSubtotalCalculatedTradeTaxList.Get_SubtotalCalculatedTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLSubtotalCalculatedTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLSubtotalCalculatedTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLApplicableTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLApplicableTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableTradeTaxList.GetEnumerator: IXMLApplicableTradeTaxListEnumerator;
begin
  Result := TXMLApplicableTradeTaxListEnumerator.Create(Self);
end;

function TXMLApplicableTradeTaxList.Get_ApplicableTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLApplicableTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLApplicableTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLPaymentReferenceListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLPaymentReferenceList.AfterConstruction;
begin
  RegisterChildNode('PaymentReference', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PaymentReference';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPaymentReferenceList.GetEnumerator: IXMLPaymentReferenceListEnumerator;
begin
  Result := TXMLPaymentReferenceListEnumerator.Create(Self);
end;

function TXMLPaymentReferenceList.Get_PaymentReference(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLPaymentReferenceList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLPaymentReferenceList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLLogisticsLocationType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLLocationFunctionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryID', TXMLCountryIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountrySubDivisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PhysicalGeographicalCoordinate', TXMLGeographicalCoordinateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostalTradeAddress', TXMLTradeAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubordinateLocation', TXMLSubordinateLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLogisticsLocationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsLocationType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLLogisticsLocationType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetTypeCode: IXMLLocationFunctionCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLocationFunctionCodeType);
end;

function TXMLLogisticsLocationType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLLogisticsLocationType.GetHasCountryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetCountryID: IXMLCountryIDType;
begin
  Result := (ChildNodesNS['CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCountryIDType);
end;

function TXMLLogisticsLocationType.GetHasCountrySubDivisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetCountrySubDivisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsLocationType.GetHasPhysicalGeographicalCoordinate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PhysicalGeographicalCoordinate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;
begin
  Result := (ChildNodesNS['PhysicalGeographicalCoordinate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLGeographicalCoordinateType);
end;

function TXMLLogisticsLocationType.GetHasPostalTradeAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetPostalTradeAddress: IXMLTradeAddressType;
begin
  Result := (ChildNodesNS['PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAddressType);
end;

function TXMLLogisticsLocationType.GetHasSubordinateLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubordinateLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsLocationType.GetSubordinateLocation: IXMLSubordinateLocationType;
begin
  Result := (ChildNodesNS['SubordinateLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSubordinateLocationType);
end;

function TXMLLogisticsSealTypeEnumerator.GetCurrent: IXMLSealConditionCodeType;
begin
  Result := (inherited GetCurrent as IXMLSealConditionCodeType);
end;

procedure TXMLLogisticsSealType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SealingPartyRoleCode', TXMLSealingPartyRoleCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssuingTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConditionCode', TXMLSealConditionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ConditionCode';
  ItemInterface := IXMLSealConditionCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLogisticsSealType.GetEnumerator: IXMLLogisticsSealTypeEnumerator;
begin
  Result := TXMLLogisticsSealTypeEnumerator.Create(Self);
end;

function TXMLLogisticsSealType.Get_ConditionCode(Index: Integer): IXMLSealConditionCodeType;
begin
  Result := (List[Index] as IXMLSealConditionCodeType);
end;

function TXMLLogisticsSealType.Add: IXMLSealConditionCodeType;
begin
  Result := (AddItem(-1) as IXMLSealConditionCodeType);
end;

function TXMLLogisticsSealType.Insert(Index: Integer): IXMLSealConditionCodeType;
begin
  Result := (AddItem(Index) as IXMLSealConditionCodeType);
end;

function TXMLLogisticsSealType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsSealType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsSealType.GetHasMaximumID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsSealType.GetMaximumID: IXMLIDType;
begin
  Result := (ChildNodesNS['MaximumID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsSealType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsSealType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsSealType.GetHasSealingPartyRoleCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SealingPartyRoleCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsSealType.GetSealingPartyRoleCode: IXMLSealingPartyRoleCodeType;
begin
  Result := (ChildNodesNS['SealingPartyRoleCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSealingPartyRoleCodeType);
end;

function TXMLLogisticsSealType.GetHasIssuingTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssuingTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsSealType.GetIssuingTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['IssuingTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

procedure TXMLLogisticsServiceChargeType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLFreightChargeTypeIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentArrangementCode', TXMLTransportServicePaymentArrangementCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TariffClassCode', TXMLFreightChargeTariffClassCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeCategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ServiceCategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DisbursementAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDisbursementAmount := CreateCollection(TXMLDisbursementAmountList, IXMLAmountType, 'DisbursementAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDisbursementAmountList;
  RegisterChildNode('DisbursementAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AppliedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAppliedAmount := CreateCollection(TXMLAppliedAmountList, IXMLAmountType, 'AppliedAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAppliedAmountList;
  RegisterChildNode('AppliedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AllowanceCharge', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayingPartyRoleCode', TXMLChargePayingPartyRoleCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationBasisCode', TXMLLogisticsChargeCalculationBasisCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationBasis', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TransportPaymentMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentPlaceLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AppliedFromLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AppliedToLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AppliedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAppliedTradeTax := CreateCollection(TXMLAppliedTradeTaxList, IXMLTradeTaxType, 'AppliedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAppliedTradeTaxList;
  RegisterChildNode('AppliedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLogisticsServiceChargeType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetID: IXMLFreightChargeTypeIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFreightChargeTypeIDType);
end;

function TXMLLogisticsServiceChargeType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLLogisticsServiceChargeType.GetHasPaymentArrangementCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentArrangementCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetPaymentArrangementCode: IXMLTransportServicePaymentArrangementCodeType;
begin
  Result := (ChildNodesNS['PaymentArrangementCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportServicePaymentArrangementCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasTariffClassCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TariffClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetTariffClassCode: IXMLFreightChargeTariffClassCodeType;
begin
  Result := (ChildNodesNS['TariffClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFreightChargeTariffClassCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasChargeCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetChargeCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ChargeCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasServiceCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ServiceCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetServiceCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ServiceCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsServiceChargeType.GetDisbursementAmount: IXMLDisbursementAmountList;
begin
  Result := FDisbursementAmount;
end;

function TXMLLogisticsServiceChargeType.GetAppliedAmount: IXMLAppliedAmountList;
begin
  Result := FAppliedAmount;
end;

function TXMLLogisticsServiceChargeType.GetHasAllowanceCharge: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetAllowanceCharge: IXMLTextType;
begin
  Result := (ChildNodesNS['AllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsServiceChargeType.GetHasPayingPartyRoleCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayingPartyRoleCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetPayingPartyRoleCode: IXMLChargePayingPartyRoleCodeType;
begin
  Result := (ChildNodesNS['PayingPartyRoleCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLChargePayingPartyRoleCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasCalculationBasisCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationBasisCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetCalculationBasisCode: IXMLLogisticsChargeCalculationBasisCodeType;
begin
  Result := (ChildNodesNS['CalculationBasisCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsChargeCalculationBasisCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasCalculationBasis: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationBasis', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetCalculationBasis: IXMLTextType;
begin
  Result := (ChildNodesNS['CalculationBasis', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsServiceChargeType.GetHasTransportPaymentMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TransportPaymentMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetTransportPaymentMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TransportPaymentMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsServiceChargeType.GetHasPaymentPlaceLogisticsLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentPlaceLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetPaymentPlaceLogisticsLocation: IXMLLogisticsLocationType;
begin
  Result := (ChildNodesNS['PaymentPlaceLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsLocationType);
end;

function TXMLLogisticsServiceChargeType.GetHasAppliedFromLogisticsLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AppliedFromLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetAppliedFromLogisticsLocation: IXMLLogisticsLocationType;
begin
  Result := (ChildNodesNS['AppliedFromLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsLocationType);
end;

function TXMLLogisticsServiceChargeType.GetHasAppliedToLogisticsLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AppliedToLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsServiceChargeType.GetAppliedToLogisticsLocation: IXMLLogisticsLocationType;
begin
  Result := (ChildNodesNS['AppliedToLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsLocationType);
end;

function TXMLLogisticsServiceChargeType.GetAppliedTradeTax: IXMLAppliedTradeTaxList;
begin
  Result := FAppliedTradeTax;
end;

function TXMLAppliedTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLAppliedTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('AppliedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AppliedTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAppliedTradeTaxList.GetEnumerator: IXMLAppliedTradeTaxListEnumerator;
begin
  Result := TXMLAppliedTradeTaxListEnumerator.Create(Self);
end;

function TXMLAppliedTradeTaxList.Get_AppliedTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLAppliedTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLAppliedTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLAppliedAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLAppliedAmountList.AfterConstruction;
begin
  RegisterChildNode('AppliedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AppliedAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAppliedAmountList.GetEnumerator: IXMLAppliedAmountListEnumerator;
begin
  Result := TXMLAppliedAmountListEnumerator.Create(Self);
end;

function TXMLAppliedAmountList.Get_AppliedAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLAppliedAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLAppliedAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLDisbursementAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLDisbursementAmountList.AfterConstruction;
begin
  RegisterChildNode('DisbursementAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DisbursementAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDisbursementAmountList.GetEnumerator: IXMLDisbursementAmountListEnumerator;
begin
  Result := TXMLDisbursementAmountListEnumerator.Create(Self);
end;

function TXMLDisbursementAmountList.Get_DisbursementAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLDisbursementAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLDisbursementAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLLogisticsTransportEquipmentType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LoadingLengthMeasure', TXMLLinearUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLTransportEquipmentCategoryCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CharacteristicCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Characteristic', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UsedCapacityCode', TXMLTransportEquipmentFullnessCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CarrierAssignedBookingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCarrierAssignedBookingID := CreateCollection(TXMLCarrierAssignedBookingIDList, IXMLIDType, 'CarrierAssignedBookingID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCarrierAssignedBookingIDList;
  RegisterChildNode('CarrierAssignedBookingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SealedIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReturnableIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AffixedLogisticsSeal', TXMLLogisticsSealType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAffixedLogisticsSeal := CreateCollection(TXMLAffixedLogisticsSealList, IXMLLogisticsSealType, 'AffixedLogisticsSeal', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAffixedLogisticsSealList;
  RegisterChildNode('AffixedLogisticsSeal', TXMLLogisticsSealType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableNote := CreateCollection(TXMLApplicableNoteList, IXMLNoteType, 'ApplicableNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableNoteList;
  RegisterChildNode('ApplicableNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLogisticsTransportEquipmentType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasLoadingLengthMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LoadingLengthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetLoadingLengthMeasure: IXMLLinearUnitMeasureType;
begin
  Result := (ChildNodesNS['LoadingLengthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLinearUnitMeasureType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetCategoryCode: IXMLTransportEquipmentCategoryCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportEquipmentCategoryCodeType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasCharacteristicCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CharacteristicCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetCharacteristicCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CharacteristicCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasCharacteristic: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Characteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetCharacteristic: IXMLTextType;
begin
  Result := (ChildNodesNS['Characteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasUsedCapacityCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UsedCapacityCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetUsedCapacityCode: IXMLTransportEquipmentFullnessCodeType;
begin
  Result := (ChildNodesNS['UsedCapacityCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportEquipmentFullnessCodeType);
end;

function TXMLLogisticsTransportEquipmentType.GetCarrierAssignedBookingID: IXMLCarrierAssignedBookingIDList;
begin
  Result := FCarrierAssignedBookingID;
end;

function TXMLLogisticsTransportEquipmentType.GetHasSealedIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SealedIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetSealedIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['SealedIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLLogisticsTransportEquipmentType.GetHasReturnableIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReturnableIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetReturnableIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ReturnableIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLLogisticsTransportEquipmentType.GetAffixedLogisticsSeal: IXMLAffixedLogisticsSealList;
begin
  Result := FAffixedLogisticsSeal;
end;

function TXMLLogisticsTransportEquipmentType.GetHasLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportEquipmentType.GetLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['LinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLLogisticsTransportEquipmentType.GetApplicableNote: IXMLApplicableNoteList;
begin
  Result := FApplicableNote;
end;

function TXMLAffixedLogisticsSealListEnumerator.GetCurrent: IXMLLogisticsSealType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsSealType);
end;

procedure TXMLAffixedLogisticsSealList.AfterConstruction;
begin
  RegisterChildNode('AffixedLogisticsSeal', TXMLLogisticsSealType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AffixedLogisticsSeal';
  ItemInterface := IXMLLogisticsSealType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAffixedLogisticsSealList.GetEnumerator: IXMLAffixedLogisticsSealListEnumerator;
begin
  Result := TXMLAffixedLogisticsSealListEnumerator.Create(Self);
end;

function TXMLAffixedLogisticsSealList.Get_AffixedLogisticsSeal(Index: Integer): IXMLLogisticsSealType;
begin
  Result := (List[Index] as IXMLLogisticsSealType);
end;

function TXMLAffixedLogisticsSealList.Add: IXMLLogisticsSealType;
begin
  Result := (AddItem(-1) as IXMLLogisticsSealType);
end;

function TXMLAffixedLogisticsSealList.Insert(Index: Integer): IXMLLogisticsSealType;
begin
  Result := (AddItem(Index) as IXMLLogisticsSealType);
end;

function TXMLCarrierAssignedBookingIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLCarrierAssignedBookingIDList.AfterConstruction;
begin
  RegisterChildNode('CarrierAssignedBookingID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CarrierAssignedBookingID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCarrierAssignedBookingIDList.GetEnumerator: IXMLCarrierAssignedBookingIDListEnumerator;
begin
  Result := TXMLCarrierAssignedBookingIDListEnumerator.Create(Self);
end;

function TXMLCarrierAssignedBookingIDList.Get_CarrierAssignedBookingID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLCarrierAssignedBookingIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLCarrierAssignedBookingIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLLogisticsTransportMeansType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLTransportMeansTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OwnerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLogisticsTransportMeansType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMeansType.GetTypeCode: IXMLTransportMeansTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportMeansTypeCodeType);
end;

function TXMLLogisticsTransportMeansType.GetHas_Type: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMeansType.Get_Type: IXMLTextType;
begin
  Result := (ChildNodesNS['Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMeansType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMeansType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsTransportMeansType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMeansType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMeansType.GetHasOwnerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMeansType.GetOwnerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['OwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

procedure TXMLLogisticsTransportMovementType.AfterConstruction;
begin
  RegisterChildNode('StageCode', TXMLTransportMovementStageCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ModeCode', TXMLTransportModeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Mode', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StatusCode', TXMLStatusCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ServiceCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Service', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Cycle', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UsedLogisticsTransportMeans', TXMLLogisticsTransportMeansType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLLogisticsTransportMovementType.GetHasStageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetStageCode: IXMLTransportMovementStageCodeType;
begin
  Result := (ChildNodesNS['StageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportMovementStageCodeType);
end;

function TXMLLogisticsTransportMovementType.GetHasModeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ModeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetModeCode: IXMLTransportModeCodeType;
begin
  Result := (ChildNodesNS['ModeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportModeCodeType);
end;

function TXMLLogisticsTransportMovementType.GetHasMode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Mode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetMode: IXMLTextType;
begin
  Result := (ChildNodesNS['Mode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMovementType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLLogisticsTransportMovementType.GetHasStatusCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetStatusCode: IXMLStatusCodeType;
begin
  Result := (ChildNodesNS['StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLStatusCodeType);
end;

function TXMLLogisticsTransportMovementType.GetHasServiceCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ServiceCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetServiceCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ServiceCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLLogisticsTransportMovementType.GetHasService: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Service', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetService: IXMLTextType;
begin
  Result := (ChildNodesNS['Service', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMovementType.GetHas_Type: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.Get_Type: IXMLTextType;
begin
  Result := (ChildNodesNS['Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMovementType.GetHasCycle: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Cycle', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetCycle: IXMLTextType;
begin
  Result := (ChildNodesNS['Cycle', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLLogisticsTransportMovementType.GetHasUsedLogisticsTransportMeans: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UsedLogisticsTransportMeans', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLLogisticsTransportMovementType.GetUsedLogisticsTransportMeans: IXMLLogisticsTransportMeansType;
begin
  Result := (ChildNodesNS['UsedLogisticsTransportMeans', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsTransportMeansType);
end;

function TXMLMaterialGoodsCharacteristicTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLMaterialGoodsCharacteristicType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProportionalConstituentPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AbsolutePresenceWeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AbsolutePresenceVolumeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Description';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLMaterialGoodsCharacteristicType.GetEnumerator: IXMLMaterialGoodsCharacteristicTypeEnumerator;
begin
  Result := TXMLMaterialGoodsCharacteristicTypeEnumerator.Create(Self);
end;

function TXMLMaterialGoodsCharacteristicType.Get_Description(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLMaterialGoodsCharacteristicType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLMaterialGoodsCharacteristicType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLMaterialGoodsCharacteristicType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLMaterialGoodsCharacteristicType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLMaterialGoodsCharacteristicType.GetHasProportionalConstituentPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProportionalConstituentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLMaterialGoodsCharacteristicType.GetProportionalConstituentPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['ProportionalConstituentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLMaterialGoodsCharacteristicType.GetHasAbsolutePresenceWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AbsolutePresenceWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLMaterialGoodsCharacteristicType.GetAbsolutePresenceWeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['AbsolutePresenceWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLMaterialGoodsCharacteristicType.GetHasAbsolutePresenceVolumeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AbsolutePresenceVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLMaterialGoodsCharacteristicType.GetAbsolutePresenceVolumeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['AbsolutePresenceVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

procedure TXMLNoteType.AfterConstruction;
begin
  RegisterChildNode('Subject', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FContent := CreateCollection(TXMLContentList, IXMLTextType, 'Content', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLContentList;
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubjectCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubjectCode := CreateCollection(TXMLSubjectCodeList, IXMLCodeType, 'SubjectCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubjectCodeList;
  RegisterChildNode('SubjectCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLNoteType.GetHasSubject: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Subject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLNoteType.GetSubject: IXMLTextType;
begin
  Result := (ChildNodesNS['Subject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLNoteType.GetHasContentCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContentCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLNoteType.GetContentCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContentCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLNoteType.GetContent: IXMLContentList;
begin
  Result := FContent;
end;

function TXMLNoteType.GetSubjectCode: IXMLSubjectCodeList;
begin
  Result := FSubjectCode;
end;

function TXMLNoteType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLNoteType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSubjectCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLSubjectCodeList.AfterConstruction;
begin
  RegisterChildNode('SubjectCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SubjectCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSubjectCodeList.GetEnumerator: IXMLSubjectCodeListEnumerator;
begin
  Result := TXMLSubjectCodeListEnumerator.Create(Self);
end;

function TXMLSubjectCodeList.Get_SubjectCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLSubjectCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLSubjectCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

procedure TXMLPackagingMarkingType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLPackagingMarkingCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLPackagingMarkingCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLPackagingMarkingCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FContent := CreateCollection(TXMLContentList, IXMLTextType, 'Content', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLContentList;
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FContentAmount := CreateCollection(TXMLContentAmountList, IXMLAmountType, 'ContentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLContentAmountList;
  RegisterChildNode('ContentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BarcodeTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBarcodeTypeCode := CreateCollection(TXMLBarcodeTypeCodeList, IXMLCodeType, 'BarcodeTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBarcodeTypeCodeList;
  RegisterChildNode('BarcodeTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FContentCode := CreateCollection(TXMLContentCodeList, IXMLCodeType, 'ContentCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLContentCodeList;
  RegisterChildNode('ContentCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AutomaticDataCaptureMethodTypeCode', TXMLAutomaticDataCaptureMethodCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAutomaticDataCaptureMethodTypeCode := CreateCollection(TXMLAutomaticDataCaptureMethodTypeCodeList, IXMLAutomaticDataCaptureMethodCodeType, 'AutomaticDataCaptureMethodTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAutomaticDataCaptureMethodTypeCodeList;
  RegisterChildNode('AutomaticDataCaptureMethodTypeCode', TXMLAutomaticDataCaptureMethodCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLPackagingMarkingType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLPackagingMarkingType.GetContent: IXMLContentList;
begin
  Result := FContent;
end;

function TXMLPackagingMarkingType.GetHasContentDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContentDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLPackagingMarkingType.GetContentDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ContentDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLPackagingMarkingType.GetContentAmount: IXMLContentAmountList;
begin
  Result := FContentAmount;
end;

function TXMLPackagingMarkingType.GetBarcodeTypeCode: IXMLBarcodeTypeCodeList;
begin
  Result := FBarcodeTypeCode;
end;

function TXMLPackagingMarkingType.GetContentCode: IXMLContentCodeList;
begin
  Result := FContentCode;
end;

function TXMLPackagingMarkingType.GetAutomaticDataCaptureMethodTypeCode: IXMLAutomaticDataCaptureMethodTypeCodeList;
begin
  Result := FAutomaticDataCaptureMethodTypeCode;
end;

function TXMLAutomaticDataCaptureMethodTypeCodeListEnumerator.GetCurrent: IXMLAutomaticDataCaptureMethodCodeType;
begin
  Result := (inherited GetCurrent as IXMLAutomaticDataCaptureMethodCodeType);
end;

procedure TXMLAutomaticDataCaptureMethodTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('AutomaticDataCaptureMethodTypeCode', TXMLAutomaticDataCaptureMethodCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AutomaticDataCaptureMethodTypeCode';
  ItemInterface := IXMLAutomaticDataCaptureMethodCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAutomaticDataCaptureMethodTypeCodeList.GetEnumerator: IXMLAutomaticDataCaptureMethodTypeCodeListEnumerator;
begin
  Result := TXMLAutomaticDataCaptureMethodTypeCodeListEnumerator.Create(Self);
end;

function TXMLAutomaticDataCaptureMethodTypeCodeList.Get_AutomaticDataCaptureMethodTypeCode(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;
begin
  Result := (List[Index] as IXMLAutomaticDataCaptureMethodCodeType);
end;

function TXMLAutomaticDataCaptureMethodTypeCodeList.Add: IXMLAutomaticDataCaptureMethodCodeType;
begin
  Result := (AddItem(-1) as IXMLAutomaticDataCaptureMethodCodeType);
end;

function TXMLAutomaticDataCaptureMethodTypeCodeList.Insert(Index: Integer): IXMLAutomaticDataCaptureMethodCodeType;
begin
  Result := (AddItem(Index) as IXMLAutomaticDataCaptureMethodCodeType);
end;

function TXMLContentCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLContentCodeList.AfterConstruction;
begin
  RegisterChildNode('ContentCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ContentCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLContentCodeList.GetEnumerator: IXMLContentCodeListEnumerator;
begin
  Result := TXMLContentCodeListEnumerator.Create(Self);
end;

function TXMLContentCodeList.Get_ContentCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLContentCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLContentCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLBarcodeTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLBarcodeTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('BarcodeTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BarcodeTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBarcodeTypeCodeList.GetEnumerator: IXMLBarcodeTypeCodeListEnumerator;
begin
  Result := TXMLBarcodeTypeCodeListEnumerator.Create(Self);
end;

function TXMLBarcodeTypeCodeList.Get_BarcodeTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLBarcodeTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLBarcodeTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLContentAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLContentAmountList.AfterConstruction;
begin
  RegisterChildNode('ContentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ContentAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLContentAmountList.GetEnumerator: IXMLContentAmountListEnumerator;
begin
  Result := TXMLContentAmountListEnumerator.Create(Self);
end;

function TXMLContentAmountList.Get_ContentAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLContentAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLContentAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLProcuringProjectType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLProcuringProjectType.XSDValidate;
begin
  GetID;
  GetName;
  SortChildNodes(Self, ['ID', 'Description', 'Name']);
end;

procedure TXMLProcuringProjectType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  GetName;
  SortChildNodes(Self, ['ID', 'Description', 'Name']);
end;

function TXMLProcuringProjectType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLProcuringProjectType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProcuringProjectType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLProcuringProjectType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLProductCharacteristicConditionTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLProductCharacteristicConditionType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Name';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLProductCharacteristicConditionType.GetEnumerator: IXMLProductCharacteristicConditionTypeEnumerator;
begin
  Result := TXMLProductCharacteristicConditionTypeEnumerator.Create(Self);
end;

function TXMLProductCharacteristicConditionType.Get_Name(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLProductCharacteristicConditionType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLProductCharacteristicConditionType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLProductCharacteristicConditionType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicConditionType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductCharacteristicConditionType.GetHasValueMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicConditionType.GetValueMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

procedure TXMLProductCharacteristicType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MeasurementMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Value', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FValue := CreateCollection(TXMLValueList, IXMLTextType, 'Value', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLValueList;
  RegisterChildNode('Value', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableProductCharacteristicCondition', TXMLProductCharacteristicConditionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableProductCharacteristicCondition := CreateCollection(TXMLApplicableProductCharacteristicConditionList, IXMLProductCharacteristicConditionType, 'ApplicableProductCharacteristicCondition', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableProductCharacteristicConditionList;
  RegisterChildNode('ApplicableProductCharacteristicCondition', TXMLProductCharacteristicConditionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableReferencedStandard', TXMLReferencedStandardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLProductCharacteristicType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLProductCharacteristicType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductCharacteristicType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLProductCharacteristicType.GetHasValueMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetValueMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLProductCharacteristicType.GetHasMeasurementMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MeasurementMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetMeasurementMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['MeasurementMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductCharacteristicType.GetValue: IXMLValueList;
begin
  Result := FValue;
end;

function TXMLProductCharacteristicType.GetHasValueCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetValueCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ValueCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductCharacteristicType.GetHasValueDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetValueDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ValueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLProductCharacteristicType.GetHasValueIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetValueIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ValueIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLProductCharacteristicType.GetHasContentTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContentTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetContentTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContentTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductCharacteristicType.GetHasValueSpecifiedBinaryFile: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetValueSpecifiedBinaryFile: IXMLSpecifiedBinaryFileType;
begin
  Result := (ChildNodesNS['ValueSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedBinaryFileType);
end;

function TXMLProductCharacteristicType.GetApplicableProductCharacteristicCondition: IXMLApplicableProductCharacteristicConditionList;
begin
  Result := FApplicableProductCharacteristicCondition;
end;

function TXMLProductCharacteristicType.GetHasApplicableReferencedStandard: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableReferencedStandard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductCharacteristicType.GetApplicableReferencedStandard: IXMLReferencedStandardType;
begin
  Result := (ChildNodesNS['ApplicableReferencedStandard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedStandardType);
end;

function TXMLApplicableProductCharacteristicConditionListEnumerator.GetCurrent: IXMLProductCharacteristicConditionType;
begin
  Result := (inherited GetCurrent as IXMLProductCharacteristicConditionType);
end;

procedure TXMLApplicableProductCharacteristicConditionList.AfterConstruction;
begin
  RegisterChildNode('ApplicableProductCharacteristicCondition', TXMLProductCharacteristicConditionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableProductCharacteristicCondition';
  ItemInterface := IXMLProductCharacteristicConditionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableProductCharacteristicConditionList.GetEnumerator: IXMLApplicableProductCharacteristicConditionListEnumerator;
begin
  Result := TXMLApplicableProductCharacteristicConditionListEnumerator.Create(Self);
end;

function TXMLApplicableProductCharacteristicConditionList.Get_ApplicableProductCharacteristicCondition(Index: Integer): IXMLProductCharacteristicConditionType;
begin
  Result := (List[Index] as IXMLProductCharacteristicConditionType);
end;

function TXMLApplicableProductCharacteristicConditionList.Add: IXMLProductCharacteristicConditionType;
begin
  Result := (AddItem(-1) as IXMLProductCharacteristicConditionType);
end;

function TXMLApplicableProductCharacteristicConditionList.Insert(Index: Integer): IXMLProductCharacteristicConditionType;
begin
  Result := (AddItem(Index) as IXMLProductCharacteristicConditionType);
end;

function TXMLValueListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLValueList.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Value';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLValueList.GetEnumerator: IXMLValueListEnumerator;
begin
  Result := TXMLValueListEnumerator.Create(Self);
end;

function TXMLValueList.Get_Value(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLValueList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLValueList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLProductClassificationType.AfterConstruction;
begin
  RegisterChildNode('SystemID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SystemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSystemName := CreateCollection(TXMLSystemNameList, IXMLTextType, 'SystemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSystemNameList;
  RegisterChildNode('SystemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClassCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClassName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FClassName := CreateCollection(TXMLClassNameList, IXMLTextType, 'ClassName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLClassNameList;
  RegisterChildNode('ClassName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubClassCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ClassProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FClassProductCharacteristic := CreateCollection(TXMLClassProductCharacteristicList, IXMLProductCharacteristicType, 'ClassProductCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLClassProductCharacteristicList;
  RegisterChildNode('ClassProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableReferencedStandard', TXMLReferencedStandardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLProductClassificationType.GetHasSystemID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductClassificationType.GetSystemID: IXMLIDType;
begin
  Result := (ChildNodesNS['SystemID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLProductClassificationType.GetSystemName: IXMLSystemNameList;
begin
  Result := FSystemName;
end;

function TXMLProductClassificationType.GetHasClassCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductClassificationType.GetClassCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductClassificationType.GetClassName: IXMLClassNameList;
begin
  Result := FClassName;
end;

function TXMLProductClassificationType.GetHasSubClassCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductClassificationType.GetSubClassCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['SubClassCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLProductClassificationType.GetClassProductCharacteristic: IXMLClassProductCharacteristicList;
begin
  Result := FClassProductCharacteristic;
end;

function TXMLProductClassificationType.GetHasApplicableReferencedStandard: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableReferencedStandard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLProductClassificationType.GetApplicableReferencedStandard: IXMLReferencedStandardType;
begin
  Result := (ChildNodesNS['ApplicableReferencedStandard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedStandardType);
end;

function TXMLClassProductCharacteristicListEnumerator.GetCurrent: IXMLProductCharacteristicType;
begin
  Result := (inherited GetCurrent as IXMLProductCharacteristicType);
end;

procedure TXMLClassProductCharacteristicList.AfterConstruction;
begin
  RegisterChildNode('ClassProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ClassProductCharacteristic';
  ItemInterface := IXMLProductCharacteristicType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLClassProductCharacteristicList.GetEnumerator: IXMLClassProductCharacteristicListEnumerator;
begin
  Result := TXMLClassProductCharacteristicListEnumerator.Create(Self);
end;

function TXMLClassProductCharacteristicList.Get_ClassProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
begin
  Result := (List[Index] as IXMLProductCharacteristicType);
end;

function TXMLClassProductCharacteristicList.Add: IXMLProductCharacteristicType;
begin
  Result := (AddItem(-1) as IXMLProductCharacteristicType);
end;

function TXMLClassProductCharacteristicList.Insert(Index: Integer): IXMLProductCharacteristicType;
begin
  Result := (AddItem(Index) as IXMLProductCharacteristicType);
end;

function TXMLClassNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLClassNameList.AfterConstruction;
begin
  RegisterChildNode('ClassName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ClassName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLClassNameList.GetEnumerator: IXMLClassNameListEnumerator;
begin
  Result := TXMLClassNameListEnumerator.Create(Self);
end;

function TXMLClassNameList.Get_ClassName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLClassNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLClassNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLSystemNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLSystemNameList.AfterConstruction;
begin
  RegisterChildNode('SystemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SystemName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSystemNameList.GetEnumerator: IXMLSystemNameListEnumerator;
begin
  Result := TXMLSystemNameListEnumerator.Create(Self);
end;

function TXMLSystemNameList.Get_SystemName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLSystemNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLSystemNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLRecordedStatusType.AfterConstruction;
begin
  RegisterChildNode('ConditionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangerName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangedDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLRecordedStatusType.XSDValidate;
begin
  GetConditionCode;
  GetChangedDateTime;
  SortChildNodes(Self, ['ConditionCode', 'ChangerName', 'ChangedDateTime']);
end;

procedure TXMLRecordedStatusType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetConditionCode;
  GetChangedDateTime;
  SortChildNodes(Self, ['ConditionCode', 'ChangerName', 'ChangedDateTime']);
end;

function TXMLRecordedStatusType.GetConditionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ConditionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLRecordedStatusType.GetHasChangerName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChangerName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLRecordedStatusType.GetChangerName: IXMLTextType;
begin
  Result := (ChildNodesNS['ChangerName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLRecordedStatusType.GetChangedDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ChangedDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

procedure TXMLReferencedDocumentType.AfterConstruction;
begin
  RegisterChildNode('IssuerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('URIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StatusCode', TXMLDocumentStatusCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CopyIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLDocumentCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReceiptDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AttachmentBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAttachmentBinaryObject := CreateCollection(TXMLAttachmentBinaryObjectList, IXMLBinaryObjectType, 'AttachmentBinaryObject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAttachmentBinaryObjectList;
  RegisterChildNode('AttachmentBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformation := CreateCollection(TXMLInformationList, IXMLTextType, 'Information', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationList;
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferenceTypeCode', TXMLReferenceCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SectionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSectionName := CreateCollection(TXMLSectionNameList, IXMLTextType, 'SectionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSectionNameList;
  RegisterChildNode('SectionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PreviousRevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPreviousRevisionID := CreateCollection(TXMLPreviousRevisionIDList, IXMLIDType, 'PreviousRevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPreviousRevisionIDList;
  RegisterChildNode('PreviousRevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FormattedIssueDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PageID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubordinateLineID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubtypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubtypeCode := CreateCollection(TXMLSubtypeCodeList, IXMLCodeType, 'SubtypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubtypeCodeList;
  RegisterChildNode('SubtypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EffectiveSpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssuerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AttachedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAttachedSpecifiedBinaryFile := CreateCollection(TXMLAttachedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'AttachedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAttachedSpecifiedBinaryFileList;
  RegisterChildNode('AttachedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedNote := CreateCollection(TXMLIncludedNoteList, IXMLNoteType, 'IncludedNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedNoteList;
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLReferencedDocumentType.GetHasIssuerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssuerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetIssuerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['IssuerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetHasURIID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetURIID: IXMLIDType;
begin
  Result := (ChildNodesNS['URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetHasStatusCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetStatusCode: IXMLDocumentStatusCodeType;
begin
  Result := (ChildNodesNS['StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentStatusCodeType);
end;

function TXMLReferencedDocumentType.GetHasCopyIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CopyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetCopyIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['CopyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLReferencedDocumentType.GetHasLineID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetLineID: IXMLIDType;
begin
  Result := (ChildNodesNS['LineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetTypeCode: IXMLDocumentCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentCodeType);
end;

function TXMLReferencedDocumentType.GetHasGlobalID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetGlobalID: IXMLIDType;
begin
  Result := (ChildNodesNS['GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetHasRevisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetRevisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['RevisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLReferencedDocumentType.GetHasReceiptDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReceiptDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetReceiptDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ReceiptDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLReferencedDocumentType.GetAttachmentBinaryObject: IXMLAttachmentBinaryObjectList;
begin
  Result := FAttachmentBinaryObject;
end;

function TXMLReferencedDocumentType.GetInformation: IXMLInformationList;
begin
  Result := FInformation;
end;

function TXMLReferencedDocumentType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLReferencedDocumentType.GetHasReferenceTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReferenceTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetReferenceTypeCode: IXMLReferenceCodeType;
begin
  Result := (ChildNodesNS['ReferenceTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferenceCodeType);
end;

function TXMLReferencedDocumentType.GetSectionName: IXMLSectionNameList;
begin
  Result := FSectionName;
end;

function TXMLReferencedDocumentType.GetPreviousRevisionID: IXMLPreviousRevisionIDList;
begin
  Result := FPreviousRevisionID;
end;

function TXMLReferencedDocumentType.GetHasFormattedIssueDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FormattedIssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetFormattedIssueDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['FormattedIssueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLReferencedDocumentType.GetHasPageID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PageID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetPageID: IXMLIDType;
begin
  Result := (ChildNodesNS['PageID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetHasSubordinateLineID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubordinateLineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetSubordinateLineID: IXMLIDType;
begin
  Result := (ChildNodesNS['SubordinateLineID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedDocumentType.GetSubtypeCode: IXMLSubtypeCodeList;
begin
  Result := FSubtypeCode;
end;

function TXMLReferencedDocumentType.GetHasEffectiveSpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EffectiveSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetEffectiveSpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['EffectiveSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLReferencedDocumentType.GetHasIssuerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssuerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedDocumentType.GetIssuerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['IssuerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLReferencedDocumentType.GetAttachedSpecifiedBinaryFile: IXMLAttachedSpecifiedBinaryFileList;
begin
  Result := FAttachedSpecifiedBinaryFile;
end;

function TXMLReferencedDocumentType.GetIncludedNote: IXMLIncludedNoteList;
begin
  Result := FIncludedNote;
end;

function TXMLIncludedNoteListEnumerator.GetCurrent: IXMLNoteType;
begin
  Result := (inherited GetCurrent as IXMLNoteType);
end;

procedure TXMLIncludedNoteList.AfterConstruction;
begin
  RegisterChildNode('IncludedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedNote';
  ItemInterface := IXMLNoteType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedNoteList.GetEnumerator: IXMLIncludedNoteListEnumerator;
begin
  Result := TXMLIncludedNoteListEnumerator.Create(Self);
end;

function TXMLIncludedNoteList.Get_IncludedNote(Index: Integer): IXMLNoteType;
begin
  Result := (List[Index] as IXMLNoteType);
end;

function TXMLIncludedNoteList.Add: IXMLNoteType;
begin
  Result := (AddItem(-1) as IXMLNoteType);
end;

function TXMLIncludedNoteList.Insert(Index: Integer): IXMLNoteType;
begin
  Result := (AddItem(Index) as IXMLNoteType);
end;

function TXMLAttachedSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLAttachedSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('AttachedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AttachedSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAttachedSpecifiedBinaryFileList.GetEnumerator: IXMLAttachedSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLAttachedSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLAttachedSpecifiedBinaryFileList.Get_AttachedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLAttachedSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLAttachedSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLSubtypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLSubtypeCodeList.AfterConstruction;
begin
  RegisterChildNode('SubtypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SubtypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSubtypeCodeList.GetEnumerator: IXMLSubtypeCodeListEnumerator;
begin
  Result := TXMLSubtypeCodeListEnumerator.Create(Self);
end;

function TXMLSubtypeCodeList.Get_SubtypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLSubtypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLSubtypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLPreviousRevisionIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLPreviousRevisionIDList.AfterConstruction;
begin
  RegisterChildNode('PreviousRevisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PreviousRevisionID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPreviousRevisionIDList.GetEnumerator: IXMLPreviousRevisionIDListEnumerator;
begin
  Result := TXMLPreviousRevisionIDListEnumerator.Create(Self);
end;

function TXMLPreviousRevisionIDList.Get_PreviousRevisionID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLPreviousRevisionIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLPreviousRevisionIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLSectionNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLSectionNameList.AfterConstruction;
begin
  RegisterChildNode('SectionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SectionName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSectionNameList.GetEnumerator: IXMLSectionNameListEnumerator;
begin
  Result := TXMLSectionNameListEnumerator.Create(Self);
end;

function TXMLSectionNameList.Get_SectionName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLSectionNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLSectionNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLAttachmentBinaryObjectListEnumerator.GetCurrent: IXMLBinaryObjectType;
begin
  Result := (inherited GetCurrent as IXMLBinaryObjectType);
end;

procedure TXMLAttachmentBinaryObjectList.AfterConstruction;
begin
  RegisterChildNode('AttachmentBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AttachmentBinaryObject';
  ItemInterface := IXMLBinaryObjectType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAttachmentBinaryObjectList.GetEnumerator: IXMLAttachmentBinaryObjectListEnumerator;
begin
  Result := TXMLAttachmentBinaryObjectListEnumerator.Create(Self);
end;

function TXMLAttachmentBinaryObjectList.Get_AttachmentBinaryObject(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (List[Index] as IXMLBinaryObjectType);
end;

function TXMLAttachmentBinaryObjectList.Add: IXMLBinaryObjectType;
begin
  Result := (AddItem(-1) as IXMLBinaryObjectType);
end;

function TXMLAttachmentBinaryObjectList.Insert(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (AddItem(Index) as IXMLBinaryObjectType);
end;

procedure TXMLReferencedProductType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGlobalID := CreateCollection(TXMLGlobalIDList, IXMLIDType, 'GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGlobalIDList;
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ManufacturerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FManufacturerAssignedID := CreateCollection(TXMLManufacturerAssignedIDList, IXMLIDType, 'ManufacturerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLManufacturerAssignedIDList;
  RegisterChildNode('ManufacturerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IndustryAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIndustryAssignedID := CreateCollection(TXMLIndustryAssignedIDList, IXMLIDType, 'IndustryAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIndustryAssignedIDList;
  RegisterChildNode('IndustryAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RelationshipTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRelationshipTypeCode := CreateCollection(TXMLRelationshipTypeCodeList, IXMLCodeType, 'RelationshipTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRelationshipTypeCodeList;
  RegisterChildNode('RelationshipTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUnitQuantity := CreateCollection(TXMLUnitQuantityList, IXMLQuantityType, 'UnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUnitQuantityList;
  RegisterChildNode('UnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLReferencedProductType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLReferencedProductType.GetGlobalID: IXMLGlobalIDList;
begin
  Result := FGlobalID;
end;

function TXMLReferencedProductType.GetHasSellerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedProductType.GetSellerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['SellerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedProductType.GetHasBuyerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedProductType.GetBuyerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['BuyerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedProductType.GetManufacturerAssignedID: IXMLManufacturerAssignedIDList;
begin
  Result := FManufacturerAssignedID;
end;

function TXMLReferencedProductType.GetIndustryAssignedID: IXMLIndustryAssignedIDList;
begin
  Result := FIndustryAssignedID;
end;

function TXMLReferencedProductType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLReferencedProductType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLReferencedProductType.GetRelationshipTypeCode: IXMLRelationshipTypeCodeList;
begin
  Result := FRelationshipTypeCode;
end;

function TXMLReferencedProductType.GetUnitQuantity: IXMLUnitQuantityList;
begin
  Result := FUnitQuantity;
end;

function TXMLUnitQuantityListEnumerator.GetCurrent: IXMLQuantityType;
begin
  Result := (inherited GetCurrent as IXMLQuantityType);
end;

procedure TXMLUnitQuantityList.AfterConstruction;
begin
  RegisterChildNode('UnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UnitQuantity';
  ItemInterface := IXMLQuantityType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUnitQuantityList.GetEnumerator: IXMLUnitQuantityListEnumerator;
begin
  Result := TXMLUnitQuantityListEnumerator.Create(Self);
end;

function TXMLUnitQuantityList.Get_UnitQuantity(Index: Integer): IXMLQuantityType;
begin
  Result := (List[Index] as IXMLQuantityType);
end;

function TXMLUnitQuantityList.Add: IXMLQuantityType;
begin
  Result := (AddItem(-1) as IXMLQuantityType);
end;

function TXMLUnitQuantityList.Insert(Index: Integer): IXMLQuantityType;
begin
  Result := (AddItem(Index) as IXMLQuantityType);
end;

function TXMLRelationshipTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLRelationshipTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('RelationshipTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RelationshipTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRelationshipTypeCodeList.GetEnumerator: IXMLRelationshipTypeCodeListEnumerator;
begin
  Result := TXMLRelationshipTypeCodeListEnumerator.Create(Self);
end;

function TXMLRelationshipTypeCodeList.Get_RelationshipTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLRelationshipTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLRelationshipTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLIndustryAssignedIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLIndustryAssignedIDList.AfterConstruction;
begin
  RegisterChildNode('IndustryAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IndustryAssignedID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIndustryAssignedIDList.GetEnumerator: IXMLIndustryAssignedIDListEnumerator;
begin
  Result := TXMLIndustryAssignedIDListEnumerator.Create(Self);
end;

function TXMLIndustryAssignedIDList.Get_IndustryAssignedID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLIndustryAssignedIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLIndustryAssignedIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLManufacturerAssignedIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLManufacturerAssignedIDList.AfterConstruction;
begin
  RegisterChildNode('ManufacturerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ManufacturerAssignedID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLManufacturerAssignedIDList.GetEnumerator: IXMLManufacturerAssignedIDListEnumerator;
begin
  Result := TXMLManufacturerAssignedIDListEnumerator.Create(Self);
end;

function TXMLManufacturerAssignedIDList.Get_ManufacturerAssignedID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLManufacturerAssignedIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLManufacturerAssignedIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLReferencedStandardType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VersionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ElementVersionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('URIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PartID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AgencyID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLReferencedStandardType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedStandardType.GetHasVersionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetVersionID: IXMLIDType;
begin
  Result := (ChildNodesNS['VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedStandardType.GetHasElementVersionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ElementVersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetElementVersionID: IXMLIDType;
begin
  Result := (ChildNodesNS['ElementVersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedStandardType.GetHasURIID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetURIID: IXMLIDType;
begin
  Result := (ChildNodesNS['URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedStandardType.GetHasPartID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PartID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetPartID: IXMLIDType;
begin
  Result := (ChildNodesNS['PartID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLReferencedStandardType.GetHasAgencyID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AgencyID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencedStandardType.GetAgencyID: IXMLIDType;
begin
  Result := (ChildNodesNS['AgencyID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLReferencePriceType.AfterConstruction;
begin
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBasisQuantity := CreateCollection(TXMLBasisQuantityList, IXMLQuantityType, 'BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBasisQuantityList;
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetPriceIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetPriceIndicator := CreateCollection(TXMLNetPriceIndicatorList, IXMLIndicatorType, 'NetPriceIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetPriceIndicatorList;
  RegisterChildNode('NetPriceIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ComparisonMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLReferencePriceType.GetHasChargeAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencePriceType.GetChargeAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['ChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLReferencePriceType.GetBasisQuantity: IXMLBasisQuantityList;
begin
  Result := FBasisQuantity;
end;

function TXMLReferencePriceType.GetNetPriceIndicator: IXMLNetPriceIndicatorList;
begin
  Result := FNetPriceIndicator;
end;

function TXMLReferencePriceType.GetHasComparisonMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ComparisonMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReferencePriceType.GetComparisonMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ComparisonMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLNetPriceIndicatorListEnumerator.GetCurrent: IXMLIndicatorType;
begin
  Result := (inherited GetCurrent as IXMLIndicatorType);
end;

procedure TXMLNetPriceIndicatorList.AfterConstruction;
begin
  RegisterChildNode('NetPriceIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetPriceIndicator';
  ItemInterface := IXMLIndicatorType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetPriceIndicatorList.GetEnumerator: IXMLNetPriceIndicatorListEnumerator;
begin
  Result := TXMLNetPriceIndicatorListEnumerator.Create(Self);
end;

function TXMLNetPriceIndicatorList.Get_NetPriceIndicator(Index: Integer): IXMLIndicatorType;
begin
  Result := (List[Index] as IXMLIndicatorType);
end;

function TXMLNetPriceIndicatorList.Add: IXMLIndicatorType;
begin
  Result := (AddItem(-1) as IXMLIndicatorType);
end;

function TXMLNetPriceIndicatorList.Insert(Index: Integer): IXMLIndicatorType;
begin
  Result := (AddItem(Index) as IXMLIndicatorType);
end;

function TXMLBasisQuantityListEnumerator.GetCurrent: IXMLQuantityType;
begin
  Result := (inherited GetCurrent as IXMLQuantityType);
end;

procedure TXMLBasisQuantityList.AfterConstruction;
begin
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BasisQuantity';
  ItemInterface := IXMLQuantityType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBasisQuantityList.GetEnumerator: IXMLBasisQuantityListEnumerator;
begin
  Result := TXMLBasisQuantityListEnumerator.Create(Self);
end;

function TXMLBasisQuantityList.Get_BasisQuantity(Index: Integer): IXMLQuantityType;
begin
  Result := (List[Index] as IXMLQuantityType);
end;

function TXMLBasisQuantityList.Add: IXMLQuantityType;
begin
  Result := (AddItem(-1) as IXMLQuantityType);
end;

function TXMLBasisQuantityList.Insert(Index: Integer): IXMLQuantityType;
begin
  Result := (AddItem(Index) as IXMLQuantityType);
end;

procedure TXMLRegisteredTaxType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExemptionReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExemptionReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FExemptionReason := CreateCollection(TXMLExemptionReasonList, IXMLTextType, 'ExemptionReason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLExemptionReasonList;
  RegisterChildNode('ExemptionReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CurrencyCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Jurisdiction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FJurisdiction := CreateCollection(TXMLJurisdictionList, IXMLTextType, 'Jurisdiction', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLJurisdictionList;
  RegisterChildNode('Jurisdiction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomsDutyIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLRegisteredTaxType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLRegisteredTaxType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLRegisteredTaxType.GetHasExemptionReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExemptionReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLRegisteredTaxType.GetExemptionReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ExemptionReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLRegisteredTaxType.GetExemptionReason: IXMLExemptionReasonList;
begin
  Result := FExemptionReason;
end;

function TXMLRegisteredTaxType.GetHasCurrencyCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLRegisteredTaxType.GetCurrencyCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLRegisteredTaxType.GetJurisdiction: IXMLJurisdictionList;
begin
  Result := FJurisdiction;
end;

function TXMLRegisteredTaxType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLRegisteredTaxType.GetHasCustomsDutyIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CustomsDutyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLRegisteredTaxType.GetCustomsDutyIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['CustomsDutyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLExemptionReasonListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLExemptionReasonList.AfterConstruction;
begin
  RegisterChildNode('ExemptionReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ExemptionReason';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLExemptionReasonList.GetEnumerator: IXMLExemptionReasonListEnumerator;
begin
  Result := TXMLExemptionReasonListEnumerator.Create(Self);
end;

function TXMLExemptionReasonList.Get_ExemptionReason(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLExemptionReasonList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLExemptionReasonList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLReturnableAssetInstructionsType.AfterConstruction;
begin
  RegisterChildNode('MaterialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FMaterialID := CreateCollection(TXMLMaterialIDList, IXMLIDType, 'MaterialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLMaterialIDList;
  RegisterChildNode('MaterialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TermsAndConditionsDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTermsAndConditionsDescription := CreateCollection(TXMLTermsAndConditionsDescriptionList, IXMLTextType, 'TermsAndConditionsDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTermsAndConditionsDescriptionList;
  RegisterChildNode('TermsAndConditionsDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TermsAndConditionsDescriptionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DepositValueSpecifiedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDepositValueSpecifiedAmount := CreateCollection(TXMLDepositValueSpecifiedAmountList, IXMLAmountType, 'DepositValueSpecifiedAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDepositValueSpecifiedAmountList;
  RegisterChildNode('DepositValueSpecifiedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DepositValueValiditySpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLReturnableAssetInstructionsType.GetMaterialID: IXMLMaterialIDList;
begin
  Result := FMaterialID;
end;

function TXMLReturnableAssetInstructionsType.GetTermsAndConditionsDescription: IXMLTermsAndConditionsDescriptionList;
begin
  Result := FTermsAndConditionsDescription;
end;

function TXMLReturnableAssetInstructionsType.GetHasTermsAndConditionsDescriptionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TermsAndConditionsDescriptionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReturnableAssetInstructionsType.GetTermsAndConditionsDescriptionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TermsAndConditionsDescriptionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLReturnableAssetInstructionsType.GetDepositValueSpecifiedAmount: IXMLDepositValueSpecifiedAmountList;
begin
  Result := FDepositValueSpecifiedAmount;
end;

function TXMLReturnableAssetInstructionsType.GetHasDepositValueValiditySpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DepositValueValiditySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLReturnableAssetInstructionsType.GetDepositValueValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['DepositValueValiditySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLDepositValueSpecifiedAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLDepositValueSpecifiedAmountList.AfterConstruction;
begin
  RegisterChildNode('DepositValueSpecifiedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DepositValueSpecifiedAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDepositValueSpecifiedAmountList.GetEnumerator: IXMLDepositValueSpecifiedAmountListEnumerator;
begin
  Result := TXMLDepositValueSpecifiedAmountListEnumerator.Create(Self);
end;

function TXMLDepositValueSpecifiedAmountList.Get_DepositValueSpecifiedAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLDepositValueSpecifiedAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLDepositValueSpecifiedAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTermsAndConditionsDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTermsAndConditionsDescriptionList.AfterConstruction;
begin
  RegisterChildNode('TermsAndConditionsDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TermsAndConditionsDescription';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTermsAndConditionsDescriptionList.GetEnumerator: IXMLTermsAndConditionsDescriptionListEnumerator;
begin
  Result := TXMLTermsAndConditionsDescriptionListEnumerator.Create(Self);
end;

function TXMLTermsAndConditionsDescriptionList.Get_TermsAndConditionsDescription(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTermsAndConditionsDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTermsAndConditionsDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLMaterialIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLMaterialIDList.AfterConstruction;
begin
  RegisterChildNode('MaterialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'MaterialID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLMaterialIDList.GetEnumerator: IXMLMaterialIDListEnumerator;
begin
  Result := TXMLMaterialIDListEnumerator.Create(Self);
end;

function TXMLMaterialIDList.Get_MaterialID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLMaterialIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLMaterialIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLSpatialDimensionTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLSpatialDimensionType.AfterConstruction;
begin
  RegisterChildNode('ValueMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLDimensionTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('WidthMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LengthMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DiameterMeasure', TXMLLinearUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Description';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpatialDimensionType.GetEnumerator: IXMLSpatialDimensionTypeEnumerator;
begin
  Result := TXMLSpatialDimensionTypeEnumerator.Create(Self);
end;

function TXMLSpatialDimensionType.Get_Description(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLSpatialDimensionType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLSpatialDimensionType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLSpatialDimensionType.GetHasValueMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetValueMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSpatialDimensionType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetTypeCode: IXMLDimensionTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDimensionTypeCodeType);
end;

function TXMLSpatialDimensionType.GetHasWidthMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('WidthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetWidthMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['WidthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSpatialDimensionType.GetHasLengthMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LengthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetLengthMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['LengthMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSpatialDimensionType.GetHasHeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetHeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['HeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSpatialDimensionType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpatialDimensionType.GetHasDiameterMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DiameterMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpatialDimensionType.GetDiameterMeasure: IXMLLinearUnitMeasureType;
begin
  Result := (ChildNodesNS['DiameterMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLinearUnitMeasureType);
end;

procedure TXMLSpecificationQueryType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLSpecificationQueryType.XSDValidate;
begin
  GetID;
  GetContent;
  SortChildNodes(Self, ['ID', 'TypeCode', 'Content', 'ContractualLanguageCode']);
end;

procedure TXMLSpecificationQueryType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  GetContent;
  SortChildNodes(Self, ['ID', 'TypeCode', 'Content', 'ContractualLanguageCode']);
end;

function TXMLSpecificationQueryType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecificationQueryType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecificationQueryType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecificationQueryType.GetContent: IXMLTextType;
begin
  Result := (ChildNodesNS['Content', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSpecificationQueryType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecificationQueryType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

procedure TXMLSpecificationResponseType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('QueryID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLSpecificationResponseType.XSDValidate;
begin
  GetID;
  GetContent;
  SortChildNodes(Self, ['ID', 'QueryID', 'TypeCode', 'Content', 'ContractualLanguageCode']);
end;

procedure TXMLSpecificationResponseType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  GetContent;
  SortChildNodes(Self, ['ID', 'QueryID', 'TypeCode', 'Content', 'ContractualLanguageCode']);
end;

function TXMLSpecificationResponseType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecificationResponseType.GetHasQueryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('QueryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecificationResponseType.GetQueryID: IXMLIDType;
begin
  Result := (ChildNodesNS['QueryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecificationResponseType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecificationResponseType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecificationResponseType.GetContent: IXMLTextType;
begin
  Result := (ChildNodesNS['Content', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSpecificationResponseType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecificationResponseType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

procedure TXMLSpecifiedBinaryFileType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Title', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTitle := CreateCollection(TXMLTitleList, IXMLTextType, 'Title', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTitleList;
  RegisterChildNode('Title', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AuthorName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAuthorName := CreateCollection(TXMLAuthorNameList, IXMLTextType, 'AuthorName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAuthorNameList;
  RegisterChildNode('AuthorName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VersionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FileName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('URIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MIMECode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EncodingCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CharacterSetCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedBinaryObject := CreateCollection(TXMLIncludedBinaryObjectList, IXMLBinaryObjectType, 'IncludedBinaryObject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedBinaryObjectList;
  RegisterChildNode('IncludedBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Access', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAccess := CreateCollection(TXMLAccessList, IXMLTextType, 'Access', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAccessList;
  RegisterChildNode('Access', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SizeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AccessAvailabilitySpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSpecifiedBinaryFileType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLSpecifiedBinaryFileType.GetTitle: IXMLTitleList;
begin
  Result := FTitle;
end;

function TXMLSpecifiedBinaryFileType.GetAuthorName: IXMLAuthorNameList;
begin
  Result := FAuthorName;
end;

function TXMLSpecifiedBinaryFileType.GetHasVersionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetVersionID: IXMLIDType;
begin
  Result := (ChildNodesNS['VersionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecifiedBinaryFileType.GetHasFileName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FileName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetFileName: IXMLTextType;
begin
  Result := (ChildNodesNS['FileName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSpecifiedBinaryFileType.GetHasURIID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetURIID: IXMLIDType;
begin
  Result := (ChildNodesNS['URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecifiedBinaryFileType.GetHasMIMECode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MIMECode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetMIMECode: IXMLCodeType;
begin
  Result := (ChildNodesNS['MIMECode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedBinaryFileType.GetHasEncodingCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EncodingCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetEncodingCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['EncodingCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedBinaryFileType.GetHasCharacterSetCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CharacterSetCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetCharacterSetCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CharacterSetCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedBinaryFileType.GetIncludedBinaryObject: IXMLIncludedBinaryObjectList;
begin
  Result := FIncludedBinaryObject;
end;

function TXMLSpecifiedBinaryFileType.GetAccess: IXMLAccessList;
begin
  Result := FAccess;
end;

function TXMLSpecifiedBinaryFileType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLSpecifiedBinaryFileType.GetHasSizeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SizeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetSizeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['SizeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSpecifiedBinaryFileType.GetHasAccessAvailabilitySpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AccessAvailabilitySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedBinaryFileType.GetAccessAvailabilitySpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['AccessAvailabilitySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLAccessListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLAccessList.AfterConstruction;
begin
  RegisterChildNode('Access', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Access';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAccessList.GetEnumerator: IXMLAccessListEnumerator;
begin
  Result := TXMLAccessListEnumerator.Create(Self);
end;

function TXMLAccessList.Get_Access(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLAccessList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLAccessList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLIncludedBinaryObjectListEnumerator.GetCurrent: IXMLBinaryObjectType;
begin
  Result := (inherited GetCurrent as IXMLBinaryObjectType);
end;

procedure TXMLIncludedBinaryObjectList.AfterConstruction;
begin
  RegisterChildNode('IncludedBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedBinaryObject';
  ItemInterface := IXMLBinaryObjectType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedBinaryObjectList.GetEnumerator: IXMLIncludedBinaryObjectListEnumerator;
begin
  Result := TXMLIncludedBinaryObjectListEnumerator.Create(Self);
end;

function TXMLIncludedBinaryObjectList.Get_IncludedBinaryObject(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (List[Index] as IXMLBinaryObjectType);
end;

function TXMLIncludedBinaryObjectList.Add: IXMLBinaryObjectType;
begin
  Result := (AddItem(-1) as IXMLBinaryObjectType);
end;

function TXMLIncludedBinaryObjectList.Insert(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (AddItem(Index) as IXMLBinaryObjectType);
end;

function TXMLAuthorNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLAuthorNameList.AfterConstruction;
begin
  RegisterChildNode('AuthorName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AuthorName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAuthorNameList.GetEnumerator: IXMLAuthorNameListEnumerator;
begin
  Result := TXMLAuthorNameListEnumerator.Create(Self);
end;

function TXMLAuthorNameList.Get_AuthorName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLAuthorNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLAuthorNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLTitleListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTitleList.AfterConstruction;
begin
  RegisterChildNode('Title', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Title';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTitleList.GetEnumerator: IXMLTitleListEnumerator;
begin
  Result := TXMLTitleListEnumerator.Create(Self);
end;

function TXMLTitleList.Get_Title(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTitleList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTitleList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLSpecifiedMarketplaceType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VirtualIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('WebsiteURIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FWebsiteURIID := CreateCollection(TXMLWebsiteURIIDList, IXMLIDType, 'WebsiteURIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLWebsiteURIIDList;
  RegisterChildNode('WebsiteURIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SalesMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OrderingAvailablePeriod', TXMLAvailablePeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FOrderingAvailablePeriod := CreateCollection(TXMLOrderingAvailablePeriodList, IXMLAvailablePeriodType, 'OrderingAvailablePeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLOrderingAvailablePeriodList;
  RegisterChildNode('OrderingAvailablePeriod', TXMLAvailablePeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSpecifiedMarketplaceType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedMarketplaceType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecifiedMarketplaceType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedMarketplaceType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSpecifiedMarketplaceType.GetHasVirtualIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VirtualIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedMarketplaceType.GetVirtualIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['VirtualIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLSpecifiedMarketplaceType.GetWebsiteURIID: IXMLWebsiteURIIDList;
begin
  Result := FWebsiteURIID;
end;

function TXMLSpecifiedMarketplaceType.GetHasSalesMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SalesMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedMarketplaceType.GetSalesMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['SalesMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedMarketplaceType.GetOrderingAvailablePeriod: IXMLOrderingAvailablePeriodList;
begin
  Result := FOrderingAvailablePeriod;
end;

function TXMLOrderingAvailablePeriodListEnumerator.GetCurrent: IXMLAvailablePeriodType;
begin
  Result := (inherited GetCurrent as IXMLAvailablePeriodType);
end;

procedure TXMLOrderingAvailablePeriodList.AfterConstruction;
begin
  RegisterChildNode('OrderingAvailablePeriod', TXMLAvailablePeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'OrderingAvailablePeriod';
  ItemInterface := IXMLAvailablePeriodType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLOrderingAvailablePeriodList.GetEnumerator: IXMLOrderingAvailablePeriodListEnumerator;
begin
  Result := TXMLOrderingAvailablePeriodListEnumerator.Create(Self);
end;

function TXMLOrderingAvailablePeriodList.Get_OrderingAvailablePeriod(Index: Integer): IXMLAvailablePeriodType;
begin
  Result := (List[Index] as IXMLAvailablePeriodType);
end;

function TXMLOrderingAvailablePeriodList.Add: IXMLAvailablePeriodType;
begin
  Result := (AddItem(-1) as IXMLAvailablePeriodType);
end;

function TXMLOrderingAvailablePeriodList.Insert(Index: Integer): IXMLAvailablePeriodType;
begin
  Result := (AddItem(Index) as IXMLAvailablePeriodType);
end;

function TXMLWebsiteURIIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLWebsiteURIIDList.AfterConstruction;
begin
  RegisterChildNode('WebsiteURIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'WebsiteURIID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLWebsiteURIIDList.GetEnumerator: IXMLWebsiteURIIDListEnumerator;
begin
  Result := TXMLWebsiteURIIDListEnumerator.Create(Self);
end;

function TXMLWebsiteURIIDList.Get_WebsiteURIID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLWebsiteURIIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLWebsiteURIIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLSpecifiedPeriodType.AfterConstruction;
begin
  RegisterChildNode('DurationMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDurationMeasure := CreateCollection(TXMLDurationMeasureList, IXMLMeasureType, 'DurationMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDurationMeasureList;
  RegisterChildNode('DurationMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InclusiveIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StartDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EndDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CompleteDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OpenIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SeasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SequenceNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StartDateFlexibilityCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContinuousIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PurposeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSpecifiedPeriodType.GetDurationMeasure: IXMLDurationMeasureList;
begin
  Result := FDurationMeasure;
end;

function TXMLSpecifiedPeriodType.GetHasInclusiveIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InclusiveIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetInclusiveIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['InclusiveIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLSpecifiedPeriodType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLSpecifiedPeriodType.GetHasStartDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetStartDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['StartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSpecifiedPeriodType.GetHasEndDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EndDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetEndDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['EndDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSpecifiedPeriodType.GetHasCompleteDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CompleteDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetCompleteDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['CompleteDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSpecifiedPeriodType.GetHasOpenIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OpenIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetOpenIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['OpenIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLSpecifiedPeriodType.GetHasSeasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SeasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetSeasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['SeasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedPeriodType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSpecifiedPeriodType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLSpecifiedPeriodType.GetHasSequenceNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetSequenceNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['SequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLSpecifiedPeriodType.GetHasStartDateFlexibilityCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StartDateFlexibilityCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetStartDateFlexibilityCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['StartDateFlexibilityCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSpecifiedPeriodType.GetHasContinuousIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContinuousIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetContinuousIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ContinuousIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLSpecifiedPeriodType.GetHasPurposeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PurposeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSpecifiedPeriodType.GetPurposeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['PurposeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLDurationMeasureListEnumerator.GetCurrent: IXMLMeasureType;
begin
  Result := (inherited GetCurrent as IXMLMeasureType);
end;

procedure TXMLDurationMeasureList.AfterConstruction;
begin
  RegisterChildNode('DurationMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DurationMeasure';
  ItemInterface := IXMLMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDurationMeasureList.GetEnumerator: IXMLDurationMeasureListEnumerator;
begin
  Result := TXMLDurationMeasureListEnumerator.Create(Self);
end;

function TXMLDurationMeasureList.Get_DurationMeasure(Index: Integer): IXMLMeasureType;
begin
  Result := (List[Index] as IXMLMeasureType);
end;

function TXMLDurationMeasureList.Add: IXMLMeasureType;
begin
  Result := (AddItem(-1) as IXMLMeasureType);
end;

function TXMLDurationMeasureList.Insert(Index: Integer): IXMLMeasureType;
begin
  Result := (AddItem(Index) as IXMLMeasureType);
end;

procedure TXMLSubordinateLineTradeAgreementType.AfterConstruction;
begin
  RegisterChildNode('SellerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerOrderReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferencedDocument := CreateCollection(TXMLAdditionalReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferencedDocumentList;
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrossPriceProductTradePrice := CreateCollection(TXMLGrossPriceProductTradePriceList, IXMLTradePriceType, 'GrossPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrossPriceProductTradePriceList;
  RegisterChildNode('GrossPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetPriceProductTradePrice := CreateCollection(TXMLNetPriceProductTradePriceList, IXMLTradePriceType, 'NetPriceProductTradePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetPriceProductTradePriceList;
  RegisterChildNode('NetPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSubordinateLineTradeAgreementType.GetHasSellerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeAgreementType.GetSellerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['SellerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLSubordinateLineTradeAgreementType.GetHasBuyerOrderReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeAgreementType.GetBuyerOrderReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['BuyerOrderReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLSubordinateLineTradeAgreementType.GetAdditionalReferencedDocument: IXMLAdditionalReferencedDocumentList;
begin
  Result := FAdditionalReferencedDocument;
end;

function TXMLSubordinateLineTradeAgreementType.GetGrossPriceProductTradePrice: IXMLGrossPriceProductTradePriceList;
begin
  Result := FGrossPriceProductTradePrice;
end;

function TXMLSubordinateLineTradeAgreementType.GetNetPriceProductTradePrice: IXMLNetPriceProductTradePriceList;
begin
  Result := FNetPriceProductTradePrice;
end;

function TXMLNetPriceProductTradePriceListEnumerator.GetCurrent: IXMLTradePriceType;
begin
  Result := (inherited GetCurrent as IXMLTradePriceType);
end;

procedure TXMLNetPriceProductTradePriceList.AfterConstruction;
begin
  RegisterChildNode('NetPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetPriceProductTradePrice';
  ItemInterface := IXMLTradePriceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetPriceProductTradePriceList.GetEnumerator: IXMLNetPriceProductTradePriceListEnumerator;
begin
  Result := TXMLNetPriceProductTradePriceListEnumerator.Create(Self);
end;

function TXMLNetPriceProductTradePriceList.Get_NetPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
begin
  Result := (List[Index] as IXMLTradePriceType);
end;

function TXMLNetPriceProductTradePriceList.Add: IXMLTradePriceType;
begin
  Result := (AddItem(-1) as IXMLTradePriceType);
end;

function TXMLNetPriceProductTradePriceList.Insert(Index: Integer): IXMLTradePriceType;
begin
  Result := (AddItem(Index) as IXMLTradePriceType);
end;

function TXMLGrossPriceProductTradePriceListEnumerator.GetCurrent: IXMLTradePriceType;
begin
  Result := (inherited GetCurrent as IXMLTradePriceType);
end;

procedure TXMLGrossPriceProductTradePriceList.AfterConstruction;
begin
  RegisterChildNode('GrossPriceProductTradePrice', TXMLTradePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GrossPriceProductTradePrice';
  ItemInterface := IXMLTradePriceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGrossPriceProductTradePriceList.GetEnumerator: IXMLGrossPriceProductTradePriceListEnumerator;
begin
  Result := TXMLGrossPriceProductTradePriceListEnumerator.Create(Self);
end;

function TXMLGrossPriceProductTradePriceList.Get_GrossPriceProductTradePrice(Index: Integer): IXMLTradePriceType;
begin
  Result := (List[Index] as IXMLTradePriceType);
end;

function TXMLGrossPriceProductTradePriceList.Add: IXMLTradePriceType;
begin
  Result := (AddItem(-1) as IXMLTradePriceType);
end;

function TXMLGrossPriceProductTradePriceList.Insert(Index: Integer): IXMLTradePriceType;
begin
  Result := (AddItem(Index) as IXMLTradePriceType);
end;

function TXMLAdditionalReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLAdditionalReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('AdditionalReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AdditionalReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAdditionalReferencedDocumentList.GetEnumerator: IXMLAdditionalReferencedDocumentListEnumerator;
begin
  Result := TXMLAdditionalReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLAdditionalReferencedDocumentList.Get_AdditionalReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLAdditionalReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLAdditionalReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

procedure TXMLSubordinateLineTradeDeliveryType.AfterConstruction;
begin
  RegisterChildNode('PackageQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PerPackageUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BilledQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBilledQuantity := CreateCollection(TXMLBilledQuantityList, IXMLQuantityType, 'BilledQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBilledQuantityList;
  RegisterChildNode('BilledQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSupplyChainPackaging', TXMLSupplyChainPackagingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedSupplyChainPackaging := CreateCollection(TXMLIncludedSupplyChainPackagingList, IXMLSupplyChainPackagingType, 'IncludedSupplyChainPackaging', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedSupplyChainPackagingList;
  RegisterChildNode('IncludedSupplyChainPackaging', TXMLSupplyChainPackagingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualDeliverySupplyChainEvent := CreateCollection(TXMLActualDeliverySupplyChainEventList, IXMLSupplyChainEventType, 'ActualDeliverySupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualDeliverySupplyChainEventList;
  RegisterChildNode('ActualDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSubordinateLineTradeDeliveryType.GetHasPackageQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeDeliveryType.GetPackageQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSubordinateLineTradeDeliveryType.GetHasProductUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProductUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeDeliveryType.GetProductUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ProductUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSubordinateLineTradeDeliveryType.GetHasPerPackageUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PerPackageUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeDeliveryType.GetPerPackageUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['PerPackageUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSubordinateLineTradeDeliveryType.GetBilledQuantity: IXMLBilledQuantityList;
begin
  Result := FBilledQuantity;
end;

function TXMLSubordinateLineTradeDeliveryType.GetIncludedSupplyChainPackaging: IXMLIncludedSupplyChainPackagingList;
begin
  Result := FIncludedSupplyChainPackaging;
end;

function TXMLSubordinateLineTradeDeliveryType.GetActualDeliverySupplyChainEvent: IXMLActualDeliverySupplyChainEventList;
begin
  Result := FActualDeliverySupplyChainEvent;
end;

function TXMLActualDeliverySupplyChainEventListEnumerator.GetCurrent: IXMLSupplyChainEventType;
begin
  Result := (inherited GetCurrent as IXMLSupplyChainEventType);
end;

procedure TXMLActualDeliverySupplyChainEventList.AfterConstruction;
begin
  RegisterChildNode('ActualDeliverySupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ActualDeliverySupplyChainEvent';
  ItemInterface := IXMLSupplyChainEventType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLActualDeliverySupplyChainEventList.GetEnumerator: IXMLActualDeliverySupplyChainEventListEnumerator;
begin
  Result := TXMLActualDeliverySupplyChainEventListEnumerator.Create(Self);
end;

function TXMLActualDeliverySupplyChainEventList.Get_ActualDeliverySupplyChainEvent(Index: Integer): IXMLSupplyChainEventType;
begin
  Result := (List[Index] as IXMLSupplyChainEventType);
end;

function TXMLActualDeliverySupplyChainEventList.Add: IXMLSupplyChainEventType;
begin
  Result := (AddItem(-1) as IXMLSupplyChainEventType);
end;

function TXMLActualDeliverySupplyChainEventList.Insert(Index: Integer): IXMLSupplyChainEventType;
begin
  Result := (AddItem(Index) as IXMLSupplyChainEventType);
end;

function TXMLIncludedSupplyChainPackagingListEnumerator.GetCurrent: IXMLSupplyChainPackagingType;
begin
  Result := (inherited GetCurrent as IXMLSupplyChainPackagingType);
end;

procedure TXMLIncludedSupplyChainPackagingList.AfterConstruction;
begin
  RegisterChildNode('IncludedSupplyChainPackaging', TXMLSupplyChainPackagingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedSupplyChainPackaging';
  ItemInterface := IXMLSupplyChainPackagingType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedSupplyChainPackagingList.GetEnumerator: IXMLIncludedSupplyChainPackagingListEnumerator;
begin
  Result := TXMLIncludedSupplyChainPackagingListEnumerator.Create(Self);
end;

function TXMLIncludedSupplyChainPackagingList.Get_IncludedSupplyChainPackaging(Index: Integer): IXMLSupplyChainPackagingType;
begin
  Result := (List[Index] as IXMLSupplyChainPackagingType);
end;

function TXMLIncludedSupplyChainPackagingList.Add: IXMLSupplyChainPackagingType;
begin
  Result := (AddItem(-1) as IXMLSupplyChainPackagingType);
end;

function TXMLIncludedSupplyChainPackagingList.Insert(Index: Integer): IXMLSupplyChainPackagingType;
begin
  Result := (AddItem(Index) as IXMLSupplyChainPackagingType);
end;

function TXMLBilledQuantityListEnumerator.GetCurrent: IXMLQuantityType;
begin
  Result := (inherited GetCurrent as IXMLQuantityType);
end;

procedure TXMLBilledQuantityList.AfterConstruction;
begin
  RegisterChildNode('BilledQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BilledQuantity';
  ItemInterface := IXMLQuantityType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBilledQuantityList.GetEnumerator: IXMLBilledQuantityListEnumerator;
begin
  Result := TXMLBilledQuantityListEnumerator.Create(Self);
end;

function TXMLBilledQuantityList.Get_BilledQuantity(Index: Integer): IXMLQuantityType;
begin
  Result := (List[Index] as IXMLQuantityType);
end;

function TXMLBilledQuantityList.Add: IXMLQuantityType;
begin
  Result := (AddItem(-1) as IXMLQuantityType);
end;

function TXMLBilledQuantityList.Insert(Index: Integer): IXMLQuantityType;
begin
  Result := (AddItem(Index) as IXMLQuantityType);
end;

procedure TXMLSubordinateLineTradeSettlementType.AfterConstruction;
begin
  RegisterChildNode('AmountDirectionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInvoiceReferencedDocument := CreateCollection(TXMLInvoiceReferencedDocumentList, IXMLReferencedDocumentType, 'InvoiceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInvoiceReferencedDocumentList;
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedFinancialAdjustment := CreateCollection(TXMLSpecifiedFinancialAdjustmentList, IXMLFinancialAdjustmentType, 'SpecifiedFinancialAdjustment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedFinancialAdjustmentList;
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeAllowanceCharge := CreateCollection(TXMLSpecifiedTradeAllowanceChargeList, IXMLTradeAllowanceChargeType, 'SpecifiedTradeAllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeAllowanceChargeList;
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSubordinateLineTradeSettlementType.GetHasAmountDirectionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AmountDirectionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeSettlementType.GetAmountDirectionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['AmountDirectionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSubordinateLineTradeSettlementType.GetHasApplicableTradeTax: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLineTradeSettlementType.GetApplicableTradeTax: IXMLTradeTaxType;
begin
  Result := (ChildNodesNS['ApplicableTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeTaxType);
end;

function TXMLSubordinateLineTradeSettlementType.GetInvoiceReferencedDocument: IXMLInvoiceReferencedDocumentList;
begin
  Result := FInvoiceReferencedDocument;
end;

function TXMLSubordinateLineTradeSettlementType.GetSpecifiedFinancialAdjustment: IXMLSpecifiedFinancialAdjustmentList;
begin
  Result := FSpecifiedFinancialAdjustment;
end;

function TXMLSubordinateLineTradeSettlementType.GetSpecifiedTradeAllowanceCharge: IXMLSpecifiedTradeAllowanceChargeList;
begin
  Result := FSpecifiedTradeAllowanceCharge;
end;

function TXMLSpecifiedTradeAllowanceChargeListEnumerator.GetCurrent: IXMLTradeAllowanceChargeType;
begin
  Result := (inherited GetCurrent as IXMLTradeAllowanceChargeType);
end;

procedure TXMLSpecifiedTradeAllowanceChargeList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTradeAllowanceCharge';
  ItemInterface := IXMLTradeAllowanceChargeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTradeAllowanceChargeList.GetEnumerator: IXMLSpecifiedTradeAllowanceChargeListEnumerator;
begin
  Result := TXMLSpecifiedTradeAllowanceChargeListEnumerator.Create(Self);
end;

function TXMLSpecifiedTradeAllowanceChargeList.Get_SpecifiedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
begin
  Result := (List[Index] as IXMLTradeAllowanceChargeType);
end;

function TXMLSpecifiedTradeAllowanceChargeList.Add: IXMLTradeAllowanceChargeType;
begin
  Result := (AddItem(-1) as IXMLTradeAllowanceChargeType);
end;

function TXMLSpecifiedTradeAllowanceChargeList.Insert(Index: Integer): IXMLTradeAllowanceChargeType;
begin
  Result := (AddItem(Index) as IXMLTradeAllowanceChargeType);
end;

function TXMLSpecifiedFinancialAdjustmentListEnumerator.GetCurrent: IXMLFinancialAdjustmentType;
begin
  Result := (inherited GetCurrent as IXMLFinancialAdjustmentType);
end;

procedure TXMLSpecifiedFinancialAdjustmentList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedFinancialAdjustment', TXMLFinancialAdjustmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedFinancialAdjustment';
  ItemInterface := IXMLFinancialAdjustmentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedFinancialAdjustmentList.GetEnumerator: IXMLSpecifiedFinancialAdjustmentListEnumerator;
begin
  Result := TXMLSpecifiedFinancialAdjustmentListEnumerator.Create(Self);
end;

function TXMLSpecifiedFinancialAdjustmentList.Get_SpecifiedFinancialAdjustment(Index: Integer): IXMLFinancialAdjustmentType;
begin
  Result := (List[Index] as IXMLFinancialAdjustmentType);
end;

function TXMLSpecifiedFinancialAdjustmentList.Add: IXMLFinancialAdjustmentType;
begin
  Result := (AddItem(-1) as IXMLFinancialAdjustmentType);
end;

function TXMLSpecifiedFinancialAdjustmentList.Insert(Index: Integer): IXMLFinancialAdjustmentType;
begin
  Result := (AddItem(Index) as IXMLFinancialAdjustmentType);
end;

function TXMLInvoiceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLInvoiceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('InvoiceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InvoiceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInvoiceReferencedDocumentList.GetEnumerator: IXMLInvoiceReferencedDocumentListEnumerator;
begin
  Result := TXMLInvoiceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLInvoiceReferencedDocumentList.Get_InvoiceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLInvoiceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLInvoiceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

procedure TXMLSubordinateLocationType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLLocationFunctionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PhysicalGeographicalCoordinate', TXMLGeographicalCoordinateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSubordinateLocationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLocationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSubordinateLocationType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLocationType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSubordinateLocationType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLocationType.GetTypeCode: IXMLLocationFunctionCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLocationFunctionCodeType);
end;

function TXMLSubordinateLocationType.GetHasPhysicalGeographicalCoordinate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PhysicalGeographicalCoordinate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateLocationType.GetPhysicalGeographicalCoordinate: IXMLGeographicalCoordinateType;
begin
  Result := (ChildNodesNS['PhysicalGeographicalCoordinate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLGeographicalCoordinateType);
end;

procedure TXMLSubordinateTradeLineItemType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ResponseReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedReferencedProduct', TXMLReferencedProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeProduct', TXMLTradeProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableTradeProduct := CreateCollection(TXMLApplicableTradeProductList, IXMLTradeProductType, 'ApplicableTradeProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableTradeProductList;
  RegisterChildNode('ApplicableTradeProduct', TXMLTradeProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedSubordinateLineTradeAgreement', TXMLSubordinateLineTradeAgreementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedSubordinateLineTradeDelivery', TXMLSubordinateLineTradeDeliveryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedSubordinateLineTradeSettlement', TXMLSubordinateLineTradeSettlementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSubordinateTradeLineItemType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLSubordinateTradeLineItemType.GetHasResponseReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ResponseReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetResponseReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ResponseReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSubordinateTradeLineItemType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetCategoryCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSubordinateTradeLineItemType.GetHasSpecifiedReferencedProduct: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedReferencedProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetSpecifiedReferencedProduct: IXMLReferencedProductType;
begin
  Result := (ChildNodesNS['SpecifiedReferencedProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedProductType);
end;

function TXMLSubordinateTradeLineItemType.GetApplicableTradeProduct: IXMLApplicableTradeProductList;
begin
  Result := FApplicableTradeProduct;
end;

function TXMLSubordinateTradeLineItemType.GetHasSpecifiedSubordinateLineTradeAgreement: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedSubordinateLineTradeAgreement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetSpecifiedSubordinateLineTradeAgreement: IXMLSubordinateLineTradeAgreementType;
begin
  Result := (ChildNodesNS['SpecifiedSubordinateLineTradeAgreement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSubordinateLineTradeAgreementType);
end;

function TXMLSubordinateTradeLineItemType.GetHasSpecifiedSubordinateLineTradeDelivery: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedSubordinateLineTradeDelivery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetSpecifiedSubordinateLineTradeDelivery: IXMLSubordinateLineTradeDeliveryType;
begin
  Result := (ChildNodesNS['SpecifiedSubordinateLineTradeDelivery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSubordinateLineTradeDeliveryType);
end;

function TXMLSubordinateTradeLineItemType.GetHasSpecifiedSubordinateLineTradeSettlement: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedSubordinateLineTradeSettlement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSubordinateTradeLineItemType.GetSpecifiedSubordinateLineTradeSettlement: IXMLSubordinateLineTradeSettlementType;
begin
  Result := (ChildNodesNS['SpecifiedSubordinateLineTradeSettlement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSubordinateLineTradeSettlementType);
end;

function TXMLApplicableTradeProductListEnumerator.GetCurrent: IXMLTradeProductType;
begin
  Result := (inherited GetCurrent as IXMLTradeProductType);
end;

procedure TXMLApplicableTradeProductList.AfterConstruction;
begin
  RegisterChildNode('ApplicableTradeProduct', TXMLTradeProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableTradeProduct';
  ItemInterface := IXMLTradeProductType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableTradeProductList.GetEnumerator: IXMLApplicableTradeProductListEnumerator;
begin
  Result := TXMLApplicableTradeProductListEnumerator.Create(Self);
end;

function TXMLApplicableTradeProductList.Get_ApplicableTradeProduct(Index: Integer): IXMLTradeProductType;
begin
  Result := (List[Index] as IXMLTradeProductType);
end;

function TXMLApplicableTradeProductList.Add: IXMLTradeProductType;
begin
  Result := (AddItem(-1) as IXMLTradeProductType);
end;

function TXMLApplicableTradeProductList.Insert(Index: Integer): IXMLTradeProductType;
begin
  Result := (AddItem(Index) as IXMLTradeProductType);
end;

procedure TXMLSupplyChainConsignmentItemType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLGoodsTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeExtensionCode', TXMLGoodsTypeExtensionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeclaredValueForCustomsAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeclaredValueForStatisticsAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInvoiceAmount := CreateCollection(TXMLInvoiceAmountList, IXMLAmountType, 'InvoiceAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInvoiceAmountList;
  RegisterChildNode('InvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TariffQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGlobalID := CreateCollection(TXMLGlobalIDList, IXMLIDType, 'GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGlobalIDList;
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NatureIdentificationTransportCargo', TXMLTransportCargoType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTransportDangerousGoods', TXMLTransportDangerousGoodsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableTransportDangerousGoods := CreateCollection(TXMLApplicableTransportDangerousGoodsList, IXMLTransportDangerousGoodsType, 'ApplicableTransportDangerousGoods', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableTransportDangerousGoodsList;
  RegisterChildNode('ApplicableTransportDangerousGoods', TXMLTransportDangerousGoodsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PreviousAdministrativeReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPreviousAdministrativeReferencedDocument := CreateCollection(TXMLPreviousAdministrativeReferencedDocumentList, IXMLReferencedDocumentType, 'PreviousAdministrativeReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPreviousAdministrativeReferencedDocumentList;
  RegisterChildNode('PreviousAdministrativeReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableNote := CreateCollection(TXMLApplicableNoteList, IXMLNoteType, 'ApplicableNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableNoteList;
  RegisterChildNode('ApplicableNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSupplyChainConsignmentItemType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetTypeCode: IXMLGoodsTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLGoodsTypeCodeType);
end;

function TXMLSupplyChainConsignmentItemType.GetHasTypeExtensionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeExtensionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetTypeExtensionCode: IXMLGoodsTypeExtensionCodeType;
begin
  Result := (ChildNodesNS['TypeExtensionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLGoodsTypeExtensionCodeType);
end;

function TXMLSupplyChainConsignmentItemType.GetHasDeclaredValueForCustomsAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeclaredValueForCustomsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetDeclaredValueForCustomsAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['DeclaredValueForCustomsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLSupplyChainConsignmentItemType.GetHasDeclaredValueForStatisticsAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeclaredValueForStatisticsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetDeclaredValueForStatisticsAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['DeclaredValueForStatisticsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLSupplyChainConsignmentItemType.GetInvoiceAmount: IXMLInvoiceAmountList;
begin
  Result := FInvoiceAmount;
end;

function TXMLSupplyChainConsignmentItemType.GetHasGrossWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetGrossWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLSupplyChainConsignmentItemType.GetHasNetWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetNetWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLSupplyChainConsignmentItemType.GetHasTariffQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TariffQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetTariffQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['TariffQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainConsignmentItemType.GetGlobalID: IXMLGlobalIDList;
begin
  Result := FGlobalID;
end;

function TXMLSupplyChainConsignmentItemType.GetHasNatureIdentificationTransportCargo: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NatureIdentificationTransportCargo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentItemType.GetNatureIdentificationTransportCargo: IXMLTransportCargoType;
begin
  Result := (ChildNodesNS['NatureIdentificationTransportCargo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportCargoType);
end;

function TXMLSupplyChainConsignmentItemType.GetApplicableTransportDangerousGoods: IXMLApplicableTransportDangerousGoodsList;
begin
  Result := FApplicableTransportDangerousGoods;
end;

function TXMLSupplyChainConsignmentItemType.GetPreviousAdministrativeReferencedDocument: IXMLPreviousAdministrativeReferencedDocumentList;
begin
  Result := FPreviousAdministrativeReferencedDocument;
end;

function TXMLSupplyChainConsignmentItemType.GetApplicableNote: IXMLApplicableNoteList;
begin
  Result := FApplicableNote;
end;

function TXMLApplicableNoteListEnumerator.GetCurrent: IXMLNoteType;
begin
  Result := (inherited GetCurrent as IXMLNoteType);
end;

procedure TXMLApplicableNoteList.AfterConstruction;
begin
  RegisterChildNode('ApplicableNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableNote';
  ItemInterface := IXMLNoteType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableNoteList.GetEnumerator: IXMLApplicableNoteListEnumerator;
begin
  Result := TXMLApplicableNoteListEnumerator.Create(Self);
end;

function TXMLApplicableNoteList.Get_ApplicableNote(Index: Integer): IXMLNoteType;
begin
  Result := (List[Index] as IXMLNoteType);
end;

function TXMLApplicableNoteList.Add: IXMLNoteType;
begin
  Result := (AddItem(-1) as IXMLNoteType);
end;

function TXMLApplicableNoteList.Insert(Index: Integer): IXMLNoteType;
begin
  Result := (AddItem(Index) as IXMLNoteType);
end;

function TXMLPreviousAdministrativeReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLPreviousAdministrativeReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('PreviousAdministrativeReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PreviousAdministrativeReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPreviousAdministrativeReferencedDocumentList.GetEnumerator: IXMLPreviousAdministrativeReferencedDocumentListEnumerator;
begin
  Result := TXMLPreviousAdministrativeReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLPreviousAdministrativeReferencedDocumentList.Get_PreviousAdministrativeReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLPreviousAdministrativeReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLPreviousAdministrativeReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLApplicableTransportDangerousGoodsListEnumerator.GetCurrent: IXMLTransportDangerousGoodsType;
begin
  Result := (inherited GetCurrent as IXMLTransportDangerousGoodsType);
end;

procedure TXMLApplicableTransportDangerousGoodsList.AfterConstruction;
begin
  RegisterChildNode('ApplicableTransportDangerousGoods', TXMLTransportDangerousGoodsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableTransportDangerousGoods';
  ItemInterface := IXMLTransportDangerousGoodsType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableTransportDangerousGoodsList.GetEnumerator: IXMLApplicableTransportDangerousGoodsListEnumerator;
begin
  Result := TXMLApplicableTransportDangerousGoodsListEnumerator.Create(Self);
end;

function TXMLApplicableTransportDangerousGoodsList.Get_ApplicableTransportDangerousGoods(Index: Integer): IXMLTransportDangerousGoodsType;
begin
  Result := (List[Index] as IXMLTransportDangerousGoodsType);
end;

function TXMLApplicableTransportDangerousGoodsList.Add: IXMLTransportDangerousGoodsType;
begin
  Result := (AddItem(-1) as IXMLTransportDangerousGoodsType);
end;

function TXMLApplicableTransportDangerousGoodsList.Insert(Index: Integer): IXMLTransportDangerousGoodsType;
begin
  Result := (AddItem(Index) as IXMLTransportDangerousGoodsType);
end;

function TXMLInvoiceAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLInvoiceAmountList.AfterConstruction;
begin
  RegisterChildNode('InvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InvoiceAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInvoiceAmountList.GetEnumerator: IXMLInvoiceAmountListEnumerator;
begin
  Result := TXMLInvoiceAmountListEnumerator.Create(Self);
end;

function TXMLInvoiceAmountList.Get_InvoiceAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLInvoiceAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLInvoiceAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLSupplyChainConsignmentType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrossWeightMeasure := CreateCollection(TXMLGrossWeightMeasureList, IXMLWeightUnitMeasureType, 'GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrossWeightMeasureList;
  RegisterChildNode('GrossWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetWeightMeasure := CreateCollection(TXMLNetWeightMeasureList, IXMLWeightUnitMeasureType, 'NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetWeightMeasureList;
  RegisterChildNode('NetWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrossVolumeMeasure := CreateCollection(TXMLGrossVolumeMeasureList, IXMLVolumeUnitMeasureType, 'GrossVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrossVolumeMeasureList;
  RegisterChildNode('GrossVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeableWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InsurancePremiumAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedInvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAssociatedInvoiceAmount := CreateCollection(TXMLAssociatedInvoiceAmountList, IXMLAmountType, 'AssociatedInvoiceAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAssociatedInvoiceAmountList;
  RegisterChildNode('AssociatedInvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeclaredValueForCustomsAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackageQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetVolumeMeasure := CreateCollection(TXMLNetVolumeMeasureList, IXMLVolumeUnitMeasureType, 'NetVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetVolumeMeasureList;
  RegisterChildNode('NetVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConsignorTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConsigneeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CarrierTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FreightForwarderTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeliveryTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomsImportAgentTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomsExportAgentTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GroupingCentreTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGroupingCentreTradeParty := CreateCollection(TXMLGroupingCentreTradePartyList, IXMLTradePartyType, 'GroupingCentreTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGroupingCentreTradePartyList;
  RegisterChildNode('GroupingCentreTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TransitLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTransitLogisticsLocation := CreateCollection(TXMLTransitLogisticsLocationList, IXMLLogisticsLocationType, 'TransitLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTransitLogisticsLocationList;
  RegisterChildNode('TransitLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TransportContractReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAssociatedReferencedDocument := CreateCollection(TXMLAssociatedReferencedDocumentList, IXMLReferencedDocumentType, 'AssociatedReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAssociatedReferencedDocumentList;
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSupplyChainConsignmentItem', TXMLSupplyChainConsignmentItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedSupplyChainConsignmentItem := CreateCollection(TXMLIncludedSupplyChainConsignmentItemList, IXMLSupplyChainConsignmentItemType, 'IncludedSupplyChainConsignmentItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedSupplyChainConsignmentItemList;
  RegisterChildNode('IncludedSupplyChainConsignmentItem', TXMLSupplyChainConsignmentItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UtilizedLogisticsTransportEquipment', TXMLLogisticsTransportEquipmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUtilizedLogisticsTransportEquipment := CreateCollection(TXMLUtilizedLogisticsTransportEquipmentList, IXMLLogisticsTransportEquipmentType, 'UtilizedLogisticsTransportEquipment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUtilizedLogisticsTransportEquipmentList;
  RegisterChildNode('UtilizedLogisticsTransportEquipment', TXMLLogisticsTransportEquipmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLogisticsTransportMovement', TXMLLogisticsTransportMovementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedLogisticsTransportMovement := CreateCollection(TXMLSpecifiedLogisticsTransportMovementList, IXMLLogisticsTransportMovementType, 'SpecifiedLogisticsTransportMovement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedLogisticsTransportMovementList;
  RegisterChildNode('SpecifiedLogisticsTransportMovement', TXMLLogisticsTransportMovementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTransportCargoInsurance', TXMLTransportCargoInsuranceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableCrossBorderRegulatoryProcedure', TXMLCrossBorderRegulatoryProcedureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableCrossBorderRegulatoryProcedure := CreateCollection(TXMLApplicableCrossBorderRegulatoryProcedureList, IXMLCrossBorderRegulatoryProcedureType, 'ApplicableCrossBorderRegulatoryProcedure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableCrossBorderRegulatoryProcedureList;
  RegisterChildNode('ApplicableCrossBorderRegulatoryProcedure', TXMLCrossBorderRegulatoryProcedureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableCrossBorderCustomsValuation', TXMLCrossBorderCustomsValuationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableCrossBorderCustomsValuation := CreateCollection(TXMLApplicableCrossBorderCustomsValuationList, IXMLCrossBorderCustomsValuationType, 'ApplicableCrossBorderCustomsValuation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableCrossBorderCustomsValuationList;
  RegisterChildNode('ApplicableCrossBorderCustomsValuation', TXMLCrossBorderCustomsValuationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSupplyChainConsignmentType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSupplyChainConsignmentType.GetGrossWeightMeasure: IXMLGrossWeightMeasureList;
begin
  Result := FGrossWeightMeasure;
end;

function TXMLSupplyChainConsignmentType.GetNetWeightMeasure: IXMLNetWeightMeasureList;
begin
  Result := FNetWeightMeasure;
end;

function TXMLSupplyChainConsignmentType.GetGrossVolumeMeasure: IXMLGrossVolumeMeasureList;
begin
  Result := FGrossVolumeMeasure;
end;

function TXMLSupplyChainConsignmentType.GetHasChargeableWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeableWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetChargeableWeightMeasure: IXMLWeightUnitMeasureType;
begin
  Result := (ChildNodesNS['ChargeableWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWeightUnitMeasureType);
end;

function TXMLSupplyChainConsignmentType.GetHasInsurancePremiumAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InsurancePremiumAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetInsurancePremiumAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['InsurancePremiumAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLSupplyChainConsignmentType.GetAssociatedInvoiceAmount: IXMLAssociatedInvoiceAmountList;
begin
  Result := FAssociatedInvoiceAmount;
end;

function TXMLSupplyChainConsignmentType.GetHasTotalChargeAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TotalChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetTotalChargeAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['TotalChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLSupplyChainConsignmentType.GetHasDeclaredValueForCustomsAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeclaredValueForCustomsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetDeclaredValueForCustomsAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['DeclaredValueForCustomsAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLSupplyChainConsignmentType.GetHasPackageQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetPackageQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['PackageQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainConsignmentType.GetNetVolumeMeasure: IXMLNetVolumeMeasureList;
begin
  Result := FNetVolumeMeasure;
end;

function TXMLSupplyChainConsignmentType.GetHasConsignorTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConsignorTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetConsignorTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ConsignorTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasConsigneeTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConsigneeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetConsigneeTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ConsigneeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasCarrierTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CarrierTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetCarrierTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['CarrierTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasFreightForwarderTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FreightForwarderTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetFreightForwarderTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['FreightForwarderTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasDeliveryTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeliveryTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetDeliveryTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['DeliveryTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasCustomsImportAgentTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CustomsImportAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetCustomsImportAgentTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['CustomsImportAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetHasCustomsExportAgentTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CustomsExportAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetCustomsExportAgentTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['CustomsExportAgentTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLSupplyChainConsignmentType.GetGroupingCentreTradeParty: IXMLGroupingCentreTradePartyList;
begin
  Result := FGroupingCentreTradeParty;
end;

function TXMLSupplyChainConsignmentType.GetTransitLogisticsLocation: IXMLTransitLogisticsLocationList;
begin
  Result := FTransitLogisticsLocation;
end;

function TXMLSupplyChainConsignmentType.GetHasTransportContractReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TransportContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetTransportContractReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['TransportContractReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLSupplyChainConsignmentType.GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
begin
  Result := FAssociatedReferencedDocument;
end;

function TXMLSupplyChainConsignmentType.GetIncludedSupplyChainConsignmentItem: IXMLIncludedSupplyChainConsignmentItemList;
begin
  Result := FIncludedSupplyChainConsignmentItem;
end;

function TXMLSupplyChainConsignmentType.GetUtilizedLogisticsTransportEquipment: IXMLUtilizedLogisticsTransportEquipmentList;
begin
  Result := FUtilizedLogisticsTransportEquipment;
end;

function TXMLSupplyChainConsignmentType.GetSpecifiedLogisticsTransportMovement: IXMLSpecifiedLogisticsTransportMovementList;
begin
  Result := FSpecifiedLogisticsTransportMovement;
end;

function TXMLSupplyChainConsignmentType.GetHasApplicableTransportCargoInsurance: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTransportCargoInsurance', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainConsignmentType.GetApplicableTransportCargoInsurance: IXMLTransportCargoInsuranceType;
begin
  Result := (ChildNodesNS['ApplicableTransportCargoInsurance', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTransportCargoInsuranceType);
end;

function TXMLSupplyChainConsignmentType.GetApplicableCrossBorderRegulatoryProcedure: IXMLApplicableCrossBorderRegulatoryProcedureList;
begin
  Result := FApplicableCrossBorderRegulatoryProcedure;
end;

function TXMLSupplyChainConsignmentType.GetApplicableCrossBorderCustomsValuation: IXMLApplicableCrossBorderCustomsValuationList;
begin
  Result := FApplicableCrossBorderCustomsValuation;
end;

function TXMLApplicableCrossBorderCustomsValuationListEnumerator.GetCurrent: IXMLCrossBorderCustomsValuationType;
begin
  Result := (inherited GetCurrent as IXMLCrossBorderCustomsValuationType);
end;

procedure TXMLApplicableCrossBorderCustomsValuationList.AfterConstruction;
begin
  RegisterChildNode('ApplicableCrossBorderCustomsValuation', TXMLCrossBorderCustomsValuationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableCrossBorderCustomsValuation';
  ItemInterface := IXMLCrossBorderCustomsValuationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableCrossBorderCustomsValuationList.GetEnumerator: IXMLApplicableCrossBorderCustomsValuationListEnumerator;
begin
  Result := TXMLApplicableCrossBorderCustomsValuationListEnumerator.Create(Self);
end;

function TXMLApplicableCrossBorderCustomsValuationList.Get_ApplicableCrossBorderCustomsValuation(Index: Integer): IXMLCrossBorderCustomsValuationType;
begin
  Result := (List[Index] as IXMLCrossBorderCustomsValuationType);
end;

function TXMLApplicableCrossBorderCustomsValuationList.Add: IXMLCrossBorderCustomsValuationType;
begin
  Result := (AddItem(-1) as IXMLCrossBorderCustomsValuationType);
end;

function TXMLApplicableCrossBorderCustomsValuationList.Insert(Index: Integer): IXMLCrossBorderCustomsValuationType;
begin
  Result := (AddItem(Index) as IXMLCrossBorderCustomsValuationType);
end;

function TXMLApplicableCrossBorderRegulatoryProcedureListEnumerator.GetCurrent: IXMLCrossBorderRegulatoryProcedureType;
begin
  Result := (inherited GetCurrent as IXMLCrossBorderRegulatoryProcedureType);
end;

procedure TXMLApplicableCrossBorderRegulatoryProcedureList.AfterConstruction;
begin
  RegisterChildNode('ApplicableCrossBorderRegulatoryProcedure', TXMLCrossBorderRegulatoryProcedureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableCrossBorderRegulatoryProcedure';
  ItemInterface := IXMLCrossBorderRegulatoryProcedureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableCrossBorderRegulatoryProcedureList.GetEnumerator: IXMLApplicableCrossBorderRegulatoryProcedureListEnumerator;
begin
  Result := TXMLApplicableCrossBorderRegulatoryProcedureListEnumerator.Create(Self);
end;

function TXMLApplicableCrossBorderRegulatoryProcedureList.Get_ApplicableCrossBorderRegulatoryProcedure(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;
begin
  Result := (List[Index] as IXMLCrossBorderRegulatoryProcedureType);
end;

function TXMLApplicableCrossBorderRegulatoryProcedureList.Add: IXMLCrossBorderRegulatoryProcedureType;
begin
  Result := (AddItem(-1) as IXMLCrossBorderRegulatoryProcedureType);
end;

function TXMLApplicableCrossBorderRegulatoryProcedureList.Insert(Index: Integer): IXMLCrossBorderRegulatoryProcedureType;
begin
  Result := (AddItem(Index) as IXMLCrossBorderRegulatoryProcedureType);
end;

function TXMLSpecifiedLogisticsTransportMovementListEnumerator.GetCurrent: IXMLLogisticsTransportMovementType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsTransportMovementType);
end;

procedure TXMLSpecifiedLogisticsTransportMovementList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedLogisticsTransportMovement', TXMLLogisticsTransportMovementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedLogisticsTransportMovement';
  ItemInterface := IXMLLogisticsTransportMovementType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedLogisticsTransportMovementList.GetEnumerator: IXMLSpecifiedLogisticsTransportMovementListEnumerator;
begin
  Result := TXMLSpecifiedLogisticsTransportMovementListEnumerator.Create(Self);
end;

function TXMLSpecifiedLogisticsTransportMovementList.Get_SpecifiedLogisticsTransportMovement(Index: Integer): IXMLLogisticsTransportMovementType;
begin
  Result := (List[Index] as IXMLLogisticsTransportMovementType);
end;

function TXMLSpecifiedLogisticsTransportMovementList.Add: IXMLLogisticsTransportMovementType;
begin
  Result := (AddItem(-1) as IXMLLogisticsTransportMovementType);
end;

function TXMLSpecifiedLogisticsTransportMovementList.Insert(Index: Integer): IXMLLogisticsTransportMovementType;
begin
  Result := (AddItem(Index) as IXMLLogisticsTransportMovementType);
end;

function TXMLUtilizedLogisticsTransportEquipmentListEnumerator.GetCurrent: IXMLLogisticsTransportEquipmentType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsTransportEquipmentType);
end;

procedure TXMLUtilizedLogisticsTransportEquipmentList.AfterConstruction;
begin
  RegisterChildNode('UtilizedLogisticsTransportEquipment', TXMLLogisticsTransportEquipmentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UtilizedLogisticsTransportEquipment';
  ItemInterface := IXMLLogisticsTransportEquipmentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUtilizedLogisticsTransportEquipmentList.GetEnumerator: IXMLUtilizedLogisticsTransportEquipmentListEnumerator;
begin
  Result := TXMLUtilizedLogisticsTransportEquipmentListEnumerator.Create(Self);
end;

function TXMLUtilizedLogisticsTransportEquipmentList.Get_UtilizedLogisticsTransportEquipment(Index: Integer): IXMLLogisticsTransportEquipmentType;
begin
  Result := (List[Index] as IXMLLogisticsTransportEquipmentType);
end;

function TXMLUtilizedLogisticsTransportEquipmentList.Add: IXMLLogisticsTransportEquipmentType;
begin
  Result := (AddItem(-1) as IXMLLogisticsTransportEquipmentType);
end;

function TXMLUtilizedLogisticsTransportEquipmentList.Insert(Index: Integer): IXMLLogisticsTransportEquipmentType;
begin
  Result := (AddItem(Index) as IXMLLogisticsTransportEquipmentType);
end;

function TXMLIncludedSupplyChainConsignmentItemListEnumerator.GetCurrent: IXMLSupplyChainConsignmentItemType;
begin
  Result := (inherited GetCurrent as IXMLSupplyChainConsignmentItemType);
end;

procedure TXMLIncludedSupplyChainConsignmentItemList.AfterConstruction;
begin
  RegisterChildNode('IncludedSupplyChainConsignmentItem', TXMLSupplyChainConsignmentItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedSupplyChainConsignmentItem';
  ItemInterface := IXMLSupplyChainConsignmentItemType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedSupplyChainConsignmentItemList.GetEnumerator: IXMLIncludedSupplyChainConsignmentItemListEnumerator;
begin
  Result := TXMLIncludedSupplyChainConsignmentItemListEnumerator.Create(Self);
end;

function TXMLIncludedSupplyChainConsignmentItemList.Get_IncludedSupplyChainConsignmentItem(Index: Integer): IXMLSupplyChainConsignmentItemType;
begin
  Result := (List[Index] as IXMLSupplyChainConsignmentItemType);
end;

function TXMLIncludedSupplyChainConsignmentItemList.Add: IXMLSupplyChainConsignmentItemType;
begin
  Result := (AddItem(-1) as IXMLSupplyChainConsignmentItemType);
end;

function TXMLIncludedSupplyChainConsignmentItemList.Insert(Index: Integer): IXMLSupplyChainConsignmentItemType;
begin
  Result := (AddItem(Index) as IXMLSupplyChainConsignmentItemType);
end;

function TXMLTransitLogisticsLocationListEnumerator.GetCurrent: IXMLLogisticsLocationType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsLocationType);
end;

procedure TXMLTransitLogisticsLocationList.AfterConstruction;
begin
  RegisterChildNode('TransitLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TransitLogisticsLocation';
  ItemInterface := IXMLLogisticsLocationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTransitLogisticsLocationList.GetEnumerator: IXMLTransitLogisticsLocationListEnumerator;
begin
  Result := TXMLTransitLogisticsLocationListEnumerator.Create(Self);
end;

function TXMLTransitLogisticsLocationList.Get_TransitLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
begin
  Result := (List[Index] as IXMLLogisticsLocationType);
end;

function TXMLTransitLogisticsLocationList.Add: IXMLLogisticsLocationType;
begin
  Result := (AddItem(-1) as IXMLLogisticsLocationType);
end;

function TXMLTransitLogisticsLocationList.Insert(Index: Integer): IXMLLogisticsLocationType;
begin
  Result := (AddItem(Index) as IXMLLogisticsLocationType);
end;

function TXMLGroupingCentreTradePartyListEnumerator.GetCurrent: IXMLTradePartyType;
begin
  Result := (inherited GetCurrent as IXMLTradePartyType);
end;

procedure TXMLGroupingCentreTradePartyList.AfterConstruction;
begin
  RegisterChildNode('GroupingCentreTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GroupingCentreTradeParty';
  ItemInterface := IXMLTradePartyType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGroupingCentreTradePartyList.GetEnumerator: IXMLGroupingCentreTradePartyListEnumerator;
begin
  Result := TXMLGroupingCentreTradePartyListEnumerator.Create(Self);
end;

function TXMLGroupingCentreTradePartyList.Get_GroupingCentreTradeParty(Index: Integer): IXMLTradePartyType;
begin
  Result := (List[Index] as IXMLTradePartyType);
end;

function TXMLGroupingCentreTradePartyList.Add: IXMLTradePartyType;
begin
  Result := (AddItem(-1) as IXMLTradePartyType);
end;

function TXMLGroupingCentreTradePartyList.Insert(Index: Integer): IXMLTradePartyType;
begin
  Result := (AddItem(Index) as IXMLTradePartyType);
end;

function TXMLNetVolumeMeasureListEnumerator.GetCurrent: IXMLVolumeUnitMeasureType;
begin
  Result := (inherited GetCurrent as IXMLVolumeUnitMeasureType);
end;

procedure TXMLNetVolumeMeasureList.AfterConstruction;
begin
  RegisterChildNode('NetVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetVolumeMeasure';
  ItemInterface := IXMLVolumeUnitMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetVolumeMeasureList.GetEnumerator: IXMLNetVolumeMeasureListEnumerator;
begin
  Result := TXMLNetVolumeMeasureListEnumerator.Create(Self);
end;

function TXMLNetVolumeMeasureList.Get_NetVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
begin
  Result := (List[Index] as IXMLVolumeUnitMeasureType);
end;

function TXMLNetVolumeMeasureList.Add: IXMLVolumeUnitMeasureType;
begin
  Result := (AddItem(-1) as IXMLVolumeUnitMeasureType);
end;

function TXMLNetVolumeMeasureList.Insert(Index: Integer): IXMLVolumeUnitMeasureType;
begin
  Result := (AddItem(Index) as IXMLVolumeUnitMeasureType);
end;

function TXMLAssociatedInvoiceAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLAssociatedInvoiceAmountList.AfterConstruction;
begin
  RegisterChildNode('AssociatedInvoiceAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AssociatedInvoiceAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAssociatedInvoiceAmountList.GetEnumerator: IXMLAssociatedInvoiceAmountListEnumerator;
begin
  Result := TXMLAssociatedInvoiceAmountListEnumerator.Create(Self);
end;

function TXMLAssociatedInvoiceAmountList.Get_AssociatedInvoiceAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLAssociatedInvoiceAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLAssociatedInvoiceAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLGrossVolumeMeasureListEnumerator.GetCurrent: IXMLVolumeUnitMeasureType;
begin
  Result := (inherited GetCurrent as IXMLVolumeUnitMeasureType);
end;

procedure TXMLGrossVolumeMeasureList.AfterConstruction;
begin
  RegisterChildNode('GrossVolumeMeasure', TXMLVolumeUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GrossVolumeMeasure';
  ItemInterface := IXMLVolumeUnitMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGrossVolumeMeasureList.GetEnumerator: IXMLGrossVolumeMeasureListEnumerator;
begin
  Result := TXMLGrossVolumeMeasureListEnumerator.Create(Self);
end;

function TXMLGrossVolumeMeasureList.Get_GrossVolumeMeasure(Index: Integer): IXMLVolumeUnitMeasureType;
begin
  Result := (List[Index] as IXMLVolumeUnitMeasureType);
end;

function TXMLGrossVolumeMeasureList.Add: IXMLVolumeUnitMeasureType;
begin
  Result := (AddItem(-1) as IXMLVolumeUnitMeasureType);
end;

function TXMLGrossVolumeMeasureList.Insert(Index: Integer): IXMLVolumeUnitMeasureType;
begin
  Result := (AddItem(Index) as IXMLVolumeUnitMeasureType);
end;

function TXMLNetWeightMeasureListEnumerator.GetCurrent: IXMLWeightUnitMeasureType;
begin
  Result := (inherited GetCurrent as IXMLWeightUnitMeasureType);
end;

procedure TXMLNetWeightMeasureList.AfterConstruction;
begin
  RegisterChildNode('NetWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetWeightMeasure';
  ItemInterface := IXMLWeightUnitMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetWeightMeasureList.GetEnumerator: IXMLNetWeightMeasureListEnumerator;
begin
  Result := TXMLNetWeightMeasureListEnumerator.Create(Self);
end;

function TXMLNetWeightMeasureList.Get_NetWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
begin
  Result := (List[Index] as IXMLWeightUnitMeasureType);
end;

function TXMLNetWeightMeasureList.Add: IXMLWeightUnitMeasureType;
begin
  Result := (AddItem(-1) as IXMLWeightUnitMeasureType);
end;

function TXMLNetWeightMeasureList.Insert(Index: Integer): IXMLWeightUnitMeasureType;
begin
  Result := (AddItem(Index) as IXMLWeightUnitMeasureType);
end;

function TXMLGrossWeightMeasureListEnumerator.GetCurrent: IXMLWeightUnitMeasureType;
begin
  Result := (inherited GetCurrent as IXMLWeightUnitMeasureType);
end;

procedure TXMLGrossWeightMeasureList.AfterConstruction;
begin
  RegisterChildNode('GrossWeightMeasure', TXMLWeightUnitMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GrossWeightMeasure';
  ItemInterface := IXMLWeightUnitMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGrossWeightMeasureList.GetEnumerator: IXMLGrossWeightMeasureListEnumerator;
begin
  Result := TXMLGrossWeightMeasureListEnumerator.Create(Self);
end;

function TXMLGrossWeightMeasureList.Get_GrossWeightMeasure(Index: Integer): IXMLWeightUnitMeasureType;
begin
  Result := (List[Index] as IXMLWeightUnitMeasureType);
end;

function TXMLGrossWeightMeasureList.Add: IXMLWeightUnitMeasureType;
begin
  Result := (AddItem(-1) as IXMLWeightUnitMeasureType);
end;

function TXMLGrossWeightMeasureList.Insert(Index: Integer): IXMLWeightUnitMeasureType;
begin
  Result := (AddItem(Index) as IXMLWeightUnitMeasureType);
end;

procedure TXMLSupplyChainEventType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OccurrenceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DescriptionBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescriptionBinaryObject := CreateCollection(TXMLDescriptionBinaryObjectList, IXMLBinaryObjectType, 'DescriptionBinaryObject', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionBinaryObjectList;
  RegisterChildNode('DescriptionBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LatestOccurrenceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EarliestOccurrenceDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TimeOccurrenceDateTime', TXMLTimeOnlyFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OccurrenceSpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OccurrenceLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSupplyChainEventType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLSupplyChainEventType.GetHasOccurrenceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetOccurrenceDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['OccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSupplyChainEventType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSupplyChainEventType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLSupplyChainEventType.GetDescriptionBinaryObject: IXMLDescriptionBinaryObjectList;
begin
  Result := FDescriptionBinaryObject;
end;

function TXMLSupplyChainEventType.GetHasUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['UnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainEventType.GetHasLatestOccurrenceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LatestOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetLatestOccurrenceDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['LatestOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSupplyChainEventType.GetHasEarliestOccurrenceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EarliestOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetEarliestOccurrenceDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['EarliestOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLSupplyChainEventType.GetHasTimeOccurrenceDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TimeOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetTimeOccurrenceDateTime: IXMLTimeOnlyFormattedDateTimeType;
begin
  Result := (ChildNodesNS['TimeOccurrenceDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTimeOnlyFormattedDateTimeType);
end;

function TXMLSupplyChainEventType.GetHasOccurrenceSpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OccurrenceSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetOccurrenceSpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['OccurrenceSpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLSupplyChainEventType.GetHasOccurrenceLogisticsLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OccurrenceLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainEventType.GetOccurrenceLogisticsLocation: IXMLLogisticsLocationType;
begin
  Result := (ChildNodesNS['OccurrenceLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLogisticsLocationType);
end;

function TXMLDescriptionBinaryObjectListEnumerator.GetCurrent: IXMLBinaryObjectType;
begin
  Result := (inherited GetCurrent as IXMLBinaryObjectType);
end;

procedure TXMLDescriptionBinaryObjectList.AfterConstruction;
begin
  RegisterChildNode('DescriptionBinaryObject', TXMLBinaryObjectType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DescriptionBinaryObject';
  ItemInterface := IXMLBinaryObjectType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDescriptionBinaryObjectList.GetEnumerator: IXMLDescriptionBinaryObjectListEnumerator;
begin
  Result := TXMLDescriptionBinaryObjectListEnumerator.Create(Self);
end;

function TXMLDescriptionBinaryObjectList.Get_DescriptionBinaryObject(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (List[Index] as IXMLBinaryObjectType);
end;

function TXMLDescriptionBinaryObjectList.Add: IXMLBinaryObjectType;
begin
  Result := (AddItem(-1) as IXMLBinaryObjectType);
end;

function TXMLDescriptionBinaryObjectList.Insert(Index: Integer): IXMLBinaryObjectType;
begin
  Result := (AddItem(Index) as IXMLBinaryObjectType);
end;

procedure TXMLSupplyChainPackagingType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLPackageTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConditionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DisposalMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDisposalMethodCode := CreateCollection(TXMLDisposalMethodCodeList, IXMLCodeType, 'DisposalMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDisposalMethodCodeList;
  RegisterChildNode('DisposalMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('WeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FWeightMeasure := CreateCollection(TXMLWeightMeasureList, IXMLMeasureType, 'WeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLWeightMeasureList;
  RegisterChildNode('WeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumStackabilityQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumStackabilityWeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomerFacingTotalUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LayerTotalUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentLayerQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalInstructionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalInstructionCode := CreateCollection(TXMLAdditionalInstructionCodeList, IXMLCodeType, 'AdditionalInstructionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalInstructionCodeList;
  RegisterChildNode('AdditionalInstructionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalInstructionIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MinimumLinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumLinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedPackagingMarking', TXMLPackagingMarkingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedPackagingMarking := CreateCollection(TXMLSpecifiedPackagingMarkingList, IXMLPackagingMarkingType, 'SpecifiedPackagingMarking', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedPackagingMarkingList;
  RegisterChildNode('SpecifiedPackagingMarking', TXMLPackagingMarkingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableMaterialGoodsCharacteristic := CreateCollection(TXMLApplicableMaterialGoodsCharacteristicList, IXMLMaterialGoodsCharacteristicType, 'ApplicableMaterialGoodsCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableMaterialGoodsCharacteristicList;
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableDisposalInstructions', TXMLDisposalInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableDisposalInstructions := CreateCollection(TXMLApplicableDisposalInstructionsList, IXMLDisposalInstructionsType, 'ApplicableDisposalInstructions', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableDisposalInstructionsList;
  RegisterChildNode('ApplicableDisposalInstructions', TXMLDisposalInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableReturnableAssetInstructions', TXMLReturnableAssetInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableReturnableAssetInstructions := CreateCollection(TXMLApplicableReturnableAssetInstructionsList, IXMLReturnableAssetInstructionsType, 'ApplicableReturnableAssetInstructions', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableReturnableAssetInstructionsList;
  RegisterChildNode('ApplicableReturnableAssetInstructions', TXMLReturnableAssetInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLSupplyChainPackagingType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetTypeCode: IXMLPackageTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPackageTypeCodeType);
end;

function TXMLSupplyChainPackagingType.GetHas_Type: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.Get_Type: IXMLTextType;
begin
  Result := (ChildNodesNS['Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLSupplyChainPackagingType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLSupplyChainPackagingType.GetHasConditionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConditionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetConditionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ConditionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSupplyChainPackagingType.GetDisposalMethodCode: IXMLDisposalMethodCodeList;
begin
  Result := FDisposalMethodCode;
end;

function TXMLSupplyChainPackagingType.GetWeightMeasure: IXMLWeightMeasureList;
begin
  Result := FWeightMeasure;
end;

function TXMLSupplyChainPackagingType.GetHasMaximumStackabilityQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumStackabilityQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetMaximumStackabilityQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['MaximumStackabilityQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainPackagingType.GetHasMaximumStackabilityWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumStackabilityWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetMaximumStackabilityWeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['MaximumStackabilityWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLSupplyChainPackagingType.GetHasCustomerFacingTotalUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CustomerFacingTotalUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetCustomerFacingTotalUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['CustomerFacingTotalUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainPackagingType.GetHasLayerTotalUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LayerTotalUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetLayerTotalUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['LayerTotalUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainPackagingType.GetHasContentLayerQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContentLayerQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetContentLayerQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ContentLayerQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLSupplyChainPackagingType.GetAdditionalInstructionCode: IXMLAdditionalInstructionCodeList;
begin
  Result := FAdditionalInstructionCode;
end;

function TXMLSupplyChainPackagingType.GetHasAdditionalInstructionIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AdditionalInstructionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetAdditionalInstructionIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['AdditionalInstructionIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLSupplyChainPackagingType.GetHasLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['LinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLSupplyChainPackagingType.GetHasMinimumLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MinimumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['MinimumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLSupplyChainPackagingType.GetHasMaximumLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainPackagingType.GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['MaximumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLSupplyChainPackagingType.GetSpecifiedPackagingMarking: IXMLSpecifiedPackagingMarkingList;
begin
  Result := FSpecifiedPackagingMarking;
end;

function TXMLSupplyChainPackagingType.GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
begin
  Result := FApplicableMaterialGoodsCharacteristic;
end;

function TXMLSupplyChainPackagingType.GetApplicableDisposalInstructions: IXMLApplicableDisposalInstructionsList;
begin
  Result := FApplicableDisposalInstructions;
end;

function TXMLSupplyChainPackagingType.GetApplicableReturnableAssetInstructions: IXMLApplicableReturnableAssetInstructionsList;
begin
  Result := FApplicableReturnableAssetInstructions;
end;

function TXMLApplicableReturnableAssetInstructionsListEnumerator.GetCurrent: IXMLReturnableAssetInstructionsType;
begin
  Result := (inherited GetCurrent as IXMLReturnableAssetInstructionsType);
end;

procedure TXMLApplicableReturnableAssetInstructionsList.AfterConstruction;
begin
  RegisterChildNode('ApplicableReturnableAssetInstructions', TXMLReturnableAssetInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableReturnableAssetInstructions';
  ItemInterface := IXMLReturnableAssetInstructionsType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableReturnableAssetInstructionsList.GetEnumerator: IXMLApplicableReturnableAssetInstructionsListEnumerator;
begin
  Result := TXMLApplicableReturnableAssetInstructionsListEnumerator.Create(Self);
end;

function TXMLApplicableReturnableAssetInstructionsList.Get_ApplicableReturnableAssetInstructions(Index: Integer): IXMLReturnableAssetInstructionsType;
begin
  Result := (List[Index] as IXMLReturnableAssetInstructionsType);
end;

function TXMLApplicableReturnableAssetInstructionsList.Add: IXMLReturnableAssetInstructionsType;
begin
  Result := (AddItem(-1) as IXMLReturnableAssetInstructionsType);
end;

function TXMLApplicableReturnableAssetInstructionsList.Insert(Index: Integer): IXMLReturnableAssetInstructionsType;
begin
  Result := (AddItem(Index) as IXMLReturnableAssetInstructionsType);
end;

function TXMLApplicableDisposalInstructionsListEnumerator.GetCurrent: IXMLDisposalInstructionsType;
begin
  Result := (inherited GetCurrent as IXMLDisposalInstructionsType);
end;

procedure TXMLApplicableDisposalInstructionsList.AfterConstruction;
begin
  RegisterChildNode('ApplicableDisposalInstructions', TXMLDisposalInstructionsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableDisposalInstructions';
  ItemInterface := IXMLDisposalInstructionsType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableDisposalInstructionsList.GetEnumerator: IXMLApplicableDisposalInstructionsListEnumerator;
begin
  Result := TXMLApplicableDisposalInstructionsListEnumerator.Create(Self);
end;

function TXMLApplicableDisposalInstructionsList.Get_ApplicableDisposalInstructions(Index: Integer): IXMLDisposalInstructionsType;
begin
  Result := (List[Index] as IXMLDisposalInstructionsType);
end;

function TXMLApplicableDisposalInstructionsList.Add: IXMLDisposalInstructionsType;
begin
  Result := (AddItem(-1) as IXMLDisposalInstructionsType);
end;

function TXMLApplicableDisposalInstructionsList.Insert(Index: Integer): IXMLDisposalInstructionsType;
begin
  Result := (AddItem(Index) as IXMLDisposalInstructionsType);
end;

function TXMLSpecifiedPackagingMarkingListEnumerator.GetCurrent: IXMLPackagingMarkingType;
begin
  Result := (inherited GetCurrent as IXMLPackagingMarkingType);
end;

procedure TXMLSpecifiedPackagingMarkingList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedPackagingMarking', TXMLPackagingMarkingType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedPackagingMarking';
  ItemInterface := IXMLPackagingMarkingType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedPackagingMarkingList.GetEnumerator: IXMLSpecifiedPackagingMarkingListEnumerator;
begin
  Result := TXMLSpecifiedPackagingMarkingListEnumerator.Create(Self);
end;

function TXMLSpecifiedPackagingMarkingList.Get_SpecifiedPackagingMarking(Index: Integer): IXMLPackagingMarkingType;
begin
  Result := (List[Index] as IXMLPackagingMarkingType);
end;

function TXMLSpecifiedPackagingMarkingList.Add: IXMLPackagingMarkingType;
begin
  Result := (AddItem(-1) as IXMLPackagingMarkingType);
end;

function TXMLSpecifiedPackagingMarkingList.Insert(Index: Integer): IXMLPackagingMarkingType;
begin
  Result := (AddItem(Index) as IXMLPackagingMarkingType);
end;

function TXMLAdditionalInstructionCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLAdditionalInstructionCodeList.AfterConstruction;
begin
  RegisterChildNode('AdditionalInstructionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AdditionalInstructionCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAdditionalInstructionCodeList.GetEnumerator: IXMLAdditionalInstructionCodeListEnumerator;
begin
  Result := TXMLAdditionalInstructionCodeListEnumerator.Create(Self);
end;

function TXMLAdditionalInstructionCodeList.Get_AdditionalInstructionCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLAdditionalInstructionCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLAdditionalInstructionCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLWeightMeasureListEnumerator.GetCurrent: IXMLMeasureType;
begin
  Result := (inherited GetCurrent as IXMLMeasureType);
end;

procedure TXMLWeightMeasureList.AfterConstruction;
begin
  RegisterChildNode('WeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'WeightMeasure';
  ItemInterface := IXMLMeasureType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLWeightMeasureList.GetEnumerator: IXMLWeightMeasureListEnumerator;
begin
  Result := TXMLWeightMeasureListEnumerator.Create(Self);
end;

function TXMLWeightMeasureList.Get_WeightMeasure(Index: Integer): IXMLMeasureType;
begin
  Result := (List[Index] as IXMLMeasureType);
end;

function TXMLWeightMeasureList.Add: IXMLMeasureType;
begin
  Result := (AddItem(-1) as IXMLMeasureType);
end;

function TXMLWeightMeasureList.Insert(Index: Integer): IXMLMeasureType;
begin
  Result := (AddItem(Index) as IXMLMeasureType);
end;

function TXMLDisposalMethodCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLDisposalMethodCodeList.AfterConstruction;
begin
  RegisterChildNode('DisposalMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DisposalMethodCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDisposalMethodCodeList.GetEnumerator: IXMLDisposalMethodCodeListEnumerator;
begin
  Result := TXMLDisposalMethodCodeListEnumerator.Create(Self);
end;

function TXMLDisposalMethodCodeList.Get_DisposalMethodCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLDisposalMethodCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLDisposalMethodCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

procedure TXMLSupplyChainTradeLineItemType.AfterConstruction;
begin
  RegisterChildNode('DescriptionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedDocumentLineDocument', TXMLDocumentLineDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeProduct', TXMLTradeProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalInformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalInformationNote := CreateCollection(TXMLAdditionalInformationNoteList, IXMLNoteType, 'AdditionalInformationNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalInformationNoteList;
  RegisterChildNode('AdditionalInformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLineTradeAgreement', TXMLLineTradeAgreementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLineTradeDelivery', TXMLLineTradeDeliveryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLineTradeSettlement', TXMLLineTradeSettlementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSubordinateTradeLineItem', TXMLSubordinateTradeLineItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedSubordinateTradeLineItem := CreateCollection(TXMLIncludedSubordinateTradeLineItemList, IXMLSubordinateTradeLineItemType, 'IncludedSubordinateTradeLineItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedSubordinateTradeLineItemList;
  RegisterChildNode('IncludedSubordinateTradeLineItem', TXMLSubordinateTradeLineItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLSupplyChainTradeLineItemType.XSDValidate;
begin
  GetSpecifiedLineTradeSettlement;
  SortChildNodes(Self, ['DescriptionCode', 'AssociatedDocumentLineDocument', 'SpecifiedTradeProduct', 'AdditionalInformationNote', 'SpecifiedLineTradeAgreement', 
    'SpecifiedLineTradeDelivery', 'SpecifiedLineTradeSettlement', 'IncludedSubordinateTradeLineItem']);
end;

procedure TXMLSupplyChainTradeLineItemType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetSpecifiedLineTradeSettlement;
  SortChildNodes(Self, ['DescriptionCode', 'AssociatedDocumentLineDocument', 'SpecifiedTradeProduct', 'AdditionalInformationNote', 'SpecifiedLineTradeAgreement', 
    'SpecifiedLineTradeDelivery', 'SpecifiedLineTradeSettlement', 'IncludedSubordinateTradeLineItem']);
end;

function TXMLSupplyChainTradeLineItemType.GetHasDescriptionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DescriptionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainTradeLineItemType.GetDescriptionCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['DescriptionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLSupplyChainTradeLineItemType.GetHasAssociatedDocumentLineDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AssociatedDocumentLineDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainTradeLineItemType.GetAssociatedDocumentLineDocument: IXMLDocumentLineDocumentType;
begin
  Result := (ChildNodesNS['AssociatedDocumentLineDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDocumentLineDocumentType);
end;

function TXMLSupplyChainTradeLineItemType.GetHasSpecifiedTradeProduct: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedTradeProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainTradeLineItemType.GetSpecifiedTradeProduct: IXMLTradeProductType;
begin
  Result := (ChildNodesNS['SpecifiedTradeProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeProductType);
end;

function TXMLSupplyChainTradeLineItemType.GetAdditionalInformationNote: IXMLAdditionalInformationNoteList;
begin
  Result := FAdditionalInformationNote;
end;

function TXMLSupplyChainTradeLineItemType.GetHasSpecifiedLineTradeAgreement: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedLineTradeAgreement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainTradeLineItemType.GetSpecifiedLineTradeAgreement: IXMLLineTradeAgreementType;
begin
  Result := (ChildNodesNS['SpecifiedLineTradeAgreement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLineTradeAgreementType);
end;

function TXMLSupplyChainTradeLineItemType.GetHasSpecifiedLineTradeDelivery: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedLineTradeDelivery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLSupplyChainTradeLineItemType.GetSpecifiedLineTradeDelivery: IXMLLineTradeDeliveryType;
begin
  Result := (ChildNodesNS['SpecifiedLineTradeDelivery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLineTradeDeliveryType);
end;

function TXMLSupplyChainTradeLineItemType.GetSpecifiedLineTradeSettlement: IXMLLineTradeSettlementType;
begin
  Result := (ChildNodesNS['SpecifiedLineTradeSettlement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLineTradeSettlementType);
end;

function TXMLSupplyChainTradeLineItemType.GetIncludedSubordinateTradeLineItem: IXMLIncludedSubordinateTradeLineItemList;
begin
  Result := FIncludedSubordinateTradeLineItem;
end;

function TXMLIncludedSubordinateTradeLineItemListEnumerator.GetCurrent: IXMLSubordinateTradeLineItemType;
begin
  Result := (inherited GetCurrent as IXMLSubordinateTradeLineItemType);
end;

procedure TXMLIncludedSubordinateTradeLineItemList.AfterConstruction;
begin
  RegisterChildNode('IncludedSubordinateTradeLineItem', TXMLSubordinateTradeLineItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedSubordinateTradeLineItem';
  ItemInterface := IXMLSubordinateTradeLineItemType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedSubordinateTradeLineItemList.GetEnumerator: IXMLIncludedSubordinateTradeLineItemListEnumerator;
begin
  Result := TXMLIncludedSubordinateTradeLineItemListEnumerator.Create(Self);
end;

function TXMLIncludedSubordinateTradeLineItemList.Get_IncludedSubordinateTradeLineItem(Index: Integer): IXMLSubordinateTradeLineItemType;
begin
  Result := (List[Index] as IXMLSubordinateTradeLineItemType);
end;

function TXMLIncludedSubordinateTradeLineItemList.Add: IXMLSubordinateTradeLineItemType;
begin
  Result := (AddItem(-1) as IXMLSubordinateTradeLineItemType);
end;

function TXMLIncludedSubordinateTradeLineItemList.Insert(Index: Integer): IXMLSubordinateTradeLineItemType;
begin
  Result := (AddItem(Index) as IXMLSubordinateTradeLineItemType);
end;

function TXMLAdditionalInformationNoteListEnumerator.GetCurrent: IXMLNoteType;
begin
  Result := (inherited GetCurrent as IXMLNoteType);
end;

procedure TXMLAdditionalInformationNoteList.AfterConstruction;
begin
  RegisterChildNode('AdditionalInformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AdditionalInformationNote';
  ItemInterface := IXMLNoteType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAdditionalInformationNoteList.GetEnumerator: IXMLAdditionalInformationNoteListEnumerator;
begin
  Result := TXMLAdditionalInformationNoteListEnumerator.Create(Self);
end;

function TXMLAdditionalInformationNoteList.Get_AdditionalInformationNote(Index: Integer): IXMLNoteType;
begin
  Result := (List[Index] as IXMLNoteType);
end;

function TXMLAdditionalInformationNoteList.Add: IXMLNoteType;
begin
  Result := (AddItem(-1) as IXMLNoteType);
end;

function TXMLAdditionalInformationNoteList.Insert(Index: Integer): IXMLNoteType;
begin
  Result := (AddItem(Index) as IXMLNoteType);
end;

function TXMLSupplyChainTradeTransactionTypeEnumerator.GetCurrent: IXMLSupplyChainTradeLineItemType;
begin
  Result := (inherited GetCurrent as IXMLSupplyChainTradeLineItemType);
end;

procedure TXMLSupplyChainTradeTransactionType.AfterConstruction;
begin
  RegisterChildNode('ApplicableHeaderTradeAgreement', TXMLHeaderTradeAgreementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableHeaderTradeDelivery', TXMLHeaderTradeDeliveryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableHeaderTradeSettlement', TXMLHeaderTradeSettlementType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedSupplyChainTradeLineItem', TXMLSupplyChainTradeLineItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedSupplyChainTradeLineItem';
  ItemInterface := IXMLSupplyChainTradeLineItemType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

procedure TXMLSupplyChainTradeTransactionType.XSDValidate;
begin
  GetApplicableHeaderTradeAgreement;
  GetApplicableHeaderTradeDelivery;
  GetApplicableHeaderTradeSettlement;
  SortChildNodes(Self, ['IncludedSupplyChainTradeLineItem', 'ApplicableHeaderTradeAgreement', 'ApplicableHeaderTradeDelivery', 'ApplicableHeaderTradeSettlement']);
end;

procedure TXMLSupplyChainTradeTransactionType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetApplicableHeaderTradeAgreement;
  GetApplicableHeaderTradeDelivery;
  GetApplicableHeaderTradeSettlement;
  SortChildNodes(Self, ['IncludedSupplyChainTradeLineItem', 'ApplicableHeaderTradeAgreement', 'ApplicableHeaderTradeDelivery', 'ApplicableHeaderTradeSettlement']);
end;

function TXMLSupplyChainTradeTransactionType.GetEnumerator: IXMLSupplyChainTradeTransactionTypeEnumerator;
begin
  Result := TXMLSupplyChainTradeTransactionTypeEnumerator.Create(Self);
end;

function TXMLSupplyChainTradeTransactionType.Get_IncludedSupplyChainTradeLineItem(Index: Integer): IXMLSupplyChainTradeLineItemType;
begin
  Result := (List[Index] as IXMLSupplyChainTradeLineItemType);
end;

function TXMLSupplyChainTradeTransactionType.Add: IXMLSupplyChainTradeLineItemType;
begin
  Result := (AddItem(-1) as IXMLSupplyChainTradeLineItemType);
end;

function TXMLSupplyChainTradeTransactionType.Insert(Index: Integer): IXMLSupplyChainTradeLineItemType;
begin
  Result := (AddItem(Index) as IXMLSupplyChainTradeLineItemType);
end;

function TXMLSupplyChainTradeTransactionType.GetApplicableHeaderTradeAgreement: IXMLHeaderTradeAgreementType;
begin
  Result := (ChildNodesNS['ApplicableHeaderTradeAgreement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLHeaderTradeAgreementType);
end;

function TXMLSupplyChainTradeTransactionType.GetApplicableHeaderTradeDelivery: IXMLHeaderTradeDeliveryType;
begin
  Result := (ChildNodesNS['ApplicableHeaderTradeDelivery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLHeaderTradeDeliveryType);
end;

function TXMLSupplyChainTradeTransactionType.GetApplicableHeaderTradeSettlement: IXMLHeaderTradeSettlementType;
begin
  Result := (ChildNodesNS['ApplicableHeaderTradeSettlement', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLHeaderTradeSettlementType);
end;

procedure TXMLTaxRegistrationType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IOSSID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedRegisteredTax', TXMLRegisteredTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTaxRegistrationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTaxRegistrationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTaxRegistrationType.GetHasIOSSID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IOSSID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTaxRegistrationType.GetIOSSID: IXMLIDType;
begin
  Result := (ChildNodesNS['IOSSID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTaxRegistrationType.GetHasAssociatedRegisteredTax: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AssociatedRegisteredTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTaxRegistrationType.GetAssociatedRegisteredTax: IXMLRegisteredTaxType;
begin
  Result := (ChildNodesNS['AssociatedRegisteredTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLRegisteredTaxType);
end;

procedure TXMLTradeAccountingAccountType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SetTriggerCode', TXMLAccountingDocumentCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLAccountingAccountTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AmountTypeCode', TXMLAccountingAmountTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CostReferenceDimensionPattern', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLTradeAccountingAccountType.XSDValidate;
begin
  GetID;
  SortChildNodes(Self, ['ID', 'SetTriggerCode', 'TypeCode', 'AmountTypeCode', 'Name', 
    'CostReferenceDimensionPattern']);
end;

procedure TXMLTradeAccountingAccountType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  SortChildNodes(Self, ['ID', 'SetTriggerCode', 'TypeCode', 'AmountTypeCode', 'Name', 
    'CostReferenceDimensionPattern']);
end;

function TXMLTradeAccountingAccountType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeAccountingAccountType.GetHasSetTriggerCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SetTriggerCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAccountingAccountType.GetSetTriggerCode: IXMLAccountingDocumentCodeType;
begin
  Result := (ChildNodesNS['SetTriggerCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAccountingDocumentCodeType);
end;

function TXMLTradeAccountingAccountType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAccountingAccountType.GetTypeCode: IXMLAccountingAccountTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAccountingAccountTypeCodeType);
end;

function TXMLTradeAccountingAccountType.GetHasAmountTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AmountTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAccountingAccountType.GetAmountTypeCode: IXMLAccountingAmountTypeCodeType;
begin
  Result := (ChildNodesNS['AmountTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAccountingAmountTypeCodeType);
end;

function TXMLTradeAccountingAccountType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAccountingAccountType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAccountingAccountType.GetHasCostReferenceDimensionPattern: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CostReferenceDimensionPattern', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAccountingAccountType.GetCostReferenceDimensionPattern: IXMLTextType;
begin
  Result := (ChildNodesNS['CostReferenceDimensionPattern', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLTradeAddressType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostcodeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostOfficeBox', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuildingName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineOne', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineTwo', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineThree', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineFour', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineFive', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StreetName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CityName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CitySubDivisionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryID', TXMLCountryIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCountryName := CreateCollection(TXMLCountryNameList, IXMLTextType, 'CountryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCountryNameList;
  RegisterChildNode('CountryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountrySubDivisionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountrySubDivisionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCountrySubDivisionName := CreateCollection(TXMLCountrySubDivisionNameList, IXMLTextType, 'CountrySubDivisionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCountrySubDivisionNameList;
  RegisterChildNode('CountrySubDivisionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AttentionOf', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CareOf', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuildingNumber', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DepartmentName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalStreetName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CityID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLAddressTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLAddressTypeCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLAddressTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeAddressType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeAddressType.GetHasPostcodeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostcodeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetPostcodeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['PostcodeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeAddressType.GetHasPostOfficeBox: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostOfficeBox', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetPostOfficeBox: IXMLTextType;
begin
  Result := (ChildNodesNS['PostOfficeBox', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasBuildingName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuildingName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetBuildingName: IXMLTextType;
begin
  Result := (ChildNodesNS['BuildingName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasLineOne: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineOne', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetLineOne: IXMLTextType;
begin
  Result := (ChildNodesNS['LineOne', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasLineTwo: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineTwo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetLineTwo: IXMLTextType;
begin
  Result := (ChildNodesNS['LineTwo', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasLineThree: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineThree', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetLineThree: IXMLTextType;
begin
  Result := (ChildNodesNS['LineThree', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasLineFour: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineFour', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetLineFour: IXMLTextType;
begin
  Result := (ChildNodesNS['LineFour', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasLineFive: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LineFive', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetLineFive: IXMLTextType;
begin
  Result := (ChildNodesNS['LineFive', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasStreetName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetStreetName: IXMLTextType;
begin
  Result := (ChildNodesNS['StreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasCityName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CityName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCityName: IXMLTextType;
begin
  Result := (ChildNodesNS['CityName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasCitySubDivisionName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CitySubDivisionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCitySubDivisionName: IXMLTextType;
begin
  Result := (ChildNodesNS['CitySubDivisionName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasCountryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCountryID: IXMLCountryIDType;
begin
  Result := (ChildNodesNS['CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCountryIDType);
end;

function TXMLTradeAddressType.GetCountryName: IXMLCountryNameList;
begin
  Result := FCountryName;
end;

function TXMLTradeAddressType.GetHasCountrySubDivisionID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCountrySubDivisionID: IXMLIDType;
begin
  Result := (ChildNodesNS['CountrySubDivisionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeAddressType.GetCountrySubDivisionName: IXMLCountrySubDivisionNameList;
begin
  Result := FCountrySubDivisionName;
end;

function TXMLTradeAddressType.GetHasAttentionOf: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AttentionOf', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetAttentionOf: IXMLTextType;
begin
  Result := (ChildNodesNS['AttentionOf', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasCareOf: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CareOf', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCareOf: IXMLTextType;
begin
  Result := (ChildNodesNS['CareOf', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasBuildingNumber: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuildingNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetBuildingNumber: IXMLTextType;
begin
  Result := (ChildNodesNS['BuildingNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasDepartmentName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetDepartmentName: IXMLTextType;
begin
  Result := (ChildNodesNS['DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasAdditionalStreetName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AdditionalStreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetAdditionalStreetName: IXMLTextType;
begin
  Result := (ChildNodesNS['AdditionalStreetName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAddressType.GetHasCityID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CityID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAddressType.GetCityID: IXMLIDType;
begin
  Result := (ChildNodesNS['CityID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeAddressType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLCountrySubDivisionNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCountrySubDivisionNameList.AfterConstruction;
begin
  RegisterChildNode('CountrySubDivisionName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CountrySubDivisionName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCountrySubDivisionNameList.GetEnumerator: IXMLCountrySubDivisionNameListEnumerator;
begin
  Result := TXMLCountrySubDivisionNameListEnumerator.Create(Self);
end;

function TXMLCountrySubDivisionNameList.Get_CountrySubDivisionName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCountrySubDivisionNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCountrySubDivisionNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLCountryNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCountryNameList.AfterConstruction;
begin
  RegisterChildNode('CountryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CountryName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCountryNameList.GetEnumerator: IXMLCountryNameListEnumerator;
begin
  Result := TXMLCountryNameListEnumerator.Create(Self);
end;

function TXMLCountryNameList.Get_CountryName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCountryNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCountryNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLTradeAllowanceChargeType.AfterConstruction;
begin
  RegisterChildNode('ChargeIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SequenceNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PrepaidIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualAmount := CreateCollection(TXMLActualAmountList, IXMLAmountType, 'ActualAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualAmountList;
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReasonCode', TXMLAllowanceChargeReasonCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Reason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLAllowanceChargeIdentificationCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCategoryTradeTax := CreateCollection(TXMLCategoryTradeTaxList, IXMLTradeTaxType, 'CategoryTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCategoryTradeTaxList;
  RegisterChildNode('CategoryTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualTradeCurrencyExchange', TXMLTradeCurrencyExchangeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeAllowanceChargeType.GetHasChargeIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChargeIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetChargeIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ChargeIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeAllowanceChargeType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeAllowanceChargeType.GetHasSequenceNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetSequenceNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['SequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradeAllowanceChargeType.GetHasCalculationPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetCalculationPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradeAllowanceChargeType.GetHasBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLTradeAllowanceChargeType.GetHasBasisQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetBasisQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradeAllowanceChargeType.GetHasPrepaidIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PrepaidIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetPrepaidIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['PrepaidIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeAllowanceChargeType.GetActualAmount: IXMLActualAmountList;
begin
  Result := FActualAmount;
end;

function TXMLTradeAllowanceChargeType.GetHasUnitBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UnitBasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetUnitBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['UnitBasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLTradeAllowanceChargeType.GetHasReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetReasonCode: IXMLAllowanceChargeReasonCodeType;
begin
  Result := (ChildNodesNS['ReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAllowanceChargeReasonCodeType);
end;

function TXMLTradeAllowanceChargeType.GetHasReason: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Reason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetReason: IXMLTextType;
begin
  Result := (ChildNodesNS['Reason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeAllowanceChargeType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetTypeCode: IXMLAllowanceChargeIdentificationCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAllowanceChargeIdentificationCodeType);
end;

function TXMLTradeAllowanceChargeType.GetCategoryTradeTax: IXMLCategoryTradeTaxList;
begin
  Result := FCategoryTradeTax;
end;

function TXMLTradeAllowanceChargeType.GetHasActualTradeCurrencyExchange: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeAllowanceChargeType.GetActualTradeCurrencyExchange: IXMLTradeCurrencyExchangeType;
begin
  Result := (ChildNodesNS['ActualTradeCurrencyExchange', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCurrencyExchangeType);
end;

function TXMLCategoryTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLCategoryTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('CategoryTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CategoryTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCategoryTradeTaxList.GetEnumerator: IXMLCategoryTradeTaxListEnumerator;
begin
  Result := TXMLCategoryTradeTaxListEnumerator.Create(Self);
end;

function TXMLCategoryTradeTaxList.Get_CategoryTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLCategoryTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLCategoryTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLActualAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLActualAmountList.AfterConstruction;
begin
  RegisterChildNode('ActualAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ActualAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLActualAmountList.GetEnumerator: IXMLActualAmountListEnumerator;
begin
  Result := TXMLActualAmountListEnumerator.Create(Self);
end;

function TXMLActualAmountList.Get_ActualAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLActualAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLActualAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTradeContactType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PersonName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DepartmentName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLContactTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('JobTitle', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Responsibility', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PersonID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPersonID := CreateCollection(TXMLPersonIDList, IXMLIDType, 'PersonID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPersonIDList;
  RegisterChildNode('PersonID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TelephoneUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DirectTelephoneUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MobileTelephoneUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FaxUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EmailURIUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TelexUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VOIPUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InstantMessagingUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedNote := CreateCollection(TXMLSpecifiedNoteList, IXMLNoteType, 'SpecifiedNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedNoteList;
  RegisterChildNode('SpecifiedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedContactPerson', TXMLContactPersonType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeContactType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeContactType.GetHasPersonName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PersonName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetPersonName: IXMLTextType;
begin
  Result := (ChildNodesNS['PersonName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeContactType.GetHasDepartmentName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetDepartmentName: IXMLTextType;
begin
  Result := (ChildNodesNS['DepartmentName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeContactType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetTypeCode: IXMLContactTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLContactTypeCodeType);
end;

function TXMLTradeContactType.GetHasJobTitle: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('JobTitle', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetJobTitle: IXMLTextType;
begin
  Result := (ChildNodesNS['JobTitle', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeContactType.GetHasResponsibility: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Responsibility', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetResponsibility: IXMLTextType;
begin
  Result := (ChildNodesNS['Responsibility', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeContactType.GetPersonID: IXMLPersonIDList;
begin
  Result := FPersonID;
end;

function TXMLTradeContactType.GetHasTelephoneUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['TelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasDirectTelephoneUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DirectTelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetDirectTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['DirectTelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasMobileTelephoneUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MobileTelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetMobileTelephoneUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['MobileTelephoneUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasFaxUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FaxUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetFaxUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['FaxUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasEmailURIUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EmailURIUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetEmailURIUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['EmailURIUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasTelexUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TelexUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetTelexUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['TelexUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasVOIPUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VOIPUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetVOIPUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['VOIPUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetHasInstantMessagingUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InstantMessagingUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetInstantMessagingUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['InstantMessagingUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradeContactType.GetSpecifiedNote: IXMLSpecifiedNoteList;
begin
  Result := FSpecifiedNote;
end;

function TXMLTradeContactType.GetHasSpecifiedContactPerson: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedContactPerson', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeContactType.GetSpecifiedContactPerson: IXMLContactPersonType;
begin
  Result := (ChildNodesNS['SpecifiedContactPerson', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLContactPersonType);
end;

function TXMLSpecifiedNoteListEnumerator.GetCurrent: IXMLNoteType;
begin
  Result := (inherited GetCurrent as IXMLNoteType);
end;

procedure TXMLSpecifiedNoteList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedNote';
  ItemInterface := IXMLNoteType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedNoteList.GetEnumerator: IXMLSpecifiedNoteListEnumerator;
begin
  Result := TXMLSpecifiedNoteListEnumerator.Create(Self);
end;

function TXMLSpecifiedNoteList.Get_SpecifiedNote(Index: Integer): IXMLNoteType;
begin
  Result := (List[Index] as IXMLNoteType);
end;

function TXMLSpecifiedNoteList.Add: IXMLNoteType;
begin
  Result := (AddItem(-1) as IXMLNoteType);
end;

function TXMLSpecifiedNoteList.Insert(Index: Integer): IXMLNoteType;
begin
  Result := (AddItem(Index) as IXMLNoteType);
end;

function TXMLPersonIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLPersonIDList.AfterConstruction;
begin
  RegisterChildNode('PersonID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PersonID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPersonIDList.GetEnumerator: IXMLPersonIDListEnumerator;
begin
  Result := TXMLPersonIDListEnumerator.Create(Self);
end;

function TXMLPersonIDList.Get_PersonID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLPersonIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLPersonIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLTradeCountrySubDivisionTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTradeCountrySubDivisionType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Name';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTradeCountrySubDivisionType.GetEnumerator: IXMLTradeCountrySubDivisionTypeEnumerator;
begin
  Result := TXMLTradeCountrySubDivisionTypeEnumerator.Create(Self);
end;

function TXMLTradeCountrySubDivisionType.Get_Name(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTradeCountrySubDivisionType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTradeCountrySubDivisionType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLTradeCountrySubDivisionType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCountrySubDivisionType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

procedure TXMLTradeCountryType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLCountryIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubordinateTradeCountrySubDivision', TXMLTradeCountrySubDivisionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSubordinateTradeCountrySubDivision := CreateCollection(TXMLSubordinateTradeCountrySubDivisionList, IXMLTradeCountrySubDivisionType, 'SubordinateTradeCountrySubDivision', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSubordinateTradeCountrySubDivisionList;
  RegisterChildNode('SubordinateTradeCountrySubDivision', TXMLTradeCountrySubDivisionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeCountryType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCountryType.GetID: IXMLCountryIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCountryIDType);
end;

function TXMLTradeCountryType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLTradeCountryType.GetSubordinateTradeCountrySubDivision: IXMLSubordinateTradeCountrySubDivisionList;
begin
  Result := FSubordinateTradeCountrySubDivision;
end;

function TXMLSubordinateTradeCountrySubDivisionListEnumerator.GetCurrent: IXMLTradeCountrySubDivisionType;
begin
  Result := (inherited GetCurrent as IXMLTradeCountrySubDivisionType);
end;

procedure TXMLSubordinateTradeCountrySubDivisionList.AfterConstruction;
begin
  RegisterChildNode('SubordinateTradeCountrySubDivision', TXMLTradeCountrySubDivisionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SubordinateTradeCountrySubDivision';
  ItemInterface := IXMLTradeCountrySubDivisionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSubordinateTradeCountrySubDivisionList.GetEnumerator: IXMLSubordinateTradeCountrySubDivisionListEnumerator;
begin
  Result := TXMLSubordinateTradeCountrySubDivisionListEnumerator.Create(Self);
end;

function TXMLSubordinateTradeCountrySubDivisionList.Get_SubordinateTradeCountrySubDivision(Index: Integer): IXMLTradeCountrySubDivisionType;
begin
  Result := (List[Index] as IXMLTradeCountrySubDivisionType);
end;

function TXMLSubordinateTradeCountrySubDivisionList.Add: IXMLTradeCountrySubDivisionType;
begin
  Result := (AddItem(-1) as IXMLTradeCountrySubDivisionType);
end;

function TXMLSubordinateTradeCountrySubDivisionList.Insert(Index: Integer): IXMLTradeCountrySubDivisionType;
begin
  Result := (AddItem(Index) as IXMLTradeCountrySubDivisionType);
end;

function TXMLTradeCurrencyExchangeTypeEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLTradeCurrencyExchangeType.AfterConstruction;
begin
  RegisterChildNode('SourceCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SourceUnitBasisNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TargetCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TargetUnitBaseNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MarketID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConversionRate', TXMLRateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConversionRateDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AssociatedReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

procedure TXMLTradeCurrencyExchangeType.XSDValidate;
begin
  GetSourceCurrencyCode;
  GetTargetCurrencyCode;
  GetConversionRate;
  SortChildNodes(Self, ['SourceCurrencyCode', 'SourceUnitBasisNumeric', 'TargetCurrencyCode', 'TargetUnitBaseNumeric', 'MarketID', 
    'ConversionRate', 'ConversionRateDateTime', 'AssociatedReferencedDocument']);
end;

procedure TXMLTradeCurrencyExchangeType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetSourceCurrencyCode;
  GetTargetCurrencyCode;
  GetConversionRate;
  SortChildNodes(Self, ['SourceCurrencyCode', 'SourceUnitBasisNumeric', 'TargetCurrencyCode', 'TargetUnitBaseNumeric', 'MarketID', 
    'ConversionRate', 'ConversionRateDateTime', 'AssociatedReferencedDocument']);
end;

function TXMLTradeCurrencyExchangeType.GetEnumerator: IXMLTradeCurrencyExchangeTypeEnumerator;
begin
  Result := TXMLTradeCurrencyExchangeTypeEnumerator.Create(Self);
end;

function TXMLTradeCurrencyExchangeType.Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLTradeCurrencyExchangeType.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLTradeCurrencyExchangeType.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLTradeCurrencyExchangeType.GetSourceCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['SourceCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLTradeCurrencyExchangeType.GetHasSourceUnitBasisNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SourceUnitBasisNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCurrencyExchangeType.GetSourceUnitBasisNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['SourceUnitBasisNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradeCurrencyExchangeType.GetTargetCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['TargetCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLTradeCurrencyExchangeType.GetHasTargetUnitBaseNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TargetUnitBaseNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCurrencyExchangeType.GetTargetUnitBaseNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['TargetUnitBaseNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradeCurrencyExchangeType.GetHasMarketID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MarketID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCurrencyExchangeType.GetMarketID: IXMLIDType;
begin
  Result := (ChildNodesNS['MarketID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeCurrencyExchangeType.GetConversionRate: IXMLRateType;
begin
  Result := (ChildNodesNS['ConversionRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLRateType);
end;

function TXMLTradeCurrencyExchangeType.GetHasConversionRateDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConversionRateDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeCurrencyExchangeType.GetConversionRateDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ConversionRateDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradeDeliveryTermsTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTradeDeliveryTermsType.AfterConstruction;
begin
  RegisterChildNode('DeliveryTypeCode', TXMLDeliveryTermsCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FunctionCode', TXMLDeliveryTermsFunctionCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeliveryDiscontinuationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PartialDeliveryAllowedIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RelevantTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Description';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTradeDeliveryTermsType.GetEnumerator: IXMLTradeDeliveryTermsTypeEnumerator;
begin
  Result := TXMLTradeDeliveryTermsTypeEnumerator.Create(Self);
end;

function TXMLTradeDeliveryTermsType.Get_Description(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTradeDeliveryTermsType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTradeDeliveryTermsType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLTradeDeliveryTermsType.GetHasDeliveryTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeliveryTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeDeliveryTermsType.GetDeliveryTypeCode: IXMLDeliveryTermsCodeType;
begin
  Result := (ChildNodesNS['DeliveryTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDeliveryTermsCodeType);
end;

function TXMLTradeDeliveryTermsType.GetHasFunctionCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FunctionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeDeliveryTermsType.GetFunctionCode: IXMLDeliveryTermsFunctionCodeType;
begin
  Result := (ChildNodesNS['FunctionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDeliveryTermsFunctionCodeType);
end;

function TXMLTradeDeliveryTermsType.GetHasDeliveryDiscontinuationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DeliveryDiscontinuationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeDeliveryTermsType.GetDeliveryDiscontinuationCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['DeliveryDiscontinuationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeDeliveryTermsType.GetHasPartialDeliveryAllowedIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PartialDeliveryAllowedIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeDeliveryTermsType.GetPartialDeliveryAllowedIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['PartialDeliveryAllowedIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeDeliveryTermsType.GetHasRelevantTradeLocation: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RelevantTradeLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeDeliveryTermsType.GetRelevantTradeLocation: IXMLTradeLocationType;
begin
  Result := (ChildNodesNS['RelevantTradeLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeLocationType);
end;

procedure TXMLTradeLocationType.AfterConstruction;
begin
  RegisterChildNode('CountryID', TXMLCountryIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CountryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeLocationType.GetHasCountryID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeLocationType.GetCountryID: IXMLCountryIDType;
begin
  Result := (ChildNodesNS['CountryID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCountryIDType);
end;

function TXMLTradeLocationType.GetHasCountryName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CountryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeLocationType.GetCountryName: IXMLTextType;
begin
  Result := (ChildNodesNS['CountryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeLocationType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeLocationType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeLocationType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeLocationType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLTradePartyType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGlobalID := CreateCollection(TXMLGlobalIDList, IXMLIDType, 'GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGlobalIDList;
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RoleCode', TXMLPartyRoleCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRoleCode := CreateCollection(TXMLRoleCodeList, IXMLPartyRoleCodeType, 'RoleCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRoleCodeList;
  RegisterChildNode('RoleCode', TXMLPartyRoleCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RegisteredID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRegisteredID := CreateCollection(TXMLRegisteredIDList, IXMLIDType, 'RegisteredID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRegisteredIDList;
  RegisterChildNode('RegisteredID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Role', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRole := CreateCollection(TXMLRoleList, IXMLTextType, 'Role', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRoleList;
  RegisterChildNode('Role', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLegalOrganization', TXMLLegalOrganizationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DefinedTradeContact', TXMLTradeContactType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDefinedTradeContact := CreateCollection(TXMLDefinedTradeContactList, IXMLTradeContactType, 'DefinedTradeContact', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDefinedTradeContactList;
  RegisterChildNode('DefinedTradeContact', TXMLTradeContactType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PostalTradeAddress', TXMLTradeAddressType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('URIUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FURIUniversalCommunication := CreateCollection(TXMLURIUniversalCommunicationList, IXMLUniversalCommunicationType, 'URIUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLURIUniversalCommunicationList;
  RegisterChildNode('URIUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedLogisticsLocation := CreateCollection(TXMLSpecifiedLogisticsLocationList, IXMLLogisticsLocationType, 'SpecifiedLogisticsLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedLogisticsLocationList;
  RegisterChildNode('SpecifiedLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTaxRegistration', TXMLTaxRegistrationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTaxRegistration := CreateCollection(TXMLSpecifiedTaxRegistrationList, IXMLTaxRegistrationType, 'SpecifiedTaxRegistration', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTaxRegistrationList;
  RegisterChildNode('SpecifiedTaxRegistration', TXMLTaxRegistrationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EndPointURIUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LogoAssociatedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLogoAssociatedSpecifiedBinaryFile := CreateCollection(TXMLLogoAssociatedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'LogoAssociatedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLogoAssociatedSpecifiedBinaryFileList;
  RegisterChildNode('LogoAssociatedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradePartyType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLTradePartyType.GetGlobalID: IXMLGlobalIDList;
begin
  Result := FGlobalID;
end;

function TXMLTradePartyType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLTradePartyType.GetHasName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePartyType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradePartyType.GetRoleCode: IXMLRoleCodeList;
begin
  Result := FRoleCode;
end;

function TXMLTradePartyType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLTradePartyType.GetRegisteredID: IXMLRegisteredIDList;
begin
  Result := FRegisteredID;
end;

function TXMLTradePartyType.GetRole: IXMLRoleList;
begin
  Result := FRole;
end;

function TXMLTradePartyType.GetHasSpecifiedLegalOrganization: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SpecifiedLegalOrganization', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePartyType.GetSpecifiedLegalOrganization: IXMLLegalOrganizationType;
begin
  Result := (ChildNodesNS['SpecifiedLegalOrganization', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLLegalOrganizationType);
end;

function TXMLTradePartyType.GetDefinedTradeContact: IXMLDefinedTradeContactList;
begin
  Result := FDefinedTradeContact;
end;

function TXMLTradePartyType.GetHasPostalTradeAddress: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePartyType.GetPostalTradeAddress: IXMLTradeAddressType;
begin
  Result := (ChildNodesNS['PostalTradeAddress', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAddressType);
end;

function TXMLTradePartyType.GetURIUniversalCommunication: IXMLURIUniversalCommunicationList;
begin
  Result := FURIUniversalCommunication;
end;

function TXMLTradePartyType.GetSpecifiedLogisticsLocation: IXMLSpecifiedLogisticsLocationList;
begin
  Result := FSpecifiedLogisticsLocation;
end;

function TXMLTradePartyType.GetSpecifiedTaxRegistration: IXMLSpecifiedTaxRegistrationList;
begin
  Result := FSpecifiedTaxRegistration;
end;

function TXMLTradePartyType.GetHasEndPointURIUniversalCommunication: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EndPointURIUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePartyType.GetEndPointURIUniversalCommunication: IXMLUniversalCommunicationType;
begin
  Result := (ChildNodesNS['EndPointURIUniversalCommunication', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLUniversalCommunicationType);
end;

function TXMLTradePartyType.GetLogoAssociatedSpecifiedBinaryFile: IXMLLogoAssociatedSpecifiedBinaryFileList;
begin
  Result := FLogoAssociatedSpecifiedBinaryFile;
end;

function TXMLLogoAssociatedSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLLogoAssociatedSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('LogoAssociatedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'LogoAssociatedSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLogoAssociatedSpecifiedBinaryFileList.GetEnumerator: IXMLLogoAssociatedSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLLogoAssociatedSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLLogoAssociatedSpecifiedBinaryFileList.Get_LogoAssociatedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLLogoAssociatedSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLLogoAssociatedSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLSpecifiedTaxRegistrationListEnumerator.GetCurrent: IXMLTaxRegistrationType;
begin
  Result := (inherited GetCurrent as IXMLTaxRegistrationType);
end;

procedure TXMLSpecifiedTaxRegistrationList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTaxRegistration', TXMLTaxRegistrationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTaxRegistration';
  ItemInterface := IXMLTaxRegistrationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTaxRegistrationList.GetEnumerator: IXMLSpecifiedTaxRegistrationListEnumerator;
begin
  Result := TXMLSpecifiedTaxRegistrationListEnumerator.Create(Self);
end;

function TXMLSpecifiedTaxRegistrationList.Get_SpecifiedTaxRegistration(Index: Integer): IXMLTaxRegistrationType;
begin
  Result := (List[Index] as IXMLTaxRegistrationType);
end;

function TXMLSpecifiedTaxRegistrationList.Add: IXMLTaxRegistrationType;
begin
  Result := (AddItem(-1) as IXMLTaxRegistrationType);
end;

function TXMLSpecifiedTaxRegistrationList.Insert(Index: Integer): IXMLTaxRegistrationType;
begin
  Result := (AddItem(Index) as IXMLTaxRegistrationType);
end;

function TXMLSpecifiedLogisticsLocationListEnumerator.GetCurrent: IXMLLogisticsLocationType;
begin
  Result := (inherited GetCurrent as IXMLLogisticsLocationType);
end;

procedure TXMLSpecifiedLogisticsLocationList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedLogisticsLocation', TXMLLogisticsLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedLogisticsLocation';
  ItemInterface := IXMLLogisticsLocationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedLogisticsLocationList.GetEnumerator: IXMLSpecifiedLogisticsLocationListEnumerator;
begin
  Result := TXMLSpecifiedLogisticsLocationListEnumerator.Create(Self);
end;

function TXMLSpecifiedLogisticsLocationList.Get_SpecifiedLogisticsLocation(Index: Integer): IXMLLogisticsLocationType;
begin
  Result := (List[Index] as IXMLLogisticsLocationType);
end;

function TXMLSpecifiedLogisticsLocationList.Add: IXMLLogisticsLocationType;
begin
  Result := (AddItem(-1) as IXMLLogisticsLocationType);
end;

function TXMLSpecifiedLogisticsLocationList.Insert(Index: Integer): IXMLLogisticsLocationType;
begin
  Result := (AddItem(Index) as IXMLLogisticsLocationType);
end;

function TXMLURIUniversalCommunicationListEnumerator.GetCurrent: IXMLUniversalCommunicationType;
begin
  Result := (inherited GetCurrent as IXMLUniversalCommunicationType);
end;

procedure TXMLURIUniversalCommunicationList.AfterConstruction;
begin
  RegisterChildNode('URIUniversalCommunication', TXMLUniversalCommunicationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'URIUniversalCommunication';
  ItemInterface := IXMLUniversalCommunicationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLURIUniversalCommunicationList.GetEnumerator: IXMLURIUniversalCommunicationListEnumerator;
begin
  Result := TXMLURIUniversalCommunicationListEnumerator.Create(Self);
end;

function TXMLURIUniversalCommunicationList.Get_URIUniversalCommunication(Index: Integer): IXMLUniversalCommunicationType;
begin
  Result := (List[Index] as IXMLUniversalCommunicationType);
end;

function TXMLURIUniversalCommunicationList.Add: IXMLUniversalCommunicationType;
begin
  Result := (AddItem(-1) as IXMLUniversalCommunicationType);
end;

function TXMLURIUniversalCommunicationList.Insert(Index: Integer): IXMLUniversalCommunicationType;
begin
  Result := (AddItem(Index) as IXMLUniversalCommunicationType);
end;

function TXMLDefinedTradeContactListEnumerator.GetCurrent: IXMLTradeContactType;
begin
  Result := (inherited GetCurrent as IXMLTradeContactType);
end;

procedure TXMLDefinedTradeContactList.AfterConstruction;
begin
  RegisterChildNode('DefinedTradeContact', TXMLTradeContactType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DefinedTradeContact';
  ItemInterface := IXMLTradeContactType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDefinedTradeContactList.GetEnumerator: IXMLDefinedTradeContactListEnumerator;
begin
  Result := TXMLDefinedTradeContactListEnumerator.Create(Self);
end;

function TXMLDefinedTradeContactList.Get_DefinedTradeContact(Index: Integer): IXMLTradeContactType;
begin
  Result := (List[Index] as IXMLTradeContactType);
end;

function TXMLDefinedTradeContactList.Add: IXMLTradeContactType;
begin
  Result := (AddItem(-1) as IXMLTradeContactType);
end;

function TXMLDefinedTradeContactList.Insert(Index: Integer): IXMLTradeContactType;
begin
  Result := (AddItem(Index) as IXMLTradeContactType);
end;

function TXMLRoleListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLRoleList.AfterConstruction;
begin
  RegisterChildNode('Role', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Role';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRoleList.GetEnumerator: IXMLRoleListEnumerator;
begin
  Result := TXMLRoleListEnumerator.Create(Self);
end;

function TXMLRoleList.Get_Role(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLRoleList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLRoleList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLRegisteredIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLRegisteredIDList.AfterConstruction;
begin
  RegisterChildNode('RegisteredID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RegisteredID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRegisteredIDList.GetEnumerator: IXMLRegisteredIDListEnumerator;
begin
  Result := TXMLRegisteredIDListEnumerator.Create(Self);
end;

function TXMLRegisteredIDList.Get_RegisteredID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLRegisteredIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLRegisteredIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLRoleCodeListEnumerator.GetCurrent: IXMLPartyRoleCodeType;
begin
  Result := (inherited GetCurrent as IXMLPartyRoleCodeType);
end;

procedure TXMLRoleCodeList.AfterConstruction;
begin
  RegisterChildNode('RoleCode', TXMLPartyRoleCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RoleCode';
  ItemInterface := IXMLPartyRoleCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRoleCodeList.GetEnumerator: IXMLRoleCodeListEnumerator;
begin
  Result := TXMLRoleCodeListEnumerator.Create(Self);
end;

function TXMLRoleCodeList.Get_RoleCode(Index: Integer): IXMLPartyRoleCodeType;
begin
  Result := (List[Index] as IXMLPartyRoleCodeType);
end;

function TXMLRoleCodeList.Add: IXMLPartyRoleCodeType;
begin
  Result := (AddItem(-1) as IXMLPartyRoleCodeType);
end;

function TXMLRoleCodeList.Insert(Index: Integer): IXMLPartyRoleCodeType;
begin
  Result := (AddItem(Index) as IXMLPartyRoleCodeType);
end;

function TXMLGlobalIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLGlobalIDList.AfterConstruction;
begin
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GlobalID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGlobalIDList.GetEnumerator: IXMLGlobalIDListEnumerator;
begin
  Result := TXMLGlobalIDListEnumerator.Create(Self);
end;

function TXMLGlobalIDList.Get_GlobalID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLGlobalIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLGlobalIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLTradePaymentDiscountTermsType.AfterConstruction;
begin
  RegisterChildNode('BasisDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisPeriodMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualDiscountAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradePaymentDiscountTermsType.GetHasBasisDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentDiscountTermsType.GetBasisDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradePaymentDiscountTermsType.GetHasBasisPeriodMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentDiscountTermsType.GetBasisPeriodMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['BasisPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradePaymentDiscountTermsType.GetHasBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentDiscountTermsType.GetBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLTradePaymentDiscountTermsType.GetHasCalculationPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentDiscountTermsType.GetCalculationPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradePaymentDiscountTermsType.GetHasActualDiscountAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualDiscountAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentDiscountTermsType.GetActualDiscountAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['ActualDiscountAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

procedure TXMLTradePaymentPenaltyTermsType.AfterConstruction;
begin
  RegisterChildNode('BasisDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisPeriodMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualPenaltyAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradePaymentPenaltyTermsType.GetHasBasisDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentPenaltyTermsType.GetBasisDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradePaymentPenaltyTermsType.GetHasBasisPeriodMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentPenaltyTermsType.GetBasisPeriodMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['BasisPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradePaymentPenaltyTermsType.GetHasBasisAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentPenaltyTermsType.GetBasisAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

function TXMLTradePaymentPenaltyTermsType.GetHasCalculationPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentPenaltyTermsType.GetCalculationPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['CalculationPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradePaymentPenaltyTermsType.GetHasActualPenaltyAmount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualPenaltyAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentPenaltyTermsType.GetActualPenaltyAmount: IXMLAmountType;
begin
  Result := (ChildNodesNS['ActualPenaltyAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLAmountType);
end;

procedure TXMLTradePaymentTermsType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLPaymentTermsIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FromEventCode', TXMLPaymentTermsEventTimeReferenceCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SettlementPeriodMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DueDateDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLPaymentTermsTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InstructionTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DirectDebitMandateID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDirectDebitMandateID := CreateCollection(TXMLDirectDebitMandateIDList, IXMLIDType, 'DirectDebitMandateID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDirectDebitMandateIDList;
  RegisterChildNode('DirectDebitMandateID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PartialPaymentPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentMeansID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPaymentMeansID := CreateCollection(TXMLPaymentMeansIDList, IXMLIDType, 'PaymentMeansID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPaymentMeansIDList;
  RegisterChildNode('PaymentMeansID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PartialPaymentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPartialPaymentAmount := CreateCollection(TXMLPartialPaymentAmountList, IXMLAmountType, 'PartialPaymentAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPartialPaymentAmountList;
  RegisterChildNode('PartialPaymentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DueDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BillStartDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradePaymentPenaltyTerms', TXMLTradePaymentPenaltyTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradePaymentDiscountTerms', TXMLTradePaymentDiscountTermsType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayeeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPayeeTradeParty := CreateCollection(TXMLPayeeTradePartyList, IXMLTradePartyType, 'PayeeTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPayeeTradePartyList;
  RegisterChildNode('PayeeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradePaymentTermsType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetID: IXMLPaymentTermsIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentTermsIDType);
end;

function TXMLTradePaymentTermsType.GetHasFromEventCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FromEventCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetFromEventCode: IXMLPaymentTermsEventTimeReferenceCodeType;
begin
  Result := (ChildNodesNS['FromEventCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentTermsEventTimeReferenceCodeType);
end;

function TXMLTradePaymentTermsType.GetHasSettlementPeriodMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SettlementPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetSettlementPeriodMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['SettlementPeriodMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradePaymentTermsType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLTradePaymentTermsType.GetHasDueDateDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DueDateDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetDueDateDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['DueDateDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradePaymentTermsType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetTypeCode: IXMLPaymentTermsTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentTermsTypeCodeType);
end;

function TXMLTradePaymentTermsType.GetHasInstructionTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InstructionTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetInstructionTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['InstructionTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradePaymentTermsType.GetDirectDebitMandateID: IXMLDirectDebitMandateIDList;
begin
  Result := FDirectDebitMandateID;
end;

function TXMLTradePaymentTermsType.GetHasPartialPaymentPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PartialPaymentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetPartialPaymentPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['PartialPaymentPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradePaymentTermsType.GetPaymentMeansID: IXMLPaymentMeansIDList;
begin
  Result := FPaymentMeansID;
end;

function TXMLTradePaymentTermsType.GetPartialPaymentAmount: IXMLPartialPaymentAmountList;
begin
  Result := FPartialPaymentAmount;
end;

function TXMLTradePaymentTermsType.GetHasDueDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetDueDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['DueDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLTradePaymentTermsType.GetHasBillStartDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BillStartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetBillStartDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['BillStartDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradePaymentTermsType.GetHasApplicableTradePaymentPenaltyTerms: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradePaymentPenaltyTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetApplicableTradePaymentPenaltyTerms: IXMLTradePaymentPenaltyTermsType;
begin
  Result := (ChildNodesNS['ApplicableTradePaymentPenaltyTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePaymentPenaltyTermsType);
end;

function TXMLTradePaymentTermsType.GetHasApplicableTradePaymentDiscountTerms: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradePaymentDiscountTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePaymentTermsType.GetApplicableTradePaymentDiscountTerms: IXMLTradePaymentDiscountTermsType;
begin
  Result := (ChildNodesNS['ApplicableTradePaymentDiscountTerms', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePaymentDiscountTermsType);
end;

function TXMLTradePaymentTermsType.GetPayeeTradeParty: IXMLPayeeTradePartyList;
begin
  Result := FPayeeTradeParty;
end;

function TXMLPayeeTradePartyListEnumerator.GetCurrent: IXMLTradePartyType;
begin
  Result := (inherited GetCurrent as IXMLTradePartyType);
end;

procedure TXMLPayeeTradePartyList.AfterConstruction;
begin
  RegisterChildNode('PayeeTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PayeeTradeParty';
  ItemInterface := IXMLTradePartyType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPayeeTradePartyList.GetEnumerator: IXMLPayeeTradePartyListEnumerator;
begin
  Result := TXMLPayeeTradePartyListEnumerator.Create(Self);
end;

function TXMLPayeeTradePartyList.Get_PayeeTradeParty(Index: Integer): IXMLTradePartyType;
begin
  Result := (List[Index] as IXMLTradePartyType);
end;

function TXMLPayeeTradePartyList.Add: IXMLTradePartyType;
begin
  Result := (AddItem(-1) as IXMLTradePartyType);
end;

function TXMLPayeeTradePartyList.Insert(Index: Integer): IXMLTradePartyType;
begin
  Result := (AddItem(Index) as IXMLTradePartyType);
end;

function TXMLPartialPaymentAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLPartialPaymentAmountList.AfterConstruction;
begin
  RegisterChildNode('PartialPaymentAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PartialPaymentAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPartialPaymentAmountList.GetEnumerator: IXMLPartialPaymentAmountListEnumerator;
begin
  Result := TXMLPartialPaymentAmountListEnumerator.Create(Self);
end;

function TXMLPartialPaymentAmountList.Get_PartialPaymentAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLPartialPaymentAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLPartialPaymentAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLPaymentMeansIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLPaymentMeansIDList.AfterConstruction;
begin
  RegisterChildNode('PaymentMeansID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PaymentMeansID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPaymentMeansIDList.GetEnumerator: IXMLPaymentMeansIDListEnumerator;
begin
  Result := TXMLPaymentMeansIDListEnumerator.Create(Self);
end;

function TXMLPaymentMeansIDList.Get_PaymentMeansID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLPaymentMeansIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLPaymentMeansIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLDirectDebitMandateIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLDirectDebitMandateIDList.AfterConstruction;
begin
  RegisterChildNode('DirectDebitMandateID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DirectDebitMandateID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDirectDebitMandateIDList.GetEnumerator: IXMLDirectDebitMandateIDListEnumerator;
begin
  Result := TXMLDirectDebitMandateIDListEnumerator.Create(Self);
end;

function TXMLDirectDebitMandateIDList.Get_DirectDebitMandateID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLDirectDebitMandateIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLDirectDebitMandateIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLTradePriceType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLPriceTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChargeAmount := CreateCollection(TXMLChargeAmountList, IXMLAmountType, 'ChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChargeAmountList;
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MinimumQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangeReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChangeReason := CreateCollection(TXMLChangeReasonList, IXMLTextType, 'ChangeReason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChangeReasonList;
  RegisterChildNode('ChangeReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OrderUnitConversionFactorNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  F_Type := CreateCollection(TXML_TypeList, IXMLTextType, 'Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXML_TypeList;
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AppliedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAppliedTradeAllowanceCharge := CreateCollection(TXMLAppliedTradeAllowanceChargeList, IXMLTradeAllowanceChargeType, 'AppliedTradeAllowanceCharge', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAppliedTradeAllowanceChargeList;
  RegisterChildNode('AppliedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValiditySpecifiedPeriod', TXMLSpecifiedPeriodType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedTradeTax := CreateCollection(TXMLIncludedTradeTaxList, IXMLTradeTaxType, 'IncludedTradeTax', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedTradeTaxList;
  RegisterChildNode('IncludedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DeliveryTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDeliveryTradeLocation := CreateCollection(TXMLDeliveryTradeLocationList, IXMLTradeLocationType, 'DeliveryTradeLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDeliveryTradeLocationList;
  RegisterChildNode('DeliveryTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TradeComparisonReferencePrice', TXMLReferencePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTradeComparisonReferencePrice := CreateCollection(TXMLTradeComparisonReferencePriceList, IXMLReferencePriceType, 'TradeComparisonReferencePrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTradeComparisonReferencePriceList;
  RegisterChildNode('TradeComparisonReferencePrice', TXMLReferencePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAssociatedReferencedDocument := CreateCollection(TXMLAssociatedReferencedDocumentList, IXMLReferencedDocumentType, 'AssociatedReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAssociatedReferencedDocumentList;
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLTradePriceType.XSDValidate;
begin
  SortChildNodes(Self, ['TypeCode', 'ChargeAmount', 'BasisQuantity', 'MinimumQuantity', 'MaximumQuantity', 
    'ChangeReason', 'OrderUnitConversionFactorNumeric', 'Type', 'BasisDateTime', 'AppliedTradeAllowanceCharge', 
    'ValiditySpecifiedPeriod', 'IncludedTradeTax', 'DeliveryTradeLocation', 'TradeComparisonReferencePrice', 'AssociatedReferencedDocument']);
end;

procedure TXMLTradePriceType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  SortChildNodes(Self, ['TypeCode', 'ChargeAmount', 'BasisQuantity', 'MinimumQuantity', 'MaximumQuantity', 
    'ChangeReason', 'OrderUnitConversionFactorNumeric', 'Type', 'BasisDateTime', 'AppliedTradeAllowanceCharge', 
    'ValiditySpecifiedPeriod', 'IncludedTradeTax', 'DeliveryTradeLocation', 'TradeComparisonReferencePrice', 'AssociatedReferencedDocument']);
end;

function TXMLTradePriceType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetTypeCode: IXMLPriceTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPriceTypeCodeType);
end;

function TXMLTradePriceType.GetChargeAmount: IXMLChargeAmountList;
begin
  Result := FChargeAmount;
end;

function TXMLTradePriceType.GetHasBasisQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetBasisQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradePriceType.GetHasMinimumQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MinimumQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetMinimumQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['MinimumQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradePriceType.GetHasMaximumQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetMaximumQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['MaximumQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradePriceType.GetChangeReason: IXMLChangeReasonList;
begin
  Result := FChangeReason;
end;

function TXMLTradePriceType.GetHasOrderUnitConversionFactorNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OrderUnitConversionFactorNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetOrderUnitConversionFactorNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['OrderUnitConversionFactorNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradePriceType.Get_Type: IXML_TypeList;
begin
  Result := F_Type;
end;

function TXMLTradePriceType.GetHasBasisDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetBasisDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['BasisDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradePriceType.GetAppliedTradeAllowanceCharge: IXMLAppliedTradeAllowanceChargeList;
begin
  Result := FAppliedTradeAllowanceCharge;
end;

function TXMLTradePriceType.GetHasValiditySpecifiedPeriod: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValiditySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradePriceType.GetValiditySpecifiedPeriod: IXMLSpecifiedPeriodType;
begin
  Result := (ChildNodesNS['ValiditySpecifiedPeriod', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpecifiedPeriodType);
end;

function TXMLTradePriceType.GetIncludedTradeTax: IXMLIncludedTradeTaxList;
begin
  Result := FIncludedTradeTax;
end;

function TXMLTradePriceType.GetDeliveryTradeLocation: IXMLDeliveryTradeLocationList;
begin
  Result := FDeliveryTradeLocation;
end;

function TXMLTradePriceType.GetTradeComparisonReferencePrice: IXMLTradeComparisonReferencePriceList;
begin
  Result := FTradeComparisonReferencePrice;
end;

function TXMLTradePriceType.GetAssociatedReferencedDocument: IXMLAssociatedReferencedDocumentList;
begin
  Result := FAssociatedReferencedDocument;
end;

function TXMLAssociatedReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLAssociatedReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('AssociatedReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AssociatedReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAssociatedReferencedDocumentList.GetEnumerator: IXMLAssociatedReferencedDocumentListEnumerator;
begin
  Result := TXMLAssociatedReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLAssociatedReferencedDocumentList.Get_AssociatedReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLAssociatedReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLAssociatedReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLTradeComparisonReferencePriceListEnumerator.GetCurrent: IXMLReferencePriceType;
begin
  Result := (inherited GetCurrent as IXMLReferencePriceType);
end;

procedure TXMLTradeComparisonReferencePriceList.AfterConstruction;
begin
  RegisterChildNode('TradeComparisonReferencePrice', TXMLReferencePriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TradeComparisonReferencePrice';
  ItemInterface := IXMLReferencePriceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTradeComparisonReferencePriceList.GetEnumerator: IXMLTradeComparisonReferencePriceListEnumerator;
begin
  Result := TXMLTradeComparisonReferencePriceListEnumerator.Create(Self);
end;

function TXMLTradeComparisonReferencePriceList.Get_TradeComparisonReferencePrice(Index: Integer): IXMLReferencePriceType;
begin
  Result := (List[Index] as IXMLReferencePriceType);
end;

function TXMLTradeComparisonReferencePriceList.Add: IXMLReferencePriceType;
begin
  Result := (AddItem(-1) as IXMLReferencePriceType);
end;

function TXMLTradeComparisonReferencePriceList.Insert(Index: Integer): IXMLReferencePriceType;
begin
  Result := (AddItem(Index) as IXMLReferencePriceType);
end;

function TXMLDeliveryTradeLocationListEnumerator.GetCurrent: IXMLTradeLocationType;
begin
  Result := (inherited GetCurrent as IXMLTradeLocationType);
end;

procedure TXMLDeliveryTradeLocationList.AfterConstruction;
begin
  RegisterChildNode('DeliveryTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DeliveryTradeLocation';
  ItemInterface := IXMLTradeLocationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDeliveryTradeLocationList.GetEnumerator: IXMLDeliveryTradeLocationListEnumerator;
begin
  Result := TXMLDeliveryTradeLocationListEnumerator.Create(Self);
end;

function TXMLDeliveryTradeLocationList.Get_DeliveryTradeLocation(Index: Integer): IXMLTradeLocationType;
begin
  Result := (List[Index] as IXMLTradeLocationType);
end;

function TXMLDeliveryTradeLocationList.Add: IXMLTradeLocationType;
begin
  Result := (AddItem(-1) as IXMLTradeLocationType);
end;

function TXMLDeliveryTradeLocationList.Insert(Index: Integer): IXMLTradeLocationType;
begin
  Result := (AddItem(Index) as IXMLTradeLocationType);
end;

function TXMLIncludedTradeTaxListEnumerator.GetCurrent: IXMLTradeTaxType;
begin
  Result := (inherited GetCurrent as IXMLTradeTaxType);
end;

procedure TXMLIncludedTradeTaxList.AfterConstruction;
begin
  RegisterChildNode('IncludedTradeTax', TXMLTradeTaxType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedTradeTax';
  ItemInterface := IXMLTradeTaxType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedTradeTaxList.GetEnumerator: IXMLIncludedTradeTaxListEnumerator;
begin
  Result := TXMLIncludedTradeTaxListEnumerator.Create(Self);
end;

function TXMLIncludedTradeTaxList.Get_IncludedTradeTax(Index: Integer): IXMLTradeTaxType;
begin
  Result := (List[Index] as IXMLTradeTaxType);
end;

function TXMLIncludedTradeTaxList.Add: IXMLTradeTaxType;
begin
  Result := (AddItem(-1) as IXMLTradeTaxType);
end;

function TXMLIncludedTradeTaxList.Insert(Index: Integer): IXMLTradeTaxType;
begin
  Result := (AddItem(Index) as IXMLTradeTaxType);
end;

function TXMLAppliedTradeAllowanceChargeListEnumerator.GetCurrent: IXMLTradeAllowanceChargeType;
begin
  Result := (inherited GetCurrent as IXMLTradeAllowanceChargeType);
end;

procedure TXMLAppliedTradeAllowanceChargeList.AfterConstruction;
begin
  RegisterChildNode('AppliedTradeAllowanceCharge', TXMLTradeAllowanceChargeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AppliedTradeAllowanceCharge';
  ItemInterface := IXMLTradeAllowanceChargeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAppliedTradeAllowanceChargeList.GetEnumerator: IXMLAppliedTradeAllowanceChargeListEnumerator;
begin
  Result := TXMLAppliedTradeAllowanceChargeListEnumerator.Create(Self);
end;

function TXMLAppliedTradeAllowanceChargeList.Get_AppliedTradeAllowanceCharge(Index: Integer): IXMLTradeAllowanceChargeType;
begin
  Result := (List[Index] as IXMLTradeAllowanceChargeType);
end;

function TXMLAppliedTradeAllowanceChargeList.Add: IXMLTradeAllowanceChargeType;
begin
  Result := (AddItem(-1) as IXMLTradeAllowanceChargeType);
end;

function TXMLAppliedTradeAllowanceChargeList.Insert(Index: Integer): IXMLTradeAllowanceChargeType;
begin
  Result := (AddItem(Index) as IXMLTradeAllowanceChargeType);
end;

function TXML_TypeListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXML_TypeList.AfterConstruction;
begin
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Type';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXML_TypeList.GetEnumerator: IXML_TypeListEnumerator;
begin
  Result := TXML_TypeListEnumerator.Create(Self);
end;

function TXML_TypeList.Get__Type(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXML_TypeList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXML_TypeList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLChangeReasonListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLChangeReasonList.AfterConstruction;
begin
  RegisterChildNode('ChangeReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ChangeReason';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLChangeReasonList.GetEnumerator: IXMLChangeReasonListEnumerator;
begin
  Result := TXMLChangeReasonListEnumerator.Create(Self);
end;

function TXMLChangeReasonList.Get_ChangeReason(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLChangeReasonList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLChangeReasonList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLChargeAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLChargeAmountList.AfterConstruction;
begin
  RegisterChildNode('ChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ChargeAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLChargeAmountList.GetEnumerator: IXMLChargeAmountListEnumerator;
begin
  Result := TXMLChargeAmountListEnumerator.Create(Self);
end;

function TXMLChargeAmountList.Get_ChargeAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLChargeAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLChargeAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTradeProductInstanceType.AfterConstruction;
begin
  RegisterChildNode('GlobalSerialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BatchID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('KanbanID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SupplierAssignedSerialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BestBeforeDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExpiryDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellByDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SerialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSerialID := CreateCollection(TXMLSerialIDList, IXMLIDType, 'SerialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSerialIDList;
  RegisterChildNode('SerialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RegistrationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRegistrationID := CreateCollection(TXMLRegistrationIDList, IXMLIDType, 'RegistrationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRegistrationIDList;
  RegisterChildNode('RegistrationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductionSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackagingSupplyChainEvent', TXMLSupplyChainEventType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableMaterialGoodsCharacteristic := CreateCollection(TXMLApplicableMaterialGoodsCharacteristicList, IXMLMaterialGoodsCharacteristicType, 'ApplicableMaterialGoodsCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableMaterialGoodsCharacteristicList;
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableProductCharacteristic := CreateCollection(TXMLApplicableProductCharacteristicList, IXMLProductCharacteristicType, 'ApplicableProductCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableProductCharacteristicList;
  RegisterChildNode('ApplicableProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeProductInstanceType.GetHasGlobalSerialID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GlobalSerialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetGlobalSerialID: IXMLIDType;
begin
  Result := (ChildNodesNS['GlobalSerialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductInstanceType.GetHasBatchID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BatchID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetBatchID: IXMLIDType;
begin
  Result := (ChildNodesNS['BatchID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductInstanceType.GetHasKanbanID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('KanbanID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetKanbanID: IXMLIDType;
begin
  Result := (ChildNodesNS['KanbanID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductInstanceType.GetHasSupplierAssignedSerialID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SupplierAssignedSerialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetSupplierAssignedSerialID: IXMLIDType;
begin
  Result := (ChildNodesNS['SupplierAssignedSerialID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductInstanceType.GetHasBestBeforeDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BestBeforeDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetBestBeforeDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['BestBeforeDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradeProductInstanceType.GetHasExpiryDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExpiryDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetExpiryDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['ExpiryDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradeProductInstanceType.GetHasSellByDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellByDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetSellByDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['SellByDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLTradeProductInstanceType.GetSerialID: IXMLSerialIDList;
begin
  Result := FSerialID;
end;

function TXMLTradeProductInstanceType.GetRegistrationID: IXMLRegistrationIDList;
begin
  Result := FRegistrationID;
end;

function TXMLTradeProductInstanceType.GetHasProductionSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProductionSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetProductionSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['ProductionSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLTradeProductInstanceType.GetHasPackagingSupplyChainEvent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackagingSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductInstanceType.GetPackagingSupplyChainEvent: IXMLSupplyChainEventType;
begin
  Result := (ChildNodesNS['PackagingSupplyChainEvent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSupplyChainEventType);
end;

function TXMLTradeProductInstanceType.GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
begin
  Result := FApplicableMaterialGoodsCharacteristic;
end;

function TXMLTradeProductInstanceType.GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
begin
  Result := FApplicableProductCharacteristic;
end;

function TXMLRegistrationIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLRegistrationIDList.AfterConstruction;
begin
  RegisterChildNode('RegistrationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RegistrationID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRegistrationIDList.GetEnumerator: IXMLRegistrationIDListEnumerator;
begin
  Result := TXMLRegistrationIDListEnumerator.Create(Self);
end;

function TXMLRegistrationIDList.Get_RegistrationID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLRegistrationIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLRegistrationIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLSerialIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLSerialIDList.AfterConstruction;
begin
  RegisterChildNode('SerialID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SerialID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSerialIDList.GetEnumerator: IXMLSerialIDListEnumerator;
begin
  Result := TXMLSerialIDListEnumerator.Create(Self);
end;

function TXMLSerialIDList.Get_SerialID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLSerialIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLSerialIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

procedure TXMLTradeProductType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GlobalID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ManufacturerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IndustryAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ModelID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FName := CreateCollection(TXMLNameList, IXMLTextType, 'Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNameList;
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TradeName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetWeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossWeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StatusCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductGroupID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FProductGroupID := CreateCollection(TXMLProductGroupIDList, IXMLIDType, 'ProductGroupID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLProductGroupIDList;
  RegisterChildNode('ProductGroupID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetVolumeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossVolumeMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EndItemTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FEndItemTypeCode := CreateCollection(TXMLEndItemTypeCodeList, IXMLCodeType, 'EndItemTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLEndItemTypeCodeList;
  RegisterChildNode('EndItemTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EndItemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FEndItemName := CreateCollection(TXMLEndItemNameList, IXMLTextType, 'EndItemName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLEndItemNameList;
  RegisterChildNode('EndItemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCustomerAssignedID := CreateCollection(TXMLCustomerAssignedIDList, IXMLIDType, 'CustomerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCustomerAssignedIDList;
  RegisterChildNode('CustomerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BatchID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBatchID := CreateCollection(TXMLBatchIDList, IXMLIDType, 'BatchID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBatchIDList;
  RegisterChildNode('BatchID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AreaDensityMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUseDescription := CreateCollection(TXMLUseDescriptionList, IXMLTextType, 'UseDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUseDescriptionList;
  RegisterChildNode('UseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConciseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FConciseDescription := CreateCollection(TXMLConciseDescriptionList, IXMLTextType, 'ConciseDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLConciseDescriptionList;
  RegisterChildNode('ConciseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalDescription := CreateCollection(TXMLAdditionalDescriptionList, IXMLTextType, 'AdditionalDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalDescriptionList;
  RegisterChildNode('AdditionalDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BrandName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubBrandName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DrainedNetWeightMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VariableMeasureIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ConfigurableIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ColourCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ColourDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FColourDescription := CreateCollection(TXMLColourDescriptionList, IXMLTextType, 'ColourDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLColourDescriptionList;
  RegisterChildNode('ColourDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RecyclingTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUnitTypeCode := CreateCollection(TXMLUnitTypeCodeList, IXMLCodeType, 'UnitTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUnitTypeCodeList;
  RegisterChildNode('UnitTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContentUnitQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CommonName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ModelName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Designation', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDesignation := CreateCollection(TXMLDesignationList, IXMLTextType, 'Designation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDesignationList;
  RegisterChildNode('Designation', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FormattedCancellationAnnouncedLaunchDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('FormattedLatestProductDataChangeDateTime', TXMLFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExportIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UltimateCustomerAssignedExtensionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUltimateCustomerAssignedExtensionID := CreateCollection(TXMLUltimateCustomerAssignedExtensionIDList, IXMLIDType, 'UltimateCustomerAssignedExtensionID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUltimateCustomerAssignedExtensionIDList;
  RegisterChildNode('UltimateCustomerAssignedExtensionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SizeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableProductCharacteristic := CreateCollection(TXMLApplicableProductCharacteristicList, IXMLProductCharacteristicType, 'ApplicableProductCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableProductCharacteristicList;
  RegisterChildNode('ApplicableProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FApplicableMaterialGoodsCharacteristic := CreateCollection(TXMLApplicableMaterialGoodsCharacteristicList, IXMLMaterialGoodsCharacteristicType, 'ApplicableMaterialGoodsCharacteristic', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLApplicableMaterialGoodsCharacteristicList;
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DesignatedProductClassification', TXMLProductClassificationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDesignatedProductClassification := CreateCollection(TXMLDesignatedProductClassificationList, IXMLProductClassificationType, 'DesignatedProductClassification', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDesignatedProductClassificationList;
  RegisterChildNode('DesignatedProductClassification', TXMLProductClassificationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IndividualTradeProductInstance', TXMLTradeProductInstanceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIndividualTradeProductInstance := CreateCollection(TXMLIndividualTradeProductInstanceList, IXMLTradeProductInstanceType, 'IndividualTradeProductInstance', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIndividualTradeProductInstanceList;
  RegisterChildNode('IndividualTradeProductInstance', TXMLTradeProductInstanceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CertificationEvidenceReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCertificationEvidenceReferenceReferencedDocument := CreateCollection(TXMLCertificationEvidenceReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'CertificationEvidenceReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCertificationEvidenceReferenceReferencedDocumentList;
  RegisterChildNode('CertificationEvidenceReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InspectionReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInspectionReferenceReferencedDocument := CreateCollection(TXMLInspectionReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'InspectionReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInspectionReferenceReferencedDocumentList;
  RegisterChildNode('InspectionReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OriginTradeCountry', TXMLTradeCountryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLinearSpatialDimension := CreateCollection(TXMLLinearSpatialDimensionList, IXMLSpatialDimensionType, 'LinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLinearSpatialDimensionList;
  RegisterChildNode('LinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MinimumLinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MaximumLinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ManufacturerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PresentationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPresentationSpecifiedBinaryFile := CreateCollection(TXMLPresentationSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'PresentationSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPresentationSpecifiedBinaryFileList;
  RegisterChildNode('PresentationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MSDSReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAdditionalReferenceReferencedDocument := CreateCollection(TXMLAdditionalReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'AdditionalReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAdditionalReferenceReferencedDocumentList;
  RegisterChildNode('AdditionalReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LegalRightsOwnerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BrandOwnerTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludedReferencedProduct', TXMLReferencedProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludedReferencedProduct := CreateCollection(TXMLIncludedReferencedProductList, IXMLReferencedProductType, 'IncludedReferencedProduct', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludedReferencedProductList;
  RegisterChildNode('IncludedReferencedProduct', TXMLReferencedProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformationNote := CreateCollection(TXMLInformationNoteList, IXMLNoteType, 'InformationNote', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationNoteList;
  RegisterChildNode('InformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerSuppliedPartsReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBuyerSuppliedPartsReferenceReferencedDocument := CreateCollection(TXMLBuyerSuppliedPartsReferenceReferencedDocumentList, IXMLReferencedDocumentType, 'BuyerSuppliedPartsReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBuyerSuppliedPartsReferenceReferencedDocumentList;
  RegisterChildNode('BuyerSuppliedPartsReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeProductType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasGlobalID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetGlobalID: IXMLIDType;
begin
  Result := (ChildNodesNS['GlobalID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasSellerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetSellerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['SellerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasBuyerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetBuyerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['BuyerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasManufacturerAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ManufacturerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetManufacturerAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['ManufacturerAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasIndustryAssignedID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IndustryAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetIndustryAssignedID: IXMLIDType;
begin
  Result := (ChildNodesNS['IndustryAssignedID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetHasModelID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ModelID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetModelID: IXMLIDType;
begin
  Result := (ChildNodesNS['ModelID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeProductType.GetName: IXMLNameList;
begin
  Result := FName;
end;

function TXMLTradeProductType.GetHasTradeName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TradeName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetTradeName: IXMLTextType;
begin
  Result := (ChildNodesNS['TradeName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeProductType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLTradeProductType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeProductType.GetHasNetWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetNetWeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['NetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetHasGrossWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetGrossWeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['GrossWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetHasStatusCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetStatusCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['StatusCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeProductType.GetProductGroupID: IXMLProductGroupIDList;
begin
  Result := FProductGroupID;
end;

function TXMLTradeProductType.GetHasNetVolumeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('NetVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetNetVolumeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['NetVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetHasGrossVolumeMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GrossVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetGrossVolumeMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['GrossVolumeMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetEndItemTypeCode: IXMLEndItemTypeCodeList;
begin
  Result := FEndItemTypeCode;
end;

function TXMLTradeProductType.GetEndItemName: IXMLEndItemNameList;
begin
  Result := FEndItemName;
end;

function TXMLTradeProductType.GetCustomerAssignedID: IXMLCustomerAssignedIDList;
begin
  Result := FCustomerAssignedID;
end;

function TXMLTradeProductType.GetBatchID: IXMLBatchIDList;
begin
  Result := FBatchID;
end;

function TXMLTradeProductType.GetHasAreaDensityMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AreaDensityMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetAreaDensityMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['AreaDensityMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetUseDescription: IXMLUseDescriptionList;
begin
  Result := FUseDescription;
end;

function TXMLTradeProductType.GetConciseDescription: IXMLConciseDescriptionList;
begin
  Result := FConciseDescription;
end;

function TXMLTradeProductType.GetAdditionalDescription: IXMLAdditionalDescriptionList;
begin
  Result := FAdditionalDescription;
end;

function TXMLTradeProductType.GetHasBrandName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BrandName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetBrandName: IXMLTextType;
begin
  Result := (ChildNodesNS['BrandName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeProductType.GetHasSubBrandName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubBrandName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetSubBrandName: IXMLTextType;
begin
  Result := (ChildNodesNS['SubBrandName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeProductType.GetHasDrainedNetWeightMeasure: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DrainedNetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetDrainedNetWeightMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['DrainedNetWeightMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLTradeProductType.GetHasVariableMeasureIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VariableMeasureIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetVariableMeasureIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['VariableMeasureIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeProductType.GetHasConfigurableIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ConfigurableIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetConfigurableIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ConfigurableIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeProductType.GetHasColourCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ColourCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetColourCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ColourCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeProductType.GetColourDescription: IXMLColourDescriptionList;
begin
  Result := FColourDescription;
end;

function TXMLTradeProductType.GetHasRecyclingTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RecyclingTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetRecyclingTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['RecyclingTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeProductType.GetUnitTypeCode: IXMLUnitTypeCodeList;
begin
  Result := FUnitTypeCode;
end;

function TXMLTradeProductType.GetHasContentUnitQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContentUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetContentUnitQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ContentUnitQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradeProductType.GetHasCommonName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CommonName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetCommonName: IXMLTextType;
begin
  Result := (ChildNodesNS['CommonName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeProductType.GetHasModelName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ModelName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetModelName: IXMLTextType;
begin
  Result := (ChildNodesNS['ModelName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeProductType.GetDesignation: IXMLDesignationList;
begin
  Result := FDesignation;
end;

function TXMLTradeProductType.GetHasFormattedCancellationAnnouncedLaunchDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FormattedCancellationAnnouncedLaunchDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetFormattedCancellationAnnouncedLaunchDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['FormattedCancellationAnnouncedLaunchDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLTradeProductType.GetHasFormattedLatestProductDataChangeDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('FormattedLatestProductDataChangeDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetFormattedLatestProductDataChangeDateTime: IXMLFormattedDateTimeType;
begin
  Result := (ChildNodesNS['FormattedLatestProductDataChangeDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLFormattedDateTimeType);
end;

function TXMLTradeProductType.GetHasExportIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExportIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetExportIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['ExportIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeProductType.GetUltimateCustomerAssignedExtensionID: IXMLUltimateCustomerAssignedExtensionIDList;
begin
  Result := FUltimateCustomerAssignedExtensionID;
end;

function TXMLTradeProductType.GetHasSizeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SizeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetSizeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['SizeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeProductType.GetApplicableProductCharacteristic: IXMLApplicableProductCharacteristicList;
begin
  Result := FApplicableProductCharacteristic;
end;

function TXMLTradeProductType.GetApplicableMaterialGoodsCharacteristic: IXMLApplicableMaterialGoodsCharacteristicList;
begin
  Result := FApplicableMaterialGoodsCharacteristic;
end;

function TXMLTradeProductType.GetDesignatedProductClassification: IXMLDesignatedProductClassificationList;
begin
  Result := FDesignatedProductClassification;
end;

function TXMLTradeProductType.GetIndividualTradeProductInstance: IXMLIndividualTradeProductInstanceList;
begin
  Result := FIndividualTradeProductInstance;
end;

function TXMLTradeProductType.GetCertificationEvidenceReferenceReferencedDocument: IXMLCertificationEvidenceReferenceReferencedDocumentList;
begin
  Result := FCertificationEvidenceReferenceReferencedDocument;
end;

function TXMLTradeProductType.GetInspectionReferenceReferencedDocument: IXMLInspectionReferenceReferencedDocumentList;
begin
  Result := FInspectionReferenceReferencedDocument;
end;

function TXMLTradeProductType.GetHasOriginTradeCountry: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OriginTradeCountry', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetOriginTradeCountry: IXMLTradeCountryType;
begin
  Result := (ChildNodesNS['OriginTradeCountry', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCountryType);
end;

function TXMLTradeProductType.GetLinearSpatialDimension: IXMLLinearSpatialDimensionList;
begin
  Result := FLinearSpatialDimension;
end;

function TXMLTradeProductType.GetHasMinimumLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MinimumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetMinimumLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['MinimumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLTradeProductType.GetHasMaximumLinearSpatialDimension: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MaximumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetMaximumLinearSpatialDimension: IXMLSpatialDimensionType;
begin
  Result := (ChildNodesNS['MaximumLinearSpatialDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLSpatialDimensionType);
end;

function TXMLTradeProductType.GetHasManufacturerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ManufacturerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetManufacturerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['ManufacturerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLTradeProductType.GetPresentationSpecifiedBinaryFile: IXMLPresentationSpecifiedBinaryFileList;
begin
  Result := FPresentationSpecifiedBinaryFile;
end;

function TXMLTradeProductType.GetHasMSDSReferenceReferencedDocument: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MSDSReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetMSDSReferenceReferencedDocument: IXMLReferencedDocumentType;
begin
  Result := (ChildNodesNS['MSDSReferenceReferencedDocument', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLReferencedDocumentType);
end;

function TXMLTradeProductType.GetAdditionalReferenceReferencedDocument: IXMLAdditionalReferenceReferencedDocumentList;
begin
  Result := FAdditionalReferenceReferencedDocument;
end;

function TXMLTradeProductType.GetHasLegalRightsOwnerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('LegalRightsOwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetLegalRightsOwnerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['LegalRightsOwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLTradeProductType.GetHasBrandOwnerTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BrandOwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeProductType.GetBrandOwnerTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['BrandOwnerTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLTradeProductType.GetIncludedReferencedProduct: IXMLIncludedReferencedProductList;
begin
  Result := FIncludedReferencedProduct;
end;

function TXMLTradeProductType.GetInformationNote: IXMLInformationNoteList;
begin
  Result := FInformationNote;
end;

function TXMLTradeProductType.GetBuyerSuppliedPartsReferenceReferencedDocument: IXMLBuyerSuppliedPartsReferenceReferencedDocumentList;
begin
  Result := FBuyerSuppliedPartsReferenceReferencedDocument;
end;

function TXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLBuyerSuppliedPartsReferenceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('BuyerSuppliedPartsReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BuyerSuppliedPartsReferenceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBuyerSuppliedPartsReferenceReferencedDocumentList.GetEnumerator: IXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator;
begin
  Result := TXMLBuyerSuppliedPartsReferenceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLBuyerSuppliedPartsReferenceReferencedDocumentList.Get_BuyerSuppliedPartsReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLBuyerSuppliedPartsReferenceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLBuyerSuppliedPartsReferenceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLInformationNoteListEnumerator.GetCurrent: IXMLNoteType;
begin
  Result := (inherited GetCurrent as IXMLNoteType);
end;

procedure TXMLInformationNoteList.AfterConstruction;
begin
  RegisterChildNode('InformationNote', TXMLNoteType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InformationNote';
  ItemInterface := IXMLNoteType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInformationNoteList.GetEnumerator: IXMLInformationNoteListEnumerator;
begin
  Result := TXMLInformationNoteListEnumerator.Create(Self);
end;

function TXMLInformationNoteList.Get_InformationNote(Index: Integer): IXMLNoteType;
begin
  Result := (List[Index] as IXMLNoteType);
end;

function TXMLInformationNoteList.Add: IXMLNoteType;
begin
  Result := (AddItem(-1) as IXMLNoteType);
end;

function TXMLInformationNoteList.Insert(Index: Integer): IXMLNoteType;
begin
  Result := (AddItem(Index) as IXMLNoteType);
end;

function TXMLIncludedReferencedProductListEnumerator.GetCurrent: IXMLReferencedProductType;
begin
  Result := (inherited GetCurrent as IXMLReferencedProductType);
end;

procedure TXMLIncludedReferencedProductList.AfterConstruction;
begin
  RegisterChildNode('IncludedReferencedProduct', TXMLReferencedProductType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludedReferencedProduct';
  ItemInterface := IXMLReferencedProductType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludedReferencedProductList.GetEnumerator: IXMLIncludedReferencedProductListEnumerator;
begin
  Result := TXMLIncludedReferencedProductListEnumerator.Create(Self);
end;

function TXMLIncludedReferencedProductList.Get_IncludedReferencedProduct(Index: Integer): IXMLReferencedProductType;
begin
  Result := (List[Index] as IXMLReferencedProductType);
end;

function TXMLIncludedReferencedProductList.Add: IXMLReferencedProductType;
begin
  Result := (AddItem(-1) as IXMLReferencedProductType);
end;

function TXMLIncludedReferencedProductList.Insert(Index: Integer): IXMLReferencedProductType;
begin
  Result := (AddItem(Index) as IXMLReferencedProductType);
end;

function TXMLAdditionalReferenceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLAdditionalReferenceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('AdditionalReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AdditionalReferenceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAdditionalReferenceReferencedDocumentList.GetEnumerator: IXMLAdditionalReferenceReferencedDocumentListEnumerator;
begin
  Result := TXMLAdditionalReferenceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLAdditionalReferenceReferencedDocumentList.Get_AdditionalReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLAdditionalReferenceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLAdditionalReferenceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLPresentationSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLPresentationSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('PresentationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PresentationSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPresentationSpecifiedBinaryFileList.GetEnumerator: IXMLPresentationSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLPresentationSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLPresentationSpecifiedBinaryFileList.Get_PresentationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLPresentationSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLPresentationSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLLinearSpatialDimensionListEnumerator.GetCurrent: IXMLSpatialDimensionType;
begin
  Result := (inherited GetCurrent as IXMLSpatialDimensionType);
end;

procedure TXMLLinearSpatialDimensionList.AfterConstruction;
begin
  RegisterChildNode('LinearSpatialDimension', TXMLSpatialDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'LinearSpatialDimension';
  ItemInterface := IXMLSpatialDimensionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLinearSpatialDimensionList.GetEnumerator: IXMLLinearSpatialDimensionListEnumerator;
begin
  Result := TXMLLinearSpatialDimensionListEnumerator.Create(Self);
end;

function TXMLLinearSpatialDimensionList.Get_LinearSpatialDimension(Index: Integer): IXMLSpatialDimensionType;
begin
  Result := (List[Index] as IXMLSpatialDimensionType);
end;

function TXMLLinearSpatialDimensionList.Add: IXMLSpatialDimensionType;
begin
  Result := (AddItem(-1) as IXMLSpatialDimensionType);
end;

function TXMLLinearSpatialDimensionList.Insert(Index: Integer): IXMLSpatialDimensionType;
begin
  Result := (AddItem(Index) as IXMLSpatialDimensionType);
end;

function TXMLInspectionReferenceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLInspectionReferenceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('InspectionReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InspectionReferenceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInspectionReferenceReferencedDocumentList.GetEnumerator: IXMLInspectionReferenceReferencedDocumentListEnumerator;
begin
  Result := TXMLInspectionReferenceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLInspectionReferenceReferencedDocumentList.Get_InspectionReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLInspectionReferenceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLInspectionReferenceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator.GetCurrent: IXMLReferencedDocumentType;
begin
  Result := (inherited GetCurrent as IXMLReferencedDocumentType);
end;

procedure TXMLCertificationEvidenceReferenceReferencedDocumentList.AfterConstruction;
begin
  RegisterChildNode('CertificationEvidenceReferenceReferencedDocument', TXMLReferencedDocumentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CertificationEvidenceReferenceReferencedDocument';
  ItemInterface := IXMLReferencedDocumentType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCertificationEvidenceReferenceReferencedDocumentList.GetEnumerator: IXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator;
begin
  Result := TXMLCertificationEvidenceReferenceReferencedDocumentListEnumerator.Create(Self);
end;

function TXMLCertificationEvidenceReferenceReferencedDocumentList.Get_CertificationEvidenceReferenceReferencedDocument(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (List[Index] as IXMLReferencedDocumentType);
end;

function TXMLCertificationEvidenceReferenceReferencedDocumentList.Add: IXMLReferencedDocumentType;
begin
  Result := (AddItem(-1) as IXMLReferencedDocumentType);
end;

function TXMLCertificationEvidenceReferenceReferencedDocumentList.Insert(Index: Integer): IXMLReferencedDocumentType;
begin
  Result := (AddItem(Index) as IXMLReferencedDocumentType);
end;

function TXMLIndividualTradeProductInstanceListEnumerator.GetCurrent: IXMLTradeProductInstanceType;
begin
  Result := (inherited GetCurrent as IXMLTradeProductInstanceType);
end;

procedure TXMLIndividualTradeProductInstanceList.AfterConstruction;
begin
  RegisterChildNode('IndividualTradeProductInstance', TXMLTradeProductInstanceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IndividualTradeProductInstance';
  ItemInterface := IXMLTradeProductInstanceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIndividualTradeProductInstanceList.GetEnumerator: IXMLIndividualTradeProductInstanceListEnumerator;
begin
  Result := TXMLIndividualTradeProductInstanceListEnumerator.Create(Self);
end;

function TXMLIndividualTradeProductInstanceList.Get_IndividualTradeProductInstance(Index: Integer): IXMLTradeProductInstanceType;
begin
  Result := (List[Index] as IXMLTradeProductInstanceType);
end;

function TXMLIndividualTradeProductInstanceList.Add: IXMLTradeProductInstanceType;
begin
  Result := (AddItem(-1) as IXMLTradeProductInstanceType);
end;

function TXMLIndividualTradeProductInstanceList.Insert(Index: Integer): IXMLTradeProductInstanceType;
begin
  Result := (AddItem(Index) as IXMLTradeProductInstanceType);
end;

function TXMLDesignatedProductClassificationListEnumerator.GetCurrent: IXMLProductClassificationType;
begin
  Result := (inherited GetCurrent as IXMLProductClassificationType);
end;

procedure TXMLDesignatedProductClassificationList.AfterConstruction;
begin
  RegisterChildNode('DesignatedProductClassification', TXMLProductClassificationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DesignatedProductClassification';
  ItemInterface := IXMLProductClassificationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDesignatedProductClassificationList.GetEnumerator: IXMLDesignatedProductClassificationListEnumerator;
begin
  Result := TXMLDesignatedProductClassificationListEnumerator.Create(Self);
end;

function TXMLDesignatedProductClassificationList.Get_DesignatedProductClassification(Index: Integer): IXMLProductClassificationType;
begin
  Result := (List[Index] as IXMLProductClassificationType);
end;

function TXMLDesignatedProductClassificationList.Add: IXMLProductClassificationType;
begin
  Result := (AddItem(-1) as IXMLProductClassificationType);
end;

function TXMLDesignatedProductClassificationList.Insert(Index: Integer): IXMLProductClassificationType;
begin
  Result := (AddItem(Index) as IXMLProductClassificationType);
end;

function TXMLApplicableMaterialGoodsCharacteristicListEnumerator.GetCurrent: IXMLMaterialGoodsCharacteristicType;
begin
  Result := (inherited GetCurrent as IXMLMaterialGoodsCharacteristicType);
end;

procedure TXMLApplicableMaterialGoodsCharacteristicList.AfterConstruction;
begin
  RegisterChildNode('ApplicableMaterialGoodsCharacteristic', TXMLMaterialGoodsCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableMaterialGoodsCharacteristic';
  ItemInterface := IXMLMaterialGoodsCharacteristicType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableMaterialGoodsCharacteristicList.GetEnumerator: IXMLApplicableMaterialGoodsCharacteristicListEnumerator;
begin
  Result := TXMLApplicableMaterialGoodsCharacteristicListEnumerator.Create(Self);
end;

function TXMLApplicableMaterialGoodsCharacteristicList.Get_ApplicableMaterialGoodsCharacteristic(Index: Integer): IXMLMaterialGoodsCharacteristicType;
begin
  Result := (List[Index] as IXMLMaterialGoodsCharacteristicType);
end;

function TXMLApplicableMaterialGoodsCharacteristicList.Add: IXMLMaterialGoodsCharacteristicType;
begin
  Result := (AddItem(-1) as IXMLMaterialGoodsCharacteristicType);
end;

function TXMLApplicableMaterialGoodsCharacteristicList.Insert(Index: Integer): IXMLMaterialGoodsCharacteristicType;
begin
  Result := (AddItem(Index) as IXMLMaterialGoodsCharacteristicType);
end;

function TXMLApplicableProductCharacteristicListEnumerator.GetCurrent: IXMLProductCharacteristicType;
begin
  Result := (inherited GetCurrent as IXMLProductCharacteristicType);
end;

procedure TXMLApplicableProductCharacteristicList.AfterConstruction;
begin
  RegisterChildNode('ApplicableProductCharacteristic', TXMLProductCharacteristicType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ApplicableProductCharacteristic';
  ItemInterface := IXMLProductCharacteristicType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLApplicableProductCharacteristicList.GetEnumerator: IXMLApplicableProductCharacteristicListEnumerator;
begin
  Result := TXMLApplicableProductCharacteristicListEnumerator.Create(Self);
end;

function TXMLApplicableProductCharacteristicList.Get_ApplicableProductCharacteristic(Index: Integer): IXMLProductCharacteristicType;
begin
  Result := (List[Index] as IXMLProductCharacteristicType);
end;

function TXMLApplicableProductCharacteristicList.Add: IXMLProductCharacteristicType;
begin
  Result := (AddItem(-1) as IXMLProductCharacteristicType);
end;

function TXMLApplicableProductCharacteristicList.Insert(Index: Integer): IXMLProductCharacteristicType;
begin
  Result := (AddItem(Index) as IXMLProductCharacteristicType);
end;

function TXMLUltimateCustomerAssignedExtensionIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLUltimateCustomerAssignedExtensionIDList.AfterConstruction;
begin
  RegisterChildNode('UltimateCustomerAssignedExtensionID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UltimateCustomerAssignedExtensionID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUltimateCustomerAssignedExtensionIDList.GetEnumerator: IXMLUltimateCustomerAssignedExtensionIDListEnumerator;
begin
  Result := TXMLUltimateCustomerAssignedExtensionIDListEnumerator.Create(Self);
end;

function TXMLUltimateCustomerAssignedExtensionIDList.Get_UltimateCustomerAssignedExtensionID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLUltimateCustomerAssignedExtensionIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLUltimateCustomerAssignedExtensionIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLDesignationListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLDesignationList.AfterConstruction;
begin
  RegisterChildNode('Designation', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Designation';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDesignationList.GetEnumerator: IXMLDesignationListEnumerator;
begin
  Result := TXMLDesignationListEnumerator.Create(Self);
end;

function TXMLDesignationList.Get_Designation(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLDesignationList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLDesignationList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLUnitTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLUnitTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('UnitTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UnitTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUnitTypeCodeList.GetEnumerator: IXMLUnitTypeCodeListEnumerator;
begin
  Result := TXMLUnitTypeCodeListEnumerator.Create(Self);
end;

function TXMLUnitTypeCodeList.Get_UnitTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLUnitTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLUnitTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLColourDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLColourDescriptionList.AfterConstruction;
begin
  RegisterChildNode('ColourDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ColourDescription';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLColourDescriptionList.GetEnumerator: IXMLColourDescriptionListEnumerator;
begin
  Result := TXMLColourDescriptionListEnumerator.Create(Self);
end;

function TXMLColourDescriptionList.Get_ColourDescription(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLColourDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLColourDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLAdditionalDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLAdditionalDescriptionList.AfterConstruction;
begin
  RegisterChildNode('AdditionalDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AdditionalDescription';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAdditionalDescriptionList.GetEnumerator: IXMLAdditionalDescriptionListEnumerator;
begin
  Result := TXMLAdditionalDescriptionListEnumerator.Create(Self);
end;

function TXMLAdditionalDescriptionList.Get_AdditionalDescription(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLAdditionalDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLAdditionalDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLConciseDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLConciseDescriptionList.AfterConstruction;
begin
  RegisterChildNode('ConciseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ConciseDescription';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLConciseDescriptionList.GetEnumerator: IXMLConciseDescriptionListEnumerator;
begin
  Result := TXMLConciseDescriptionListEnumerator.Create(Self);
end;

function TXMLConciseDescriptionList.Get_ConciseDescription(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLConciseDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLConciseDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLUseDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLUseDescriptionList.AfterConstruction;
begin
  RegisterChildNode('UseDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UseDescription';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUseDescriptionList.GetEnumerator: IXMLUseDescriptionListEnumerator;
begin
  Result := TXMLUseDescriptionListEnumerator.Create(Self);
end;

function TXMLUseDescriptionList.Get_UseDescription(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLUseDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLUseDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLBatchIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLBatchIDList.AfterConstruction;
begin
  RegisterChildNode('BatchID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BatchID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBatchIDList.GetEnumerator: IXMLBatchIDListEnumerator;
begin
  Result := TXMLBatchIDListEnumerator.Create(Self);
end;

function TXMLBatchIDList.Get_BatchID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLBatchIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLBatchIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLCustomerAssignedIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLCustomerAssignedIDList.AfterConstruction;
begin
  RegisterChildNode('CustomerAssignedID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CustomerAssignedID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCustomerAssignedIDList.GetEnumerator: IXMLCustomerAssignedIDListEnumerator;
begin
  Result := TXMLCustomerAssignedIDListEnumerator.Create(Self);
end;

function TXMLCustomerAssignedIDList.Get_CustomerAssignedID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLCustomerAssignedIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLCustomerAssignedIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLEndItemNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLEndItemNameList.AfterConstruction;
begin
  RegisterChildNode('EndItemName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'EndItemName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLEndItemNameList.GetEnumerator: IXMLEndItemNameListEnumerator;
begin
  Result := TXMLEndItemNameListEnumerator.Create(Self);
end;

function TXMLEndItemNameList.Get_EndItemName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLEndItemNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLEndItemNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLEndItemTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLEndItemTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('EndItemTypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'EndItemTypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLEndItemTypeCodeList.GetEnumerator: IXMLEndItemTypeCodeListEnumerator;
begin
  Result := TXMLEndItemTypeCodeListEnumerator.Create(Self);
end;

function TXMLEndItemTypeCodeList.Get_EndItemTypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLEndItemTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLEndItemTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLProductGroupIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLProductGroupIDList.AfterConstruction;
begin
  RegisterChildNode('ProductGroupID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ProductGroupID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLProductGroupIDList.GetEnumerator: IXMLProductGroupIDListEnumerator;
begin
  Result := TXMLProductGroupIDListEnumerator.Create(Self);
end;

function TXMLProductGroupIDList.Get_ProductGroupID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLProductGroupIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLProductGroupIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLNameList.AfterConstruction;
begin
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Name';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNameList.GetEnumerator: IXMLNameListEnumerator;
begin
  Result := TXMLNameListEnumerator.Create(Self);
end;

function TXMLNameList.Get_Name(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLTradeSettlementFinancialCardType.AfterConstruction;
begin
  RegisterChildNode('MicrochipIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CardholderName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExpiryDate', TXMLDateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('VerificationNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValidFromDateTime', TXMLDateOnlyFormattedDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditLimitAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditLimitAmount := CreateCollection(TXMLCreditLimitAmountList, IXMLAmountType, 'CreditLimitAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditLimitAmountList;
  RegisterChildNode('CreditLimitAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreditAvailableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreditAvailableAmount := CreateCollection(TXMLCreditAvailableAmountList, IXMLAmountType, 'CreditAvailableAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreditAvailableAmountList;
  RegisterChildNode('CreditAvailableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InterestRatePercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IssuingCompanyName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeSettlementFinancialCardType.GetHasMicrochipIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('MicrochipIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetMicrochipIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['MicrochipIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasCardholderName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CardholderName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetCardholderName: IXMLTextType;
begin
  Result := (ChildNodesNS['CardholderName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasExpiryDate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExpiryDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetExpiryDate: IXMLDateType;
begin
  Result := (ChildNodesNS['ExpiryDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasVerificationNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('VerificationNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetVerificationNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['VerificationNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasValidFromDateTime: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ValidFromDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetValidFromDateTime: IXMLDateOnlyFormattedDateTimeType;
begin
  Result := (ChildNodesNS['ValidFromDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateOnlyFormattedDateTimeType);
end;

function TXMLTradeSettlementFinancialCardType.GetCreditLimitAmount: IXMLCreditLimitAmountList;
begin
  Result := FCreditLimitAmount;
end;

function TXMLTradeSettlementFinancialCardType.GetCreditAvailableAmount: IXMLCreditAvailableAmountList;
begin
  Result := FCreditAvailableAmount;
end;

function TXMLTradeSettlementFinancialCardType.GetHasInterestRatePercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('InterestRatePercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetInterestRatePercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['InterestRatePercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasIssuingCompanyName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('IssuingCompanyName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetIssuingCompanyName: IXMLTextType;
begin
  Result := (ChildNodesNS['IssuingCompanyName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeSettlementFinancialCardType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementFinancialCardType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLCreditAvailableAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLCreditAvailableAmountList.AfterConstruction;
begin
  RegisterChildNode('CreditAvailableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditAvailableAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditAvailableAmountList.GetEnumerator: IXMLCreditAvailableAmountListEnumerator;
begin
  Result := TXMLCreditAvailableAmountListEnumerator.Create(Self);
end;

function TXMLCreditAvailableAmountList.Get_CreditAvailableAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLCreditAvailableAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLCreditAvailableAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLCreditLimitAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLCreditLimitAmountList.AfterConstruction;
begin
  RegisterChildNode('CreditLimitAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreditLimitAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreditLimitAmountList.GetEnumerator: IXMLCreditLimitAmountListEnumerator;
begin
  Result := TXMLCreditLimitAmountListEnumerator.Create(Self);
end;

function TXMLCreditLimitAmountList.Get_CreditLimitAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLCreditLimitAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLCreditLimitAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTradeSettlementHeaderMonetarySummationType.AfterConstruction;
begin
  RegisterChildNode('LineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLineTotalAmount := CreateCollection(TXMLLineTotalAmountList, IXMLAmountType, 'LineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLineTotalAmountList;
  RegisterChildNode('LineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChargeTotalAmount := CreateCollection(TXMLChargeTotalAmountList, IXMLAmountType, 'ChargeTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChargeTotalAmountList;
  RegisterChildNode('ChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AllowanceTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAllowanceTotalAmount := CreateCollection(TXMLAllowanceTotalAmountList, IXMLAmountType, 'AllowanceTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAllowanceTotalAmountList;
  RegisterChildNode('AllowanceTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxBasisTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTaxBasisTotalAmount := CreateCollection(TXMLTaxBasisTotalAmountList, IXMLAmountType, 'TaxBasisTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTaxBasisTotalAmountList;
  RegisterChildNode('TaxBasisTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTaxTotalAmount := CreateCollection(TXMLTaxTotalAmountList, IXMLAmountType, 'TaxTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTaxTotalAmountList;
  RegisterChildNode('TaxTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RoundingAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRoundingAmount := CreateCollection(TXMLRoundingAmountList, IXMLAmountType, 'RoundingAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRoundingAmountList;
  RegisterChildNode('RoundingAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrandTotalAmount := CreateCollection(TXMLGrandTotalAmountList, IXMLAmountType, 'GrandTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrandTotalAmountList;
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformationAmount := CreateCollection(TXMLInformationAmountList, IXMLAmountType, 'InformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationAmountList;
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalPrepaidAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalPrepaidAmount := CreateCollection(TXMLTotalPrepaidAmountList, IXMLAmountType, 'TotalPrepaidAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalPrepaidAmountList;
  RegisterChildNode('TotalPrepaidAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalDiscountAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalDiscountAmount := CreateCollection(TXMLTotalDiscountAmountList, IXMLAmountType, 'TotalDiscountAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalDiscountAmountList;
  RegisterChildNode('TotalDiscountAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalAllowanceChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalAllowanceChargeAmount := CreateCollection(TXMLTotalAllowanceChargeAmountList, IXMLAmountType, 'TotalAllowanceChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalAllowanceChargeAmountList;
  RegisterChildNode('TotalAllowanceChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DuePayableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDuePayableAmount := CreateCollection(TXMLDuePayableAmountList, IXMLAmountType, 'DuePayableAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDuePayableAmountList;
  RegisterChildNode('DuePayableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RetailValueExcludingTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRetailValueExcludingTaxInformationAmount := CreateCollection(TXMLRetailValueExcludingTaxInformationAmountList, IXMLAmountType, 'RetailValueExcludingTaxInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRetailValueExcludingTaxInformationAmountList;
  RegisterChildNode('RetailValueExcludingTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalDepositFeeInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalDepositFeeInformationAmount := CreateCollection(TXMLTotalDepositFeeInformationAmountList, IXMLAmountType, 'TotalDepositFeeInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalDepositFeeInformationAmountList;
  RegisterChildNode('TotalDepositFeeInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductValueExcludingTobaccoTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FProductValueExcludingTobaccoTaxInformationAmount := CreateCollection(TXMLProductValueExcludingTobaccoTaxInformationAmountList, IXMLAmountType, 'ProductValueExcludingTobaccoTaxInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLProductValueExcludingTobaccoTaxInformationAmountList;
  RegisterChildNode('ProductValueExcludingTobaccoTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalRetailValueInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalRetailValueInformationAmount := CreateCollection(TXMLTotalRetailValueInformationAmountList, IXMLAmountType, 'TotalRetailValueInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalRetailValueInformationAmountList;
  RegisterChildNode('TotalRetailValueInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrossLineTotalAmount := CreateCollection(TXMLGrossLineTotalAmountList, IXMLAmountType, 'GrossLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrossLineTotalAmountList;
  RegisterChildNode('GrossLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetLineTotalAmount := CreateCollection(TXMLNetLineTotalAmountList, IXMLAmountType, 'NetLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetLineTotalAmountList;
  RegisterChildNode('NetLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetIncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetIncludingTaxesLineTotalAmount := CreateCollection(TXMLNetIncludingTaxesLineTotalAmountList, IXMLAmountType, 'NetIncludingTaxesLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetIncludingTaxesLineTotalAmountList;
  RegisterChildNode('NetIncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InsuranceChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInsuranceChargeTotalAmount := CreateCollection(TXMLInsuranceChargeTotalAmountList, IXMLAmountType, 'InsuranceChargeTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInsuranceChargeTotalAmountList;
  RegisterChildNode('InsuranceChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludingTaxesLineTotalAmount := CreateCollection(TXMLIncludingTaxesLineTotalAmountList, IXMLAmountType, 'IncludingTaxesLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludingTaxesLineTotalAmountList;
  RegisterChildNode('IncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetLineTotalAmount: IXMLLineTotalAmountList;
begin
  Result := FLineTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetChargeTotalAmount: IXMLChargeTotalAmountList;
begin
  Result := FChargeTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
begin
  Result := FAllowanceTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
begin
  Result := FTaxBasisTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTaxTotalAmount: IXMLTaxTotalAmountList;
begin
  Result := FTaxTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetRoundingAmount: IXMLRoundingAmountList;
begin
  Result := FRoundingAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetGrandTotalAmount: IXMLGrandTotalAmountList;
begin
  Result := FGrandTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetInformationAmount: IXMLInformationAmountList;
begin
  Result := FInformationAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTotalPrepaidAmount: IXMLTotalPrepaidAmountList;
begin
  Result := FTotalPrepaidAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTotalDiscountAmount: IXMLTotalDiscountAmountList;
begin
  Result := FTotalDiscountAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
begin
  Result := FTotalAllowanceChargeAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetDuePayableAmount: IXMLDuePayableAmountList;
begin
  Result := FDuePayableAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetRetailValueExcludingTaxInformationAmount: IXMLRetailValueExcludingTaxInformationAmountList;
begin
  Result := FRetailValueExcludingTaxInformationAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTotalDepositFeeInformationAmount: IXMLTotalDepositFeeInformationAmountList;
begin
  Result := FTotalDepositFeeInformationAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetProductValueExcludingTobaccoTaxInformationAmount: IXMLProductValueExcludingTobaccoTaxInformationAmountList;
begin
  Result := FProductValueExcludingTobaccoTaxInformationAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
begin
  Result := FTotalRetailValueInformationAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
begin
  Result := FGrossLineTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
begin
  Result := FNetLineTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
begin
  Result := FNetIncludingTaxesLineTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetInsuranceChargeTotalAmount: IXMLInsuranceChargeTotalAmountList;
begin
  Result := FInsuranceChargeTotalAmount;
end;

function TXMLTradeSettlementHeaderMonetarySummationType.GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
begin
  Result := FIncludingTaxesLineTotalAmount;
end;

function TXMLInsuranceChargeTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLInsuranceChargeTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('InsuranceChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InsuranceChargeTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInsuranceChargeTotalAmountList.GetEnumerator: IXMLInsuranceChargeTotalAmountListEnumerator;
begin
  Result := TXMLInsuranceChargeTotalAmountListEnumerator.Create(Self);
end;

function TXMLInsuranceChargeTotalAmountList.Get_InsuranceChargeTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLInsuranceChargeTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLInsuranceChargeTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLProductValueExcludingTobaccoTaxInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('ProductValueExcludingTobaccoTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ProductValueExcludingTobaccoTaxInformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLProductValueExcludingTobaccoTaxInformationAmountList.GetEnumerator: IXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator;
begin
  Result := TXMLProductValueExcludingTobaccoTaxInformationAmountListEnumerator.Create(Self);
end;

function TXMLProductValueExcludingTobaccoTaxInformationAmountList.Get_ProductValueExcludingTobaccoTaxInformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLProductValueExcludingTobaccoTaxInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLProductValueExcludingTobaccoTaxInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTotalDepositFeeInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTotalDepositFeeInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('TotalDepositFeeInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalDepositFeeInformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalDepositFeeInformationAmountList.GetEnumerator: IXMLTotalDepositFeeInformationAmountListEnumerator;
begin
  Result := TXMLTotalDepositFeeInformationAmountListEnumerator.Create(Self);
end;

function TXMLTotalDepositFeeInformationAmountList.Get_TotalDepositFeeInformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTotalDepositFeeInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTotalDepositFeeInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLRetailValueExcludingTaxInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLRetailValueExcludingTaxInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('RetailValueExcludingTaxInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RetailValueExcludingTaxInformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRetailValueExcludingTaxInformationAmountList.GetEnumerator: IXMLRetailValueExcludingTaxInformationAmountListEnumerator;
begin
  Result := TXMLRetailValueExcludingTaxInformationAmountListEnumerator.Create(Self);
end;

function TXMLRetailValueExcludingTaxInformationAmountList.Get_RetailValueExcludingTaxInformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLRetailValueExcludingTaxInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLRetailValueExcludingTaxInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLDuePayableAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLDuePayableAmountList.AfterConstruction;
begin
  RegisterChildNode('DuePayableAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'DuePayableAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDuePayableAmountList.GetEnumerator: IXMLDuePayableAmountListEnumerator;
begin
  Result := TXMLDuePayableAmountListEnumerator.Create(Self);
end;

function TXMLDuePayableAmountList.Get_DuePayableAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLDuePayableAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLDuePayableAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTotalDiscountAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTotalDiscountAmountList.AfterConstruction;
begin
  RegisterChildNode('TotalDiscountAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalDiscountAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalDiscountAmountList.GetEnumerator: IXMLTotalDiscountAmountListEnumerator;
begin
  Result := TXMLTotalDiscountAmountListEnumerator.Create(Self);
end;

function TXMLTotalDiscountAmountList.Get_TotalDiscountAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTotalDiscountAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTotalDiscountAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTotalPrepaidAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTotalPrepaidAmountList.AfterConstruction;
begin
  RegisterChildNode('TotalPrepaidAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalPrepaidAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalPrepaidAmountList.GetEnumerator: IXMLTotalPrepaidAmountListEnumerator;
begin
  Result := TXMLTotalPrepaidAmountListEnumerator.Create(Self);
end;

function TXMLTotalPrepaidAmountList.Get_TotalPrepaidAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTotalPrepaidAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTotalPrepaidAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLRoundingAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLRoundingAmountList.AfterConstruction;
begin
  RegisterChildNode('RoundingAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RoundingAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRoundingAmountList.GetEnumerator: IXMLRoundingAmountListEnumerator;
begin
  Result := TXMLRoundingAmountListEnumerator.Create(Self);
end;

function TXMLRoundingAmountList.Get_RoundingAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLRoundingAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLRoundingAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTradeSettlementLineMonetarySummationType.AfterConstruction;
begin
  RegisterChildNode('LineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLineTotalAmount := CreateCollection(TXMLLineTotalAmountList, IXMLAmountType, 'LineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLineTotalAmountList;
  RegisterChildNode('LineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChargeTotalAmount := CreateCollection(TXMLChargeTotalAmountList, IXMLAmountType, 'ChargeTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChargeTotalAmountList;
  RegisterChildNode('ChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AllowanceTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAllowanceTotalAmount := CreateCollection(TXMLAllowanceTotalAmountList, IXMLAmountType, 'AllowanceTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAllowanceTotalAmountList;
  RegisterChildNode('AllowanceTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxBasisTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTaxBasisTotalAmount := CreateCollection(TXMLTaxBasisTotalAmountList, IXMLAmountType, 'TaxBasisTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTaxBasisTotalAmountList;
  RegisterChildNode('TaxBasisTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTaxTotalAmount := CreateCollection(TXMLTaxTotalAmountList, IXMLAmountType, 'TaxTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTaxTotalAmountList;
  RegisterChildNode('TaxTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrandTotalAmount := CreateCollection(TXMLGrandTotalAmountList, IXMLAmountType, 'GrandTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrandTotalAmountList;
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformationAmount := CreateCollection(TXMLInformationAmountList, IXMLAmountType, 'InformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationAmountList;
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalAllowanceChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalAllowanceChargeAmount := CreateCollection(TXMLTotalAllowanceChargeAmountList, IXMLAmountType, 'TotalAllowanceChargeAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalAllowanceChargeAmountList;
  RegisterChildNode('TotalAllowanceChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalRetailValueInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalRetailValueInformationAmount := CreateCollection(TXMLTotalRetailValueInformationAmountList, IXMLAmountType, 'TotalRetailValueInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalRetailValueInformationAmountList;
  RegisterChildNode('TotalRetailValueInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrossLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrossLineTotalAmount := CreateCollection(TXMLGrossLineTotalAmountList, IXMLAmountType, 'GrossLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrossLineTotalAmountList;
  RegisterChildNode('GrossLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetLineTotalAmount := CreateCollection(TXMLNetLineTotalAmountList, IXMLAmountType, 'NetLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetLineTotalAmountList;
  RegisterChildNode('NetLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('NetIncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FNetIncludingTaxesLineTotalAmount := CreateCollection(TXMLNetIncludingTaxesLineTotalAmountList, IXMLAmountType, 'NetIncludingTaxesLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLNetIncludingTaxesLineTotalAmountList;
  RegisterChildNode('NetIncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProductWeightLossInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FProductWeightLossInformationAmount := CreateCollection(TXMLProductWeightLossInformationAmountList, IXMLAmountType, 'ProductWeightLossInformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLProductWeightLossInformationAmountList;
  RegisterChildNode('ProductWeightLossInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('IncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FIncludingTaxesLineTotalAmount := CreateCollection(TXMLIncludingTaxesLineTotalAmountList, IXMLAmountType, 'IncludingTaxesLineTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIncludingTaxesLineTotalAmountList;
  RegisterChildNode('IncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetLineTotalAmount: IXMLLineTotalAmountList;
begin
  Result := FLineTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetChargeTotalAmount: IXMLChargeTotalAmountList;
begin
  Result := FChargeTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetAllowanceTotalAmount: IXMLAllowanceTotalAmountList;
begin
  Result := FAllowanceTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetTaxBasisTotalAmount: IXMLTaxBasisTotalAmountList;
begin
  Result := FTaxBasisTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetTaxTotalAmount: IXMLTaxTotalAmountList;
begin
  Result := FTaxTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetGrandTotalAmount: IXMLGrandTotalAmountList;
begin
  Result := FGrandTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetInformationAmount: IXMLInformationAmountList;
begin
  Result := FInformationAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetTotalAllowanceChargeAmount: IXMLTotalAllowanceChargeAmountList;
begin
  Result := FTotalAllowanceChargeAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetTotalRetailValueInformationAmount: IXMLTotalRetailValueInformationAmountList;
begin
  Result := FTotalRetailValueInformationAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetGrossLineTotalAmount: IXMLGrossLineTotalAmountList;
begin
  Result := FGrossLineTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetNetLineTotalAmount: IXMLNetLineTotalAmountList;
begin
  Result := FNetLineTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetNetIncludingTaxesLineTotalAmount: IXMLNetIncludingTaxesLineTotalAmountList;
begin
  Result := FNetIncludingTaxesLineTotalAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetProductWeightLossInformationAmount: IXMLProductWeightLossInformationAmountList;
begin
  Result := FProductWeightLossInformationAmount;
end;

function TXMLTradeSettlementLineMonetarySummationType.GetIncludingTaxesLineTotalAmount: IXMLIncludingTaxesLineTotalAmountList;
begin
  Result := FIncludingTaxesLineTotalAmount;
end;

function TXMLIncludingTaxesLineTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLIncludingTaxesLineTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('IncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'IncludingTaxesLineTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIncludingTaxesLineTotalAmountList.GetEnumerator: IXMLIncludingTaxesLineTotalAmountListEnumerator;
begin
  Result := TXMLIncludingTaxesLineTotalAmountListEnumerator.Create(Self);
end;

function TXMLIncludingTaxesLineTotalAmountList.Get_IncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLIncludingTaxesLineTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLIncludingTaxesLineTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLProductWeightLossInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLProductWeightLossInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('ProductWeightLossInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ProductWeightLossInformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLProductWeightLossInformationAmountList.GetEnumerator: IXMLProductWeightLossInformationAmountListEnumerator;
begin
  Result := TXMLProductWeightLossInformationAmountListEnumerator.Create(Self);
end;

function TXMLProductWeightLossInformationAmountList.Get_ProductWeightLossInformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLProductWeightLossInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLProductWeightLossInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLNetIncludingTaxesLineTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLNetIncludingTaxesLineTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('NetIncludingTaxesLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetIncludingTaxesLineTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetIncludingTaxesLineTotalAmountList.GetEnumerator: IXMLNetIncludingTaxesLineTotalAmountListEnumerator;
begin
  Result := TXMLNetIncludingTaxesLineTotalAmountListEnumerator.Create(Self);
end;

function TXMLNetIncludingTaxesLineTotalAmountList.Get_NetIncludingTaxesLineTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLNetIncludingTaxesLineTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLNetIncludingTaxesLineTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLNetLineTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLNetLineTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('NetLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'NetLineTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLNetLineTotalAmountList.GetEnumerator: IXMLNetLineTotalAmountListEnumerator;
begin
  Result := TXMLNetLineTotalAmountListEnumerator.Create(Self);
end;

function TXMLNetLineTotalAmountList.Get_NetLineTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLNetLineTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLNetLineTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLGrossLineTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLGrossLineTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('GrossLineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GrossLineTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGrossLineTotalAmountList.GetEnumerator: IXMLGrossLineTotalAmountListEnumerator;
begin
  Result := TXMLGrossLineTotalAmountListEnumerator.Create(Self);
end;

function TXMLGrossLineTotalAmountList.Get_GrossLineTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLGrossLineTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLGrossLineTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTotalRetailValueInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTotalRetailValueInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('TotalRetailValueInformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalRetailValueInformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalRetailValueInformationAmountList.GetEnumerator: IXMLTotalRetailValueInformationAmountListEnumerator;
begin
  Result := TXMLTotalRetailValueInformationAmountListEnumerator.Create(Self);
end;

function TXMLTotalRetailValueInformationAmountList.Get_TotalRetailValueInformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTotalRetailValueInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTotalRetailValueInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTotalAllowanceChargeAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTotalAllowanceChargeAmountList.AfterConstruction;
begin
  RegisterChildNode('TotalAllowanceChargeAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalAllowanceChargeAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalAllowanceChargeAmountList.GetEnumerator: IXMLTotalAllowanceChargeAmountListEnumerator;
begin
  Result := TXMLTotalAllowanceChargeAmountListEnumerator.Create(Self);
end;

function TXMLTotalAllowanceChargeAmountList.Get_TotalAllowanceChargeAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTotalAllowanceChargeAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTotalAllowanceChargeAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTaxTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTaxTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('TaxTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TaxTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTaxTotalAmountList.GetEnumerator: IXMLTaxTotalAmountListEnumerator;
begin
  Result := TXMLTaxTotalAmountListEnumerator.Create(Self);
end;

function TXMLTaxTotalAmountList.Get_TaxTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTaxTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTaxTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLTaxBasisTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLTaxBasisTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('TaxBasisTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TaxBasisTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTaxBasisTotalAmountList.GetEnumerator: IXMLTaxBasisTotalAmountListEnumerator;
begin
  Result := TXMLTaxBasisTotalAmountListEnumerator.Create(Self);
end;

function TXMLTaxBasisTotalAmountList.Get_TaxBasisTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLTaxBasisTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLTaxBasisTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLAllowanceTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLAllowanceTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('AllowanceTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AllowanceTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAllowanceTotalAmountList.GetEnumerator: IXMLAllowanceTotalAmountListEnumerator;
begin
  Result := TXMLAllowanceTotalAmountListEnumerator.Create(Self);
end;

function TXMLAllowanceTotalAmountList.Get_AllowanceTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLAllowanceTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLAllowanceTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLChargeTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLChargeTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('ChargeTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ChargeTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLChargeTotalAmountList.GetEnumerator: IXMLChargeTotalAmountListEnumerator;
begin
  Result := TXMLChargeTotalAmountListEnumerator.Create(Self);
end;

function TXMLChargeTotalAmountList.Get_ChargeTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLChargeTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLChargeTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLLineTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLLineTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('LineTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'LineTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLineTotalAmountList.GetEnumerator: IXMLLineTotalAmountListEnumerator;
begin
  Result := TXMLLineTotalAmountListEnumerator.Create(Self);
end;

function TXMLLineTotalAmountList.Get_LineTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLLineTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLLineTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTradeSettlementPaymentMeansType.AfterConstruction;
begin
  RegisterChildNode('PaymentChannelCode', TXMLPaymentMeansChannelCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLPaymentMeansCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GuaranteeMethodCode', TXMLPaymentGuaranteeMeansCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PaymentMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformation := CreateCollection(TXMLInformationList, IXMLTextType, 'Information', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationList;
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FID := CreateCollection(TXMLIDList, IXMLIDType, 'ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLIDList;
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ApplicableTradeSettlementFinancialCard', TXMLTradeSettlementFinancialCardType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayerPartyDebtorFinancialAccount', TXMLDebtorFinancialAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayeePartyCreditorFinancialAccount', TXMLCreditorFinancialAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPayeePartyCreditorFinancialAccount := CreateCollection(TXMLPayeePartyCreditorFinancialAccountList, IXMLCreditorFinancialAccountType, 'PayeePartyCreditorFinancialAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPayeePartyCreditorFinancialAccountList;
  RegisterChildNode('PayeePartyCreditorFinancialAccount', TXMLCreditorFinancialAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayerSpecifiedDebtorFinancialInstitution', TXMLDebtorFinancialInstitutionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PayeeSpecifiedCreditorFinancialInstitution', TXMLCreditorFinancialInstitutionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeSettlementPaymentMeansType.GetHasPaymentChannelCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentChannelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetPaymentChannelCode: IXMLPaymentMeansChannelCodeType;
begin
  Result := (ChildNodesNS['PaymentChannelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentMeansChannelCodeType);
end;

function TXMLTradeSettlementPaymentMeansType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetTypeCode: IXMLPaymentMeansCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentMeansCodeType);
end;

function TXMLTradeSettlementPaymentMeansType.GetHasGuaranteeMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('GuaranteeMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetGuaranteeMethodCode: IXMLPaymentGuaranteeMeansCodeType;
begin
  Result := (ChildNodesNS['GuaranteeMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPaymentGuaranteeMeansCodeType);
end;

function TXMLTradeSettlementPaymentMeansType.GetHasPaymentMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PaymentMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetPaymentMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['PaymentMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeSettlementPaymentMeansType.GetInformation: IXMLInformationList;
begin
  Result := FInformation;
end;

function TXMLTradeSettlementPaymentMeansType.GetID: IXMLIDList;
begin
  Result := FID;
end;

function TXMLTradeSettlementPaymentMeansType.GetHasApplicableTradeSettlementFinancialCard: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ApplicableTradeSettlementFinancialCard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetApplicableTradeSettlementFinancialCard: IXMLTradeSettlementFinancialCardType;
begin
  Result := (ChildNodesNS['ApplicableTradeSettlementFinancialCard', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeSettlementFinancialCardType);
end;

function TXMLTradeSettlementPaymentMeansType.GetHasPayerPartyDebtorFinancialAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayerPartyDebtorFinancialAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetPayerPartyDebtorFinancialAccount: IXMLDebtorFinancialAccountType;
begin
  Result := (ChildNodesNS['PayerPartyDebtorFinancialAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDebtorFinancialAccountType);
end;

function TXMLTradeSettlementPaymentMeansType.GetPayeePartyCreditorFinancialAccount: IXMLPayeePartyCreditorFinancialAccountList;
begin
  Result := FPayeePartyCreditorFinancialAccount;
end;

function TXMLTradeSettlementPaymentMeansType.GetHasPayerSpecifiedDebtorFinancialInstitution: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayerSpecifiedDebtorFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetPayerSpecifiedDebtorFinancialInstitution: IXMLDebtorFinancialInstitutionType;
begin
  Result := (ChildNodesNS['PayerSpecifiedDebtorFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDebtorFinancialInstitutionType);
end;

function TXMLTradeSettlementPaymentMeansType.GetHasPayeeSpecifiedCreditorFinancialInstitution: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PayeeSpecifiedCreditorFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeSettlementPaymentMeansType.GetPayeeSpecifiedCreditorFinancialInstitution: IXMLCreditorFinancialInstitutionType;
begin
  Result := (ChildNodesNS['PayeeSpecifiedCreditorFinancialInstitution', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCreditorFinancialInstitutionType);
end;

function TXMLPayeePartyCreditorFinancialAccountListEnumerator.GetCurrent: IXMLCreditorFinancialAccountType;
begin
  Result := (inherited GetCurrent as IXMLCreditorFinancialAccountType);
end;

procedure TXMLPayeePartyCreditorFinancialAccountList.AfterConstruction;
begin
  RegisterChildNode('PayeePartyCreditorFinancialAccount', TXMLCreditorFinancialAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PayeePartyCreditorFinancialAccount';
  ItemInterface := IXMLCreditorFinancialAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPayeePartyCreditorFinancialAccountList.GetEnumerator: IXMLPayeePartyCreditorFinancialAccountListEnumerator;
begin
  Result := TXMLPayeePartyCreditorFinancialAccountListEnumerator.Create(Self);
end;

function TXMLPayeePartyCreditorFinancialAccountList.Get_PayeePartyCreditorFinancialAccount(Index: Integer): IXMLCreditorFinancialAccountType;
begin
  Result := (List[Index] as IXMLCreditorFinancialAccountType);
end;

function TXMLPayeePartyCreditorFinancialAccountList.Add: IXMLCreditorFinancialAccountType;
begin
  Result := (AddItem(-1) as IXMLCreditorFinancialAccountType);
end;

function TXMLPayeePartyCreditorFinancialAccountList.Insert(Index: Integer): IXMLCreditorFinancialAccountType;
begin
  Result := (AddItem(Index) as IXMLCreditorFinancialAccountType);
end;

function TXMLIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLIDList.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLIDList.GetEnumerator: IXMLIDListEnumerator;
begin
  Result := TXMLIDListEnumerator.Create(Self);
end;

function TXMLIDList.Get_ID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLInformationListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLInformationList.AfterConstruction;
begin
  RegisterChildNode('Information', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Information';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInformationList.GetEnumerator: IXMLInformationListEnumerator;
begin
  Result := TXMLInformationListEnumerator.Create(Self);
end;

function TXMLInformationList.Get_Information(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLInformationList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLInformationList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLTradeTaxType.AfterConstruction;
begin
  RegisterChildNode('CalculatedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCalculatedAmount := CreateCollection(TXMLCalculatedAmountList, IXMLAmountType, 'CalculatedAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCalculatedAmountList;
  RegisterChildNode('CalculatedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLTaxTypeCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExemptionReason', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculatedRate', TXMLRateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationSequenceNumeric', TXMLNumericType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBasisAmount := CreateCollection(TXMLBasisAmountList, IXMLAmountType, 'BasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBasisAmountList;
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('UnitBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FUnitBasisAmount := CreateCollection(TXMLUnitBasisAmountList, IXMLAmountType, 'UnitBasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLUnitBasisAmountList;
  RegisterChildNode('UnitBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('LineTotalBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FLineTotalBasisAmount := CreateCollection(TXMLLineTotalBasisAmountList, IXMLAmountType, 'LineTotalBasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLLineTotalBasisAmountList;
  RegisterChildNode('LineTotalBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AllowanceChargeBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAllowanceChargeBasisAmount := CreateCollection(TXMLAllowanceChargeBasisAmountList, IXMLAmountType, 'AllowanceChargeBasisAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAllowanceChargeBasisAmountList;
  RegisterChildNode('AllowanceChargeBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryCode', TXMLTaxCategoryCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Jurisdiction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FJurisdiction := CreateCollection(TXMLJurisdictionList, IXMLTextType, 'Jurisdiction', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLJurisdictionList;
  RegisterChildNode('Jurisdiction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CustomsDutyIndicator', TXMLIndicatorType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ExemptionReasonCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxBasisAllowanceRate', TXMLRateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TaxPointDate', TXMLDateType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Type', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FInformationAmount := CreateCollection(TXMLInformationAmountList, IXMLAmountType, 'InformationAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLInformationAmountList;
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CategoryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCategoryName := CreateCollection(TXMLCategoryNameList, IXMLTextType, 'CategoryName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCategoryNameList;
  RegisterChildNode('CategoryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DueDateTypeCode', TXMLTimeReferenceCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RateApplicablePercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FGrandTotalAmount := CreateCollection(TXMLGrandTotalAmountList, IXMLAmountType, 'GrandTotalAmount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLGrandTotalAmountList;
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CalculationMethodCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FSpecifiedTradeAccountingAccount := CreateCollection(TXMLSpecifiedTradeAccountingAccountList, IXMLTradeAccountingAccountType, 'SpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLSpecifiedTradeAccountingAccountList;
  RegisterChildNode('SpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ServiceSupplyTradeCountry', TXMLTradeCountryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerRepayableTaxSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerPayableTaxSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SellerRefundableTaxSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerDeductibleTaxSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BuyerNonDeductibleTaxSpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PlaceApplicableTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPlaceApplicableTradeLocation := CreateCollection(TXMLPlaceApplicableTradeLocationList, IXMLTradeLocationType, 'PlaceApplicableTradeLocation', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPlaceApplicableTradeLocationList;
  RegisterChildNode('PlaceApplicableTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTradeTaxType.GetCalculatedAmount: IXMLCalculatedAmountList;
begin
  Result := FCalculatedAmount;
end;

function TXMLTradeTaxType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetTypeCode: IXMLTaxTypeCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTaxTypeCodeType);
end;

function TXMLTradeTaxType.GetHasExemptionReason: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExemptionReason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetExemptionReason: IXMLTextType;
begin
  Result := (ChildNodesNS['ExemptionReason', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeTaxType.GetHasCalculatedRate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculatedRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCalculatedRate: IXMLRateType;
begin
  Result := (ChildNodesNS['CalculatedRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLRateType);
end;

function TXMLTradeTaxType.GetHasCalculationSequenceNumeric: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationSequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCalculationSequenceNumeric: IXMLNumericType;
begin
  Result := (ChildNodesNS['CalculationSequenceNumeric', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLNumericType);
end;

function TXMLTradeTaxType.GetHasBasisQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetBasisQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['BasisQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLTradeTaxType.GetBasisAmount: IXMLBasisAmountList;
begin
  Result := FBasisAmount;
end;

function TXMLTradeTaxType.GetUnitBasisAmount: IXMLUnitBasisAmountList;
begin
  Result := FUnitBasisAmount;
end;

function TXMLTradeTaxType.GetLineTotalBasisAmount: IXMLLineTotalBasisAmountList;
begin
  Result := FLineTotalBasisAmount;
end;

function TXMLTradeTaxType.GetAllowanceChargeBasisAmount: IXMLAllowanceChargeBasisAmountList;
begin
  Result := FAllowanceChargeBasisAmount;
end;

function TXMLTradeTaxType.GetHasCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCategoryCode: IXMLTaxCategoryCodeType;
begin
  Result := (ChildNodesNS['CategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTaxCategoryCodeType);
end;

function TXMLTradeTaxType.GetHasCurrencyCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['CurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLTradeTaxType.GetJurisdiction: IXMLJurisdictionList;
begin
  Result := FJurisdiction;
end;

function TXMLTradeTaxType.GetHasCustomsDutyIndicator: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CustomsDutyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCustomsDutyIndicator: IXMLIndicatorType;
begin
  Result := (ChildNodesNS['CustomsDutyIndicator', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIndicatorType);
end;

function TXMLTradeTaxType.GetHasExemptionReasonCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ExemptionReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetExemptionReasonCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ExemptionReasonCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeTaxType.GetHasTaxBasisAllowanceRate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TaxBasisAllowanceRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetTaxBasisAllowanceRate: IXMLRateType;
begin
  Result := (ChildNodesNS['TaxBasisAllowanceRate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLRateType);
end;

function TXMLTradeTaxType.GetHasTaxPointDate: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TaxPointDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetTaxPointDate: IXMLDateType;
begin
  Result := (ChildNodesNS['TaxPointDate', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateType);
end;

function TXMLTradeTaxType.GetHas_Type: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.Get_Type: IXMLTextType;
begin
  Result := (ChildNodesNS['Type', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTradeTaxType.GetInformationAmount: IXMLInformationAmountList;
begin
  Result := FInformationAmount;
end;

function TXMLTradeTaxType.GetCategoryName: IXMLCategoryNameList;
begin
  Result := FCategoryName;
end;

function TXMLTradeTaxType.GetHasDueDateTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('DueDateTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetDueDateTypeCode: IXMLTimeReferenceCodeType;
begin
  Result := (ChildNodesNS['DueDateTypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTimeReferenceCodeType);
end;

function TXMLTradeTaxType.GetHasRateApplicablePercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RateApplicablePercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetRateApplicablePercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['RateApplicablePercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLTradeTaxType.GetGrandTotalAmount: IXMLGrandTotalAmountList;
begin
  Result := FGrandTotalAmount;
end;

function TXMLTradeTaxType.GetHasCalculationMethodCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CalculationMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetCalculationMethodCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CalculationMethodCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTradeTaxType.GetSpecifiedTradeAccountingAccount: IXMLSpecifiedTradeAccountingAccountList;
begin
  Result := FSpecifiedTradeAccountingAccount;
end;

function TXMLTradeTaxType.GetHasServiceSupplyTradeCountry: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ServiceSupplyTradeCountry', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetServiceSupplyTradeCountry: IXMLTradeCountryType;
begin
  Result := (ChildNodesNS['ServiceSupplyTradeCountry', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeCountryType);
end;

function TXMLTradeTaxType.GetHasBuyerRepayableTaxSpecifiedTradeAccountingAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerRepayableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetBuyerRepayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
begin
  Result := (ChildNodesNS['BuyerRepayableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAccountingAccountType);
end;

function TXMLTradeTaxType.GetHasSellerPayableTaxSpecifiedTradeAccountingAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerPayableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetSellerPayableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
begin
  Result := (ChildNodesNS['SellerPayableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAccountingAccountType);
end;

function TXMLTradeTaxType.GetHasSellerRefundableTaxSpecifiedTradeAccountingAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SellerRefundableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetSellerRefundableTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
begin
  Result := (ChildNodesNS['SellerRefundableTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAccountingAccountType);
end;

function TXMLTradeTaxType.GetHasBuyerDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerDeductibleTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetBuyerDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
begin
  Result := (ChildNodesNS['BuyerDeductibleTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAccountingAccountType);
end;

function TXMLTradeTaxType.GetHasBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('BuyerNonDeductibleTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTradeTaxType.GetBuyerNonDeductibleTaxSpecifiedTradeAccountingAccount: IXMLTradeAccountingAccountType;
begin
  Result := (ChildNodesNS['BuyerNonDeductibleTaxSpecifiedTradeAccountingAccount', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradeAccountingAccountType);
end;

function TXMLTradeTaxType.GetPlaceApplicableTradeLocation: IXMLPlaceApplicableTradeLocationList;
begin
  Result := FPlaceApplicableTradeLocation;
end;

function TXMLPlaceApplicableTradeLocationListEnumerator.GetCurrent: IXMLTradeLocationType;
begin
  Result := (inherited GetCurrent as IXMLTradeLocationType);
end;

procedure TXMLPlaceApplicableTradeLocationList.AfterConstruction;
begin
  RegisterChildNode('PlaceApplicableTradeLocation', TXMLTradeLocationType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PlaceApplicableTradeLocation';
  ItemInterface := IXMLTradeLocationType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPlaceApplicableTradeLocationList.GetEnumerator: IXMLPlaceApplicableTradeLocationListEnumerator;
begin
  Result := TXMLPlaceApplicableTradeLocationListEnumerator.Create(Self);
end;

function TXMLPlaceApplicableTradeLocationList.Get_PlaceApplicableTradeLocation(Index: Integer): IXMLTradeLocationType;
begin
  Result := (List[Index] as IXMLTradeLocationType);
end;

function TXMLPlaceApplicableTradeLocationList.Add: IXMLTradeLocationType;
begin
  Result := (AddItem(-1) as IXMLTradeLocationType);
end;

function TXMLPlaceApplicableTradeLocationList.Insert(Index: Integer): IXMLTradeLocationType;
begin
  Result := (AddItem(Index) as IXMLTradeLocationType);
end;

function TXMLSpecifiedTradeAccountingAccountListEnumerator.GetCurrent: IXMLTradeAccountingAccountType;
begin
  Result := (inherited GetCurrent as IXMLTradeAccountingAccountType);
end;

procedure TXMLSpecifiedTradeAccountingAccountList.AfterConstruction;
begin
  RegisterChildNode('SpecifiedTradeAccountingAccount', TXMLTradeAccountingAccountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'SpecifiedTradeAccountingAccount';
  ItemInterface := IXMLTradeAccountingAccountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLSpecifiedTradeAccountingAccountList.GetEnumerator: IXMLSpecifiedTradeAccountingAccountListEnumerator;
begin
  Result := TXMLSpecifiedTradeAccountingAccountListEnumerator.Create(Self);
end;

function TXMLSpecifiedTradeAccountingAccountList.Get_SpecifiedTradeAccountingAccount(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (List[Index] as IXMLTradeAccountingAccountType);
end;

function TXMLSpecifiedTradeAccountingAccountList.Add: IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(-1) as IXMLTradeAccountingAccountType);
end;

function TXMLSpecifiedTradeAccountingAccountList.Insert(Index: Integer): IXMLTradeAccountingAccountType;
begin
  Result := (AddItem(Index) as IXMLTradeAccountingAccountType);
end;

function TXMLGrandTotalAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLGrandTotalAmountList.AfterConstruction;
begin
  RegisterChildNode('GrandTotalAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'GrandTotalAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLGrandTotalAmountList.GetEnumerator: IXMLGrandTotalAmountListEnumerator;
begin
  Result := TXMLGrandTotalAmountListEnumerator.Create(Self);
end;

function TXMLGrandTotalAmountList.Get_GrandTotalAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLGrandTotalAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLGrandTotalAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLCategoryNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCategoryNameList.AfterConstruction;
begin
  RegisterChildNode('CategoryName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CategoryName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCategoryNameList.GetEnumerator: IXMLCategoryNameListEnumerator;
begin
  Result := TXMLCategoryNameListEnumerator.Create(Self);
end;

function TXMLCategoryNameList.Get_CategoryName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCategoryNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCategoryNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLInformationAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLInformationAmountList.AfterConstruction;
begin
  RegisterChildNode('InformationAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'InformationAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLInformationAmountList.GetEnumerator: IXMLInformationAmountListEnumerator;
begin
  Result := TXMLInformationAmountListEnumerator.Create(Self);
end;

function TXMLInformationAmountList.Get_InformationAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLInformationAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLInformationAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLJurisdictionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLJurisdictionList.AfterConstruction;
begin
  RegisterChildNode('Jurisdiction', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Jurisdiction';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLJurisdictionList.GetEnumerator: IXMLJurisdictionListEnumerator;
begin
  Result := TXMLJurisdictionListEnumerator.Create(Self);
end;

function TXMLJurisdictionList.Get_Jurisdiction(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLJurisdictionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLJurisdictionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLAllowanceChargeBasisAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLAllowanceChargeBasisAmountList.AfterConstruction;
begin
  RegisterChildNode('AllowanceChargeBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AllowanceChargeBasisAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAllowanceChargeBasisAmountList.GetEnumerator: IXMLAllowanceChargeBasisAmountListEnumerator;
begin
  Result := TXMLAllowanceChargeBasisAmountListEnumerator.Create(Self);
end;

function TXMLAllowanceChargeBasisAmountList.Get_AllowanceChargeBasisAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLAllowanceChargeBasisAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLAllowanceChargeBasisAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLLineTotalBasisAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLLineTotalBasisAmountList.AfterConstruction;
begin
  RegisterChildNode('LineTotalBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'LineTotalBasisAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLLineTotalBasisAmountList.GetEnumerator: IXMLLineTotalBasisAmountListEnumerator;
begin
  Result := TXMLLineTotalBasisAmountListEnumerator.Create(Self);
end;

function TXMLLineTotalBasisAmountList.Get_LineTotalBasisAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLLineTotalBasisAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLLineTotalBasisAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLUnitBasisAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLUnitBasisAmountList.AfterConstruction;
begin
  RegisterChildNode('UnitBasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'UnitBasisAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLUnitBasisAmountList.GetEnumerator: IXMLUnitBasisAmountListEnumerator;
begin
  Result := TXMLUnitBasisAmountListEnumerator.Create(Self);
end;

function TXMLUnitBasisAmountList.Get_UnitBasisAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLUnitBasisAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLUnitBasisAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLBasisAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLBasisAmountList.AfterConstruction;
begin
  RegisterChildNode('BasisAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BasisAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBasisAmountList.GetEnumerator: IXMLBasisAmountListEnumerator;
begin
  Result := TXMLBasisAmountListEnumerator.Create(Self);
end;

function TXMLBasisAmountList.Get_BasisAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLBasisAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLBasisAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

function TXMLCalculatedAmountListEnumerator.GetCurrent: IXMLAmountType;
begin
  Result := (inherited GetCurrent as IXMLAmountType);
end;

procedure TXMLCalculatedAmountList.AfterConstruction;
begin
  RegisterChildNode('CalculatedAmount', TXMLAmountType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CalculatedAmount';
  ItemInterface := IXMLAmountType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCalculatedAmountList.GetEnumerator: IXMLCalculatedAmountListEnumerator;
begin
  Result := TXMLCalculatedAmountListEnumerator.Create(Self);
end;

function TXMLCalculatedAmountList.Get_CalculatedAmount(Index: Integer): IXMLAmountType;
begin
  Result := (List[Index] as IXMLAmountType);
end;

function TXMLCalculatedAmountList.Add: IXMLAmountType;
begin
  Result := (AddItem(-1) as IXMLAmountType);
end;

function TXMLCalculatedAmountList.Insert(Index: Integer): IXMLAmountType;
begin
  Result := (AddItem(Index) as IXMLAmountType);
end;

procedure TXMLTransportCargoInsuranceType.AfterConstruction;
begin
  RegisterChildNode('CoverageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CoverageDescription', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractGeneralConditions', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CoverageTradeParty', TXMLTradePartyType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTransportCargoInsuranceType.GetHasCoverageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CoverageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoInsuranceType.GetCoverageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['CoverageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTransportCargoInsuranceType.GetHasCoverageDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CoverageDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoInsuranceType.GetCoverageDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['CoverageDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTransportCargoInsuranceType.GetHasContractGeneralConditions: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractGeneralConditions', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoInsuranceType.GetContractGeneralConditions: IXMLTextType;
begin
  Result := (ChildNodesNS['ContractGeneralConditions', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTransportCargoInsuranceType.GetHasCoverageTradeParty: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CoverageTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoInsuranceType.GetCoverageTradeParty: IXMLTradePartyType;
begin
  Result := (ChildNodesNS['CoverageTradeParty', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTradePartyType);
end;

function TXMLTransportCargoTypeEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTransportCargoType.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCargoCategoryCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('OperationalCategoryCode', TXMLCargoOperationalCategoryCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('StatisticalClassificationCode', TXMLCargoCommodityCategoryCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Identification', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Identification';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTransportCargoType.GetEnumerator: IXMLTransportCargoTypeEnumerator;
begin
  Result := TXMLTransportCargoTypeEnumerator.Create(Self);
end;

function TXMLTransportCargoType.Get_Identification(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTransportCargoType.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTransportCargoType.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLTransportCargoType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoType.GetTypeCode: IXMLCargoCategoryCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCargoCategoryCodeType);
end;

function TXMLTransportCargoType.GetHasOperationalCategoryCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('OperationalCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoType.GetOperationalCategoryCode: IXMLCargoOperationalCategoryCodeType;
begin
  Result := (ChildNodesNS['OperationalCategoryCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCargoOperationalCategoryCodeType);
end;

function TXMLTransportCargoType.GetHasStatisticalClassificationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('StatisticalClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportCargoType.GetStatisticalClassificationCode: IXMLCargoCommodityCategoryCodeType;
begin
  Result := (ChildNodesNS['StatisticalClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCargoCommodityCategoryCodeType);
end;

procedure TXMLTransportDangerousGoodsType.AfterConstruction;
begin
  RegisterChildNode('UNDGIdentificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RegulationCode', TXMLDangerousGoodsRegulationCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RegulationName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRegulationName := CreateCollection(TXMLRegulationNameList, IXMLTextType, 'RegulationName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRegulationNameList;
  RegisterChildNode('RegulationName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TechnicalName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTechnicalName := CreateCollection(TXMLTechnicalNameList, IXMLTextType, 'TechnicalName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTechnicalNameList;
  RegisterChildNode('TechnicalName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('EMSID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PackagingDangerLevelCode', TXMLDangerousGoodsPackagingLevelCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('HazardClassificationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AdditionalHazardClassificationID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ProperShippingName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLTransportDangerousGoodsType.GetHasUNDGIdentificationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('UNDGIdentificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetUNDGIdentificationCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['UNDGIdentificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLTransportDangerousGoodsType.GetHasRegulationCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('RegulationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetRegulationCode: IXMLDangerousGoodsRegulationCodeType;
begin
  Result := (ChildNodesNS['RegulationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDangerousGoodsRegulationCodeType);
end;

function TXMLTransportDangerousGoodsType.GetRegulationName: IXMLRegulationNameList;
begin
  Result := FRegulationName;
end;

function TXMLTransportDangerousGoodsType.GetTechnicalName: IXMLTechnicalNameList;
begin
  Result := FTechnicalName;
end;

function TXMLTransportDangerousGoodsType.GetHasEMSID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('EMSID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetEMSID: IXMLIDType;
begin
  Result := (ChildNodesNS['EMSID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTransportDangerousGoodsType.GetHasPackagingDangerLevelCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PackagingDangerLevelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetPackagingDangerLevelCode: IXMLDangerousGoodsPackagingLevelCodeType;
begin
  Result := (ChildNodesNS['PackagingDangerLevelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDangerousGoodsPackagingLevelCodeType);
end;

function TXMLTransportDangerousGoodsType.GetHasHazardClassificationID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('HazardClassificationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetHazardClassificationID: IXMLIDType;
begin
  Result := (ChildNodesNS['HazardClassificationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTransportDangerousGoodsType.GetHasAdditionalHazardClassificationID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('AdditionalHazardClassificationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetAdditionalHazardClassificationID: IXMLIDType;
begin
  Result := (ChildNodesNS['AdditionalHazardClassificationID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLTransportDangerousGoodsType.GetHasProperShippingName: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ProperShippingName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLTransportDangerousGoodsType.GetProperShippingName: IXMLTextType;
begin
  Result := (ChildNodesNS['ProperShippingName', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLTechnicalNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLTechnicalNameList.AfterConstruction;
begin
  RegisterChildNode('TechnicalName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TechnicalName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTechnicalNameList.GetEnumerator: IXMLTechnicalNameListEnumerator;
begin
  Result := TXMLTechnicalNameListEnumerator.Create(Self);
end;

function TXMLTechnicalNameList.Get_TechnicalName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLTechnicalNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLTechnicalNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLRegulationNameListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLRegulationNameList.AfterConstruction;
begin
  RegisterChildNode('RegulationName', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RegulationName';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRegulationNameList.GetEnumerator: IXMLRegulationNameListEnumerator;
begin
  Result := TXMLRegulationNameListEnumerator.Create(Self);
end;

function TXMLRegulationNameList.Get_RegulationName(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLRegulationNameList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLRegulationNameList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLUniversalCommunicationType.AfterConstruction;
begin
  RegisterChildNode('URIID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChannelCode', TXMLCommunicationChannelCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CompleteNumber', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLUniversalCommunicationType.GetHasURIID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLUniversalCommunicationType.GetURIID: IXMLIDType;
begin
  Result := (ChildNodesNS['URIID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLUniversalCommunicationType.GetHasChannelCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ChannelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLUniversalCommunicationType.GetChannelCode: IXMLCommunicationChannelCodeType;
begin
  Result := (ChildNodesNS['ChannelCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCommunicationChannelCodeType);
end;

function TXMLUniversalCommunicationType.GetHasCompleteNumber: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('CompleteNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLUniversalCommunicationType.GetCompleteNumber: IXMLTextType;
begin
  Result := (ChildNodesNS['CompleteNumber', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

procedure TXMLValuationBreakdownStatementType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Name', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FDescription := CreateCollection(TXMLDescriptionList, IXMLTextType, 'Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLDescriptionList;
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('MeasurementMethodID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FMeasurementMethodID := CreateCollection(TXMLMeasurementMethodIDList, IXMLIDType, 'MeasurementMethodID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLMeasurementMethodIDList;
  RegisterChildNode('MeasurementMethodID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreationDateTime', TXMLDateTimeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DefaultCurrencyCode', TXMLCurrencyCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('DefaultLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FComment := CreateCollection(TXMLCommentList, IXMLTextType, 'Comment', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCommentList;
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTypeCode := CreateCollection(TXMLTypeCodeList, IXMLCodeType, 'TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTypeCodeList;
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequestedActionCode := CreateCollection(TXMLRequestedActionCodeList, IXMLCodeType, 'RequestedActionCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequestedActionCodeList;
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PriceListID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemGroupedWorkItem', TXMLGroupedWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FItemGroupedWorkItem := CreateCollection(TXMLItemGroupedWorkItemList, IXMLGroupedWorkItemType, 'ItemGroupedWorkItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLItemGroupedWorkItemList;
  RegisterChildNode('ItemGroupedWorkItem', TXMLGroupedWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FItemBasicWorkItem := CreateCollection(TXMLItemBasicWorkItemList, IXMLBasicWorkItemType, 'ItemBasicWorkItem', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLItemBasicWorkItemList;
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FTotalCalculatedPrice := CreateCollection(TXMLTotalCalculatedPriceList, IXMLCalculatedPriceType, 'TotalCalculatedPrice', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLTotalCalculatedPriceList;
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChangedRecordedStatus := CreateCollection(TXMLChangedRecordedStatusList, IXMLRecordedStatusType, 'ChangedRecordedStatus', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChangedRecordedStatusList;
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('CreationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FCreationSpecifiedBinaryFile := CreateCollection(TXMLCreationSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'CreationSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLCreationSpecifiedBinaryFileList;
  RegisterChildNode('CreationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReaderSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReaderSpecifiedBinaryFile := CreateCollection(TXMLReaderSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'ReaderSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReaderSpecifiedBinaryFileList;
  RegisterChildNode('ReaderSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FReferencedSpecifiedBinaryFile := CreateCollection(TXMLReferencedSpecifiedBinaryFileList, IXMLSpecifiedBinaryFileType, 'ReferencedSpecifiedBinaryFile', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLReferencedSpecifiedBinaryFileList;
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLValuationBreakdownStatementType.XSDValidate;
begin
  GetID;
  GetName;
  GetCreationDateTime;
  GetDefaultCurrencyCode;
  GetDefaultLanguageCode;
  SortChildNodes(Self, ['ID', 'Name', 'Description', 'MeasurementMethodID', 'CreationDateTime', 
    'DefaultCurrencyCode', 'DefaultLanguageCode', 'Comment', 'TypeCode', 'RequestedActionCode', 
    'PriceListID', 'ContractualLanguageCode', 'ItemGroupedWorkItem', 'ItemBasicWorkItem', 'TotalCalculatedPrice', 
    'ChangedRecordedStatus', 'CreationSpecifiedBinaryFile', 'ReaderSpecifiedBinaryFile', 'ReferencedSpecifiedBinaryFile']);
end;

procedure TXMLValuationBreakdownStatementType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  GetName;
  GetCreationDateTime;
  GetDefaultCurrencyCode;
  GetDefaultLanguageCode;
  SortChildNodes(Self, ['ID', 'Name', 'Description', 'MeasurementMethodID', 'CreationDateTime', 
    'DefaultCurrencyCode', 'DefaultLanguageCode', 'Comment', 'TypeCode', 'RequestedActionCode', 
    'PriceListID', 'ContractualLanguageCode', 'ItemGroupedWorkItem', 'ItemBasicWorkItem', 'TotalCalculatedPrice', 
    'ChangedRecordedStatus', 'CreationSpecifiedBinaryFile', 'ReaderSpecifiedBinaryFile', 'ReferencedSpecifiedBinaryFile']);
end;

function TXMLValuationBreakdownStatementType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLValuationBreakdownStatementType.GetName: IXMLTextType;
begin
  Result := (ChildNodesNS['Name', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLValuationBreakdownStatementType.GetDescription: IXMLDescriptionList;
begin
  Result := FDescription;
end;

function TXMLValuationBreakdownStatementType.GetMeasurementMethodID: IXMLMeasurementMethodIDList;
begin
  Result := FMeasurementMethodID;
end;

function TXMLValuationBreakdownStatementType.GetCreationDateTime: IXMLDateTimeType;
begin
  Result := (ChildNodesNS['CreationDateTime', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLDateTimeType);
end;

function TXMLValuationBreakdownStatementType.GetDefaultCurrencyCode: IXMLCurrencyCodeType;
begin
  Result := (ChildNodesNS['DefaultCurrencyCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCurrencyCodeType);
end;

function TXMLValuationBreakdownStatementType.GetDefaultLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['DefaultLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLValuationBreakdownStatementType.GetComment: IXMLCommentList;
begin
  Result := FComment;
end;

function TXMLValuationBreakdownStatementType.GetTypeCode: IXMLTypeCodeList;
begin
  Result := FTypeCode;
end;

function TXMLValuationBreakdownStatementType.GetRequestedActionCode: IXMLRequestedActionCodeList;
begin
  Result := FRequestedActionCode;
end;

function TXMLValuationBreakdownStatementType.GetHasPriceListID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('PriceListID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLValuationBreakdownStatementType.GetPriceListID: IXMLIDType;
begin
  Result := (ChildNodesNS['PriceListID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLValuationBreakdownStatementType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLValuationBreakdownStatementType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLValuationBreakdownStatementType.GetItemGroupedWorkItem: IXMLItemGroupedWorkItemList;
begin
  Result := FItemGroupedWorkItem;
end;

function TXMLValuationBreakdownStatementType.GetItemBasicWorkItem: IXMLItemBasicWorkItemList;
begin
  Result := FItemBasicWorkItem;
end;

function TXMLValuationBreakdownStatementType.GetTotalCalculatedPrice: IXMLTotalCalculatedPriceList;
begin
  Result := FTotalCalculatedPrice;
end;

function TXMLValuationBreakdownStatementType.GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
begin
  Result := FChangedRecordedStatus;
end;

function TXMLValuationBreakdownStatementType.GetCreationSpecifiedBinaryFile: IXMLCreationSpecifiedBinaryFileList;
begin
  Result := FCreationSpecifiedBinaryFile;
end;

function TXMLValuationBreakdownStatementType.GetReaderSpecifiedBinaryFile: IXMLReaderSpecifiedBinaryFileList;
begin
  Result := FReaderSpecifiedBinaryFile;
end;

function TXMLValuationBreakdownStatementType.GetReferencedSpecifiedBinaryFile: IXMLReferencedSpecifiedBinaryFileList;
begin
  Result := FReferencedSpecifiedBinaryFile;
end;

function TXMLReferencedSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLReferencedSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('ReferencedSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ReferencedSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReferencedSpecifiedBinaryFileList.GetEnumerator: IXMLReferencedSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLReferencedSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLReferencedSpecifiedBinaryFileList.Get_ReferencedSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLReferencedSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLReferencedSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLReaderSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLReaderSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('ReaderSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ReaderSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLReaderSpecifiedBinaryFileList.GetEnumerator: IXMLReaderSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLReaderSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLReaderSpecifiedBinaryFileList.Get_ReaderSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLReaderSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLReaderSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLCreationSpecifiedBinaryFileListEnumerator.GetCurrent: IXMLSpecifiedBinaryFileType;
begin
  Result := (inherited GetCurrent as IXMLSpecifiedBinaryFileType);
end;

procedure TXMLCreationSpecifiedBinaryFileList.AfterConstruction;
begin
  RegisterChildNode('CreationSpecifiedBinaryFile', TXMLSpecifiedBinaryFileType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'CreationSpecifiedBinaryFile';
  ItemInterface := IXMLSpecifiedBinaryFileType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCreationSpecifiedBinaryFileList.GetEnumerator: IXMLCreationSpecifiedBinaryFileListEnumerator;
begin
  Result := TXMLCreationSpecifiedBinaryFileListEnumerator.Create(Self);
end;

function TXMLCreationSpecifiedBinaryFileList.Get_CreationSpecifiedBinaryFile(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (List[Index] as IXMLSpecifiedBinaryFileType);
end;

function TXMLCreationSpecifiedBinaryFileList.Add: IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(-1) as IXMLSpecifiedBinaryFileType);
end;

function TXMLCreationSpecifiedBinaryFileList.Insert(Index: Integer): IXMLSpecifiedBinaryFileType;
begin
  Result := (AddItem(Index) as IXMLSpecifiedBinaryFileType);
end;

function TXMLTotalCalculatedPriceListEnumerator.GetCurrent: IXMLCalculatedPriceType;
begin
  Result := (inherited GetCurrent as IXMLCalculatedPriceType);
end;

procedure TXMLTotalCalculatedPriceList.AfterConstruction;
begin
  RegisterChildNode('TotalCalculatedPrice', TXMLCalculatedPriceType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TotalCalculatedPrice';
  ItemInterface := IXMLCalculatedPriceType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTotalCalculatedPriceList.GetEnumerator: IXMLTotalCalculatedPriceListEnumerator;
begin
  Result := TXMLTotalCalculatedPriceListEnumerator.Create(Self);
end;

function TXMLTotalCalculatedPriceList.Get_TotalCalculatedPrice(Index: Integer): IXMLCalculatedPriceType;
begin
  Result := (List[Index] as IXMLCalculatedPriceType);
end;

function TXMLTotalCalculatedPriceList.Add: IXMLCalculatedPriceType;
begin
  Result := (AddItem(-1) as IXMLCalculatedPriceType);
end;

function TXMLTotalCalculatedPriceList.Insert(Index: Integer): IXMLCalculatedPriceType;
begin
  Result := (AddItem(Index) as IXMLCalculatedPriceType);
end;

function TXMLItemBasicWorkItemListEnumerator.GetCurrent: IXMLBasicWorkItemType;
begin
  Result := (inherited GetCurrent as IXMLBasicWorkItemType);
end;

procedure TXMLItemBasicWorkItemList.AfterConstruction;
begin
  RegisterChildNode('ItemBasicWorkItem', TXMLBasicWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ItemBasicWorkItem';
  ItemInterface := IXMLBasicWorkItemType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLItemBasicWorkItemList.GetEnumerator: IXMLItemBasicWorkItemListEnumerator;
begin
  Result := TXMLItemBasicWorkItemListEnumerator.Create(Self);
end;

function TXMLItemBasicWorkItemList.Get_ItemBasicWorkItem(Index: Integer): IXMLBasicWorkItemType;
begin
  Result := (List[Index] as IXMLBasicWorkItemType);
end;

function TXMLItemBasicWorkItemList.Add: IXMLBasicWorkItemType;
begin
  Result := (AddItem(-1) as IXMLBasicWorkItemType);
end;

function TXMLItemBasicWorkItemList.Insert(Index: Integer): IXMLBasicWorkItemType;
begin
  Result := (AddItem(Index) as IXMLBasicWorkItemType);
end;

function TXMLItemGroupedWorkItemListEnumerator.GetCurrent: IXMLGroupedWorkItemType;
begin
  Result := (inherited GetCurrent as IXMLGroupedWorkItemType);
end;

procedure TXMLItemGroupedWorkItemList.AfterConstruction;
begin
  RegisterChildNode('ItemGroupedWorkItem', TXMLGroupedWorkItemType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ItemGroupedWorkItem';
  ItemInterface := IXMLGroupedWorkItemType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLItemGroupedWorkItemList.GetEnumerator: IXMLItemGroupedWorkItemListEnumerator;
begin
  Result := TXMLItemGroupedWorkItemListEnumerator.Create(Self);
end;

function TXMLItemGroupedWorkItemList.Get_ItemGroupedWorkItem(Index: Integer): IXMLGroupedWorkItemType;
begin
  Result := (List[Index] as IXMLGroupedWorkItemType);
end;

function TXMLItemGroupedWorkItemList.Add: IXMLGroupedWorkItemType;
begin
  Result := (AddItem(-1) as IXMLGroupedWorkItemType);
end;

function TXMLItemGroupedWorkItemList.Insert(Index: Integer): IXMLGroupedWorkItemType;
begin
  Result := (AddItem(Index) as IXMLGroupedWorkItemType);
end;

function TXMLRequestedActionCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLRequestedActionCodeList.AfterConstruction;
begin
  RegisterChildNode('RequestedActionCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RequestedActionCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRequestedActionCodeList.GetEnumerator: IXMLRequestedActionCodeListEnumerator;
begin
  Result := TXMLRequestedActionCodeListEnumerator.Create(Self);
end;

function TXMLRequestedActionCodeList.Get_RequestedActionCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLRequestedActionCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLRequestedActionCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLTypeCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLTypeCodeList.AfterConstruction;
begin
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'TypeCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLTypeCodeList.GetEnumerator: IXMLTypeCodeListEnumerator;
begin
  Result := TXMLTypeCodeListEnumerator.Create(Self);
end;

function TXMLTypeCodeList.Get_TypeCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLTypeCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLTypeCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLCommentListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLCommentList.AfterConstruction;
begin
  RegisterChildNode('Comment', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Comment';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLCommentList.GetEnumerator: IXMLCommentListEnumerator;
begin
  Result := TXMLCommentListEnumerator.Create(Self);
end;

function TXMLCommentList.Get_Comment(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLCommentList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLCommentList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLMeasurementMethodIDListEnumerator.GetCurrent: IXMLIDType;
begin
  Result := (inherited GetCurrent as IXMLIDType);
end;

procedure TXMLMeasurementMethodIDList.AfterConstruction;
begin
  RegisterChildNode('MeasurementMethodID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'MeasurementMethodID';
  ItemInterface := IXMLIDType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLMeasurementMethodIDList.GetEnumerator: IXMLMeasurementMethodIDListEnumerator;
begin
  Result := TXMLMeasurementMethodIDListEnumerator.Create(Self);
end;

function TXMLMeasurementMethodIDList.Get_MeasurementMethodID(Index: Integer): IXMLIDType;
begin
  Result := (List[Index] as IXMLIDType);
end;

function TXMLMeasurementMethodIDList.Add: IXMLIDType;
begin
  Result := (AddItem(-1) as IXMLIDType);
end;

function TXMLMeasurementMethodIDList.Insert(Index: Integer): IXMLIDType;
begin
  Result := (AddItem(Index) as IXMLIDType);
end;

function TXMLDescriptionListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLDescriptionList.AfterConstruction;
begin
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Description';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLDescriptionList.GetEnumerator: IXMLDescriptionListEnumerator;
begin
  Result := TXMLDescriptionListEnumerator.Create(Self);
end;

function TXMLDescriptionList.Get_Description(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLDescriptionList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLDescriptionList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

procedure TXMLWorkItemComplexDescriptionType.AfterConstruction;
begin
  RegisterChildNode('Abstract', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  F_Abstract := CreateCollection(TXML_AbstractList, IXMLTextType, 'Abstract', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXML_AbstractList;
  RegisterChildNode('Abstract', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FContent := CreateCollection(TXMLContentList, IXMLTextType, 'Content', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLContentList;
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RequestingSpecificationQuery', TXMLSpecificationQueryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRequestingSpecificationQuery := CreateCollection(TXMLRequestingSpecificationQueryList, IXMLSpecificationQueryType, 'RequestingSpecificationQuery', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRequestingSpecificationQueryList;
  RegisterChildNode('RequestingSpecificationQuery', TXMLSpecificationQueryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('RespondingSpecificationResponse', TXMLSpecificationResponseType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FRespondingSpecificationResponse := CreateCollection(TXMLRespondingSpecificationResponseList, IXMLSpecificationResponseType, 'RespondingSpecificationResponse', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLRespondingSpecificationResponseList;
  RegisterChildNode('RespondingSpecificationResponse', TXMLSpecificationResponseType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('SubsetWorkItemComplexDescription', TXMLWorkItemComplexDescriptionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

function TXMLWorkItemComplexDescriptionType.Get_Abstract: IXML_AbstractList;
begin
  Result := F_Abstract;
end;

function TXMLWorkItemComplexDescriptionType.GetContent: IXMLContentList;
begin
  Result := FContent;
end;

function TXMLWorkItemComplexDescriptionType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemComplexDescriptionType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLWorkItemComplexDescriptionType.GetRequestingSpecificationQuery: IXMLRequestingSpecificationQueryList;
begin
  Result := FRequestingSpecificationQuery;
end;

function TXMLWorkItemComplexDescriptionType.GetRespondingSpecificationResponse: IXMLRespondingSpecificationResponseList;
begin
  Result := FRespondingSpecificationResponse;
end;

function TXMLWorkItemComplexDescriptionType.GetHasSubsetWorkItemComplexDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('SubsetWorkItemComplexDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemComplexDescriptionType.GetSubsetWorkItemComplexDescription: IXMLWorkItemComplexDescriptionType;
begin
  Result := (ChildNodesNS['SubsetWorkItemComplexDescription', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLWorkItemComplexDescriptionType);
end;

function TXMLRespondingSpecificationResponseListEnumerator.GetCurrent: IXMLSpecificationResponseType;
begin
  Result := (inherited GetCurrent as IXMLSpecificationResponseType);
end;

procedure TXMLRespondingSpecificationResponseList.AfterConstruction;
begin
  RegisterChildNode('RespondingSpecificationResponse', TXMLSpecificationResponseType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RespondingSpecificationResponse';
  ItemInterface := IXMLSpecificationResponseType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRespondingSpecificationResponseList.GetEnumerator: IXMLRespondingSpecificationResponseListEnumerator;
begin
  Result := TXMLRespondingSpecificationResponseListEnumerator.Create(Self);
end;

function TXMLRespondingSpecificationResponseList.Get_RespondingSpecificationResponse(Index: Integer): IXMLSpecificationResponseType;
begin
  Result := (List[Index] as IXMLSpecificationResponseType);
end;

function TXMLRespondingSpecificationResponseList.Add: IXMLSpecificationResponseType;
begin
  Result := (AddItem(-1) as IXMLSpecificationResponseType);
end;

function TXMLRespondingSpecificationResponseList.Insert(Index: Integer): IXMLSpecificationResponseType;
begin
  Result := (AddItem(Index) as IXMLSpecificationResponseType);
end;

function TXMLRequestingSpecificationQueryListEnumerator.GetCurrent: IXMLSpecificationQueryType;
begin
  Result := (inherited GetCurrent as IXMLSpecificationQueryType);
end;

procedure TXMLRequestingSpecificationQueryList.AfterConstruction;
begin
  RegisterChildNode('RequestingSpecificationQuery', TXMLSpecificationQueryType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'RequestingSpecificationQuery';
  ItemInterface := IXMLSpecificationQueryType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLRequestingSpecificationQueryList.GetEnumerator: IXMLRequestingSpecificationQueryListEnumerator;
begin
  Result := TXMLRequestingSpecificationQueryListEnumerator.Create(Self);
end;

function TXMLRequestingSpecificationQueryList.Get_RequestingSpecificationQuery(Index: Integer): IXMLSpecificationQueryType;
begin
  Result := (List[Index] as IXMLSpecificationQueryType);
end;

function TXMLRequestingSpecificationQueryList.Add: IXMLSpecificationQueryType;
begin
  Result := (AddItem(-1) as IXMLSpecificationQueryType);
end;

function TXMLRequestingSpecificationQueryList.Insert(Index: Integer): IXMLSpecificationQueryType;
begin
  Result := (AddItem(Index) as IXMLSpecificationQueryType);
end;

function TXMLContentListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXMLContentList.AfterConstruction;
begin
  RegisterChildNode('Content', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Content';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLContentList.GetEnumerator: IXMLContentListEnumerator;
begin
  Result := TXMLContentListEnumerator.Create(Self);
end;

function TXMLContentList.Get_Content(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXMLContentList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXMLContentList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXML_AbstractListEnumerator.GetCurrent: IXMLTextType;
begin
  Result := (inherited GetCurrent as IXMLTextType);
end;

procedure TXML_AbstractList.AfterConstruction;
begin
  RegisterChildNode('Abstract', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'Abstract';
  ItemInterface := IXMLTextType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXML_AbstractList.GetEnumerator: IXML_AbstractListEnumerator;
begin
  Result := TXML_AbstractListEnumerator.Create(Self);
end;

function TXML_AbstractList.Get__Abstract(Index: Integer): IXMLTextType;
begin
  Result := (List[Index] as IXMLTextType);
end;

function TXML_AbstractList.Add: IXMLTextType;
begin
  Result := (AddItem(-1) as IXMLTextType);
end;

function TXML_AbstractList.Insert(Index: Integer): IXMLTextType;
begin
  Result := (AddItem(Index) as IXMLTextType);
end;

function TXMLWorkItemDimensionTypeEnumerator.GetCurrent: IXMLWorkItemDimensionType;
begin
  Result := (inherited GetCurrent as IXMLWorkItemDimensionType);
end;

procedure TXMLWorkItemDimensionType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ValueMeasure', TXMLMeasureType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ComponentWorkItemDimension', TXMLWorkItemDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ComponentWorkItemDimension';
  ItemInterface := IXMLWorkItemDimensionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

procedure TXMLWorkItemDimensionType.XSDValidate;
begin
  GetValueMeasure;
  GetTypeCode;
  SortChildNodes(Self, ['ID', 'ValueMeasure', 'Description', 'TypeCode', 'ContractualLanguageCode', 
    'ComponentWorkItemDimension']);
end;

procedure TXMLWorkItemDimensionType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetValueMeasure;
  GetTypeCode;
  SortChildNodes(Self, ['ID', 'ValueMeasure', 'Description', 'TypeCode', 'ContractualLanguageCode', 
    'ComponentWorkItemDimension']);
end;

function TXMLWorkItemDimensionType.GetEnumerator: IXMLWorkItemDimensionTypeEnumerator;
begin
  Result := TXMLWorkItemDimensionTypeEnumerator.Create(Self);
end;

function TXMLWorkItemDimensionType.Get_ComponentWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
begin
  Result := (List[Index] as IXMLWorkItemDimensionType);
end;

function TXMLWorkItemDimensionType.Add: IXMLWorkItemDimensionType;
begin
  Result := (AddItem(-1) as IXMLWorkItemDimensionType);
end;

function TXMLWorkItemDimensionType.Insert(Index: Integer): IXMLWorkItemDimensionType;
begin
  Result := (AddItem(Index) as IXMLWorkItemDimensionType);
end;

function TXMLWorkItemDimensionType.GetHasID: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemDimensionType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLWorkItemDimensionType.GetValueMeasure: IXMLMeasureType;
begin
  Result := (ChildNodesNS['ValueMeasure', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLMeasureType);
end;

function TXMLWorkItemDimensionType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemDimensionType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLWorkItemDimensionType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLWorkItemDimensionType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemDimensionType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

procedure TXMLWorkItemQuantityAnalysisType.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualQuantity', TXMLQuantityType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('Description', TXMLTextType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualQuantityPercent', TXMLPercentType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('TypeCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FPrimaryClassificationCode := CreateCollection(TXMLPrimaryClassificationCodeList, IXMLCodeType, 'PrimaryClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLPrimaryClassificationCodeList;
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FAlternativeClassificationCode := CreateCollection(TXMLAlternativeClassificationCodeList, IXMLCodeType, 'AlternativeClassificationCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLAlternativeClassificationCodeList;
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ContractualLanguageCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ActualQuantityWorkItemDimension', TXMLWorkItemDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FActualQuantityWorkItemDimension := CreateCollection(TXMLActualQuantityWorkItemDimensionList, IXMLWorkItemDimensionType, 'ActualQuantityWorkItemDimension', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLActualQuantityWorkItemDimensionList;
  RegisterChildNode('ActualQuantityWorkItemDimension', TXMLWorkItemDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('BreakdownWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FBreakdownWorkItemQuantityAnalysis := CreateCollection(TXMLBreakdownWorkItemQuantityAnalysisList, IXMLWorkItemQuantityAnalysisType, 'BreakdownWorkItemQuantityAnalysis', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLBreakdownWorkItemQuantityAnalysisList;
  RegisterChildNode('BreakdownWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  FChangedRecordedStatus := CreateCollection(TXMLChangedRecordedStatusList, IXMLRecordedStatusType, 'ChangedRecordedStatus', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100') as IXMLChangedRecordedStatusList;
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');
  inherited;
end;

procedure TXMLWorkItemQuantityAnalysisType.XSDValidate;
begin
  GetID;
  SortChildNodes(Self, ['ID', 'ActualQuantity', 'Description', 'ActualQuantityPercent', 'TypeCode', 
    'PrimaryClassificationCode', 'AlternativeClassificationCode', 'ContractualLanguageCode', 'ActualQuantityWorkItemDimension', 'BreakdownWorkItemQuantityAnalysis', 
    'ChangedRecordedStatus']);
end;

procedure TXMLWorkItemQuantityAnalysisType.XSDValidateStrict(AResult: IXSDValidateStrictResult);
begin
  GetID;
  SortChildNodes(Self, ['ID', 'ActualQuantity', 'Description', 'ActualQuantityPercent', 'TypeCode', 
    'PrimaryClassificationCode', 'AlternativeClassificationCode', 'ContractualLanguageCode', 'ActualQuantityWorkItemDimension', 'BreakdownWorkItemQuantityAnalysis', 
    'ChangedRecordedStatus']);
end;

function TXMLWorkItemQuantityAnalysisType.GetID: IXMLIDType;
begin
  Result := (ChildNodesNS['ID', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLIDType);
end;

function TXMLWorkItemQuantityAnalysisType.GetHasActualQuantity: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemQuantityAnalysisType.GetActualQuantity: IXMLQuantityType;
begin
  Result := (ChildNodesNS['ActualQuantity', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLQuantityType);
end;

function TXMLWorkItemQuantityAnalysisType.GetHasDescription: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemQuantityAnalysisType.GetDescription: IXMLTextType;
begin
  Result := (ChildNodesNS['Description', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLTextType);
end;

function TXMLWorkItemQuantityAnalysisType.GetHasActualQuantityPercent: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ActualQuantityPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemQuantityAnalysisType.GetActualQuantityPercent: IXMLPercentType;
begin
  Result := (ChildNodesNS['ActualQuantityPercent', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLPercentType);
end;

function TXMLWorkItemQuantityAnalysisType.GetHasTypeCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemQuantityAnalysisType.GetTypeCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['TypeCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLWorkItemQuantityAnalysisType.GetPrimaryClassificationCode: IXMLPrimaryClassificationCodeList;
begin
  Result := FPrimaryClassificationCode;
end;

function TXMLWorkItemQuantityAnalysisType.GetAlternativeClassificationCode: IXMLAlternativeClassificationCodeList;
begin
  Result := FAlternativeClassificationCode;
end;

function TXMLWorkItemQuantityAnalysisType.GetHasContractualLanguageCode: Boolean;
begin
  Result := Assigned(ChildNodes.FindNode('ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'));
end;


function TXMLWorkItemQuantityAnalysisType.GetContractualLanguageCode: IXMLCodeType;
begin
  Result := (ChildNodesNS['ContractualLanguageCode', 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100'] as IXMLCodeType);
end;

function TXMLWorkItemQuantityAnalysisType.GetActualQuantityWorkItemDimension: IXMLActualQuantityWorkItemDimensionList;
begin
  Result := FActualQuantityWorkItemDimension;
end;

function TXMLWorkItemQuantityAnalysisType.GetBreakdownWorkItemQuantityAnalysis: IXMLBreakdownWorkItemQuantityAnalysisList;
begin
  Result := FBreakdownWorkItemQuantityAnalysis;
end;

function TXMLWorkItemQuantityAnalysisType.GetChangedRecordedStatus: IXMLChangedRecordedStatusList;
begin
  Result := FChangedRecordedStatus;
end;

function TXMLChangedRecordedStatusListEnumerator.GetCurrent: IXMLRecordedStatusType;
begin
  Result := (inherited GetCurrent as IXMLRecordedStatusType);
end;

procedure TXMLChangedRecordedStatusList.AfterConstruction;
begin
  RegisterChildNode('ChangedRecordedStatus', TXMLRecordedStatusType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ChangedRecordedStatus';
  ItemInterface := IXMLRecordedStatusType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLChangedRecordedStatusList.GetEnumerator: IXMLChangedRecordedStatusListEnumerator;
begin
  Result := TXMLChangedRecordedStatusListEnumerator.Create(Self);
end;

function TXMLChangedRecordedStatusList.Get_ChangedRecordedStatus(Index: Integer): IXMLRecordedStatusType;
begin
  Result := (List[Index] as IXMLRecordedStatusType);
end;

function TXMLChangedRecordedStatusList.Add: IXMLRecordedStatusType;
begin
  Result := (AddItem(-1) as IXMLRecordedStatusType);
end;

function TXMLChangedRecordedStatusList.Insert(Index: Integer): IXMLRecordedStatusType;
begin
  Result := (AddItem(Index) as IXMLRecordedStatusType);
end;

function TXMLBreakdownWorkItemQuantityAnalysisListEnumerator.GetCurrent: IXMLWorkItemQuantityAnalysisType;
begin
  Result := (inherited GetCurrent as IXMLWorkItemQuantityAnalysisType);
end;

procedure TXMLBreakdownWorkItemQuantityAnalysisList.AfterConstruction;
begin
  RegisterChildNode('BreakdownWorkItemQuantityAnalysis', TXMLWorkItemQuantityAnalysisType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'BreakdownWorkItemQuantityAnalysis';
  ItemInterface := IXMLWorkItemQuantityAnalysisType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLBreakdownWorkItemQuantityAnalysisList.GetEnumerator: IXMLBreakdownWorkItemQuantityAnalysisListEnumerator;
begin
  Result := TXMLBreakdownWorkItemQuantityAnalysisListEnumerator.Create(Self);
end;

function TXMLBreakdownWorkItemQuantityAnalysisList.Get_BreakdownWorkItemQuantityAnalysis(Index: Integer): IXMLWorkItemQuantityAnalysisType;
begin
  Result := (List[Index] as IXMLWorkItemQuantityAnalysisType);
end;

function TXMLBreakdownWorkItemQuantityAnalysisList.Add: IXMLWorkItemQuantityAnalysisType;
begin
  Result := (AddItem(-1) as IXMLWorkItemQuantityAnalysisType);
end;

function TXMLBreakdownWorkItemQuantityAnalysisList.Insert(Index: Integer): IXMLWorkItemQuantityAnalysisType;
begin
  Result := (AddItem(Index) as IXMLWorkItemQuantityAnalysisType);
end;

function TXMLActualQuantityWorkItemDimensionListEnumerator.GetCurrent: IXMLWorkItemDimensionType;
begin
  Result := (inherited GetCurrent as IXMLWorkItemDimensionType);
end;

procedure TXMLActualQuantityWorkItemDimensionList.AfterConstruction;
begin
  RegisterChildNode('ActualQuantityWorkItemDimension', TXMLWorkItemDimensionType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'ActualQuantityWorkItemDimension';
  ItemInterface := IXMLWorkItemDimensionType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLActualQuantityWorkItemDimensionList.GetEnumerator: IXMLActualQuantityWorkItemDimensionListEnumerator;
begin
  Result := TXMLActualQuantityWorkItemDimensionListEnumerator.Create(Self);
end;

function TXMLActualQuantityWorkItemDimensionList.Get_ActualQuantityWorkItemDimension(Index: Integer): IXMLWorkItemDimensionType;
begin
  Result := (List[Index] as IXMLWorkItemDimensionType);
end;

function TXMLActualQuantityWorkItemDimensionList.Add: IXMLWorkItemDimensionType;
begin
  Result := (AddItem(-1) as IXMLWorkItemDimensionType);
end;

function TXMLActualQuantityWorkItemDimensionList.Insert(Index: Integer): IXMLWorkItemDimensionType;
begin
  Result := (AddItem(Index) as IXMLWorkItemDimensionType);
end;

function TXMLAlternativeClassificationCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLAlternativeClassificationCodeList.AfterConstruction;
begin
  RegisterChildNode('AlternativeClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'AlternativeClassificationCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLAlternativeClassificationCodeList.GetEnumerator: IXMLAlternativeClassificationCodeListEnumerator;
begin
  Result := TXMLAlternativeClassificationCodeListEnumerator.Create(Self);
end;

function TXMLAlternativeClassificationCodeList.Get_AlternativeClassificationCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLAlternativeClassificationCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLAlternativeClassificationCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;

function TXMLPrimaryClassificationCodeListEnumerator.GetCurrent: IXMLCodeType;
begin
  Result := (inherited GetCurrent as IXMLCodeType);
end;

procedure TXMLPrimaryClassificationCodeList.AfterConstruction;
begin
  RegisterChildNode('PrimaryClassificationCode', TXMLCodeType, 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100');

  ItemTag := 'PrimaryClassificationCode';
  ItemInterface := IXMLCodeType;

  inherited;

  ItemNS := 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100';
end;

function TXMLPrimaryClassificationCodeList.GetEnumerator: IXMLPrimaryClassificationCodeListEnumerator;
begin
  Result := TXMLPrimaryClassificationCodeListEnumerator.Create(Self);
end;

function TXMLPrimaryClassificationCodeList.Get_PrimaryClassificationCode(Index: Integer): IXMLCodeType;
begin
  Result := (List[Index] as IXMLCodeType);
end;

function TXMLPrimaryClassificationCodeList.Add: IXMLCodeType;
begin
  Result := (AddItem(-1) as IXMLCodeType);
end;

function TXMLPrimaryClassificationCodeList.Insert(Index: Integer): IXMLCodeType;
begin
  Result := (AddItem(Index) as IXMLCodeType);
end;



end.
